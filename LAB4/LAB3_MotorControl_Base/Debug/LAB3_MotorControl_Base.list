
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08008f4c  08008f4c  00018f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009030  08009030  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009038  08009038  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800903c  0800903c  0001903c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000078  080090b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  080090b8  00020828  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186b3  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c29  00000000  00000000  00038759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  0003c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8ff  00000000  00000000  0003dc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b463  00000000  00000000  0006852f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001077f5  00000000  00000000  00083992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c4  00000000  00000000  0018b1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08008f34 	.word	0x08008f34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08008f34 	.word	0x08008f34

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <cobsEncode>:
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	61fb      	str	r3, [r7, #28]
 8000600:	2301      	movs	r3, #1
 8000602:	76fb      	strb	r3, [r7, #27]
 8000604:	e025      	b.n	8000652 <cobsEncode+0x6e>
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <cobsEncode+0x3e>
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	7efa      	ldrb	r2, [r7, #27]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	2301      	movs	r3, #1
 800061e:	76fb      	strb	r3, [r7, #27]
 8000620:	e014      	b.n	800064c <cobsEncode+0x68>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	7efb      	ldrb	r3, [r7, #27]
 8000630:	3301      	adds	r3, #1
 8000632:	76fb      	strb	r3, [r7, #27]
 8000634:	7efb      	ldrb	r3, [r7, #27]
 8000636:	2bff      	cmp	r3, #255	; 0xff
 8000638:	d108      	bne.n	800064c <cobsEncode+0x68>
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	7efa      	ldrb	r2, [r7, #27]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	2301      	movs	r3, #1
 800064a:	76fb      	strb	r3, [r7, #27]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3d5      	bcc.n	8000606 <cobsEncode+0x22>
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	7efa      	ldrb	r2, [r7, #27]
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	2301      	movs	r3, #1
 800066a:	76fb      	strb	r3, [r7, #27]
 800066c:	bf00      	nop
 800066e:	3724      	adds	r7, #36	; 0x24
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <ertc_dlog_send>:
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01c      	beq.n	80006c6 <ertc_dlog_send+0x4e>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3321      	adds	r3, #33	; 0x21
 8000690:	461a      	mov	r2, r3
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff ffa5 	bl	80005e4 <cobsEncode>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3302      	adds	r3, #2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	f006 ff09 	bl	80074d4 <HAL_UART_Transmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e000      	b.n	80006c8 <ertc_dlog_send+0x50>
 80006c6:	2300      	movs	r3, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ertc_dlog_update>:
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c59      	adds	r1, r3, #1
 80006e2:	2303      	movs	r3, #3
 80006e4:	2201      	movs	r2, #1
 80006e6:	f006 ff78 	bl	80075da <HAL_UART_Receive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d112      	bne.n	8000716 <ertc_dlog_update+0x46>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b41      	cmp	r3, #65	; 0x41
 80006f6:	d002      	beq.n	80006fe <ertc_dlog_update+0x2e>
 80006f8:	2b42      	cmp	r3, #66	; 0x42
 80006fa:	d004      	beq.n	8000706 <ertc_dlog_update+0x36>
 80006fc:	e007      	b.n	800070e <ertc_dlog_update+0x3e>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e008      	b.n	8000718 <ertc_dlog_update+0x48>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	e004      	b.n	8000718 <ertc_dlog_update+0x48>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e000      	b.n	8000718 <ertc_dlog_update+0x48>
 8000716:	bf00      	nop
 8000718:	2300      	movs	r3, #0
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	0000      	movs	r0, r0
 8000724:	0000      	movs	r0, r0
	...

08000728 <PI_controller>:

float Kp = 0.34;
float KI = 0.2;


float PI_controller (float error){
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	ed87 0a01 	vstr	s0, [r7, #4]
	float P = Kp * error;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <PI_controller+0x90>)
 8000734:	edd3 7a00 	vldr	s15, [r3]
 8000738:	ed97 7a01 	vldr	s14, [r7, #4]
 800073c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000740:	edc7 7a03 	vstr	s15, [r7, #12]
	static float I = 0;
	I = I + error * KI * TS;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <PI_controller+0x94>)
 8000746:	edd3 7a00 	vldr	s15, [r3]
 800074a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <PI_controller+0x98>)
 8000750:	ed93 7a00 	vldr	s14, [r3]
 8000754:	edd7 7a01 	vldr	s15, [r7, #4]
 8000758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800075c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000760:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80007b0 <PI_controller+0x88>
 8000764:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000768:	ee36 7b07 	vadd.f64	d7, d6, d7
 800076c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <PI_controller+0x94>)
 8000772:	edc3 7a00 	vstr	s15, [r3]
	if(I>10){
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <PI_controller+0x94>)
 8000778:	edd3 7a00 	vldr	s15, [r3]
 800077c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	dd02      	ble.n	8000790 <PI_controller+0x68>
		I=10;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <PI_controller+0x94>)
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <PI_controller+0x9c>)
 800078e:	601a      	str	r2, [r3, #0]
	}
	return P + I;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <PI_controller+0x94>)
 8000792:	ed93 7a00 	vldr	s14, [r3]
 8000796:	edd7 7a03 	vldr	s15, [r7, #12]
 800079a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800079e:	eeb0 0a67 	vmov.f32	s0, s15
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	f3af 8000 	nop.w
 80007b0:	47ae147b 	.word	0x47ae147b
 80007b4:	3f847ae1 	.word	0x3f847ae1
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000804 	.word	0x20000804
 80007c0:	20000004 	.word	0x20000004
 80007c4:	41200000 	.word	0x41200000

080007c8 <findBinary>:

void findBinary(int decimal, int * binary){
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	//int base = 1;
	int i =0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
   while(decimal > 0){
 80007d6:	e015      	b.n	8000804 <findBinary+0x3c>
	   int rem = decimal % 2;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	bfb8      	it	lt
 80007e2:	425b      	neglt	r3, r3
 80007e4:	60bb      	str	r3, [r7, #8]
	   binary[i] = rem;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	4413      	add	r3, r2
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	601a      	str	r2, [r3, #0]
	   i++;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
	   decimal = decimal / 2;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da00      	bge.n	8000800 <findBinary+0x38>
 80007fe:	3301      	adds	r3, #1
 8000800:	105b      	asrs	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
   while(decimal > 0){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	dce6      	bgt.n	80007d8 <findBinary+0x10>
	   //base = base * 10;
   }
   //printf("Binary: %d\n\r", binary);
//   return binary;
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <calc_error_line>:

int calc_error_line (int binary[]){
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	; 0x38
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	float distance_from_middle[8]={0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2220      	movs	r2, #32
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f007 fbed 	bl	8008008 <memset>
	float sum_dist = 0;
 800082e:	f04f 0300 	mov.w	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
	int sum_binary = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
	for(int n=0;n<8;n++){
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800083c:	e038      	b.n	80008b0 <calc_error_line+0x98>
		sum_binary += binary[n];
 800083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800084a:	4413      	add	r3, r2
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
		distance_from_middle[n]=((7.0/2.0)-n)*4;
 800084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000850:	ee07 3a90 	vmov	s15, r3
 8000854:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000858:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800085c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000860:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000864:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000868:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800086c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	3338      	adds	r3, #56	; 0x38
 8000872:	443b      	add	r3, r7
 8000874:	3b30      	subs	r3, #48	; 0x30
 8000876:	edc3 7a00 	vstr	s15, [r3]
		sum_dist += binary[n]*distance_from_middle[n];
 800087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	3338      	adds	r3, #56	; 0x38
 8000892:	443b      	add	r3, r7
 8000894:	3b30      	subs	r3, #48	; 0x30
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800089e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80008a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int n=0;n<8;n++){
 80008aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ac:	3301      	adds	r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b2:	2b07      	cmp	r3, #7
 80008b4:	ddc3      	ble.n	800083e <calc_error_line+0x26>
	}
	float line_error = sum_dist / sum_binary;
 80008b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008c0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80008c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return line_error;
 80008cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d4:	ee17 3a90 	vmov	r3, s15
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3738      	adds	r7, #56	; 0x38
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <calc_yaw_error>:

float calc_yaw_error(float line_error){
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	ed87 0a01 	vstr	s0, [r7, #4]
	float omega_L = current_rpm_2 *2*3.14/60;
	float linear_speed_R = 34*omega_R;
	float linear_speed_L = 34*omega_L;
	float robot_rotation_speed = (linear_speed_R-linear_speed_L)/165;
	static float last_time = 0;*/
	float phi_err = line_error/85;
 80008ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80008ee:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000920 <calc_yaw_error+0x40>
 80008f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f6:	edc7 7a03 	vstr	s15, [r7, #12]
	float yaw_err = phi_err * (165/2);
 80008fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80008fe:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000924 <calc_yaw_error+0x44>
 8000902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000906:	edc7 7a02 	vstr	s15, [r7, #8]
	return yaw_err;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	ee07 3a90 	vmov	s15, r3
}
 8000910:	eeb0 0a67 	vmov.f32	s0, s15
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	42aa0000 	.word	0x42aa0000
 8000924:	42a40000 	.word	0x42a40000

08000928 <HAL_TIM_PeriodElapsedCallback>:
uint8_t data;
HAL_StatusTypeDef status;
int32_t duty_1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b098      	sub	sp, #96	; 0x60
 800092c:	af04      	add	r7, sp, #16
 800092e:	6078      	str	r0, [r7, #4]
	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4aa2      	ldr	r2, [pc, #648]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000936:	4293      	cmp	r3, r2
 8000938:	f040 81c3 	bne.w	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x39a>
	{
		/*
	    * 1. read the counter value from the encoder
	    * 2. compute the difference between the current value and the old value
	    */
		status = HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &lineData, 1, I2C_TIMEOUT);
 800093c:	23c8      	movs	r3, #200	; 0xc8
 800093e:	9302      	str	r3, [sp, #8]
 8000940:	2301      	movs	r3, #1
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	4b9f      	ldr	r3, [pc, #636]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	2210      	movs	r2, #16
 800094c:	217c      	movs	r1, #124	; 0x7c
 800094e:	489e      	ldr	r0, [pc, #632]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000950:	f003 f8ba 	bl	8003ac8 <HAL_I2C_Mem_Read>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b9c      	ldr	r3, [pc, #624]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800095a:	701a      	strb	r2, [r3, #0]
		  int binary[8] = {0};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2220      	movs	r2, #32
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f007 fb4f 	bl	8008008 <memset>
		  findBinary(lineData, binary);
 800096a:	4b96      	ldr	r3, [pc, #600]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	4610      	mov	r0, r2
 8000978:	f7ff ff26 	bl	80007c8 <findBinary>
		  float line_error = calc_error_line(binary);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff49 	bl	8000818 <calc_error_line>
 8000986:	ee07 0a90 	vmov	s15, r0
 800098a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		  //phi_err = line_error/85;
		  float yaw_err = calc_yaw_error(line_error);
 8000992:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8000996:	f7ff ffa3 	bl	80008e0 <calc_yaw_error>
 800099a:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c


		  reference_rpm_L = 170 - yaw_err*22;
 800099e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80009a2:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80009a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009aa:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 80009ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b2:	4b88      	ldr	r3, [pc, #544]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80009b4:	edc3 7a00 	vstr	s15, [r3]
		  reference_rpm_R = 170 + yaw_err*22;
 80009b8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80009bc:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80009c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 80009c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009cc:	4b82      	ldr	r3, [pc, #520]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009ce:	edc3 7a00 	vstr	s15, [r3]

		uint32_t TIM3_CurrentCount , TIM4_CurrentCount;
		int32_t TIM3_DiffCount , TIM4_DiffCount;
		static uint32_t TIM3_PreviousCount = 0, TIM4_PreviousCount = 0;

		TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 80009d2:	4b82      	ldr	r3, [pc, #520]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
		TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 80009da:	4b81      	ldr	r3, [pc, #516]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34


		/*  evaluate increment of TIM3 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 80009e2:	4b7e      	ldr	r3, [pc, #504]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	2b10      	cmp	r3, #16
 80009ee:	d112      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0xee>
		{
			/* check for counter underflow */
			if (TIM3_CurrentCount <= TIM3_PreviousCount)
 80009f0:	4b7c      	ldr	r3, [pc, #496]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d805      	bhi.n	8000a06 <HAL_TIM_PeriodElapsedCallback+0xde>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80009fa:	4b7a      	ldr	r3, [pc, #488]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a04:	e019      	b.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x112>
			else
				TIM3_DiffCount = -((TIM3_ARR_VALUE+1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 8000a06:	4b77      	ldr	r3, [pc, #476]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a14:	e011      	b.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x112>
		}
		else
		{
		/* check for counter overflow */
			if (TIM3_CurrentCount >= TIM3_PreviousCount)
 8000a16:	4b73      	ldr	r3, [pc, #460]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d305      	bcc.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x104>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000a20:	4b70      	ldr	r3, [pc, #448]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a2a:	e006      	b.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x112>
			else
				TIM3_DiffCount = ((TIM3_ARR_VALUE+1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 8000a2c:	4b6d      	ldr	r3, [pc, #436]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

		TIM3_PreviousCount = TIM3_CurrentCount;
 8000a3a:	4a6a      	ldr	r2, [pc, #424]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a3e:	6013      	str	r3, [r2, #0]
	    // 3. compute the motor speed, in [rpm] for example

		float current_rpm_1 = ((float)TIM3_DiffCount/(2.0*1920.0))*(60.0/TS );
 8000a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a4a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a4e:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8000ba8 <HAL_TIM_PeriodElapsedCallback+0x280>
 8000a52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a56:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000bb0 <HAL_TIM_PeriodElapsedCallback+0x288>
 8000a5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    tracking_error_1 = reference_rpm_R - current_rpm_1;
 8000a66:	4b5c      	ldr	r3, [pc, #368]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a68:	ed93 7a00 	vldr	s14, [r3]
 8000a6c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a74:	4b5c      	ldr	r3, [pc, #368]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a76:	edc3 7a00 	vstr	s15, [r3]




		/*  evaluate increment of TIM4 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8000a7a:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	2b10      	cmp	r3, #16
 8000a86:	d112      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x186>
		{
			/* check for counter underflow */
			if (TIM4_CurrentCount <= TIM4_PreviousCount)
 8000a88:	4b58      	ldr	r3, [pc, #352]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d805      	bhi.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x176>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000a92:	4b56      	ldr	r3, [pc, #344]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a9c:	e019      	b.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			else
				TIM4_DiffCount = -((TIM4_ARR_VALUE+1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 8000a9e:	4b53      	ldr	r3, [pc, #332]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8000aac:	e011      	b.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		}
		else
		{
		/* check for counter overflow */
			if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8000aae:	4b4f      	ldr	r3, [pc, #316]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d305      	bcc.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0x19c>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000ab8:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ac2:	e006      	b.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			else
				TIM4_DiffCount = ((TIM4_ARR_VALUE+1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 8000ac4:	4b49      	ldr	r3, [pc, #292]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8000ad0:	64bb      	str	r3, [r7, #72]	; 0x48
		}

		TIM4_PreviousCount = TIM4_CurrentCount;
 8000ad2:	4a46      	ldr	r2, [pc, #280]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad6:	6013      	str	r3, [r2, #0]

		float current_rpm_2 = ((float)TIM4_DiffCount/(2.0*1920.0))*(60.0/TS );
 8000ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ae6:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8000ba8 <HAL_TIM_PeriodElapsedCallback+0x280>
 8000aea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000aee:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8000bb0 <HAL_TIM_PeriodElapsedCallback+0x288>
 8000af2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000af6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000afa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	    tracking_error_2 = reference_rpm_L - current_rpm_2;
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b00:	ed93 7a00 	vldr	s14, [r3]
 8000b04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0c:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000b0e:	edc3 7a00 	vstr	s15, [r3]
	    /* 4. compute the tracking error
	    * 5. compute the proportional term
	    * 6. compute the integral term (simplest way is to use forward Euler method) * u_int=u_int+Ki*TS*err
	    * 7. calculate the PI signal and set the pwm of the motor properly
	    */
	     controller_return_1 = PI_controller(tracking_error_1);
 8000b12:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	eeb0 0a67 	vmov.f32	s0, s15
 8000b1c:	f7ff fe04 	bl	8000728 <PI_controller>
 8000b20:	eef0 7a40 	vmov.f32	s15, s0
 8000b24:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b26:	edc3 7a00 	vstr	s15, [r3]
	     controller_return_2 = PI_controller(tracking_error_2);
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000b2c:	edd3 7a00 	vldr	s15, [r3]
 8000b30:	eeb0 0a67 	vmov.f32	s0, s15
 8000b34:	f7ff fdf8 	bl	8000728 <PI_controller>
 8000b38:	eef0 7a40 	vmov.f32	s15, s0
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b3e:	edc3 7a00 	vstr	s15, [r3]

	     motor_V_1 = controller_return_1;
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a2d      	ldr	r2, [pc, #180]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b48:	6013      	str	r3, [r2, #0]
	     motor_V_2 = controller_return_2;
 8000b4a:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a2c      	ldr	r2, [pc, #176]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b50:	6013      	str	r3, [r2, #0]
	    	motor_V_2 = 5;
	    if(motor_V_2 < -5)
	    	motor_V_2 = -5;
*/

	    duty_1 = V2DUTY*motor_V_1;
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000bb8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000b60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b68:	ee17 2a90 	vmov	r2, s15
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b6e:	601a      	str	r2, [r3, #0]
	    if (duty_1 > 399)
 8000b70:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b78:	db03      	blt.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x25a>
	    	duty_1 = 399;
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b7c:	f240 128f 	movw	r2, #399	; 0x18f
 8000b80:	601a      	str	r2, [r3, #0]


	    // command a motor
		/* calculate duty properly */
		if (duty_1 >= 0) {
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db40      	blt.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x2e4>
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty_1);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);


			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f240 128f 	movw	r2, #399	; 0x18f
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)(TIM8_ARR_VALUE - duty_1));
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	f240 138f 	movw	r3, #399	; 0x18f
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000ba0:	6812      	ldr	r2, [r2, #0]
 8000ba2:	6393      	str	r3, [r2, #56]	; 0x38
 8000ba4:	e03c      	b.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8000ba6:	bf00      	nop
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	40ae0000 	.word	0x40ae0000
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	40b77000 	.word	0x40b77000
 8000bb8:	00000000 	.word	0x00000000
 8000bbc:	40490000 	.word	0x40490000
 8000bc0:	40001000 	.word	0x40001000
 8000bc4:	200007fc 	.word	0x200007fc
 8000bc8:	200000dc 	.word	0x200000dc
 8000bcc:	200007fe 	.word	0x200007fe
 8000bd0:	432a0000 	.word	0x432a0000
 8000bd4:	200007d4 	.word	0x200007d4
 8000bd8:	200007d8 	.word	0x200007d8
 8000bdc:	20000280 	.word	0x20000280
 8000be0:	200002cc 	.word	0x200002cc
 8000be4:	20000808 	.word	0x20000808
 8000be8:	200007c4 	.word	0x200007c4
 8000bec:	2000080c 	.word	0x2000080c
 8000bf0:	200007d0 	.word	0x200007d0
 8000bf4:	200007bc 	.word	0x200007bc
 8000bf8:	200007c8 	.word	0x200007c8
 8000bfc:	200007c0 	.word	0x200007c0
 8000c00:	200007cc 	.word	0x200007cc
 8000c04:	20000800 	.word	0x20000800
 8000c08:	200003b0 	.word	0x200003b0

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2200      	movs	r2, #0
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty_1);
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	425a      	negs	r2, r3
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38





	    int32_t duty_2 = V2DUTY*motor_V_2;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000c22:	edd3 7a00 	vldr	s15, [r3]
 8000c26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c2a:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8000c2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c36:	ee17 3a90 	vmov	r3, s15
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
	    if (duty_2 > 399)
 8000c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c42:	db02      	blt.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x322>
	   	   	 duty_2 = 399;
 8000c44:	f240 138f 	movw	r3, #399	; 0x18f
 8000c48:	647b      	str	r3, [r7, #68]	; 0x44
	    // command a motor
		/* calculate duty properly */
		if (duty_2 >= 0) {
 8000c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0c      	blt.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x342>
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)duty_2);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);


			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f240 128f 	movw	r2, #399	; 0x18f
 8000c58:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)(TIM8_ARR_VALUE - duty_2));
 8000c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c5c:	f240 138f 	movw	r3, #399	; 0x18f
 8000c60:	1a9b      	subs	r3, r3, r2
 8000c62:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	e008      	b.n	8000c7c <HAL_TIM_PeriodElapsedCallback+0x354>

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)-duty_2);
 8000c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c74:	425a      	negs	r2, r3
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	641a      	str	r2, [r3, #64]	; 0x40
		}
     	/*	Prepare data packet */
		data_log.w1 = reference_rpm_L;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000c82:	6013      	str	r3, [r2, #0]
		data_log.w2 = current_rpm_1;
 8000c84:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c88:	6053      	str	r3, [r2, #4]
		data_log.u1 = tracking_error_1;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a16      	ldr	r2, [pc, #88]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000c90:	6093      	str	r3, [r2, #8]
		data_log.u2 = controller_return_1;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000c98:	60d3      	str	r3, [r2, #12]


		data_log.x1 = reference_rpm_R;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000ca0:	6113      	str	r3, [r2, #16]
		data_log.x2 = current_rpm_2;
 8000ca2:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	6153      	str	r3, [r2, #20]
		data_log.y1 = tracking_error_2;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000cae:	6193      	str	r3, [r2, #24]
		data_log.y2 = controller_return_2;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000cb6:	61d3      	str	r3, [r2, #28]

		ertc_dlog_send(&logger, &data_log, sizeof(data_log));
 8000cb8:	2220      	movs	r2, #32
 8000cba:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000cbc:	4810      	ldr	r0, [pc, #64]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000cbe:	f7ff fcdb 	bl	8000678 <ertc_dlog_send>
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	3750      	adds	r7, #80	; 0x50
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	f3af 8000 	nop.w
 8000cd0:	00000000 	.word	0x00000000
 8000cd4:	40490000 	.word	0x40490000
 8000cd8:	200003b0 	.word	0x200003b0
 8000cdc:	20000800 	.word	0x20000800
 8000ce0:	200007cc 	.word	0x200007cc
 8000ce4:	200007d4 	.word	0x200007d4
 8000ce8:	200007dc 	.word	0x200007dc
 8000cec:	200007c4 	.word	0x200007c4
 8000cf0:	200007bc 	.word	0x200007bc
 8000cf4:	200007d8 	.word	0x200007d8
 8000cf8:	200007d0 	.word	0x200007d0
 8000cfc:	200007c8 	.word	0x200007c8
 8000d00:	200006f0 	.word	0x200006f0

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0a:	f001 ff4c 	bl	8002ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0e:	f000 f965 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d12:	f000 ffbd 	bl	8001c90 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d16:	f000 ff8b 	bl	8001c30 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000d1a:	f000 f9d1 	bl	80010c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d1e:	f000 fa21 	bl	8001164 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d22:	f000 fa5f 	bl	80011e4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000d26:	f000 fa9d 	bl	8001264 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000d2a:	f000 fad9 	bl	80012e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d2e:	f000 fba7 	bl	8001480 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d32:	f000 fc3f 	bl	80015b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d36:	f000 fc93 	bl	8001660 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d3a:	f000 fce7 	bl	800170c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000d3e:	f000 fd95 	bl	800186c <MX_TIM8_Init>
  MX_UART4_Init();
 8000d42:	f000 feb5 	bl	8001ab0 <MX_UART4_Init>
  MX_UART5_Init();
 8000d46:	f000 fee3 	bl	8001b10 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000d4a:	f000 ff11 	bl	8001b70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d4e:	f000 ff3f 	bl	8001bd0 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000d52:	f000 fe5d 	bl	8001a10 <MX_TIM9_Init>
  MX_TIM6_Init();
 8000d56:	f000 fd51 	bl	80017fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  logger.uart_handle = huart3; // for serial
  logger.uart_handle = huart2; // for wifi
 8000d5a:	4b92      	ldr	r3, [pc, #584]	; (8000fa4 <main+0x2a0>)
 8000d5c:	4a92      	ldr	r2, [pc, #584]	; (8000fa8 <main+0x2a4>)
 8000d5e:	3344      	adds	r3, #68	; 0x44
 8000d60:	4611      	mov	r1, r2
 8000d62:	2288      	movs	r2, #136	; 0x88
 8000d64:	4618      	mov	r0, r3
 8000d66:	f007 f941 	bl	8007fec <memcpy>

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	488f      	ldr	r0, [pc, #572]	; (8000fac <main+0x2a8>)
 8000d70:	f002 fcec 	bl	800374c <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d78:	f001 ff72 	bl	8002c60 <HAL_Delay>

  data = 0x12;
 8000d7c:	4b8c      	ldr	r3, [pc, #560]	; (8000fb0 <main+0x2ac>)
 8000d7e:	2212      	movs	r2, #18
 8000d80:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000d82:	23c8      	movs	r3, #200	; 0xc8
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	2301      	movs	r3, #1
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	4b89      	ldr	r3, [pc, #548]	; (8000fb0 <main+0x2ac>)
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	227d      	movs	r2, #125	; 0x7d
 8000d92:	217c      	movs	r1, #124	; 0x7c
 8000d94:	4887      	ldr	r0, [pc, #540]	; (8000fb4 <main+0x2b0>)
 8000d96:	f002 fd83 	bl	80038a0 <HAL_I2C_Mem_Write>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b86      	ldr	r3, [pc, #536]	; (8000fb8 <main+0x2b4>)
 8000da0:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000da2:	4b85      	ldr	r3, [pc, #532]	; (8000fb8 <main+0x2b4>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <main+0xb2>
      printf("I2C communication error (%X).\n", status);
 8000daa:	4b83      	ldr	r3, [pc, #524]	; (8000fb8 <main+0x2b4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4619      	mov	r1, r3
 8000db0:	4882      	ldr	r0, [pc, #520]	; (8000fbc <main+0x2b8>)
 8000db2:	f007 f931 	bl	8008018 <iprintf>

    data = 0x34;
 8000db6:	4b7e      	ldr	r3, [pc, #504]	; (8000fb0 <main+0x2ac>)
 8000db8:	2234      	movs	r2, #52	; 0x34
 8000dba:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000dbc:	23c8      	movs	r3, #200	; 0xc8
 8000dbe:	9302      	str	r3, [sp, #8]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	4b7a      	ldr	r3, [pc, #488]	; (8000fb0 <main+0x2ac>)
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	227d      	movs	r2, #125	; 0x7d
 8000dcc:	217c      	movs	r1, #124	; 0x7c
 8000dce:	4879      	ldr	r0, [pc, #484]	; (8000fb4 <main+0x2b0>)
 8000dd0:	f002 fd66 	bl	80038a0 <HAL_I2C_Mem_Write>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b77      	ldr	r3, [pc, #476]	; (8000fb8 <main+0x2b4>)
 8000dda:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000ddc:	4b76      	ldr	r3, [pc, #472]	; (8000fb8 <main+0x2b4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <main+0xec>
      printf("I2C communication error (%X).\n", status);
 8000de4:	4b74      	ldr	r3, [pc, #464]	; (8000fb8 <main+0x2b4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	4874      	ldr	r0, [pc, #464]	; (8000fbc <main+0x2b8>)
 8000dec:	f007 f914 	bl	8008018 <iprintf>

    HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	; 0x64
 8000df2:	f001 ff35 	bl	8002c60 <HAL_Delay>

    /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000df6:	4b6e      	ldr	r3, [pc, #440]	; (8000fb0 <main+0x2ac>)
 8000df8:	22ff      	movs	r2, #255	; 0xff
 8000dfa:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000dfc:	23c8      	movs	r3, #200	; 0xc8
 8000dfe:	9302      	str	r3, [sp, #8]
 8000e00:	2301      	movs	r3, #1
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	4b6a      	ldr	r3, [pc, #424]	; (8000fb0 <main+0x2ac>)
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	217c      	movs	r1, #124	; 0x7c
 8000e0e:	4869      	ldr	r0, [pc, #420]	; (8000fb4 <main+0x2b0>)
 8000e10:	f002 fd46 	bl	80038a0 <HAL_I2C_Mem_Write>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b67      	ldr	r3, [pc, #412]	; (8000fb8 <main+0x2b4>)
 8000e1a:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000e1c:	4b66      	ldr	r3, [pc, #408]	; (8000fb8 <main+0x2b4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <main+0x12c>
      printf("I2C communication error (%X).\n", status);
 8000e24:	4b64      	ldr	r3, [pc, #400]	; (8000fb8 <main+0x2b4>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4864      	ldr	r0, [pc, #400]	; (8000fbc <main+0x2b8>)
 8000e2c:	f007 f8f4 	bl	8008018 <iprintf>

    /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000e30:	4b5f      	ldr	r3, [pc, #380]	; (8000fb0 <main+0x2ac>)
 8000e32:	22ff      	movs	r2, #255	; 0xff
 8000e34:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000e36:	23c8      	movs	r3, #200	; 0xc8
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	4b5c      	ldr	r3, [pc, #368]	; (8000fb0 <main+0x2ac>)
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2301      	movs	r3, #1
 8000e44:	220e      	movs	r2, #14
 8000e46:	217c      	movs	r1, #124	; 0x7c
 8000e48:	485a      	ldr	r0, [pc, #360]	; (8000fb4 <main+0x2b0>)
 8000e4a:	f002 fd29 	bl	80038a0 <HAL_I2C_Mem_Write>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b59      	ldr	r3, [pc, #356]	; (8000fb8 <main+0x2b4>)
 8000e54:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000e56:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <main+0x2b4>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <main+0x166>
      printf("I2C communication error (%X).\n", status);
 8000e5e:	4b56      	ldr	r3, [pc, #344]	; (8000fb8 <main+0x2b4>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4855      	ldr	r0, [pc, #340]	; (8000fbc <main+0x2b8>)
 8000e66:	f007 f8d7 	bl	8008018 <iprintf>

    /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
    data = 0x00;
 8000e6a:	4b51      	ldr	r3, [pc, #324]	; (8000fb0 <main+0x2ac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000e70:	23c8      	movs	r3, #200	; 0xc8
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	2301      	movs	r3, #1
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	4b4d      	ldr	r3, [pc, #308]	; (8000fb0 <main+0x2ac>)
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2213      	movs	r2, #19
 8000e80:	217c      	movs	r1, #124	; 0x7c
 8000e82:	484c      	ldr	r0, [pc, #304]	; (8000fb4 <main+0x2b0>)
 8000e84:	f002 fd0c 	bl	80038a0 <HAL_I2C_Mem_Write>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <main+0x2b4>)
 8000e8e:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000e90:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <main+0x2b4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <main+0x1a0>
      printf("I2C communication error (%X).\n", status);
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <main+0x2b4>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4847      	ldr	r0, [pc, #284]	; (8000fbc <main+0x2b8>)
 8000ea0:	f007 f8ba 	bl	8008018 <iprintf>

    /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000ea4:	4b42      	ldr	r3, [pc, #264]	; (8000fb0 <main+0x2ac>)
 8000ea6:	22aa      	movs	r2, #170	; 0xaa
 8000ea8:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000eaa:	23c8      	movs	r3, #200	; 0xc8
 8000eac:	9302      	str	r3, [sp, #8]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <main+0x2ac>)
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	2216      	movs	r2, #22
 8000eba:	217c      	movs	r1, #124	; 0x7c
 8000ebc:	483d      	ldr	r0, [pc, #244]	; (8000fb4 <main+0x2b0>)
 8000ebe:	f002 fcef 	bl	80038a0 <HAL_I2C_Mem_Write>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <main+0x2b4>)
 8000ec8:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <main+0x2b4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <main+0x1da>
      printf("I2C communication error (%X).\n", status);
 8000ed2:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <main+0x2b4>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4838      	ldr	r0, [pc, #224]	; (8000fbc <main+0x2b8>)
 8000eda:	f007 f89d 	bl	8008018 <iprintf>

    /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <main+0x2ac>)
 8000ee0:	22aa      	movs	r2, #170	; 0xaa
 8000ee2:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000ee4:	23c8      	movs	r3, #200	; 0xc8
 8000ee6:	9302      	str	r3, [sp, #8]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <main+0x2ac>)
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	2217      	movs	r2, #23
 8000ef4:	217c      	movs	r1, #124	; 0x7c
 8000ef6:	482f      	ldr	r0, [pc, #188]	; (8000fb4 <main+0x2b0>)
 8000ef8:	f002 fcd2 	bl	80038a0 <HAL_I2C_Mem_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <main+0x2b4>)
 8000f02:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <main+0x2b4>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <main+0x214>
      printf("I2C communication error (%X).\n", status);
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <main+0x2b4>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	482a      	ldr	r0, [pc, #168]	; (8000fbc <main+0x2b8>)
 8000f14:	f007 f880 	bl	8008018 <iprintf>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f18:	213c      	movs	r1, #60	; 0x3c
 8000f1a:	4829      	ldr	r0, [pc, #164]	; (8000fc0 <main+0x2bc>)
 8000f1c:	f004 ffb0 	bl	8005e80 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f20:	213c      	movs	r1, #60	; 0x3c
 8000f22:	4828      	ldr	r0, [pc, #160]	; (8000fc4 <main+0x2c0>)
 8000f24:	f004 ffac 	bl	8005e80 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4827      	ldr	r0, [pc, #156]	; (8000fc8 <main+0x2c4>)
 8000f2c:	f004 fda6 	bl	8005a7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f30:	2104      	movs	r1, #4
 8000f32:	4825      	ldr	r0, [pc, #148]	; (8000fc8 <main+0x2c4>)
 8000f34:	f004 fda2 	bl	8005a7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f38:	2108      	movs	r1, #8
 8000f3a:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <main+0x2c4>)
 8000f3c:	f004 fd9e 	bl	8005a7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f40:	210c      	movs	r1, #12
 8000f42:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <main+0x2c4>)
 8000f44:	f004 fd9a 	bl	8005a7c <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <main+0x2c8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <main+0x2c8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <main+0x2c8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <main+0x2c8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4818      	ldr	r0, [pc, #96]	; (8000fcc <main+0x2c8>)
 8000f6c:	f004 fd86 	bl	8005a7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f70:	2104      	movs	r1, #4
 8000f72:	4816      	ldr	r0, [pc, #88]	; (8000fcc <main+0x2c8>)
 8000f74:	f004 fd82 	bl	8005a7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4814      	ldr	r0, [pc, #80]	; (8000fcc <main+0x2c8>)
 8000f7c:	f004 fd7e 	bl	8005a7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000f80:	210c      	movs	r1, #12
 8000f82:	4812      	ldr	r0, [pc, #72]	; (8000fcc <main+0x2c8>)
 8000f84:	f004 fd7a 	bl	8005a7c <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <main+0x2cc>)
 8000f8a:	f004 fc47 	bl	800581c <HAL_TIM_Base_Start_IT>


	  //reference_rpm_L = 150 - yaw_err*18;
	  //reference_rpm_R = 150 + yaw_err*18; FASTEST

	  printf("Decimal is: %d \n\r", lineData);
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <main+0x2d0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <main+0x2d4>)
 8000f96:	f007 f83f 	bl	8008018 <iprintf>
	  //HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 8000f9a:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <main+0x2a0>)
 8000f9c:	f7ff fb98 	bl	80006d0 <ertc_dlog_update>
	  printf("Decimal is: %d \n\r", lineData);
 8000fa0:	e7f5      	b.n	8000f8e <main+0x28a>
 8000fa2:	bf00      	nop
 8000fa4:	200006f0 	.word	0x200006f0
 8000fa8:	200005e0 	.word	0x200005e0
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	200007fd 	.word	0x200007fd
 8000fb4:	200000dc 	.word	0x200000dc
 8000fb8:	200007fe 	.word	0x200007fe
 8000fbc:	08008f4c 	.word	0x08008f4c
 8000fc0:	20000280 	.word	0x20000280
 8000fc4:	200002cc 	.word	0x200002cc
 8000fc8:	200001e8 	.word	0x200001e8
 8000fcc:	200003b0 	.word	0x200003b0
 8000fd0:	20000364 	.word	0x20000364
 8000fd4:	200007fc 	.word	0x200007fc
 8000fd8:	08008f6c 	.word	0x08008f6c

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	2234      	movs	r2, #52	; 0x34
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f007 f80c 	bl	8008008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001000:	f003 f9ae 	bl	8004360 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <SystemClock_Config+0xdc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <SystemClock_Config+0xdc>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <SystemClock_Config+0xdc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <SystemClock_Config+0xe0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <SystemClock_Config+0xe0>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <SystemClock_Config+0xe0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001038:	2301      	movs	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800103c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001040:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001046:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001050:	2360      	movs	r3, #96	; 0x60
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001058:	2304      	movs	r3, #4
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800105c:	2302      	movs	r3, #2
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4618      	mov	r0, r3
 8001066:	f003 f9db 	bl	8004420 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001070:	f000 ff40 	bl	8001ef4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001074:	f003 f984 	bl	8004380 <HAL_PWREx_EnableOverDrive>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800107e:	f000 ff39 	bl	8001ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2302      	movs	r3, #2
 8001088:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001092:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	2103      	movs	r1, #3
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fc6c 	bl	800497c <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010aa:	f000 ff23 	bl	8001ef4 <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3750      	adds	r7, #80	; 0x50
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_ADC1_Init+0x98>)
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <MX_ADC1_Init+0x9c>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_ADC1_Init+0x98>)
 80010da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_ADC1_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_ADC1_Init+0x98>)
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <MX_ADC1_Init+0xa0>)
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_ADC1_Init+0x98>)
 800110e:	2201      	movs	r2, #1
 8001110:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_ADC1_Init+0x98>)
 800111c:	2201      	movs	r2, #1
 800111e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_ADC1_Init+0x98>)
 8001122:	f001 fdc1 	bl	8002ca8 <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800112c:	f000 fee2 	bl	8001ef4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001130:	2303      	movs	r3, #3
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001134:	2301      	movs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_ADC1_Init+0x98>)
 8001142:	f001 fdf5 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800114c:	f000 fed2 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000094 	.word	0x20000094
 800115c:	40012000 	.word	0x40012000
 8001160:	0f000001 	.word	0x0f000001

08001164 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <MX_I2C1_Init+0x74>)
 800116a:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <MX_I2C1_Init+0x78>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_I2C1_Init+0x74>)
 8001170:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <MX_I2C1_Init+0x7c>)
 8001172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_I2C1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_I2C1_Init+0x74>)
 800117c:	2201      	movs	r2, #1
 800117e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_I2C1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_I2C1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_I2C1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <MX_I2C1_Init+0x74>)
 80011a0:	f002 faee 	bl	8003780 <HAL_I2C_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011aa:	f000 fea3 	bl	8001ef4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ae:	2100      	movs	r1, #0
 80011b0:	4809      	ldr	r0, [pc, #36]	; (80011d8 <MX_I2C1_Init+0x74>)
 80011b2:	f003 f83d 	bl	8004230 <HAL_I2CEx_ConfigAnalogFilter>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011bc:	f000 fe9a 	bl	8001ef4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011c0:	2100      	movs	r1, #0
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_I2C1_Init+0x74>)
 80011c4:	f003 f87f 	bl	80042c6 <HAL_I2CEx_ConfigDigitalFilter>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ce:	f000 fe91 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200000dc 	.word	0x200000dc
 80011dc:	40005400 	.word	0x40005400
 80011e0:	20303e5d 	.word	0x20303e5d

080011e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_I2C2_Init+0x74>)
 80011ea:	4a1c      	ldr	r2, [pc, #112]	; (800125c <MX_I2C2_Init+0x78>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_I2C2_Init+0x74>)
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <MX_I2C2_Init+0x7c>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_I2C2_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_I2C2_Init+0x74>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_I2C2_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_I2C2_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C2_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_I2C2_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C2_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800121e:	480e      	ldr	r0, [pc, #56]	; (8001258 <MX_I2C2_Init+0x74>)
 8001220:	f002 faae 	bl	8003780 <HAL_I2C_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800122a:	f000 fe63 	bl	8001ef4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800122e:	2100      	movs	r1, #0
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <MX_I2C2_Init+0x74>)
 8001232:	f002 fffd 	bl	8004230 <HAL_I2CEx_ConfigAnalogFilter>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800123c:	f000 fe5a 	bl	8001ef4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001240:	2100      	movs	r1, #0
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_I2C2_Init+0x74>)
 8001244:	f003 f83f 	bl	80042c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800124e:	f000 fe51 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000130 	.word	0x20000130
 800125c:	40005800 	.word	0x40005800
 8001260:	20303e5d 	.word	0x20303e5d

08001264 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_SPI1_Init+0x74>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <MX_SPI1_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_SPI1_Init+0x74>)
 8001270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_SPI1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_SPI1_Init+0x74>)
 800127e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001282:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_SPI1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_SPI1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_SPI1_Init+0x74>)
 8001292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001296:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_SPI1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_SPI1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_SPI1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_SPI1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_SPI1_Init+0x74>)
 80012b2:	2207      	movs	r2, #7
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_SPI1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_SPI1_Init+0x74>)
 80012be:	2208      	movs	r2, #8
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_SPI1_Init+0x74>)
 80012c4:	f004 f9a8 	bl	8005618 <HAL_SPI_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012ce:	f000 fe11 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000184 	.word	0x20000184
 80012dc:	40013000 	.word	0x40013000

080012e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b09a      	sub	sp, #104	; 0x68
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	615a      	str	r2, [r3, #20]
 8001312:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	222c      	movs	r2, #44	; 0x2c
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f006 fe74 	bl	8008008 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <MX_TIM1_Init+0x198>)
 8001322:	4a56      	ldr	r2, [pc, #344]	; (800147c <MX_TIM1_Init+0x19c>)
 8001324:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001326:	4b54      	ldr	r3, [pc, #336]	; (8001478 <MX_TIM1_Init+0x198>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b52      	ldr	r3, [pc, #328]	; (8001478 <MX_TIM1_Init+0x198>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001332:	4b51      	ldr	r3, [pc, #324]	; (8001478 <MX_TIM1_Init+0x198>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <MX_TIM1_Init+0x198>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800133e:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <MX_TIM1_Init+0x198>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <MX_TIM1_Init+0x198>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800134a:	484b      	ldr	r0, [pc, #300]	; (8001478 <MX_TIM1_Init+0x198>)
 800134c:	f004 fa0f 	bl	800576e <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001356:	f000 fdcd 	bl	8001ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001364:	4619      	mov	r1, r3
 8001366:	4844      	ldr	r0, [pc, #272]	; (8001478 <MX_TIM1_Init+0x198>)
 8001368:	f005 f962 	bl	8006630 <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001372:	f000 fdbf 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001376:	4840      	ldr	r0, [pc, #256]	; (8001478 <MX_TIM1_Init+0x198>)
 8001378:	f004 fac8 	bl	800590c <HAL_TIM_OC_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001382:	f000 fdb7 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001392:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001396:	4619      	mov	r1, r3
 8001398:	4837      	ldr	r0, [pc, #220]	; (8001478 <MX_TIM1_Init+0x198>)
 800139a:	f005 ff23 	bl	80071e4 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80013a4:	f000 fda6 	bl	8001ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80013a8:	2350      	movs	r3, #80	; 0x50
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013b0:	2302      	movs	r3, #2
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013b4:	2300      	movs	r3, #0
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	482a      	ldr	r0, [pc, #168]	; (8001478 <MX_TIM1_Init+0x198>)
 80013ce:	f004 ff05 	bl	80061dc <HAL_TIM_OC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80013d8:	f000 fd8c 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e0:	2204      	movs	r2, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <MX_TIM1_Init+0x198>)
 80013e6:	f004 fef9 	bl	80061dc <HAL_TIM_OC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80013f0:	f000 fd80 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f8:	2208      	movs	r2, #8
 80013fa:	4619      	mov	r1, r3
 80013fc:	481e      	ldr	r0, [pc, #120]	; (8001478 <MX_TIM1_Init+0x198>)
 80013fe:	f004 feed 	bl	80061dc <HAL_TIM_OC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001408:	f000 fd74 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001410:	220c      	movs	r2, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4818      	ldr	r0, [pc, #96]	; (8001478 <MX_TIM1_Init+0x198>)
 8001416:	f004 fee1 	bl	80061dc <HAL_TIM_OC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001420:	f000 fd68 	bl	8001ef4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <MX_TIM1_Init+0x198>)
 800145a:	f005 ff51 	bl	8007300 <HAL_TIMEx_ConfigBreakDeadTime>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001464:	f000 fd46 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <MX_TIM1_Init+0x198>)
 800146a:	f001 f805 	bl	8002478 <HAL_TIM_MspPostInit>

}
 800146e:	bf00      	nop
 8001470:	3768      	adds	r7, #104	; 0x68
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001e8 	.word	0x200001e8
 800147c:	40010000 	.word	0x40010000

08001480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b092      	sub	sp, #72	; 0x48
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
 80014b0:	615a      	str	r2, [r3, #20]
 80014b2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c0:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <MX_TIM2_Init+0x130>)
 80014c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <MX_TIM2_Init+0x130>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <MX_TIM2_Init+0x130>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <MX_TIM2_Init+0x130>)
 80014d6:	f04f 32ff 	mov.w	r2, #4294967295
 80014da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <MX_TIM2_Init+0x130>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <MX_TIM2_Init+0x130>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e8:	4831      	ldr	r0, [pc, #196]	; (80015b0 <MX_TIM2_Init+0x130>)
 80014ea:	f004 f940 	bl	800576e <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014f4:	f000 fcfe 	bl	8001ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001502:	4619      	mov	r1, r3
 8001504:	482a      	ldr	r0, [pc, #168]	; (80015b0 <MX_TIM2_Init+0x130>)
 8001506:	f005 f893 	bl	8006630 <HAL_TIM_ConfigClockSource>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001510:	f000 fcf0 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001514:	4826      	ldr	r0, [pc, #152]	; (80015b0 <MX_TIM2_Init+0x130>)
 8001516:	f004 fa5a 	bl	80059ce <HAL_TIM_PWM_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001520:	f000 fce8 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001524:	4822      	ldr	r0, [pc, #136]	; (80015b0 <MX_TIM2_Init+0x130>)
 8001526:	f004 fba3 	bl	8005c70 <HAL_TIM_IC_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001530:	f000 fce0 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001540:	4619      	mov	r1, r3
 8001542:	481b      	ldr	r0, [pc, #108]	; (80015b0 <MX_TIM2_Init+0x130>)
 8001544:	f005 fe4e 	bl	80071e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800154e:	f000 fcd1 	bl	8001ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001552:	2360      	movs	r3, #96	; 0x60
 8001554:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	4811      	ldr	r0, [pc, #68]	; (80015b0 <MX_TIM2_Init+0x130>)
 800156c:	f004 ff4c 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001576:	f000 fcbd 	bl	8001ef4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800157e:	2301      	movs	r3, #1
 8001580:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	2208      	movs	r2, #8
 800158e:	4619      	mov	r1, r3
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <MX_TIM2_Init+0x130>)
 8001592:	f004 fe9d 	bl	80062d0 <HAL_TIM_IC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800159c:	f000 fcaa 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <MX_TIM2_Init+0x130>)
 80015a2:	f000 ff69 	bl	8002478 <HAL_TIM_MspPostInit>

}
 80015a6:	bf00      	nop
 80015a8:	3748      	adds	r7, #72	; 0x48
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000234 	.word	0x20000234

080015b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	; 0x30
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2224      	movs	r2, #36	; 0x24
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fd20 	bl	8008008 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <MX_TIM3_Init+0xa4>)
 80015d4:	4a21      	ldr	r2, [pc, #132]	; (800165c <MX_TIM3_Init+0xa8>)
 80015d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_TIM3_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_TIM3_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM3_Init+0xa4>)
 80015e6:	f640 62ff 	movw	r2, #3839	; 0xeff
 80015ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM3_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_TIM3_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015f8:	2303      	movs	r3, #3
 80015fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001600:	2301      	movs	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001608:	230f      	movs	r3, #15
 800160a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001610:	2301      	movs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001618:	230f      	movs	r3, #15
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	4619      	mov	r1, r3
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_TIM3_Init+0xa4>)
 8001624:	f004 fb86 	bl	8005d34 <HAL_TIM_Encoder_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800162e:	f000 fc61 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800163a:	463b      	mov	r3, r7
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM3_Init+0xa4>)
 8001640:	f005 fdd0 	bl	80071e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800164a:	f000 fc53 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3730      	adds	r7, #48	; 0x30
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000280 	.word	0x20000280
 800165c:	40000400 	.word	0x40000400

08001660 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2224      	movs	r2, #36	; 0x24
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f006 fcca 	bl	8008008 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <MX_TIM4_Init+0xa4>)
 8001680:	4a21      	ldr	r2, [pc, #132]	; (8001708 <MX_TIM4_Init+0xa8>)
 8001682:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <MX_TIM4_Init+0xa4>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_TIM4_Init+0xa4>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_TIM4_Init+0xa4>)
 8001692:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001696:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_TIM4_Init+0xa4>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_TIM4_Init+0xa4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016a4:	2303      	movs	r3, #3
 80016a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ac:	2301      	movs	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80016b4:	230f      	movs	r3, #15
 80016b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016bc:	2301      	movs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80016c4:	230f      	movs	r3, #15
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_TIM4_Init+0xa4>)
 80016d0:	f004 fb30 	bl	8005d34 <HAL_TIM_Encoder_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80016da:	f000 fc0b 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016e6:	463b      	mov	r3, r7
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_TIM4_Init+0xa4>)
 80016ec:	f005 fd7a 	bl	80071e4 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80016f6:	f000 fbfd 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	3730      	adds	r7, #48	; 0x30
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200002cc 	.word	0x200002cc
 8001708:	40000800 	.word	0x40000800

0800170c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <MX_TIM5_Init+0xe8>)
 8001740:	4a2d      	ldr	r2, [pc, #180]	; (80017f8 <MX_TIM5_Init+0xec>)
 8001742:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <MX_TIM5_Init+0xe8>)
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <MX_TIM5_Init+0xe8>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <MX_TIM5_Init+0xe8>)
 8001752:	f04f 32ff 	mov.w	r2, #4294967295
 8001756:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <MX_TIM5_Init+0xe8>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <MX_TIM5_Init+0xe8>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001764:	4823      	ldr	r0, [pc, #140]	; (80017f4 <MX_TIM5_Init+0xe8>)
 8001766:	f004 f802 	bl	800576e <HAL_TIM_Base_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001770:	f000 fbc0 	bl	8001ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800177a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177e:	4619      	mov	r1, r3
 8001780:	481c      	ldr	r0, [pc, #112]	; (80017f4 <MX_TIM5_Init+0xe8>)
 8001782:	f004 ff55 	bl	8006630 <HAL_TIM_ConfigClockSource>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800178c:	f000 fbb2 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001790:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_TIM5_Init+0xe8>)
 8001792:	f004 f91c 	bl	80059ce <HAL_TIM_PWM_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800179c:	f000 fbaa 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4811      	ldr	r0, [pc, #68]	; (80017f4 <MX_TIM5_Init+0xe8>)
 80017b0:	f005 fd18 	bl	80071e4 <HAL_TIMEx_MasterConfigSynchronization>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80017ba:	f000 fb9b 	bl	8001ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017be:	2360      	movs	r3, #96	; 0x60
 80017c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ce:	463b      	mov	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	4619      	mov	r1, r3
 80017d4:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM5_Init+0xe8>)
 80017d6:	f004 fe17 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80017e0:	f000 fb88 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM5_Init+0xe8>)
 80017e6:	f000 fe47 	bl	8002478 <HAL_TIM_MspPostInit>

}
 80017ea:	bf00      	nop
 80017ec:	3738      	adds	r7, #56	; 0x38
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000318 	.word	0x20000318
 80017f8:	40000c00 	.word	0x40000c00

080017fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_TIM6_Init+0x68>)
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <MX_TIM6_Init+0x6c>)
 8001810:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_TIM6_Init+0x68>)
 8001814:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001818:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_TIM6_Init+0x68>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_TIM6_Init+0x68>)
 8001822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001826:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_TIM6_Init+0x68>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_TIM6_Init+0x68>)
 8001830:	f003 ff9d 	bl	800576e <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800183a:	f000 fb5b 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_TIM6_Init+0x68>)
 800184c:	f005 fcca 	bl	80071e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001856:	f000 fb4d 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000364 	.word	0x20000364
 8001868:	40001000 	.word	0x40001000

0800186c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b09a      	sub	sp, #104	; 0x68
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	222c      	movs	r2, #44	; 0x2c
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fbae 	bl	8008008 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018ac:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80018ae:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <MX_TIM8_Init+0x1a0>)
 80018b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80018b2:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80018b4:	f240 32bf 	movw	r2, #959	; 0x3bf
 80018b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ba:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 80018c0:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80018c2:	f240 128f 	movw	r2, #399	; 0x18f
 80018c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018ce:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018da:	484b      	ldr	r0, [pc, #300]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80018dc:	f003 ff47 	bl	800576e <HAL_TIM_Base_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80018e6:	f000 fb05 	bl	8001ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ee:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f4:	4619      	mov	r1, r3
 80018f6:	4844      	ldr	r0, [pc, #272]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80018f8:	f004 fe9a 	bl	8006630 <HAL_TIM_ConfigClockSource>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001902:	f000 faf7 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001906:	4840      	ldr	r0, [pc, #256]	; (8001a08 <MX_TIM8_Init+0x19c>)
 8001908:	f004 f861 	bl	80059ce <HAL_TIM_PWM_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001912:	f000 faef 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001922:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001926:	4619      	mov	r1, r3
 8001928:	4837      	ldr	r0, [pc, #220]	; (8001a08 <MX_TIM8_Init+0x19c>)
 800192a:	f005 fc5b 	bl	80071e4 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001934:	f000 fade 	bl	8001ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001938:	2360      	movs	r3, #96	; 0x60
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001940:	2300      	movs	r3, #0
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001944:	2300      	movs	r3, #0
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001954:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001958:	2200      	movs	r2, #0
 800195a:	4619      	mov	r1, r3
 800195c:	482a      	ldr	r0, [pc, #168]	; (8001a08 <MX_TIM8_Init+0x19c>)
 800195e:	f004 fd53 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001968:	f000 fac4 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800196c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001970:	2204      	movs	r2, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4824      	ldr	r0, [pc, #144]	; (8001a08 <MX_TIM8_Init+0x19c>)
 8001976:	f004 fd47 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001980:	f000 fab8 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001988:	2208      	movs	r2, #8
 800198a:	4619      	mov	r1, r3
 800198c:	481e      	ldr	r0, [pc, #120]	; (8001a08 <MX_TIM8_Init+0x19c>)
 800198e:	f004 fd3b 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001998:	f000 faac 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800199c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a0:	220c      	movs	r2, #12
 80019a2:	4619      	mov	r1, r3
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80019a6:	f004 fd2f 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80019b0:	f000 faa0 	bl	8001ef4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80019ea:	f005 fc89 	bl	8007300 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 80019f4:	f000 fa7e 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM8_Init+0x19c>)
 80019fa:	f000 fd3d 	bl	8002478 <HAL_TIM_MspPostInit>

}
 80019fe:	bf00      	nop
 8001a00:	3768      	adds	r7, #104	; 0x68
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200003b0 	.word	0x200003b0
 8001a0c:	40010400 	.word	0x40010400

08001a10 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a2a:	4a20      	ldr	r2, [pc, #128]	; (8001aac <MX_TIM9_Init+0x9c>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a40:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001a4e:	4816      	ldr	r0, [pc, #88]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a50:	f003 ffbd 	bl	80059ce <HAL_TIM_PWM_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001a5a:	f000 fa4b 	bl	8001ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5e:	2360      	movs	r3, #96	; 0x60
 8001a60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2200      	movs	r2, #0
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a76:	f004 fcc7 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001a80:	f000 fa38 	bl	8001ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2204      	movs	r2, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4807      	ldr	r0, [pc, #28]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a8c:	f004 fcbc 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001a96:	f000 fa2d 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001a9a:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <MX_TIM9_Init+0x98>)
 8001a9c:	f000 fcec 	bl	8002478 <HAL_TIM_MspPostInit>

}
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200003fc 	.word	0x200003fc
 8001aac:	40014000 	.word	0x40014000

08001ab0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_UART4_Init+0x58>)
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <MX_UART4_Init+0x5c>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_UART4_Init+0x58>)
 8001abc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ac0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_UART4_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_UART4_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_UART4_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_UART4_Init+0x58>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_UART4_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_UART4_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_UART4_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_UART4_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_UART4_Init+0x58>)
 8001af4:	f005 fca0 	bl	8007438 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001afe:	f000 f9f9 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000448 	.word	0x20000448
 8001b0c:	40004c00 	.word	0x40004c00

08001b10 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <MX_UART5_Init+0x5c>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_UART5_Init+0x58>)
 8001b54:	f005 fc70 	bl	8007438 <HAL_UART_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001b5e:	f000 f9c9 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200004d0 	.word	0x200004d0
 8001b6c:	40005000 	.word	0x40005000

08001b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <MX_USART1_UART_Init+0x5c>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001bb4:	f005 fc40 	bl	8007438 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f000 f999 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000558 	.word	0x20000558
 8001bcc:	40011000 	.word	0x40011000

08001bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <MX_USART2_UART_Init+0x5c>)
 8001bde:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MX_USART2_UART_Init+0x54>)
 8001c12:	f005 fc11 	bl	8007438 <HAL_UART_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001c1c:	f000 f96a 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200005e0 	.word	0x200005e0
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	000f4240 	.word	0x000f4240

08001c30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <MX_USART3_UART_Init+0x5c>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_USART3_UART_Init+0x58>)
 8001c74:	f005 fbe0 	bl	8007438 <HAL_UART_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c7e:	f000 f939 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000668 	.word	0x20000668
 8001c8c:	40004800 	.word	0x40004800

08001c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08e      	sub	sp, #56	; 0x38
 8001c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca6:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a8b      	ldr	r2, [pc, #556]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001cac:	f043 0310 	orr.w	r3, r3, #16
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	4b86      	ldr	r3, [pc, #536]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a85      	ldr	r2, [pc, #532]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b83      	ldr	r3, [pc, #524]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd6:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a7f      	ldr	r2, [pc, #508]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001cdc:	f043 0320 	orr.w	r3, r3, #32
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b7d      	ldr	r3, [pc, #500]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cee:	4b7a      	ldr	r3, [pc, #488]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a79      	ldr	r2, [pc, #484]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b77      	ldr	r3, [pc, #476]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b74      	ldr	r3, [pc, #464]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a73      	ldr	r2, [pc, #460]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b71      	ldr	r3, [pc, #452]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a6d      	ldr	r2, [pc, #436]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a67      	ldr	r2, [pc, #412]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d4e:	4b62      	ldr	r3, [pc, #392]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a61      	ldr	r2, [pc, #388]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <MX_GPIO_Init+0x248>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2118      	movs	r1, #24
 8001d6a:	485c      	ldr	r0, [pc, #368]	; (8001edc <MX_GPIO_Init+0x24c>)
 8001d6c:	f001 fcee 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d76:	485a      	ldr	r0, [pc, #360]	; (8001ee0 <MX_GPIO_Init+0x250>)
 8001d78:	f001 fce8 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	4858      	ldr	r0, [pc, #352]	; (8001ee4 <MX_GPIO_Init+0x254>)
 8001d82:	f001 fce3 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001d86:	2318      	movs	r3, #24
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	484f      	ldr	r0, [pc, #316]	; (8001edc <MX_GPIO_Init+0x24c>)
 8001d9e:	f001 fb29 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001da2:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001da8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db6:	4619      	mov	r1, r3
 8001db8:	484b      	ldr	r0, [pc, #300]	; (8001ee8 <MX_GPIO_Init+0x258>)
 8001dba:	f001 fb1b 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001dbe:	2332      	movs	r3, #50	; 0x32
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dce:	230b      	movs	r3, #11
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4844      	ldr	r0, [pc, #272]	; (8001eec <MX_GPIO_Init+0x25c>)
 8001dda:	f001 fb0b 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001dde:	2386      	movs	r3, #134	; 0x86
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dee:	230b      	movs	r3, #11
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df6:	4619      	mov	r1, r3
 8001df8:	483d      	ldr	r0, [pc, #244]	; (8001ef0 <MX_GPIO_Init+0x260>)
 8001dfa:	f001 fafb 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001dfe:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e14:	4619      	mov	r1, r3
 8001e16:	4832      	ldr	r0, [pc, #200]	; (8001ee0 <MX_GPIO_Init+0x250>)
 8001e18:	f001 faec 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e2e:	230b      	movs	r3, #11
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	4619      	mov	r1, r3
 8001e38:	4829      	ldr	r0, [pc, #164]	; (8001ee0 <MX_GPIO_Init+0x250>)
 8001e3a:	f001 fadb 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e3e:	2340      	movs	r3, #64	; 0x40
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	4619      	mov	r1, r3
 8001e54:	4823      	ldr	r0, [pc, #140]	; (8001ee4 <MX_GPIO_Init+0x254>)
 8001e56:	f001 facd 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	481d      	ldr	r0, [pc, #116]	; (8001ee4 <MX_GPIO_Init+0x254>)
 8001e6e:	f001 fac1 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e72:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e84:	230a      	movs	r3, #10
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <MX_GPIO_Init+0x260>)
 8001e90:	f001 fab0 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <MX_GPIO_Init+0x260>)
 8001eaa:	f001 faa3 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001eae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ec0:	230b      	movs	r3, #11
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <MX_GPIO_Init+0x254>)
 8001ecc:	f001 fa92 	bl	80033f4 <HAL_GPIO_Init>

}
 8001ed0:	bf00      	nop
 8001ed2:	3738      	adds	r7, #56	; 0x38
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40021800 	.word	0x40021800
 8001ee8:	40021400 	.word	0x40021400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef8:	b672      	cpsid	i
}
 8001efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001efc:	e7fe      	b.n	8001efc <Error_Handler+0x8>
	...

08001f00 <HAL_MspInit>:
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_MspInit+0x44>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <HAL_MspInit+0x44>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_MspInit+0x44>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_MspInit+0x44>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_MspInit+0x44>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_MspInit+0x44>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800

08001f48 <HAL_ADC_MspInit>:
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <HAL_ADC_MspInit+0x74>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d123      	bne.n	8001fb2 <HAL_ADC_MspInit+0x6a>
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_ADC_MspInit+0x78>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <HAL_ADC_MspInit+0x78>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_ADC_MspInit+0x78>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_ADC_MspInit+0x78>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_ADC_MspInit+0x78>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_ADC_MspInit+0x78>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <HAL_ADC_MspInit+0x7c>)
 8001fae:	f001 fa21 	bl	80033f4 <HAL_GPIO_Init>
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40012000 	.word	0x40012000
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <HAL_I2C_MspInit>:
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0b0      	sub	sp, #192	; 0xc0
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	2290      	movs	r2, #144	; 0x90
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f006 f80d 	bl	8008008 <memset>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a44      	ldr	r2, [pc, #272]	; (8002104 <HAL_I2C_MspInit+0x13c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d13e      	bne.n	8002076 <HAL_I2C_MspInit+0xae>
 8001ff8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fedd 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_I2C_MspInit+0x50>
 8002014:	f7ff ff6e 	bl	8001ef4 <Error_Handler>
 8002018:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <HAL_I2C_MspInit+0x140>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	4a3a      	ldr	r2, [pc, #232]	; (8002108 <HAL_I2C_MspInit+0x140>)
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	6313      	str	r3, [r2, #48]	; 0x30
 8002024:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_I2C_MspInit+0x140>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002038:	2312      	movs	r3, #18
 800203a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800203e:	2301      	movs	r3, #1
 8002040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002044:	2303      	movs	r3, #3
 8002046:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800204a:	2304      	movs	r3, #4
 800204c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002050:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002054:	4619      	mov	r1, r3
 8002056:	482d      	ldr	r0, [pc, #180]	; (800210c <HAL_I2C_MspInit+0x144>)
 8002058:	f001 f9cc 	bl	80033f4 <HAL_GPIO_Init>
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_I2C_MspInit+0x140>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a29      	ldr	r2, [pc, #164]	; (8002108 <HAL_I2C_MspInit+0x140>)
 8002062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_I2C_MspInit+0x140>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	e041      	b.n	80020fa <HAL_I2C_MspInit+0x132>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a25      	ldr	r2, [pc, #148]	; (8002110 <HAL_I2C_MspInit+0x148>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d13c      	bne.n	80020fa <HAL_I2C_MspInit+0x132>
 8002080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fe99 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_I2C_MspInit+0xd8>
 800209c:	f7ff ff2a 	bl	8001ef4 <Error_Handler>
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_I2C_MspInit+0x140>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a18      	ldr	r2, [pc, #96]	; (8002108 <HAL_I2C_MspInit+0x140>)
 80020a6:	f043 0320 	orr.w	r3, r3, #32
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_I2C_MspInit+0x140>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2303      	movs	r3, #3
 80020ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020be:	2312      	movs	r3, #18
 80020c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020c4:	2301      	movs	r3, #1
 80020c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020ca:	2303      	movs	r3, #3
 80020cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020d0:	2304      	movs	r3, #4
 80020d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80020d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020da:	4619      	mov	r1, r3
 80020dc:	480d      	ldr	r0, [pc, #52]	; (8002114 <HAL_I2C_MspInit+0x14c>)
 80020de:	f001 f989 	bl	80033f4 <HAL_GPIO_Init>
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_I2C_MspInit+0x140>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_I2C_MspInit+0x140>)
 80020e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_I2C_MspInit+0x140>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	bf00      	nop
 80020fc:	37c0      	adds	r7, #192	; 0xc0
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40005400 	.word	0x40005400
 8002108:	40023800 	.word	0x40023800
 800210c:	40020400 	.word	0x40020400
 8002110:	40005800 	.word	0x40005800
 8002114:	40021400 	.word	0x40021400

08002118 <HAL_SPI_MspInit>:
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	; 0x30
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a33      	ldr	r2, [pc, #204]	; (8002204 <HAL_SPI_MspInit+0xec>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d160      	bne.n	80021fc <HAL_SPI_MspInit+0xe4>
 800213a:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	4b27      	ldr	r3, [pc, #156]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a26      	ldr	r2, [pc, #152]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a20      	ldr	r2, [pc, #128]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_SPI_MspInit+0xf0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2320      	movs	r3, #32
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	2302      	movs	r3, #2
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	2303      	movs	r3, #3
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021aa:	2305      	movs	r3, #5
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4815      	ldr	r0, [pc, #84]	; (800220c <HAL_SPI_MspInit+0xf4>)
 80021b6:	f001 f91d 	bl	80033f4 <HAL_GPIO_Init>
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	2302      	movs	r3, #2
 80021c0:	623b      	str	r3, [r7, #32]
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	2303      	movs	r3, #3
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ca:	2305      	movs	r3, #5
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4619      	mov	r1, r3
 80021d4:	480e      	ldr	r0, [pc, #56]	; (8002210 <HAL_SPI_MspInit+0xf8>)
 80021d6:	f001 f90d 	bl	80033f4 <HAL_GPIO_Init>
 80021da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	2302      	movs	r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
 80021e8:	2303      	movs	r3, #3
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ec:	2305      	movs	r3, #5
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	4807      	ldr	r0, [pc, #28]	; (8002214 <HAL_SPI_MspInit+0xfc>)
 80021f8:	f001 f8fc 	bl	80033f4 <HAL_GPIO_Init>
 80021fc:	bf00      	nop
 80021fe:	3730      	adds	r7, #48	; 0x30
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40013000 	.word	0x40013000
 8002208:	40023800 	.word	0x40023800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40021800 	.word	0x40021800

08002218 <HAL_TIM_Base_MspInit>:
 8002218:	b580      	push	{r7, lr}
 800221a:	b08e      	sub	sp, #56	; 0x38
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a3f      	ldr	r2, [pc, #252]	; (8002334 <HAL_TIM_Base_MspInit+0x11c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10c      	bne.n	8002254 <HAL_TIM_Base_MspInit+0x3c>
 800223a:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	623b      	str	r3, [r7, #32]
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	e06b      	b.n	800232c <HAL_TIM_Base_MspInit+0x114>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225c:	d129      	bne.n	80022b2 <HAL_TIM_Base_MspInit+0x9a>
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a35      	ldr	r2, [pc, #212]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
 8002294:	2302      	movs	r3, #2
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229c:	2300      	movs	r3, #0
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
 80022a0:	2301      	movs	r3, #1
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	4824      	ldr	r0, [pc, #144]	; (800233c <HAL_TIM_Base_MspInit+0x124>)
 80022ac:	f001 f8a2 	bl	80033f4 <HAL_GPIO_Init>
 80022b0:	e03c      	b.n	800232c <HAL_TIM_Base_MspInit+0x114>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_TIM_Base_MspInit+0x128>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d10c      	bne.n	80022d6 <HAL_TIM_Base_MspInit+0xbe>
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 80022c2:	f043 0308 	orr.w	r3, r3, #8
 80022c6:	6413      	str	r3, [r2, #64]	; 0x40
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	e02a      	b.n	800232c <HAL_TIM_Base_MspInit+0x114>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_TIM_Base_MspInit+0x12c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d114      	bne.n	800230a <HAL_TIM_Base_MspInit+0xf2>
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	6413      	str	r3, [r2, #64]	; 0x40
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2200      	movs	r2, #0
 80022fa:	2101      	movs	r1, #1
 80022fc:	2036      	movs	r0, #54	; 0x36
 80022fe:	f001 f842 	bl	8003386 <HAL_NVIC_SetPriority>
 8002302:	2036      	movs	r0, #54	; 0x36
 8002304:	f001 f85b 	bl	80033be <HAL_NVIC_EnableIRQ>
 8002308:	e010      	b.n	800232c <HAL_TIM_Base_MspInit+0x114>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <HAL_TIM_Base_MspInit+0x130>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d10b      	bne.n	800232c <HAL_TIM_Base_MspInit+0x114>
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	6453      	str	r3, [r2, #68]	; 0x44
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_TIM_Base_MspInit+0x120>)
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	bf00      	nop
 800232e:	3738      	adds	r7, #56	; 0x38
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40010000 	.word	0x40010000
 8002338:	40023800 	.word	0x40023800
 800233c:	40020400 	.word	0x40020400
 8002340:	40000c00 	.word	0x40000c00
 8002344:	40001000 	.word	0x40001000
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_TIM_Encoder_MspInit>:
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a2e      	ldr	r2, [pc, #184]	; (8002424 <HAL_TIM_Encoder_MspInit+0xd8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d128      	bne.n	80023c0 <HAL_TIM_Encoder_MspInit+0x74>
 800236e:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a2d      	ldr	r2, [pc, #180]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a27      	ldr	r2, [pc, #156]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2330      	movs	r3, #48	; 0x30
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	2302      	movs	r3, #2
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ae:	2302      	movs	r3, #2
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4619      	mov	r1, r3
 80023b8:	481c      	ldr	r0, [pc, #112]	; (800242c <HAL_TIM_Encoder_MspInit+0xe0>)
 80023ba:	f001 f81b 	bl	80033f4 <HAL_GPIO_Init>
 80023be:	e02d      	b.n	800241c <HAL_TIM_Encoder_MspInit+0xd0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <HAL_TIM_Encoder_MspInit+0xe4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d128      	bne.n	800241c <HAL_TIM_Encoder_MspInit+0xd0>
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a16      	ldr	r2, [pc, #88]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	2302      	movs	r3, #2
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	2300      	movs	r3, #0
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
 800240c:	2302      	movs	r3, #2
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	4619      	mov	r1, r3
 8002416:	4807      	ldr	r0, [pc, #28]	; (8002434 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002418:	f000 ffec 	bl	80033f4 <HAL_GPIO_Init>
 800241c:	bf00      	nop
 800241e:	3730      	adds	r7, #48	; 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40000400 	.word	0x40000400
 8002428:	40023800 	.word	0x40023800
 800242c:	40020400 	.word	0x40020400
 8002430:	40000800 	.word	0x40000800
 8002434:	40020c00 	.word	0x40020c00

08002438 <HAL_TIM_PWM_MspInit>:
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <HAL_TIM_PWM_MspInit+0x38>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10b      	bne.n	8002462 <HAL_TIM_PWM_MspInit+0x2a>
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_TIM_PWM_MspInit+0x3c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <HAL_TIM_PWM_MspInit+0x3c>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_TIM_PWM_MspInit+0x3c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40014000 	.word	0x40014000
 8002474:	40023800 	.word	0x40023800

08002478 <HAL_TIM_MspPostInit>:
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a56      	ldr	r2, [pc, #344]	; (80025f0 <HAL_TIM_MspPostInit+0x178>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d11d      	bne.n	80024d6 <HAL_TIM_MspPostInit+0x5e>
 800249a:	4b56      	ldr	r3, [pc, #344]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a55      	ldr	r2, [pc, #340]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 80024a0:	f043 0310 	orr.w	r3, r3, #16
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	2302      	movs	r3, #2
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	2300      	movs	r3, #0
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c4:	2301      	movs	r3, #1
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	484a      	ldr	r0, [pc, #296]	; (80025f8 <HAL_TIM_MspPostInit+0x180>)
 80024d0:	f000 ff90 	bl	80033f4 <HAL_GPIO_Init>
 80024d4:	e088      	b.n	80025e8 <HAL_TIM_MspPostInit+0x170>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024de:	d11d      	bne.n	800251c <HAL_TIM_MspPostInit+0xa4>
 80024e0:	4b44      	ldr	r3, [pc, #272]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	4a43      	ldr	r2, [pc, #268]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6313      	str	r3, [r2, #48]	; 0x30
 80024ec:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	2302      	movs	r3, #2
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
 8002506:	2300      	movs	r3, #0
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
 800250a:	2301      	movs	r3, #1
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	4839      	ldr	r0, [pc, #228]	; (80025fc <HAL_TIM_MspPostInit+0x184>)
 8002516:	f000 ff6d 	bl	80033f4 <HAL_GPIO_Init>
 800251a:	e065      	b.n	80025e8 <HAL_TIM_MspPostInit+0x170>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a37      	ldr	r2, [pc, #220]	; (8002600 <HAL_TIM_MspPostInit+0x188>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d11c      	bne.n	8002560 <HAL_TIM_MspPostInit+0xe8>
 8002526:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a32      	ldr	r2, [pc, #200]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	2301      	movs	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	2302      	movs	r3, #2
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	2300      	movs	r3, #0
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
 800254e:	2302      	movs	r3, #2
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	4619      	mov	r1, r3
 8002558:	4828      	ldr	r0, [pc, #160]	; (80025fc <HAL_TIM_MspPostInit+0x184>)
 800255a:	f000 ff4b 	bl	80033f4 <HAL_GPIO_Init>
 800255e:	e043      	b.n	80025e8 <HAL_TIM_MspPostInit+0x170>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a27      	ldr	r2, [pc, #156]	; (8002604 <HAL_TIM_MspPostInit+0x18c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d11d      	bne.n	80025a6 <HAL_TIM_MspPostInit+0x12e>
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	2302      	movs	r3, #2
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	2300      	movs	r3, #0
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
 8002594:	2303      	movs	r3, #3
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4619      	mov	r1, r3
 800259e:	481a      	ldr	r0, [pc, #104]	; (8002608 <HAL_TIM_MspPostInit+0x190>)
 80025a0:	f000 ff28 	bl	80033f4 <HAL_GPIO_Init>
 80025a4:	e020      	b.n	80025e8 <HAL_TIM_MspPostInit+0x170>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_TIM_MspPostInit+0x194>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_MspPostInit+0x170>
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	6313      	str	r3, [r2, #48]	; 0x30
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_TIM_MspPostInit+0x17c>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2360      	movs	r3, #96	; 0x60
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	2302      	movs	r3, #2
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d8:	2303      	movs	r3, #3
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	4805      	ldr	r0, [pc, #20]	; (80025f8 <HAL_TIM_MspPostInit+0x180>)
 80025e4:	f000 ff06 	bl	80033f4 <HAL_GPIO_Init>
 80025e8:	bf00      	nop
 80025ea:	3730      	adds	r7, #48	; 0x30
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40020000 	.word	0x40020000
 8002600:	40000c00 	.word	0x40000c00
 8002604:	40010400 	.word	0x40010400
 8002608:	40020800 	.word	0x40020800
 800260c:	40014000 	.word	0x40014000

08002610 <HAL_UART_MspInit>:
 8002610:	b580      	push	{r7, lr}
 8002612:	b0b6      	sub	sp, #216	; 0xd8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
 8002628:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800262c:	2290      	movs	r2, #144	; 0x90
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f005 fce9 	bl	8008008 <memset>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4aa0      	ldr	r2, [pc, #640]	; (80028bc <HAL_UART_MspInit+0x2ac>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d13e      	bne.n	80026be <HAL_UART_MspInit+0xae>
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800264c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fbb9 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_UART_MspInit+0x50>
 800265c:	f7ff fc4a 	bl	8001ef4 <Error_Handler>
 8002660:	4b97      	ldr	r3, [pc, #604]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	4a96      	ldr	r2, [pc, #600]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800266a:	6413      	str	r3, [r2, #64]	; 0x40
 800266c:	4b94      	ldr	r3, [pc, #592]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	4b91      	ldr	r3, [pc, #580]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4a90      	ldr	r2, [pc, #576]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6313      	str	r3, [r2, #48]	; 0x30
 8002684:	4b8e      	ldr	r3, [pc, #568]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026a4:	2303      	movs	r3, #3
 80026a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026aa:	2308      	movs	r3, #8
 80026ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80026b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4883      	ldr	r0, [pc, #524]	; (80028c4 <HAL_UART_MspInit+0x2b4>)
 80026b8:	f000 fe9c 	bl	80033f4 <HAL_GPIO_Init>
 80026bc:	e151      	b.n	8002962 <HAL_UART_MspInit+0x352>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a81      	ldr	r2, [pc, #516]	; (80028c8 <HAL_UART_MspInit+0x2b8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d160      	bne.n	800278a <HAL_UART_MspInit+0x17a>
 80026c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fb75 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_MspInit+0xd8>
 80026e4:	f7ff fc06 	bl	8001ef4 <Error_Handler>
 80026e8:	4b75      	ldr	r3, [pc, #468]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	4a74      	ldr	r2, [pc, #464]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 80026ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f2:	6413      	str	r3, [r2, #64]	; 0x40
 80026f4:	4b72      	ldr	r3, [pc, #456]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	4b6f      	ldr	r3, [pc, #444]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a6e      	ldr	r2, [pc, #440]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b6c      	ldr	r3, [pc, #432]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	4b69      	ldr	r3, [pc, #420]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	4a68      	ldr	r2, [pc, #416]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6313      	str	r3, [r2, #48]	; 0x30
 8002724:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	623b      	str	r3, [r7, #32]
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002734:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002744:	2303      	movs	r3, #3
 8002746:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800274a:	2308      	movs	r3, #8
 800274c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002750:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002754:	4619      	mov	r1, r3
 8002756:	485d      	ldr	r0, [pc, #372]	; (80028cc <HAL_UART_MspInit+0x2bc>)
 8002758:	f000 fe4c 	bl	80033f4 <HAL_GPIO_Init>
 800275c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002770:	2303      	movs	r3, #3
 8002772:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002776:	2308      	movs	r3, #8
 8002778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800277c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002780:	4619      	mov	r1, r3
 8002782:	4850      	ldr	r0, [pc, #320]	; (80028c4 <HAL_UART_MspInit+0x2b4>)
 8002784:	f000 fe36 	bl	80033f4 <HAL_GPIO_Init>
 8002788:	e0eb      	b.n	8002962 <HAL_UART_MspInit+0x352>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a50      	ldr	r2, [pc, #320]	; (80028d0 <HAL_UART_MspInit+0x2c0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d151      	bne.n	8002838 <HAL_UART_MspInit+0x228>
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
 8002798:	2300      	movs	r3, #0
 800279a:	67bb      	str	r3, [r7, #120]	; 0x78
 800279c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 fb11 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_UART_MspInit+0x1a0>
 80027ac:	f7ff fba2 	bl	8001ef4 <Error_Handler>
 80027b0:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	4a42      	ldr	r2, [pc, #264]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 80027b6:	f043 0310 	orr.w	r3, r3, #16
 80027ba:	6453      	str	r3, [r2, #68]	; 0x44
 80027bc:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	6313      	str	r3, [r2, #48]	; 0x30
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027e8:	2302      	movs	r3, #2
 80027ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027f4:	2303      	movs	r3, #3
 80027f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027fa:	2304      	movs	r3, #4
 80027fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002800:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002804:	4619      	mov	r1, r3
 8002806:	4831      	ldr	r0, [pc, #196]	; (80028cc <HAL_UART_MspInit+0x2bc>)
 8002808:	f000 fdf4 	bl	80033f4 <HAL_GPIO_Init>
 800280c:	2340      	movs	r3, #64	; 0x40
 800280e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002812:	2302      	movs	r3, #2
 8002814:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800281e:	2303      	movs	r3, #3
 8002820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002824:	2307      	movs	r3, #7
 8002826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800282a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800282e:	4619      	mov	r1, r3
 8002830:	4826      	ldr	r0, [pc, #152]	; (80028cc <HAL_UART_MspInit+0x2bc>)
 8002832:	f000 fddf 	bl	80033f4 <HAL_GPIO_Init>
 8002836:	e094      	b.n	8002962 <HAL_UART_MspInit+0x352>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <HAL_UART_MspInit+0x2c4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d14c      	bne.n	80028dc <HAL_UART_MspInit+0x2cc>
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
 8002846:	2300      	movs	r3, #0
 8002848:	67fb      	str	r3, [r7, #124]	; 0x7c
 800284a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800284e:	4618      	mov	r0, r3
 8002850:	f002 faba 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_UART_MspInit+0x24e>
 800285a:	f7ff fb4b 	bl	8001ef4 <Error_Handler>
 800285e:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_UART_MspInit+0x2b0>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2360      	movs	r3, #96	; 0x60
 8002890:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028a0:	2303      	movs	r3, #3
 80028a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028a6:	2307      	movs	r3, #7
 80028a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80028ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4809      	ldr	r0, [pc, #36]	; (80028d8 <HAL_UART_MspInit+0x2c8>)
 80028b4:	f000 fd9e 	bl	80033f4 <HAL_GPIO_Init>
 80028b8:	e053      	b.n	8002962 <HAL_UART_MspInit+0x352>
 80028ba:	bf00      	nop
 80028bc:	40004c00 	.word	0x40004c00
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020800 	.word	0x40020800
 80028c8:	40005000 	.word	0x40005000
 80028cc:	40020400 	.word	0x40020400
 80028d0:	40011000 	.word	0x40011000
 80028d4:	40004400 	.word	0x40004400
 80028d8:	40020c00 	.word	0x40020c00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a22      	ldr	r2, [pc, #136]	; (800296c <HAL_UART_MspInit+0x35c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d13d      	bne.n	8002962 <HAL_UART_MspInit+0x352>
 80028e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 fa66 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_UART_MspInit+0x2f6>
 8002902:	f7ff faf7 	bl	8001ef4 <Error_Handler>
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <HAL_UART_MspInit+0x360>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_UART_MspInit+0x360>)
 800290c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
 8002912:	4b17      	ldr	r3, [pc, #92]	; (8002970 <HAL_UART_MspInit+0x360>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_UART_MspInit+0x360>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <HAL_UART_MspInit+0x360>)
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_UART_MspInit+0x360>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800293a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800293e:	2302      	movs	r3, #2
 8002940:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800294a:	2303      	movs	r3, #3
 800294c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002950:	2307      	movs	r3, #7
 8002952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002956:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <HAL_UART_MspInit+0x364>)
 800295e:	f000 fd49 	bl	80033f4 <HAL_GPIO_Init>
 8002962:	bf00      	nop
 8002964:	37d8      	adds	r7, #216	; 0xd8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40004800 	.word	0x40004800
 8002970:	40023800 	.word	0x40023800
 8002974:	40020c00 	.word	0x40020c00

08002978 <NMI_Handler>:
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
 800297c:	e7fe      	b.n	800297c <NMI_Handler+0x4>

0800297e <HardFault_Handler>:
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
 8002982:	e7fe      	b.n	8002982 <HardFault_Handler+0x4>

08002984 <MemManage_Handler>:
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
