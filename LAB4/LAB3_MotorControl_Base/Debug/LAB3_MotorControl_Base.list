
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d24  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009008  08009008  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009010  08009010  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000078  08009090  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  08009090  00020820  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001869b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c29  00000000  00000000  00038741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003b370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  0003c860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8ff  00000000  00000000  0003dc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b461  00000000  00000000  00068517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001077ec  00000000  00000000  00083978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c4  00000000  00000000  0018b1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08008f0c 	.word	0x08008f0c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08008f0c 	.word	0x08008f0c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000600:	2301      	movs	r3, #1
 8000602:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8000604:	e025      	b.n	8000652 <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <cobsEncode+0x3e>
            FinishBlock(code);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	7efa      	ldrb	r2, [r7, #27]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	2301      	movs	r3, #1
 800061e:	76fb      	strb	r3, [r7, #27]
 8000620:	e014      	b.n	800064c <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 800062e:	7efb      	ldrb	r3, [r7, #27]
 8000630:	3301      	adds	r3, #1
 8000632:	76fb      	strb	r3, [r7, #27]
 8000634:	7efb      	ldrb	r3, [r7, #27]
 8000636:	2bff      	cmp	r3, #255	; 0xff
 8000638:	d108      	bne.n	800064c <cobsEncode+0x68>
                FinishBlock(code);
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	7efa      	ldrb	r2, [r7, #27]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	2301      	movs	r3, #1
 800064a:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3d5      	bcc.n	8000606 <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	7efa      	ldrb	r2, [r7, #27]
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	2301      	movs	r3, #1
 800066a:	76fb      	strb	r3, [r7, #27]
}
 800066c:	bf00      	nop
 800066e:	3724      	adds	r7, #36	; 0x24
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01c      	beq.n	80006c6 <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3321      	adds	r3, #33	; 0x21
 8000690:	461a      	mov	r2, r3
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff ffa5 	bl	80005e4 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3302      	adds	r3, #2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	f006 fef5 	bl	80074ac <HAL_UART_Transmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e000      	b.n	80006c8 <ertc_dlog_send+0x50>
	}

	return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c59      	adds	r1, r3, #1
 80006e2:	2303      	movs	r3, #3
 80006e4:	2201      	movs	r2, #1
 80006e6:	f006 ff64 	bl	80075b2 <HAL_UART_Receive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d112      	bne.n	8000716 <ertc_dlog_update+0x46>
		switch (logger->rxbuff[0]) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b41      	cmp	r3, #65	; 0x41
 80006f6:	d002      	beq.n	80006fe <ertc_dlog_update+0x2e>
 80006f8:	2b42      	cmp	r3, #66	; 0x42
 80006fa:	d004      	beq.n	8000706 <ertc_dlog_update+0x36>
 80006fc:	e007      	b.n	800070e <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				break;
 8000704:	e008      	b.n	8000718 <ertc_dlog_update+0x48>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
				break;
 800070c:	e004      	b.n	8000718 <ertc_dlog_update+0x48>
			default:
				logger->tx_enable = false;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e000      	b.n	8000718 <ertc_dlog_update+0x48>
		}
	}
 8000716:	bf00      	nop
	return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	0000      	movs	r0, r0
 8000724:	0000      	movs	r0, r0
	...

08000728 <PI_controller>:

float Kp = 0.34;
float KI = 0.2;


float PI_controller (float error){
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	ed87 0a01 	vstr	s0, [r7, #4]
	float P = Kp * error;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <PI_controller+0x90>)
 8000734:	edd3 7a00 	vldr	s15, [r3]
 8000738:	ed97 7a01 	vldr	s14, [r7, #4]
 800073c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000740:	edc7 7a03 	vstr	s15, [r7, #12]
	static float I = 0;
	I = I + error * KI * TS;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <PI_controller+0x94>)
 8000746:	edd3 7a00 	vldr	s15, [r3]
 800074a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <PI_controller+0x98>)
 8000750:	ed93 7a00 	vldr	s14, [r3]
 8000754:	edd7 7a01 	vldr	s15, [r7, #4]
 8000758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800075c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000760:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80007b0 <PI_controller+0x88>
 8000764:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000768:	ee36 7b07 	vadd.f64	d7, d6, d7
 800076c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <PI_controller+0x94>)
 8000772:	edc3 7a00 	vstr	s15, [r3]
	if(I>10){
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <PI_controller+0x94>)
 8000778:	edd3 7a00 	vldr	s15, [r3]
 800077c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	dd02      	ble.n	8000790 <PI_controller+0x68>
		I=10;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <PI_controller+0x94>)
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <PI_controller+0x9c>)
 800078e:	601a      	str	r2, [r3, #0]
	}
	return P + I;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <PI_controller+0x94>)
 8000792:	ed93 7a00 	vldr	s14, [r3]
 8000796:	edd7 7a03 	vldr	s15, [r7, #12]
 800079a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800079e:	eeb0 0a67 	vmov.f32	s0, s15
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	f3af 8000 	nop.w
 80007b0:	47ae147b 	.word	0x47ae147b
 80007b4:	3f847ae1 	.word	0x3f847ae1
 80007b8:	20000000 	.word	0x20000000
 80007bc:	200007fc 	.word	0x200007fc
 80007c0:	20000004 	.word	0x20000004
 80007c4:	41200000 	.word	0x41200000

080007c8 <findBinary>:

void findBinary(int decimal, int * binary){
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	//int base = 1;
	int i =0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
   while(decimal > 0){
 80007d6:	e015      	b.n	8000804 <findBinary+0x3c>
	   int rem = decimal % 2;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	bfb8      	it	lt
 80007e2:	425b      	neglt	r3, r3
 80007e4:	60bb      	str	r3, [r7, #8]
	   binary[i] = rem;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	4413      	add	r3, r2
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	601a      	str	r2, [r3, #0]
	   i++;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
	   decimal = decimal / 2;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da00      	bge.n	8000800 <findBinary+0x38>
 80007fe:	3301      	adds	r3, #1
 8000800:	105b      	asrs	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
   while(decimal > 0){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	dce6      	bgt.n	80007d8 <findBinary+0x10>
	   //base = base * 10;
   }
   //printf("Binary: %d\n\r", binary);
//   return binary;
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <calc_error_line>:

int calc_error_line (int binary[]){
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	; 0x38
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	float distance_from_middle[8]={0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2220      	movs	r2, #32
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f007 fbd9 	bl	8007fe0 <memset>
	float sum_dist = 0;
 800082e:	f04f 0300 	mov.w	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
	int sum_binary = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
	for(int n=0;n<8;n++){
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800083c:	e038      	b.n	80008b0 <calc_error_line+0x98>
		sum_binary += binary[n];
 800083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800084a:	4413      	add	r3, r2
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
		distance_from_middle[n]=((7.0/2.0)-n)*4;
 800084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000850:	ee07 3a90 	vmov	s15, r3
 8000854:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000858:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800085c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000860:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000864:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000868:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800086c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	3338      	adds	r3, #56	; 0x38
 8000872:	443b      	add	r3, r7
 8000874:	3b30      	subs	r3, #48	; 0x30
 8000876:	edc3 7a00 	vstr	s15, [r3]
		sum_dist += binary[n]*distance_from_middle[n];
 800087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	3338      	adds	r3, #56	; 0x38
 8000892:	443b      	add	r3, r7
 8000894:	3b30      	subs	r3, #48	; 0x30
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800089e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80008a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int n=0;n<8;n++){
 80008aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ac:	3301      	adds	r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b2:	2b07      	cmp	r3, #7
 80008b4:	ddc3      	ble.n	800083e <calc_error_line+0x26>
	}
	float line_error = sum_dist / sum_binary;
 80008b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008c0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80008c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return line_error;
 80008cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d4:	ee17 3a90 	vmov	r3, s15
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3738      	adds	r7, #56	; 0x38
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <calc_yaw_error>:

float calc_yaw_error(float line_error){
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	ed87 0a01 	vstr	s0, [r7, #4]
	float omega_L = current_rpm_2 *2*3.14/60;
	float linear_speed_R = 34*omega_R;
	float linear_speed_L = 34*omega_L;
	float robot_rotation_speed = (linear_speed_R-linear_speed_L)/165;
	static float last_time = 0;*/
	float phi_err = line_error/85;
 80008ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80008ee:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000920 <calc_yaw_error+0x40>
 80008f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f6:	edc7 7a03 	vstr	s15, [r7, #12]
	float yaw_err = phi_err * (165/2);
 80008fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80008fe:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000924 <calc_yaw_error+0x44>
 8000902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000906:	edc7 7a02 	vstr	s15, [r7, #8]
	return yaw_err;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	ee07 3a90 	vmov	s15, r3
}
 8000910:	eeb0 0a67 	vmov.f32	s0, s15
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	42aa0000 	.word	0x42aa0000
 8000924:	42a40000 	.word	0x42a40000

08000928 <HAL_TIM_PeriodElapsedCallback>:
uint8_t data;
HAL_StatusTypeDef status;
int32_t duty_1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b098      	sub	sp, #96	; 0x60
 800092c:	af04      	add	r7, sp, #16
 800092e:	6078      	str	r0, [r7, #4]
	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4aa2      	ldr	r2, [pc, #648]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000936:	4293      	cmp	r3, r2
 8000938:	f040 81b9 	bne.w	8000cae <HAL_TIM_PeriodElapsedCallback+0x386>
	{
		/*
	    * 1. read the counter value from the encoder
	    * 2. compute the difference between the current value and the old value
	    */
		status = HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &lineData, 1, I2C_TIMEOUT);
 800093c:	23c8      	movs	r3, #200	; 0xc8
 800093e:	9302      	str	r3, [sp, #8]
 8000940:	2301      	movs	r3, #1
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	4b9f      	ldr	r3, [pc, #636]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	2210      	movs	r2, #16
 800094c:	217c      	movs	r1, #124	; 0x7c
 800094e:	489e      	ldr	r0, [pc, #632]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000950:	f003 f8a6 	bl	8003aa0 <HAL_I2C_Mem_Read>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b9c      	ldr	r3, [pc, #624]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800095a:	701a      	strb	r2, [r3, #0]
		  int binary[8] = {0};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2220      	movs	r2, #32
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f007 fb3b 	bl	8007fe0 <memset>
		  findBinary(lineData, binary);
 800096a:	4b96      	ldr	r3, [pc, #600]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	4610      	mov	r0, r2
 8000978:	f7ff ff26 	bl	80007c8 <findBinary>
		  float line_error = calc_error_line(binary);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff49 	bl	8000818 <calc_error_line>
 8000986:	ee07 0a90 	vmov	s15, r0
 800098a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		  //phi_err = line_error/85;
		  float yaw_err = calc_yaw_error(line_error);
 8000992:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8000996:	f7ff ffa3 	bl	80008e0 <calc_yaw_error>
 800099a:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c


		 // reference_rpm_L = 170 - yaw_err*22;
		  //reference_rpm_R = 170 + yaw_err*22;
		  reference_rpm_L = 100 - yaw_err*12;
 800099e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80009a2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80009a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009aa:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 80009ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b2:	4b88      	ldr	r3, [pc, #544]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80009b4:	edc3 7a00 	vstr	s15, [r3]
		  reference_rpm_R = 100 + yaw_err*12;
 80009b8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80009bc:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80009c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 80009c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009cc:	4b82      	ldr	r3, [pc, #520]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009ce:	edc3 7a00 	vstr	s15, [r3]

		uint32_t TIM3_CurrentCount , TIM4_CurrentCount;
		int32_t TIM3_DiffCount , TIM4_DiffCount;
		static uint32_t TIM3_PreviousCount = 0, TIM4_PreviousCount = 0;

		TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 80009d2:	4b82      	ldr	r3, [pc, #520]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
		TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 80009da:	4b81      	ldr	r3, [pc, #516]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34


		/*  evaluate increment of TIM3 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 80009e2:	4b7e      	ldr	r3, [pc, #504]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	2b10      	cmp	r3, #16
 80009ee:	d112      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0xee>
		{
			/* check for counter underflow */
			if (TIM3_CurrentCount <= TIM3_PreviousCount)
 80009f0:	4b7c      	ldr	r3, [pc, #496]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d805      	bhi.n	8000a06 <HAL_TIM_PeriodElapsedCallback+0xde>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80009fa:	4b7a      	ldr	r3, [pc, #488]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a04:	e019      	b.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x112>
			else
				TIM3_DiffCount = -((TIM3_ARR_VALUE+1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 8000a06:	4b77      	ldr	r3, [pc, #476]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a14:	e011      	b.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x112>
		}
		else
		{
		/* check for counter overflow */
			if (TIM3_CurrentCount >= TIM3_PreviousCount)
 8000a16:	4b73      	ldr	r3, [pc, #460]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d305      	bcc.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x104>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000a20:	4b70      	ldr	r3, [pc, #448]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a2a:	e006      	b.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x112>
			else
				TIM3_DiffCount = ((TIM3_ARR_VALUE+1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 8000a2c:	4b6d      	ldr	r3, [pc, #436]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

		TIM3_PreviousCount = TIM3_CurrentCount;
 8000a3a:	4a6a      	ldr	r2, [pc, #424]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a3e:	6013      	str	r3, [r2, #0]
	    // 3. compute the motor speed, in [rpm] for example

		float current_rpm_1 = ((float)TIM3_DiffCount/(2.0*1920.0))*(60.0/TS );
 8000a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a4a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a4e:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8000ba8 <HAL_TIM_PeriodElapsedCallback+0x280>
 8000a52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a56:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000bb0 <HAL_TIM_PeriodElapsedCallback+0x288>
 8000a5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    tracking_error_1 = reference_rpm_R - current_rpm_1;
 8000a66:	4b5c      	ldr	r3, [pc, #368]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a68:	ed93 7a00 	vldr	s14, [r3]
 8000a6c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a74:	4b5c      	ldr	r3, [pc, #368]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a76:	edc3 7a00 	vstr	s15, [r3]




		/*  evaluate increment of TIM4 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8000a7a:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	2b10      	cmp	r3, #16
 8000a86:	d112      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x186>
		{
			/* check for counter underflow */
			if (TIM4_CurrentCount <= TIM4_PreviousCount)
 8000a88:	4b58      	ldr	r3, [pc, #352]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d805      	bhi.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x176>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000a92:	4b56      	ldr	r3, [pc, #344]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a9c:	e019      	b.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			else
				TIM4_DiffCount = -((TIM4_ARR_VALUE+1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 8000a9e:	4b53      	ldr	r3, [pc, #332]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8000aac:	e011      	b.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		}
		else
		{
		/* check for counter overflow */
			if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8000aae:	4b4f      	ldr	r3, [pc, #316]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d305      	bcc.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0x19c>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000ab8:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ac2:	e006      	b.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			else
				TIM4_DiffCount = ((TIM4_ARR_VALUE+1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 8000ac4:	4b49      	ldr	r3, [pc, #292]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8000ad0:	64bb      	str	r3, [r7, #72]	; 0x48
		}

		TIM4_PreviousCount = TIM4_CurrentCount;
 8000ad2:	4a46      	ldr	r2, [pc, #280]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad6:	6013      	str	r3, [r2, #0]

		float current_rpm_2 = ((float)TIM4_DiffCount/(2.0*1920.0))*(60.0/TS );
 8000ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ae6:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8000ba8 <HAL_TIM_PeriodElapsedCallback+0x280>
 8000aea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000aee:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8000bb0 <HAL_TIM_PeriodElapsedCallback+0x288>
 8000af2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000af6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000afa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	    tracking_error_2 = reference_rpm_L - current_rpm_2;
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b00:	ed93 7a00 	vldr	s14, [r3]
 8000b04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0c:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000b0e:	edc3 7a00 	vstr	s15, [r3]
	    /* 4. compute the tracking error
	    * 5. compute the proportional term
	    * 6. compute the integral term (simplest way is to use forward Euler method) * u_int=u_int+Ki*TS*err
	    * 7. calculate the PI signal and set the pwm of the motor properly
	    */
	     controller_return_1 = PI_controller(tracking_error_1);
 8000b12:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	eeb0 0a67 	vmov.f32	s0, s15
 8000b1c:	f7ff fe04 	bl	8000728 <PI_controller>
 8000b20:	eef0 7a40 	vmov.f32	s15, s0
 8000b24:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b26:	edc3 7a00 	vstr	s15, [r3]
	     controller_return_2 = PI_controller(tracking_error_2);
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000b2c:	edd3 7a00 	vldr	s15, [r3]
 8000b30:	eeb0 0a67 	vmov.f32	s0, s15
 8000b34:	f7ff fdf8 	bl	8000728 <PI_controller>
 8000b38:	eef0 7a40 	vmov.f32	s15, s0
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b3e:	edc3 7a00 	vstr	s15, [r3]

	     motor_V_1 = controller_return_1;
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a2d      	ldr	r2, [pc, #180]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b48:	6013      	str	r3, [r2, #0]
	     motor_V_2 = controller_return_2;
 8000b4a:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a2c      	ldr	r2, [pc, #176]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b50:	6013      	str	r3, [r2, #0]
	    	motor_V_2 = 5;
	    if(motor_V_2 < -5)
	    	motor_V_2 = -5;
*/

	    duty_1 = V2DUTY*motor_V_1;
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000bb8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000b60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b68:	ee17 2a90 	vmov	r2, s15
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b6e:	601a      	str	r2, [r3, #0]
	    if (duty_1 > 399)
 8000b70:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b78:	db03      	blt.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x25a>
	    	duty_1 = 399;
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b7c:	f240 128f 	movw	r2, #399	; 0x18f
 8000b80:	601a      	str	r2, [r3, #0]


	    // command a motor
		/* calculate duty properly */
		if (duty_1 >= 0) {
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db40      	blt.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x2e4>
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty_1);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);


			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f240 128f 	movw	r2, #399	; 0x18f
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)(TIM8_ARR_VALUE - duty_1));
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	f240 138f 	movw	r3, #399	; 0x18f
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000ba0:	6812      	ldr	r2, [r2, #0]
 8000ba2:	6393      	str	r3, [r2, #56]	; 0x38
 8000ba4:	e03c      	b.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8000ba6:	bf00      	nop
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	40ae0000 	.word	0x40ae0000
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	40b77000 	.word	0x40b77000
 8000bb8:	00000000 	.word	0x00000000
 8000bbc:	40490000 	.word	0x40490000
 8000bc0:	40001000 	.word	0x40001000
 8000bc4:	200007f4 	.word	0x200007f4
 8000bc8:	200000dc 	.word	0x200000dc
 8000bcc:	200007f6 	.word	0x200007f6
 8000bd0:	42c80000 	.word	0x42c80000
 8000bd4:	200007d4 	.word	0x200007d4
 8000bd8:	200007d8 	.word	0x200007d8
 8000bdc:	20000280 	.word	0x20000280
 8000be0:	200002cc 	.word	0x200002cc
 8000be4:	20000800 	.word	0x20000800
 8000be8:	200007c4 	.word	0x200007c4
 8000bec:	20000804 	.word	0x20000804
 8000bf0:	200007d0 	.word	0x200007d0
 8000bf4:	200007bc 	.word	0x200007bc
 8000bf8:	200007c8 	.word	0x200007c8
 8000bfc:	200007c0 	.word	0x200007c0
 8000c00:	200007cc 	.word	0x200007cc
 8000c04:	200007f8 	.word	0x200007f8
 8000c08:	200003b0 	.word	0x200003b0

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2200      	movs	r2, #0
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty_1);
 8000c14:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	425a      	negs	r2, r3
 8000c1a:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38





	    int32_t duty_2 = V2DUTY*motor_V_2;
 8000c20:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000c22:	edd3 7a00 	vldr	s15, [r3]
 8000c26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c2a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000cb8 <HAL_TIM_PeriodElapsedCallback+0x390>
 8000c2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c36:	ee17 3a90 	vmov	r3, s15
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
	    if (duty_2 > 399)
 8000c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c42:	db02      	blt.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x322>
	   	   	 duty_2 = 399;
 8000c44:	f240 138f 	movw	r3, #399	; 0x18f
 8000c48:	647b      	str	r3, [r7, #68]	; 0x44
	    // command a motor
		/* calculate duty properly */
		if (duty_2 >= 0) {
 8000c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0c      	blt.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x342>
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)duty_2);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);


			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f240 128f 	movw	r2, #399	; 0x18f
 8000c58:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)(TIM8_ARR_VALUE - duty_2));
 8000c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c5c:	f240 138f 	movw	r3, #399	; 0x18f
 8000c60:	1a9b      	subs	r3, r3, r2
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	e008      	b.n	8000c7c <HAL_TIM_PeriodElapsedCallback+0x354>

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)-duty_2);
 8000c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c74:	425a      	negs	r2, r3
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	641a      	str	r2, [r3, #64]	; 0x40
		}
     	/*	Prepare data packet */
		data_log.w1 = reference_rpm_L;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000c82:	6013      	str	r3, [r2, #0]
		data_log.w2 = current_rpm_1;
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c88:	6053      	str	r3, [r2, #4]

		data_log.u1 = line_error;
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c8e:	6093      	str	r3, [r2, #8]
		data_log.u2 = yaw_err;
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c94:	60d3      	str	r3, [r2, #12]

		data_log.x1 = reference_rpm_R;
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000c9c:	6113      	str	r3, [r2, #16]
		data_log.x2 = current_rpm_2;
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca2:	6153      	str	r3, [r2, #20]

		ertc_dlog_send(&logger, &data_log, sizeof(data_log));
 8000ca4:	2218      	movs	r2, #24
 8000ca6:	490a      	ldr	r1, [pc, #40]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000caa:	f7ff fce5 	bl	8000678 <ertc_dlog_send>
	}
}
 8000cae:	bf00      	nop
 8000cb0:	3750      	adds	r7, #80	; 0x50
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	00000000 	.word	0x00000000
 8000cbc:	40490000 	.word	0x40490000
 8000cc0:	200003b0 	.word	0x200003b0
 8000cc4:	200007f8 	.word	0x200007f8
 8000cc8:	200007cc 	.word	0x200007cc
 8000ccc:	200007d4 	.word	0x200007d4
 8000cd0:	200007dc 	.word	0x200007dc
 8000cd4:	200007d8 	.word	0x200007d8
 8000cd8:	200006f0 	.word	0x200006f0

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce2:	f001 ff4c 	bl	8002b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce6:	f000 f965 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cea:	f000 ffbd 	bl	8001c68 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cee:	f000 ff8b 	bl	8001c08 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000cf2:	f000 f9d1 	bl	8001098 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cf6:	f000 fa21 	bl	800113c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cfa:	f000 fa5f 	bl	80011bc <MX_I2C2_Init>
  MX_SPI1_Init();
 8000cfe:	f000 fa9d 	bl	800123c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000d02:	f000 fad9 	bl	80012b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d06:	f000 fba7 	bl	8001458 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d0a:	f000 fc3f 	bl	800158c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d0e:	f000 fc93 	bl	8001638 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d12:	f000 fce7 	bl	80016e4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000d16:	f000 fd95 	bl	8001844 <MX_TIM8_Init>
  MX_UART4_Init();
 8000d1a:	f000 feb5 	bl	8001a88 <MX_UART4_Init>
  MX_UART5_Init();
 8000d1e:	f000 fee3 	bl	8001ae8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000d22:	f000 ff11 	bl	8001b48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d26:	f000 ff3f 	bl	8001ba8 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000d2a:	f000 fe5d 	bl	80019e8 <MX_TIM9_Init>
  MX_TIM6_Init();
 8000d2e:	f000 fd51 	bl	80017d4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  logger.uart_handle = huart3; // for serial
  logger.uart_handle = huart2; // for wifi
 8000d32:	4b92      	ldr	r3, [pc, #584]	; (8000f7c <main+0x2a0>)
 8000d34:	4a92      	ldr	r2, [pc, #584]	; (8000f80 <main+0x2a4>)
 8000d36:	3344      	adds	r3, #68	; 0x44
 8000d38:	4611      	mov	r1, r2
 8000d3a:	2288      	movs	r2, #136	; 0x88
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f007 f941 	bl	8007fc4 <memcpy>

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2110      	movs	r1, #16
 8000d46:	488f      	ldr	r0, [pc, #572]	; (8000f84 <main+0x2a8>)
 8000d48:	f002 fcec 	bl	8003724 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f001 ff72 	bl	8002c38 <HAL_Delay>

  data = 0x12;
 8000d54:	4b8c      	ldr	r3, [pc, #560]	; (8000f88 <main+0x2ac>)
 8000d56:	2212      	movs	r2, #18
 8000d58:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000d5a:	23c8      	movs	r3, #200	; 0xc8
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	4b89      	ldr	r3, [pc, #548]	; (8000f88 <main+0x2ac>)
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	227d      	movs	r2, #125	; 0x7d
 8000d6a:	217c      	movs	r1, #124	; 0x7c
 8000d6c:	4887      	ldr	r0, [pc, #540]	; (8000f8c <main+0x2b0>)
 8000d6e:	f002 fd83 	bl	8003878 <HAL_I2C_Mem_Write>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b86      	ldr	r3, [pc, #536]	; (8000f90 <main+0x2b4>)
 8000d78:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000d7a:	4b85      	ldr	r3, [pc, #532]	; (8000f90 <main+0x2b4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <main+0xb2>
      printf("I2C communication error (%X).\n", status);
 8000d82:	4b83      	ldr	r3, [pc, #524]	; (8000f90 <main+0x2b4>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4619      	mov	r1, r3
 8000d88:	4882      	ldr	r0, [pc, #520]	; (8000f94 <main+0x2b8>)
 8000d8a:	f007 f931 	bl	8007ff0 <iprintf>

    data = 0x34;
 8000d8e:	4b7e      	ldr	r3, [pc, #504]	; (8000f88 <main+0x2ac>)
 8000d90:	2234      	movs	r2, #52	; 0x34
 8000d92:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000d94:	23c8      	movs	r3, #200	; 0xc8
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	4b7a      	ldr	r3, [pc, #488]	; (8000f88 <main+0x2ac>)
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	227d      	movs	r2, #125	; 0x7d
 8000da4:	217c      	movs	r1, #124	; 0x7c
 8000da6:	4879      	ldr	r0, [pc, #484]	; (8000f8c <main+0x2b0>)
 8000da8:	f002 fd66 	bl	8003878 <HAL_I2C_Mem_Write>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b77      	ldr	r3, [pc, #476]	; (8000f90 <main+0x2b4>)
 8000db2:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000db4:	4b76      	ldr	r3, [pc, #472]	; (8000f90 <main+0x2b4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <main+0xec>
      printf("I2C communication error (%X).\n", status);
 8000dbc:	4b74      	ldr	r3, [pc, #464]	; (8000f90 <main+0x2b4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4874      	ldr	r0, [pc, #464]	; (8000f94 <main+0x2b8>)
 8000dc4:	f007 f914 	bl	8007ff0 <iprintf>

    HAL_Delay(100);
 8000dc8:	2064      	movs	r0, #100	; 0x64
 8000dca:	f001 ff35 	bl	8002c38 <HAL_Delay>

    /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000dce:	4b6e      	ldr	r3, [pc, #440]	; (8000f88 <main+0x2ac>)
 8000dd0:	22ff      	movs	r2, #255	; 0xff
 8000dd2:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000dd4:	23c8      	movs	r3, #200	; 0xc8
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	4b6a      	ldr	r3, [pc, #424]	; (8000f88 <main+0x2ac>)
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	220f      	movs	r2, #15
 8000de4:	217c      	movs	r1, #124	; 0x7c
 8000de6:	4869      	ldr	r0, [pc, #420]	; (8000f8c <main+0x2b0>)
 8000de8:	f002 fd46 	bl	8003878 <HAL_I2C_Mem_Write>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <main+0x2b4>)
 8000df2:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000df4:	4b66      	ldr	r3, [pc, #408]	; (8000f90 <main+0x2b4>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d005      	beq.n	8000e08 <main+0x12c>
      printf("I2C communication error (%X).\n", status);
 8000dfc:	4b64      	ldr	r3, [pc, #400]	; (8000f90 <main+0x2b4>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4864      	ldr	r0, [pc, #400]	; (8000f94 <main+0x2b8>)
 8000e04:	f007 f8f4 	bl	8007ff0 <iprintf>

    /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000e08:	4b5f      	ldr	r3, [pc, #380]	; (8000f88 <main+0x2ac>)
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000e0e:	23c8      	movs	r3, #200	; 0xc8
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	2301      	movs	r3, #1
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	4b5c      	ldr	r3, [pc, #368]	; (8000f88 <main+0x2ac>)
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	220e      	movs	r2, #14
 8000e1e:	217c      	movs	r1, #124	; 0x7c
 8000e20:	485a      	ldr	r0, [pc, #360]	; (8000f8c <main+0x2b0>)
 8000e22:	f002 fd29 	bl	8003878 <HAL_I2C_Mem_Write>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b59      	ldr	r3, [pc, #356]	; (8000f90 <main+0x2b4>)
 8000e2c:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000e2e:	4b58      	ldr	r3, [pc, #352]	; (8000f90 <main+0x2b4>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <main+0x166>
      printf("I2C communication error (%X).\n", status);
 8000e36:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <main+0x2b4>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4855      	ldr	r0, [pc, #340]	; (8000f94 <main+0x2b8>)
 8000e3e:	f007 f8d7 	bl	8007ff0 <iprintf>

    /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
    data = 0x00;
 8000e42:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <main+0x2ac>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000e48:	23c8      	movs	r3, #200	; 0xc8
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <main+0x2ac>)
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	2213      	movs	r2, #19
 8000e58:	217c      	movs	r1, #124	; 0x7c
 8000e5a:	484c      	ldr	r0, [pc, #304]	; (8000f8c <main+0x2b0>)
 8000e5c:	f002 fd0c 	bl	8003878 <HAL_I2C_Mem_Write>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <main+0x2b4>)
 8000e66:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000e68:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <main+0x2b4>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <main+0x1a0>
      printf("I2C communication error (%X).\n", status);
 8000e70:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <main+0x2b4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	4847      	ldr	r0, [pc, #284]	; (8000f94 <main+0x2b8>)
 8000e78:	f007 f8ba 	bl	8007ff0 <iprintf>

    /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000e7c:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <main+0x2ac>)
 8000e7e:	22aa      	movs	r2, #170	; 0xaa
 8000e80:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000e82:	23c8      	movs	r3, #200	; 0xc8
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2301      	movs	r3, #1
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <main+0x2ac>)
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2216      	movs	r2, #22
 8000e92:	217c      	movs	r1, #124	; 0x7c
 8000e94:	483d      	ldr	r0, [pc, #244]	; (8000f8c <main+0x2b0>)
 8000e96:	f002 fcef 	bl	8003878 <HAL_I2C_Mem_Write>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <main+0x2b4>)
 8000ea0:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <main+0x2b4>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d005      	beq.n	8000eb6 <main+0x1da>
      printf("I2C communication error (%X).\n", status);
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <main+0x2b4>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4838      	ldr	r0, [pc, #224]	; (8000f94 <main+0x2b8>)
 8000eb2:	f007 f89d 	bl	8007ff0 <iprintf>

    /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <main+0x2ac>)
 8000eb8:	22aa      	movs	r2, #170	; 0xaa
 8000eba:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000ebc:	23c8      	movs	r3, #200	; 0xc8
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <main+0x2ac>)
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	2217      	movs	r2, #23
 8000ecc:	217c      	movs	r1, #124	; 0x7c
 8000ece:	482f      	ldr	r0, [pc, #188]	; (8000f8c <main+0x2b0>)
 8000ed0:	f002 fcd2 	bl	8003878 <HAL_I2C_Mem_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <main+0x2b4>)
 8000eda:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <main+0x2b4>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d005      	beq.n	8000ef0 <main+0x214>
      printf("I2C communication error (%X).\n", status);
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <main+0x2b4>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	482a      	ldr	r0, [pc, #168]	; (8000f94 <main+0x2b8>)
 8000eec:	f007 f880 	bl	8007ff0 <iprintf>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ef0:	213c      	movs	r1, #60	; 0x3c
 8000ef2:	4829      	ldr	r0, [pc, #164]	; (8000f98 <main+0x2bc>)
 8000ef4:	f004 ffb0 	bl	8005e58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000ef8:	213c      	movs	r1, #60	; 0x3c
 8000efa:	4828      	ldr	r0, [pc, #160]	; (8000f9c <main+0x2c0>)
 8000efc:	f004 ffac 	bl	8005e58 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f00:	2100      	movs	r1, #0
 8000f02:	4827      	ldr	r0, [pc, #156]	; (8000fa0 <main+0x2c4>)
 8000f04:	f004 fda6 	bl	8005a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <main+0x2c4>)
 8000f0c:	f004 fda2 	bl	8005a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f10:	2108      	movs	r1, #8
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <main+0x2c4>)
 8000f14:	f004 fd9e 	bl	8005a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f18:	210c      	movs	r1, #12
 8000f1a:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <main+0x2c4>)
 8000f1c:	f004 fd9a 	bl	8005a54 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <main+0x2c8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <main+0x2c8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <main+0x2c8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <main+0x2c8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f40:	2100      	movs	r1, #0
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <main+0x2c8>)
 8000f44:	f004 fd86 	bl	8005a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f48:	2104      	movs	r1, #4
 8000f4a:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <main+0x2c8>)
 8000f4c:	f004 fd82 	bl	8005a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000f50:	2108      	movs	r1, #8
 8000f52:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <main+0x2c8>)
 8000f54:	f004 fd7e 	bl	8005a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000f58:	210c      	movs	r1, #12
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <main+0x2c8>)
 8000f5c:	f004 fd7a 	bl	8005a54 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <main+0x2cc>)
 8000f62:	f004 fc47 	bl	80057f4 <HAL_TIM_Base_Start_IT>


	  //reference_rpm_L = 150 - yaw_err*18;
	  //reference_rpm_R = 150 + yaw_err*18; FASTEST

	  printf("Decimal is: %d \n\r", lineData);
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <main+0x2d0>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <main+0x2d4>)
 8000f6e:	f007 f83f 	bl	8007ff0 <iprintf>
	  //HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 8000f72:	4802      	ldr	r0, [pc, #8]	; (8000f7c <main+0x2a0>)
 8000f74:	f7ff fbac 	bl	80006d0 <ertc_dlog_update>
	  printf("Decimal is: %d \n\r", lineData);
 8000f78:	e7f5      	b.n	8000f66 <main+0x28a>
 8000f7a:	bf00      	nop
 8000f7c:	200006f0 	.word	0x200006f0
 8000f80:	200005e0 	.word	0x200005e0
 8000f84:	40021000 	.word	0x40021000
 8000f88:	200007f5 	.word	0x200007f5
 8000f8c:	200000dc 	.word	0x200000dc
 8000f90:	200007f6 	.word	0x200007f6
 8000f94:	08008f24 	.word	0x08008f24
 8000f98:	20000280 	.word	0x20000280
 8000f9c:	200002cc 	.word	0x200002cc
 8000fa0:	200001e8 	.word	0x200001e8
 8000fa4:	200003b0 	.word	0x200003b0
 8000fa8:	20000364 	.word	0x20000364
 8000fac:	200007f4 	.word	0x200007f4
 8000fb0:	08008f44 	.word	0x08008f44

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2234      	movs	r2, #52	; 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f007 f80c 	bl	8007fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fd8:	f003 f9ae 	bl	8004338 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <SystemClock_Config+0xdc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	; (8001090 <SystemClock_Config+0xdc>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <SystemClock_Config+0xdc>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <SystemClock_Config+0xe0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ffc:	4a25      	ldr	r2, [pc, #148]	; (8001094 <SystemClock_Config+0xe0>)
 8000ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <SystemClock_Config+0xe0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001014:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001018:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001024:	2304      	movs	r3, #4
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001028:	2360      	movs	r3, #96	; 0x60
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102c:	2302      	movs	r3, #2
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001030:	2304      	movs	r3, #4
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4618      	mov	r0, r3
 800103e:	f003 f9db 	bl	80043f8 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001048:	f000 ff40 	bl	8001ecc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800104c:	f003 f984 	bl	8004358 <HAL_PWREx_EnableOverDrive>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001056:	f000 ff39 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2302      	movs	r3, #2
 8001060:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	2103      	movs	r1, #3
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fc6c 	bl	8004954 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001082:	f000 ff23 	bl	8001ecc <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	; 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <MX_ADC1_Init+0x9c>)
 80010ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_ADC1_Init+0x98>)
 80010b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_ADC1_Init+0x98>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_ADC1_Init+0xa0>)
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_ADC1_Init+0x98>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_ADC1_Init+0x98>)
 80010fa:	f001 fdc1 	bl	8002c80 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001104:	f000 fee2 	bl	8001ecc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001108:	2303      	movs	r3, #3
 800110a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110c:	2301      	movs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0x98>)
 800111a:	f001 fdf5 	bl	8002d08 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001124:	f000 fed2 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000094 	.word	0x20000094
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <MX_I2C1_Init+0x78>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <MX_I2C1_Init+0x7c>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001154:	2201      	movs	r2, #1
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001178:	f002 faee 	bl	8003758 <HAL_I2C_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001182:	f000 fea3 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x74>)
 800118a:	f003 f83d 	bl	8004208 <HAL_I2CEx_ConfigAnalogFilter>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001194:	f000 fe9a 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001198:	2100      	movs	r1, #0
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_I2C1_Init+0x74>)
 800119c:	f003 f87f 	bl	800429e <HAL_I2CEx_ConfigDigitalFilter>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 fe91 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000dc 	.word	0x200000dc
 80011b4:	40005400 	.word	0x40005400
 80011b8:	20303e5d 	.word	0x20303e5d

080011bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C2_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_I2C2_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_I2C2_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <MX_I2C2_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C2_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_I2C2_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C2_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_I2C2_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C2_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C2_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C2_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <MX_I2C2_Init+0x74>)
 80011f8:	f002 faae 	bl	8003758 <HAL_I2C_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 fe63 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	2100      	movs	r1, #0
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_I2C2_Init+0x74>)
 800120a:	f002 fffd 	bl	8004208 <HAL_I2CEx_ConfigAnalogFilter>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 fe5a 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_I2C2_Init+0x74>)
 800121c:	f003 f83f 	bl	800429e <HAL_I2CEx_ConfigDigitalFilter>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 fe51 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000130 	.word	0x20000130
 8001234:	40005800 	.word	0x40005800
 8001238:	20303e5d 	.word	0x20303e5d

0800123c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <MX_SPI1_Init+0x78>)
 8001244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001248:	f44f 7282 	mov.w	r2, #260	; 0x104
 800124c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001256:	f44f 7240 	mov.w	r2, #768	; 0x300
 800125a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_SPI1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_SPI1_Init+0x74>)
 800126a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_SPI1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_SPI1_Init+0x74>)
 800128a:	2207      	movs	r2, #7
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_SPI1_Init+0x74>)
 8001296:	2208      	movs	r2, #8
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_SPI1_Init+0x74>)
 800129c:	f004 f9a8 	bl	80055f0 <HAL_SPI_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f000 fe11 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000184 	.word	0x20000184
 80012b4:	40013000 	.word	0x40013000

080012b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b09a      	sub	sp, #104	; 0x68
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	222c      	movs	r2, #44	; 0x2c
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 fe74 	bl	8007fe0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f8:	4b55      	ldr	r3, [pc, #340]	; (8001450 <MX_TIM1_Init+0x198>)
 80012fa:	4a56      	ldr	r2, [pc, #344]	; (8001454 <MX_TIM1_Init+0x19c>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012fe:	4b54      	ldr	r3, [pc, #336]	; (8001450 <MX_TIM1_Init+0x198>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b52      	ldr	r3, [pc, #328]	; (8001450 <MX_TIM1_Init+0x198>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800130a:	4b51      	ldr	r3, [pc, #324]	; (8001450 <MX_TIM1_Init+0x198>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <MX_TIM1_Init+0x198>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001316:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <MX_TIM1_Init+0x198>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <MX_TIM1_Init+0x198>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001322:	484b      	ldr	r0, [pc, #300]	; (8001450 <MX_TIM1_Init+0x198>)
 8001324:	f004 fa0f 	bl	8005746 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800132e:	f000 fdcd 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800133c:	4619      	mov	r1, r3
 800133e:	4844      	ldr	r0, [pc, #272]	; (8001450 <MX_TIM1_Init+0x198>)
 8001340:	f005 f962 	bl	8006608 <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800134a:	f000 fdbf 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800134e:	4840      	ldr	r0, [pc, #256]	; (8001450 <MX_TIM1_Init+0x198>)
 8001350:	f004 fac8 	bl	80058e4 <HAL_TIM_OC_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800135a:	f000 fdb7 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800136e:	4619      	mov	r1, r3
 8001370:	4837      	ldr	r0, [pc, #220]	; (8001450 <MX_TIM1_Init+0x198>)
 8001372:	f005 ff23 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800137c:	f000 fda6 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001380:	2350      	movs	r3, #80	; 0x50
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001388:	2302      	movs	r3, #2
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800138c:	2300      	movs	r3, #0
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	482a      	ldr	r0, [pc, #168]	; (8001450 <MX_TIM1_Init+0x198>)
 80013a6:	f004 ff05 	bl	80061b4 <HAL_TIM_OC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80013b0:	f000 fd8c 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b8:	2204      	movs	r2, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4824      	ldr	r0, [pc, #144]	; (8001450 <MX_TIM1_Init+0x198>)
 80013be:	f004 fef9 	bl	80061b4 <HAL_TIM_OC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80013c8:	f000 fd80 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013d0:	2208      	movs	r2, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <MX_TIM1_Init+0x198>)
 80013d6:	f004 feed 	bl	80061b4 <HAL_TIM_OC_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80013e0:	f000 fd74 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e8:	220c      	movs	r2, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4818      	ldr	r0, [pc, #96]	; (8001450 <MX_TIM1_Init+0x198>)
 80013ee:	f004 fee1 	bl	80061b4 <HAL_TIM_OC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80013f8:	f000 fd68 	bl	8001ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800141e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM1_Init+0x198>)
 8001432:	f005 ff51 	bl	80072d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800143c:	f000 fd46 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM1_Init+0x198>)
 8001442:	f001 f805 	bl	8002450 <HAL_TIM_MspPostInit>

}
 8001446:	bf00      	nop
 8001448:	3768      	adds	r7, #104	; 0x68
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001e8 	.word	0x200001e8
 8001454:	40010000 	.word	0x40010000

08001458 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b092      	sub	sp, #72	; 0x48
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]
 800148a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <MX_TIM2_Init+0x130>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a0:	4b39      	ldr	r3, [pc, #228]	; (8001588 <MX_TIM2_Init+0x130>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b38      	ldr	r3, [pc, #224]	; (8001588 <MX_TIM2_Init+0x130>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ac:	4b36      	ldr	r3, [pc, #216]	; (8001588 <MX_TIM2_Init+0x130>)
 80014ae:	f04f 32ff 	mov.w	r2, #4294967295
 80014b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b34      	ldr	r3, [pc, #208]	; (8001588 <MX_TIM2_Init+0x130>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <MX_TIM2_Init+0x130>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c0:	4831      	ldr	r0, [pc, #196]	; (8001588 <MX_TIM2_Init+0x130>)
 80014c2:	f004 f940 	bl	8005746 <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014cc:	f000 fcfe 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014da:	4619      	mov	r1, r3
 80014dc:	482a      	ldr	r0, [pc, #168]	; (8001588 <MX_TIM2_Init+0x130>)
 80014de:	f005 f893 	bl	8006608 <HAL_TIM_ConfigClockSource>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014e8:	f000 fcf0 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ec:	4826      	ldr	r0, [pc, #152]	; (8001588 <MX_TIM2_Init+0x130>)
 80014ee:	f004 fa5a 	bl	80059a6 <HAL_TIM_PWM_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80014f8:	f000 fce8 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014fc:	4822      	ldr	r0, [pc, #136]	; (8001588 <MX_TIM2_Init+0x130>)
 80014fe:	f004 fba3 	bl	8005c48 <HAL_TIM_IC_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001508:	f000 fce0 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001518:	4619      	mov	r1, r3
 800151a:	481b      	ldr	r0, [pc, #108]	; (8001588 <MX_TIM2_Init+0x130>)
 800151c:	f005 fe4e 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001526:	f000 fcd1 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152a:	2360      	movs	r3, #96	; 0x60
 800152c:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <MX_TIM2_Init+0x130>)
 8001544:	f004 ff4c 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800154e:	f000 fcbd 	bl	8001ecc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001556:	2301      	movs	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	2208      	movs	r2, #8
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM2_Init+0x130>)
 800156a:	f004 fe9d 	bl	80062a8 <HAL_TIM_IC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001574:	f000 fcaa 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM2_Init+0x130>)
 800157a:	f000 ff69 	bl	8002450 <HAL_TIM_MspPostInit>

}
 800157e:	bf00      	nop
 8001580:	3748      	adds	r7, #72	; 0x48
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000234 	.word	0x20000234

0800158c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	; 0x30
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2224      	movs	r2, #36	; 0x24
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f006 fd20 	bl	8007fe0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <MX_TIM3_Init+0xa4>)
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <MX_TIM3_Init+0xa8>)
 80015ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_TIM3_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <MX_TIM3_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_TIM3_Init+0xa4>)
 80015be:	f640 62ff 	movw	r2, #3839	; 0xeff
 80015c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_TIM3_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_TIM3_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015d0:	2303      	movs	r3, #3
 80015d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80015e0:	230f      	movs	r3, #15
 80015e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015e8:	2301      	movs	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80015f0:	230f      	movs	r3, #15
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_TIM3_Init+0xa4>)
 80015fc:	f004 fb86 	bl	8005d0c <HAL_TIM_Encoder_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001606:	f000 fc61 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <MX_TIM3_Init+0xa4>)
 8001618:	f005 fdd0 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001622:	f000 fc53 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	3730      	adds	r7, #48	; 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000280 	.word	0x20000280
 8001634:	40000400 	.word	0x40000400

08001638 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	2224      	movs	r2, #36	; 0x24
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f006 fcca 	bl	8007fe0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001656:	4b21      	ldr	r3, [pc, #132]	; (80016dc <MX_TIM4_Init+0xa4>)
 8001658:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <MX_TIM4_Init+0xa8>)
 800165a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <MX_TIM4_Init+0xa4>)
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_TIM4_Init+0xa4>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <MX_TIM4_Init+0xa4>)
 800166a:	f640 62ff 	movw	r2, #3839	; 0xeff
 800166e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <MX_TIM4_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <MX_TIM4_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800167c:	2303      	movs	r3, #3
 800167e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001684:	2301      	movs	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800168c:	230f      	movs	r3, #15
 800168e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001694:	2301      	movs	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800169c:	230f      	movs	r3, #15
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <MX_TIM4_Init+0xa4>)
 80016a8:	f004 fb30 	bl	8005d0c <HAL_TIM_Encoder_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80016b2:	f000 fc0b 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <MX_TIM4_Init+0xa4>)
 80016c4:	f005 fd7a 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80016ce:	f000 fbfd 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	; 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002cc 	.word	0x200002cc
 80016e0:	40000800 	.word	0x40000800

080016e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08e      	sub	sp, #56	; 0x38
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001716:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <MX_TIM5_Init+0xe8>)
 8001718:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <MX_TIM5_Init+0xec>)
 800171a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <MX_TIM5_Init+0xe8>)
 800171e:	2200      	movs	r2, #0
 8001720:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <MX_TIM5_Init+0xe8>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <MX_TIM5_Init+0xe8>)
 800172a:	f04f 32ff 	mov.w	r2, #4294967295
 800172e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b26      	ldr	r3, [pc, #152]	; (80017cc <MX_TIM5_Init+0xe8>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <MX_TIM5_Init+0xe8>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800173c:	4823      	ldr	r0, [pc, #140]	; (80017cc <MX_TIM5_Init+0xe8>)
 800173e:	f004 f802 	bl	8005746 <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001748:	f000 fbc0 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001756:	4619      	mov	r1, r3
 8001758:	481c      	ldr	r0, [pc, #112]	; (80017cc <MX_TIM5_Init+0xe8>)
 800175a:	f004 ff55 	bl	8006608 <HAL_TIM_ConfigClockSource>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001764:	f000 fbb2 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001768:	4818      	ldr	r0, [pc, #96]	; (80017cc <MX_TIM5_Init+0xe8>)
 800176a:	f004 f91c 	bl	80059a6 <HAL_TIM_PWM_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001774:	f000 fbaa 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4811      	ldr	r0, [pc, #68]	; (80017cc <MX_TIM5_Init+0xe8>)
 8001788:	f005 fd18 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001792:	f000 fb9b 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001796:	2360      	movs	r3, #96	; 0x60
 8001798:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a6:	463b      	mov	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <MX_TIM5_Init+0xe8>)
 80017ae:	f004 fe17 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80017b8:	f000 fb88 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017bc:	4803      	ldr	r0, [pc, #12]	; (80017cc <MX_TIM5_Init+0xe8>)
 80017be:	f000 fe47 	bl	8002450 <HAL_TIM_MspPostInit>

}
 80017c2:	bf00      	nop
 80017c4:	3738      	adds	r7, #56	; 0x38
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000318 	.word	0x20000318
 80017d0:	40000c00 	.word	0x40000c00

080017d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_TIM6_Init+0x68>)
 80017e6:	4a16      	ldr	r2, [pc, #88]	; (8001840 <MX_TIM6_Init+0x6c>)
 80017e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_TIM6_Init+0x68>)
 80017ec:	f240 32bf 	movw	r2, #959	; 0x3bf
 80017f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_TIM6_Init+0x68>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_TIM6_Init+0x68>)
 80017fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_TIM6_Init+0x68>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_TIM6_Init+0x68>)
 8001808:	f003 ff9d 	bl	8005746 <HAL_TIM_Base_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001812:	f000 fb5b 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <MX_TIM6_Init+0x68>)
 8001824:	f005 fcca 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800182e:	f000 fb4d 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000364 	.word	0x20000364
 8001840:	40001000 	.word	0x40001000

08001844 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b09a      	sub	sp, #104	; 0x68
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	222c      	movs	r2, #44	; 0x2c
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f006 fbae 	bl	8007fe0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001884:	4b56      	ldr	r3, [pc, #344]	; (80019e0 <MX_TIM8_Init+0x19c>)
 8001886:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <MX_TIM8_Init+0x1a0>)
 8001888:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 800188a:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <MX_TIM8_Init+0x19c>)
 800188c:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001890:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <MX_TIM8_Init+0x19c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001898:	4b51      	ldr	r3, [pc, #324]	; (80019e0 <MX_TIM8_Init+0x19c>)
 800189a:	f240 128f 	movw	r2, #399	; 0x18f
 800189e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b4f      	ldr	r3, [pc, #316]	; (80019e0 <MX_TIM8_Init+0x19c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018a6:	4b4e      	ldr	r3, [pc, #312]	; (80019e0 <MX_TIM8_Init+0x19c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <MX_TIM8_Init+0x19c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018b2:	484b      	ldr	r0, [pc, #300]	; (80019e0 <MX_TIM8_Init+0x19c>)
 80018b4:	f003 ff47 	bl	8005746 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80018be:	f000 fb05 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018cc:	4619      	mov	r1, r3
 80018ce:	4844      	ldr	r0, [pc, #272]	; (80019e0 <MX_TIM8_Init+0x19c>)
 80018d0:	f004 fe9a 	bl	8006608 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80018da:	f000 faf7 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018de:	4840      	ldr	r0, [pc, #256]	; (80019e0 <MX_TIM8_Init+0x19c>)
 80018e0:	f004 f861 	bl	80059a6 <HAL_TIM_PWM_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80018ea:	f000 faef 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018fe:	4619      	mov	r1, r3
 8001900:	4837      	ldr	r0, [pc, #220]	; (80019e0 <MX_TIM8_Init+0x19c>)
 8001902:	f005 fc5b 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800190c:	f000 fade 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001910:	2360      	movs	r3, #96	; 0x60
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800191c:	2300      	movs	r3, #0
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	482a      	ldr	r0, [pc, #168]	; (80019e0 <MX_TIM8_Init+0x19c>)
 8001936:	f004 fd53 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001940:	f000 fac4 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001944:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001948:	2204      	movs	r2, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4824      	ldr	r0, [pc, #144]	; (80019e0 <MX_TIM8_Init+0x19c>)
 800194e:	f004 fd47 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001958:	f000 fab8 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800195c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001960:	2208      	movs	r2, #8
 8001962:	4619      	mov	r1, r3
 8001964:	481e      	ldr	r0, [pc, #120]	; (80019e0 <MX_TIM8_Init+0x19c>)
 8001966:	f004 fd3b 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001970:	f000 faac 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001978:	220c      	movs	r2, #12
 800197a:	4619      	mov	r1, r3
 800197c:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_TIM8_Init+0x19c>)
 800197e:	f004 fd2f 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001988:	f000 faa0 	bl	8001ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM8_Init+0x19c>)
 80019c2:	f005 fc89 	bl	80072d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 80019cc:	f000 fa7e 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM8_Init+0x19c>)
 80019d2:	f000 fd3d 	bl	8002450 <HAL_TIM_MspPostInit>

}
 80019d6:	bf00      	nop
 80019d8:	3768      	adds	r7, #104	; 0x68
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200003b0 	.word	0x200003b0
 80019e4:	40010400 	.word	0x40010400

080019e8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a02:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <MX_TIM9_Init+0x9c>)
 8001a04:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a18:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001a26:	4816      	ldr	r0, [pc, #88]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a28:	f003 ffbd 	bl	80059a6 <HAL_TIM_PWM_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001a32:	f000 fa4b 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a36:	2360      	movs	r3, #96	; 0x60
 8001a38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a4e:	f004 fcc7 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001a58:	f000 fa38 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a64:	f004 fcbc 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001a6e:	f000 fa2d 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <MX_TIM9_Init+0x98>)
 8001a74:	f000 fcec 	bl	8002450 <HAL_TIM_MspPostInit>

}
 8001a78:	bf00      	nop
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200003fc 	.word	0x200003fc
 8001a84:	40014000 	.word	0x40014000

08001a88 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001a8e:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <MX_UART4_Init+0x5c>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001a94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_UART4_Init+0x58>)
 8001acc:	f005 fca0 	bl	8007410 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ad6:	f000 f9f9 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000448 	.word	0x20000448
 8001ae4:	40004c00 	.word	0x40004c00

08001ae8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_UART5_Init+0x58>)
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <MX_UART5_Init+0x5c>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_UART5_Init+0x58>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_UART5_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_UART5_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_UART5_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_UART5_Init+0x58>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_UART5_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_UART5_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_UART5_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_UART5_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_UART5_Init+0x58>)
 8001b2c:	f005 fc70 	bl	8007410 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001b36:	f000 f9c9 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200004d0 	.word	0x200004d0
 8001b44:	40005000 	.word	0x40005000

08001b48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <MX_USART1_UART_Init+0x5c>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b8c:	f005 fc40 	bl	8007410 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b96:	f000 f999 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000558 	.word	0x20000558
 8001ba4:	40011000 	.word	0x40011000

08001ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <MX_USART2_UART_Init+0x58>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bb4:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <MX_USART2_UART_Init+0x5c>)
 8001bb6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bcc:	220c      	movs	r2, #12
 8001bce:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_USART2_UART_Init+0x54>)
 8001bea:	f005 fc11 	bl	8007410 <HAL_UART_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001bf4:	f000 f96a 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200005e0 	.word	0x200005e0
 8001c00:	40004400 	.word	0x40004400
 8001c04:	000f4240 	.word	0x000f4240

08001c08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c0e:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <MX_USART3_UART_Init+0x5c>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART3_UART_Init+0x58>)
 8001c4c:	f005 fbe0 	bl	8007410 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c56:	f000 f939 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000668 	.word	0x20000668
 8001c64:	40004800 	.word	0x40004800

08001c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	; 0x38
 8001c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7e:	4b8c      	ldr	r3, [pc, #560]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a8b      	ldr	r2, [pc, #556]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001c84:	f043 0310 	orr.w	r3, r3, #16
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b86      	ldr	r3, [pc, #536]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a85      	ldr	r2, [pc, #532]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b83      	ldr	r3, [pc, #524]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cae:	4b80      	ldr	r3, [pc, #512]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a7f      	ldr	r2, [pc, #508]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b7d      	ldr	r3, [pc, #500]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc6:	4b7a      	ldr	r3, [pc, #488]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a79      	ldr	r2, [pc, #484]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b77      	ldr	r3, [pc, #476]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b74      	ldr	r3, [pc, #464]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a73      	ldr	r2, [pc, #460]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b6e      	ldr	r3, [pc, #440]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a6d      	ldr	r2, [pc, #436]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0e:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a67      	ldr	r2, [pc, #412]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b65      	ldr	r3, [pc, #404]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d26:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a61      	ldr	r2, [pc, #388]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <MX_GPIO_Init+0x248>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2118      	movs	r1, #24
 8001d42:	485c      	ldr	r0, [pc, #368]	; (8001eb4 <MX_GPIO_Init+0x24c>)
 8001d44:	f001 fcee 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d4e:	485a      	ldr	r0, [pc, #360]	; (8001eb8 <MX_GPIO_Init+0x250>)
 8001d50:	f001 fce8 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	4858      	ldr	r0, [pc, #352]	; (8001ebc <MX_GPIO_Init+0x254>)
 8001d5a:	f001 fce3 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001d5e:	2318      	movs	r3, #24
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	4619      	mov	r1, r3
 8001d74:	484f      	ldr	r0, [pc, #316]	; (8001eb4 <MX_GPIO_Init+0x24c>)
 8001d76:	f001 fb29 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001d7a:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	484b      	ldr	r0, [pc, #300]	; (8001ec0 <MX_GPIO_Init+0x258>)
 8001d92:	f001 fb1b 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d96:	2332      	movs	r3, #50	; 0x32
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001da6:	230b      	movs	r3, #11
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	4844      	ldr	r0, [pc, #272]	; (8001ec4 <MX_GPIO_Init+0x25c>)
 8001db2:	f001 fb0b 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001db6:	2386      	movs	r3, #134	; 0x86
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc6:	230b      	movs	r3, #11
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	483d      	ldr	r0, [pc, #244]	; (8001ec8 <MX_GPIO_Init+0x260>)
 8001dd2:	f001 fafb 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001dd6:	f244 0381 	movw	r3, #16513	; 0x4081
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dec:	4619      	mov	r1, r3
 8001dee:	4832      	ldr	r0, [pc, #200]	; (8001eb8 <MX_GPIO_Init+0x250>)
 8001df0:	f001 faec 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e06:	230b      	movs	r3, #11
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4829      	ldr	r0, [pc, #164]	; (8001eb8 <MX_GPIO_Init+0x250>)
 8001e12:	f001 fadb 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e16:	2340      	movs	r3, #64	; 0x40
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4823      	ldr	r0, [pc, #140]	; (8001ebc <MX_GPIO_Init+0x254>)
 8001e2e:	f001 facd 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e42:	4619      	mov	r1, r3
 8001e44:	481d      	ldr	r0, [pc, #116]	; (8001ebc <MX_GPIO_Init+0x254>)
 8001e46:	f001 fac1 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e4a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4818      	ldr	r0, [pc, #96]	; (8001ec8 <MX_GPIO_Init+0x260>)
 8001e68:	f001 fab0 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4811      	ldr	r0, [pc, #68]	; (8001ec8 <MX_GPIO_Init+0x260>)
 8001e82:	f001 faa3 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e98:	230b      	movs	r3, #11
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <MX_GPIO_Init+0x254>)
 8001ea4:	f001 fa92 	bl	80033cc <HAL_GPIO_Init>

}
 8001ea8:	bf00      	nop
 8001eaa:	3738      	adds	r7, #56	; 0x38
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40021800 	.word	0x40021800
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020000 	.word	0x40020000

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <Error_Handler+0x8>
	...

08001ed8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_MspInit+0x44>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_MspInit+0x44>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_MspInit+0x44>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_MspInit+0x44>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <HAL_ADC_MspInit+0x74>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d123      	bne.n	8001f8a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_ADC_MspInit+0x78>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_ADC_MspInit+0x78>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_ADC_MspInit+0x78>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <HAL_ADC_MspInit+0x78>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <HAL_ADC_MspInit+0x78>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_ADC_MspInit+0x78>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001f72:	2308      	movs	r3, #8
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f76:	2303      	movs	r3, #3
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <HAL_ADC_MspInit+0x7c>)
 8001f86:	f001 fa21 	bl	80033cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	; 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40012000 	.word	0x40012000
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0b0      	sub	sp, #192	; 0xc0
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	2290      	movs	r2, #144	; 0x90
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f006 f80d 	bl	8007fe0 <memset>
  if(hi2c->Instance==I2C1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a44      	ldr	r2, [pc, #272]	; (80020dc <HAL_I2C_MspInit+0x13c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d13e      	bne.n	800204e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fedd 	bl	8004da0 <HAL_RCCEx_PeriphCLKConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001fec:	f7ff ff6e 	bl	8001ecc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4a3a      	ldr	r2, [pc, #232]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffc:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002008:	f44f 7340 	mov.w	r3, #768	; 0x300
 800200c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002010:	2312      	movs	r3, #18
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002016:	2301      	movs	r3, #1
 8002018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002022:	2304      	movs	r3, #4
 8002024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800202c:	4619      	mov	r1, r3
 800202e:	482d      	ldr	r0, [pc, #180]	; (80020e4 <HAL_I2C_MspInit+0x144>)
 8002030:	f001 f9cc 	bl	80033cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	4a29      	ldr	r2, [pc, #164]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 800203a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800203e:	6413      	str	r3, [r2, #64]	; 0x40
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800204c:	e041      	b.n	80020d2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <HAL_I2C_MspInit+0x148>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d13c      	bne.n	80020d2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800205c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4618      	mov	r0, r3
 800206a:	f002 fe99 	bl	8004da0 <HAL_RCCEx_PeriphCLKConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002074:	f7ff ff2a 	bl	8001ecc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 800207e:	f043 0320 	orr.w	r3, r3, #32
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002090:	2303      	movs	r3, #3
 8002092:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002096:	2312      	movs	r3, #18
 8002098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800209c:	2301      	movs	r3, #1
 800209e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020a8:	2304      	movs	r3, #4
 80020aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020b2:	4619      	mov	r1, r3
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <HAL_I2C_MspInit+0x14c>)
 80020b6:	f001 f989 	bl	80033cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 80020c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_I2C_MspInit+0x140>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
}
 80020d2:	bf00      	nop
 80020d4:	37c0      	adds	r7, #192	; 0xc0
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40005400 	.word	0x40005400
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40005800 	.word	0x40005800
 80020ec:	40021400 	.word	0x40021400

080020f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	; 0x30
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a33      	ldr	r2, [pc, #204]	; (80021dc <HAL_SPI_MspInit+0xec>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d160      	bne.n	80021d4 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a2c      	ldr	r2, [pc, #176]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_SPI_MspInit+0xf0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002172:	2320      	movs	r3, #32
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217e:	2303      	movs	r3, #3
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002182:	2305      	movs	r3, #5
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	4815      	ldr	r0, [pc, #84]	; (80021e4 <HAL_SPI_MspInit+0xf4>)
 800218e:	f001 f91d 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021a2:	2305      	movs	r3, #5
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	480e      	ldr	r0, [pc, #56]	; (80021e8 <HAL_SPI_MspInit+0xf8>)
 80021ae:	f001 f90d 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c4:	2305      	movs	r3, #5
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	4619      	mov	r1, r3
 80021ce:	4807      	ldr	r0, [pc, #28]	; (80021ec <HAL_SPI_MspInit+0xfc>)
 80021d0:	f001 f8fc 	bl	80033cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3730      	adds	r7, #48	; 0x30
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40013000 	.word	0x40013000
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021800 	.word	0x40021800

080021f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a3f      	ldr	r2, [pc, #252]	; (800230c <HAL_TIM_Base_MspInit+0x11c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10c      	bne.n	800222c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002212:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a3e      	ldr	r2, [pc, #248]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800222a:	e06b      	b.n	8002304 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d129      	bne.n	800228a <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002236:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a35      	ldr	r2, [pc, #212]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8002266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002278:	2301      	movs	r3, #1
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	4619      	mov	r1, r3
 8002282:	4824      	ldr	r0, [pc, #144]	; (8002314 <HAL_TIM_Base_MspInit+0x124>)
 8002284:	f001 f8a2 	bl	80033cc <HAL_GPIO_Init>
}
 8002288:	e03c      	b.n	8002304 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <HAL_TIM_Base_MspInit+0x128>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d10c      	bne.n	80022ae <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 800229a:	f043 0308 	orr.w	r3, r3, #8
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
}
 80022ac:	e02a      	b.n	8002304 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_TIM_Base_MspInit+0x12c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d114      	bne.n	80022e2 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 80022be:	f043 0310 	orr.w	r3, r3, #16
 80022c2:	6413      	str	r3, [r2, #64]	; 0x40
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2101      	movs	r1, #1
 80022d4:	2036      	movs	r0, #54	; 0x36
 80022d6:	f001 f842 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022da:	2036      	movs	r0, #54	; 0x36
 80022dc:	f001 f85b 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 80022e0:	e010      	b.n	8002304 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_TIM_Base_MspInit+0x130>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d10b      	bne.n	8002304 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	6453      	str	r3, [r2, #68]	; 0x44
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_TIM_Base_MspInit+0x120>)
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	bf00      	nop
 8002306:	3738      	adds	r7, #56	; 0x38
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40010000 	.word	0x40010000
 8002310:	40023800 	.word	0x40023800
 8002314:	40020400 	.word	0x40020400
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40001000 	.word	0x40001000
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	; 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2e      	ldr	r2, [pc, #184]	; (80023fc <HAL_TIM_Encoder_MspInit+0xd8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d128      	bne.n	8002398 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002346:	4b2e      	ldr	r3, [pc, #184]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a2d      	ldr	r2, [pc, #180]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	4b28      	ldr	r3, [pc, #160]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8002376:	2330      	movs	r3, #48	; 0x30
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002386:	2302      	movs	r3, #2
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	481c      	ldr	r0, [pc, #112]	; (8002404 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002392:	f001 f81b 	bl	80033cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002396:	e02d      	b.n	80023f4 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_TIM_Encoder_MspInit+0xe4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d128      	bne.n	80023f4 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023c0:	f043 0308 	orr.w	r3, r3, #8
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 80023d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023e4:	2302      	movs	r3, #2
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	4619      	mov	r1, r3
 80023ee:	4807      	ldr	r0, [pc, #28]	; (800240c <HAL_TIM_Encoder_MspInit+0xe8>)
 80023f0:	f000 ffec 	bl	80033cc <HAL_GPIO_Init>
}
 80023f4:	bf00      	nop
 80023f6:	3730      	adds	r7, #48	; 0x30
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40000400 	.word	0x40000400
 8002400:	40023800 	.word	0x40023800
 8002404:	40020400 	.word	0x40020400
 8002408:	40000800 	.word	0x40000800
 800240c:	40020c00 	.word	0x40020c00

08002410 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_TIM_PWM_MspInit+0x38>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10b      	bne.n	800243a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_TIM_PWM_MspInit+0x3c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_TIM_PWM_MspInit+0x3c>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6453      	str	r3, [r2, #68]	; 0x44
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_TIM_PWM_MspInit+0x3c>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40014000 	.word	0x40014000
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08c      	sub	sp, #48	; 0x30
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a56      	ldr	r2, [pc, #344]	; (80025c8 <HAL_TIM_MspPostInit+0x178>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d11d      	bne.n	80024ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002472:	4b56      	ldr	r3, [pc, #344]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a55      	ldr	r2, [pc, #340]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 8002478:	f043 0310 	orr.w	r3, r3, #16
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 800248a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800249c:	2301      	movs	r3, #1
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	484a      	ldr	r0, [pc, #296]	; (80025d0 <HAL_TIM_MspPostInit+0x180>)
 80024a8:	f000 ff90 	bl	80033cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80024ac:	e088      	b.n	80025c0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b6:	d11d      	bne.n	80024f4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b8:	4b44      	ldr	r3, [pc, #272]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4a43      	ldr	r2, [pc, #268]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6313      	str	r3, [r2, #48]	; 0x30
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 80024d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024e2:	2301      	movs	r3, #1
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4619      	mov	r1, r3
 80024ec:	4839      	ldr	r0, [pc, #228]	; (80025d4 <HAL_TIM_MspPostInit+0x184>)
 80024ee:	f000 ff6d 	bl	80033cc <HAL_GPIO_Init>
}
 80024f2:	e065      	b.n	80025c0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a37      	ldr	r2, [pc, #220]	; (80025d8 <HAL_TIM_MspPostInit+0x188>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d11c      	bne.n	8002538 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a32      	ldr	r2, [pc, #200]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002516:	2301      	movs	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002526:	2302      	movs	r3, #2
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 031c 	add.w	r3, r7, #28
 800252e:	4619      	mov	r1, r3
 8002530:	4828      	ldr	r0, [pc, #160]	; (80025d4 <HAL_TIM_MspPostInit+0x184>)
 8002532:	f000 ff4b 	bl	80033cc <HAL_GPIO_Init>
}
 8002536:	e043      	b.n	80025c0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a27      	ldr	r2, [pc, #156]	; (80025dc <HAL_TIM_MspPostInit+0x18c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d11d      	bne.n	800257e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a21      	ldr	r2, [pc, #132]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 800255a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800255e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800256c:	2303      	movs	r3, #3
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4619      	mov	r1, r3
 8002576:	481a      	ldr	r0, [pc, #104]	; (80025e0 <HAL_TIM_MspPostInit+0x190>)
 8002578:	f000 ff28 	bl	80033cc <HAL_GPIO_Init>
}
 800257c:	e020      	b.n	80025c0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_TIM_MspPostInit+0x194>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 800258e:	f043 0310 	orr.w	r3, r3, #16
 8002592:	6313      	str	r3, [r2, #48]	; 0x30
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <HAL_TIM_MspPostInit+0x17c>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 80025a0:	2360      	movs	r3, #96	; 0x60
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80025b0:	2303      	movs	r3, #3
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	4619      	mov	r1, r3
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <HAL_TIM_MspPostInit+0x180>)
 80025bc:	f000 ff06 	bl	80033cc <HAL_GPIO_Init>
}
 80025c0:	bf00      	nop
 80025c2:	3730      	adds	r7, #48	; 0x30
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40000c00 	.word	0x40000c00
 80025dc:	40010400 	.word	0x40010400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40014000 	.word	0x40014000

080025e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0b6      	sub	sp, #216	; 0xd8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002600:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002604:	2290      	movs	r2, #144	; 0x90
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f005 fce9 	bl	8007fe0 <memset>
  if(huart->Instance==UART4)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4aa0      	ldr	r2, [pc, #640]	; (8002894 <HAL_UART_MspInit+0x2ac>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d13e      	bne.n	8002696 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fbb9 	bl	8004da0 <HAL_RCCEx_PeriphCLKConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002634:	f7ff fc4a 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002638:	4b97      	ldr	r3, [pc, #604]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a96      	ldr	r2, [pc, #600]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 800263e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
 8002644:	4b94      	ldr	r3, [pc, #592]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002650:	4b91      	ldr	r3, [pc, #580]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4a90      	ldr	r2, [pc, #576]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6313      	str	r3, [r2, #48]	; 0x30
 800265c:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002668:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800266c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002682:	2308      	movs	r3, #8
 8002684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002688:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800268c:	4619      	mov	r1, r3
 800268e:	4883      	ldr	r0, [pc, #524]	; (800289c <HAL_UART_MspInit+0x2b4>)
 8002690:	f000 fe9c 	bl	80033cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002694:	e151      	b.n	800293a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a81      	ldr	r2, [pc, #516]	; (80028a0 <HAL_UART_MspInit+0x2b8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d160      	bne.n	8002762 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80026a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 fb75 	bl	8004da0 <HAL_RCCEx_PeriphCLKConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80026bc:	f7ff fc06 	bl	8001ecc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80026c0:	4b75      	ldr	r3, [pc, #468]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	4a74      	ldr	r2, [pc, #464]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ca:	6413      	str	r3, [r2, #64]	; 0x40
 80026cc:	4b72      	ldr	r3, [pc, #456]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d8:	4b6f      	ldr	r3, [pc, #444]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4a6e      	ldr	r2, [pc, #440]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80026de:	f043 0302 	orr.w	r3, r3, #2
 80026e2:	6313      	str	r3, [r2, #48]	; 0x30
 80026e4:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f0:	4b69      	ldr	r3, [pc, #420]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	4a68      	ldr	r2, [pc, #416]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	6313      	str	r3, [r2, #48]	; 0x30
 80026fc:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	623b      	str	r3, [r7, #32]
 8002706:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271c:	2303      	movs	r3, #3
 800271e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002722:	2308      	movs	r3, #8
 8002724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800272c:	4619      	mov	r1, r3
 800272e:	485d      	ldr	r0, [pc, #372]	; (80028a4 <HAL_UART_MspInit+0x2bc>)
 8002730:	f000 fe4c 	bl	80033cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002748:	2303      	movs	r3, #3
 800274a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800274e:	2308      	movs	r3, #8
 8002750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002754:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002758:	4619      	mov	r1, r3
 800275a:	4850      	ldr	r0, [pc, #320]	; (800289c <HAL_UART_MspInit+0x2b4>)
 800275c:	f000 fe36 	bl	80033cc <HAL_GPIO_Init>
}
 8002760:	e0eb      	b.n	800293a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a50      	ldr	r2, [pc, #320]	; (80028a8 <HAL_UART_MspInit+0x2c0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d151      	bne.n	8002810 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800276c:	2340      	movs	r3, #64	; 0x40
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002770:	2300      	movs	r3, #0
 8002772:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002774:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fb11 	bl	8004da0 <HAL_RCCEx_PeriphCLKConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002784:	f7ff fba2 	bl	8001ecc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002788:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	4a42      	ldr	r2, [pc, #264]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 800278e:	f043 0310 	orr.w	r3, r3, #16
 8002792:	6453      	str	r3, [r2, #68]	; 0x44
 8002794:	4b40      	ldr	r3, [pc, #256]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a0:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4a3c      	ldr	r2, [pc, #240]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	6313      	str	r3, [r2, #48]	; 0x30
 80027ac:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80027d2:	2304      	movs	r3, #4
 80027d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027dc:	4619      	mov	r1, r3
 80027de:	4831      	ldr	r0, [pc, #196]	; (80028a4 <HAL_UART_MspInit+0x2bc>)
 80027e0:	f000 fdf4 	bl	80033cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027e4:	2340      	movs	r3, #64	; 0x40
 80027e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027fc:	2307      	movs	r3, #7
 80027fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002802:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002806:	4619      	mov	r1, r3
 8002808:	4826      	ldr	r0, [pc, #152]	; (80028a4 <HAL_UART_MspInit+0x2bc>)
 800280a:	f000 fddf 	bl	80033cc <HAL_GPIO_Init>
}
 800280e:	e094      	b.n	800293a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <HAL_UART_MspInit+0x2c4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d14c      	bne.n	80028b4 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800281e:	2300      	movs	r3, #0
 8002820:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002822:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002826:	4618      	mov	r0, r3
 8002828:	f002 faba 	bl	8004da0 <HAL_RCCEx_PeriphCLKConfig>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002832:	f7ff fb4b 	bl	8001ecc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a17      	ldr	r2, [pc, #92]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 800283c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_UART_MspInit+0x2b0>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002866:	2360      	movs	r3, #96	; 0x60
 8002868:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800287e:	2307      	movs	r3, #7
 8002880:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002884:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002888:	4619      	mov	r1, r3
 800288a:	4809      	ldr	r0, [pc, #36]	; (80028b0 <HAL_UART_MspInit+0x2c8>)
 800288c:	f000 fd9e 	bl	80033cc <HAL_GPIO_Init>
}
 8002890:	e053      	b.n	800293a <HAL_UART_MspInit+0x352>
 8002892:	bf00      	nop
 8002894:	40004c00 	.word	0x40004c00
 8002898:	40023800 	.word	0x40023800
 800289c:	40020800 	.word	0x40020800
 80028a0:	40005000 	.word	0x40005000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40011000 	.word	0x40011000
 80028ac:	40004400 	.word	0x40004400
 80028b0:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a22      	ldr	r2, [pc, #136]	; (8002944 <HAL_UART_MspInit+0x35c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d13d      	bne.n	800293a <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fa66 	bl	8004da0 <HAL_RCCEx_PeriphCLKConfig>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 80028da:	f7ff faf7 	bl	8001ecc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <HAL_UART_MspInit+0x360>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a19      	ldr	r2, [pc, #100]	; (8002948 <HAL_UART_MspInit+0x360>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_UART_MspInit+0x360>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f6:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_UART_MspInit+0x360>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <HAL_UART_MspInit+0x360>)
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_UART_MspInit+0x360>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800290e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002928:	2307      	movs	r3, #7
 800292a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800292e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <HAL_UART_MspInit+0x364>)
 8002936:	f000 fd49 	bl	80033cc <HAL_GPIO_Init>
}
 800293a:	bf00      	nop
 800293c:	37d8      	adds	r7, #216	; 0xd8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40004800 	.word	0x40004800
 8002948:	40023800 	.word	0x40023800
 800294c:	40020c00 	.word	0x40020c00

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <NMI_Handler+0x4>

08002956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299c:	f000 f92c 	bl	8002bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <TIM6_DAC_IRQHandler+0x10>)
 80029aa:	f003 fae3 	bl	8005f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000364 	.word	0x20000364

080029b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e00a      	b.n	80029e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029ca:	f3af 8000 	nop.w
 80029ce:	4601      	mov	r1, r0
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	60ba      	str	r2, [r7, #8]
 80029d6:	b2ca      	uxtb	r2, r1
 80029d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3301      	adds	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dbf0      	blt.n	80029ca <_read+0x12>
	}

return len;
 80029e8:	687b      	ldr	r3, [r7, #4]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e009      	b.n	8002a18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	60ba      	str	r2, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3301      	adds	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dbf1      	blt.n	8002a04 <_write+0x12>
	}
	return len;
 8002a20:	687b      	ldr	r3, [r7, #4]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_close>:

int _close(int file)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
	return -1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a52:	605a      	str	r2, [r3, #4]
	return 0;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <_isatty>:

int _isatty(int file)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
	return 1;
 8002a6a:	2301      	movs	r3, #1
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a9c:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <_sbrk+0x5c>)
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <_sbrk+0x60>)
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <_sbrk+0x64>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <_sbrk+0x64>)
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <_sbrk+0x68>)
 8002ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <_sbrk+0x64>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d207      	bcs.n	8002ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac4:	f005 fa54 	bl	8007f70 <__errno>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	220c      	movs	r2, #12
 8002acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad2:	e009      	b.n	8002ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <_sbrk+0x64>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <_sbrk+0x64>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <_sbrk+0x64>)
 8002ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20080000 	.word	0x20080000
 8002af4:	00000400 	.word	0x00000400
 8002af8:	20000808 	.word	0x20000808
 8002afc:	20000820 	.word	0x20000820

08002b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <SystemInit+0x28>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <SystemInit+0x28>)
 8002b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <SystemInit+0x28>)
 8002b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b32:	e003      	b.n	8002b3c <LoopCopyDataInit>

08002b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b3a:	3104      	adds	r1, #4

08002b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b3c:	480b      	ldr	r0, [pc, #44]	; (8002b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b44:	d3f6      	bcc.n	8002b34 <CopyDataInit>
  ldr  r2, =_sbss
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b48:	e002      	b.n	8002b50 <LoopFillZerobss>

08002b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b4c:	f842 3b04 	str.w	r3, [r2], #4

08002b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b54:	d3f9      	bcc.n	8002b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b56:	f7ff ffd3 	bl	8002b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f005 fa0f 	bl	8007f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7fe f8bd 	bl	8000cdc <main>
  bx  lr    
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b64:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002b68:	08009018 	.word	0x08009018
  ldr  r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b70:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002b74:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002b78:	20000820 	.word	0x20000820

08002b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC_IRQHandler>

08002b7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b82:	2003      	movs	r0, #3
 8002b84:	f000 fbe0 	bl	8003348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f000 f805 	bl	8002b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b8e:	f7ff f9a3 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_InitTick+0x54>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_InitTick+0x58>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fbfb 	bl	80033b2 <HAL_SYSTICK_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00e      	b.n	8002be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d80a      	bhi.n	8002be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f000 fbc3 	bl	800335e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd8:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <HAL_InitTick+0x5c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000008 	.word	0x20000008
 8002bf0:	20000010 	.word	0x20000010
 8002bf4:	2000000c 	.word	0x2000000c

08002bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_IncTick+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_IncTick+0x24>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_IncTick+0x24>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000010 	.word	0x20000010
 8002c1c:	2000080c 	.word	0x2000080c

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	2000080c 	.word	0x2000080c

08002c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff ffee 	bl	8002c20 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d005      	beq.n	8002c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_Delay+0x44>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5e:	bf00      	nop
 8002c60:	f7ff ffde 	bl	8002c20 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8f7      	bhi.n	8002c60 <HAL_Delay+0x28>
  {
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000010 	.word	0x20000010

08002c80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e031      	b.n	8002cfa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff f93e 	bl	8001f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d116      	bne.n	8002cec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_ADC_Init+0x84>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	f043 0202 	orr.w	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f970 	bl	8002fb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8002cea:	e001      	b.n	8002cf0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	ffffeefd 	.word	0xffffeefd

08002d08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x1c>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e136      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x28a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	d93a      	bls.n	8002daa <HAL_ADC_ConfigChannel+0xa2>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d3c:	d035      	beq.n	8002daa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	3b1e      	subs	r3, #30
 8002d54:	2207      	movs	r2, #7
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	400a      	ands	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a8d      	ldr	r2, [pc, #564]	; (8002fa0 <HAL_ADC_ConfigChannel+0x298>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10a      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68d9      	ldr	r1, [r3, #12]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	061a      	lsls	r2, r3, #24
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d82:	e035      	b.n	8002df0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68d9      	ldr	r1, [r3, #12]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4403      	add	r3, r0
 8002d9c:	3b1e      	subs	r3, #30
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da8:	e022      	b.n	8002df0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6919      	ldr	r1, [r3, #16]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	400a      	ands	r2, r1
 8002dcc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6919      	ldr	r1, [r3, #16]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	4603      	mov	r3, r0
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4403      	add	r3, r0
 8002de6:	409a      	lsls	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d824      	bhi.n	8002e42 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	3b05      	subs	r3, #5
 8002e0a:	221f      	movs	r2, #31
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43da      	mvns	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	400a      	ands	r2, r1
 8002e18:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b05      	subs	r3, #5
 8002e34:	fa00 f203 	lsl.w	r2, r0, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e40:	e04c      	b.n	8002edc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d824      	bhi.n	8002e94 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b23      	subs	r3, #35	; 0x23
 8002e5c:	221f      	movs	r2, #31
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	400a      	ands	r2, r1
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3b23      	subs	r3, #35	; 0x23
 8002e86:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
 8002e92:	e023      	b.n	8002edc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b41      	subs	r3, #65	; 0x41
 8002ea6:	221f      	movs	r2, #31
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43da      	mvns	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b41      	subs	r3, #65	; 0x41
 8002ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <HAL_ADC_ConfigChannel+0x29c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10a      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1f4>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eee:	d105      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002efa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_ADC_ConfigChannel+0x29c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10f      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x21e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b12      	cmp	r3, #18
 8002f0c:	d10b      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f18:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f1a:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f24:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_ADC_ConfigChannel+0x29c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d12b      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x280>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <HAL_ADC_ConfigChannel+0x298>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0x23a>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b11      	cmp	r3, #17
 8002f40:	d122      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f4c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <HAL_ADC_ConfigChannel+0x298>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d111      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_ADC_ConfigChannel+0x2a4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0c9a      	lsrs	r2, r3, #18
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f7a:	e002      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f9      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	10000012 	.word	0x10000012
 8002fa4:	40012000 	.word	0x40012000
 8002fa8:	40012300 	.word	0x40012300
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	431bde83 	.word	0x431bde83

08002fb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fbc:	4b78      	ldr	r3, [pc, #480]	; (80031a0 <ADC_Init+0x1ec>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a77      	ldr	r2, [pc, #476]	; (80031a0 <ADC_Init+0x1ec>)
 8002fc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fc6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fc8:	4b75      	ldr	r3, [pc, #468]	; (80031a0 <ADC_Init+0x1ec>)
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4973      	ldr	r1, [pc, #460]	; (80031a0 <ADC_Init+0x1ec>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800302a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <ADC_Init+0x1f0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003056:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	e00f      	b.n	80030ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800309c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0202 	bic.w	r2, r2, #2
 80030bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	005a      	lsls	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	3b01      	subs	r3, #1
 8003108:	035a      	lsls	r2, r3, #13
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e007      	b.n	8003124 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003122:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	3b01      	subs	r3, #1
 8003140:	051a      	lsls	r2, r3, #20
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003166:	025a      	lsls	r2, r3, #9
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	029a      	lsls	r2, r3, #10
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40012300 	.word	0x40012300
 80031a4:	0f000001 	.word	0x0f000001

080031a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <__NVIC_SetPriorityGrouping+0x40>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c4:	4013      	ands	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <__NVIC_SetPriorityGrouping+0x40>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00
 80031ec:	05fa0000 	.word	0x05fa0000

080031f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <__NVIC_GetPriorityGrouping+0x18>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0307 	and.w	r3, r3, #7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db0b      	blt.n	8003236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4907      	ldr	r1, [pc, #28]	; (8003244 <__NVIC_EnableIRQ+0x38>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2001      	movs	r0, #1
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000e100 	.word	0xe000e100

08003248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003258:	2b00      	cmp	r3, #0
 800325a:	db0a      	blt.n	8003272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	490c      	ldr	r1, [pc, #48]	; (8003294 <__NVIC_SetPriority+0x4c>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	0112      	lsls	r2, r2, #4
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	440b      	add	r3, r1
 800326c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003270:	e00a      	b.n	8003288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4908      	ldr	r1, [pc, #32]	; (8003298 <__NVIC_SetPriority+0x50>)
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	3b04      	subs	r3, #4
 8003280:	0112      	lsls	r2, r2, #4
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	440b      	add	r3, r1
 8003286:	761a      	strb	r2, [r3, #24]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000e100 	.word	0xe000e100
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800329c:	b480      	push	{r7}
 800329e:	b089      	sub	sp, #36	; 0x24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f1c3 0307 	rsb	r3, r3, #7
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	bf28      	it	cs
 80032ba:	2304      	movcs	r3, #4
 80032bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	d902      	bls.n	80032cc <NVIC_EncodePriority+0x30>
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3b03      	subs	r3, #3
 80032ca:	e000      	b.n	80032ce <NVIC_EncodePriority+0x32>
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d0:	f04f 32ff 	mov.w	r2, #4294967295
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	401a      	ands	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e4:	f04f 31ff 	mov.w	r1, #4294967295
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	43d9      	mvns	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	4313      	orrs	r3, r2
         );
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003314:	d301      	bcc.n	800331a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003316:	2301      	movs	r3, #1
 8003318:	e00f      	b.n	800333a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331a:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <SysTick_Config+0x40>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003322:	210f      	movs	r1, #15
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	f7ff ff8e 	bl	8003248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <SysTick_Config+0x40>)
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003332:	4b04      	ldr	r3, [pc, #16]	; (8003344 <SysTick_Config+0x40>)
 8003334:	2207      	movs	r2, #7
 8003336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	e000e010 	.word	0xe000e010

08003348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff ff29 	bl	80031a8 <__NVIC_SetPriorityGrouping>
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003370:	f7ff ff3e 	bl	80031f0 <__NVIC_GetPriorityGrouping>
 8003374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7ff ff8e 	bl	800329c <NVIC_EncodePriority>
 8003380:	4602      	mov	r2, r0
 8003382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff5d 	bl	8003248 <__NVIC_SetPriority>
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff31 	bl	800320c <__NVIC_EnableIRQ>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ffa2 	bl	8003304 <SysTick_Config>
 80033c0:	4603      	mov	r3, r0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	e175      	b.n	80036d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033ec:	2201      	movs	r2, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	429a      	cmp	r2, r3
 8003406:	f040 8164 	bne.w	80036d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d005      	beq.n	8003422 <HAL_GPIO_Init+0x56>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d130      	bne.n	8003484 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2203      	movs	r2, #3
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003458:	2201      	movs	r2, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 0201 	and.w	r2, r3, #1
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b03      	cmp	r3, #3
 800348e:	d017      	beq.n	80034c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d123      	bne.n	8003514 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	08da      	lsrs	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3208      	adds	r2, #8
 80034d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	220f      	movs	r2, #15
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	08da      	lsrs	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3208      	adds	r2, #8
 800350e:	69b9      	ldr	r1, [r7, #24]
 8003510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2203      	movs	r2, #3
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0203 	and.w	r2, r3, #3
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80be 	beq.w	80036d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	4b66      	ldr	r3, [pc, #408]	; (80036f0 <HAL_GPIO_Init+0x324>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4a65      	ldr	r2, [pc, #404]	; (80036f0 <HAL_GPIO_Init+0x324>)
 800355c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003560:	6453      	str	r3, [r2, #68]	; 0x44
 8003562:	4b63      	ldr	r3, [pc, #396]	; (80036f0 <HAL_GPIO_Init+0x324>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800356e:	4a61      	ldr	r2, [pc, #388]	; (80036f4 <HAL_GPIO_Init+0x328>)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_GPIO_Init+0x32c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d037      	beq.n	800360a <HAL_GPIO_Init+0x23e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a57      	ldr	r2, [pc, #348]	; (80036fc <HAL_GPIO_Init+0x330>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d031      	beq.n	8003606 <HAL_GPIO_Init+0x23a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a56      	ldr	r2, [pc, #344]	; (8003700 <HAL_GPIO_Init+0x334>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d02b      	beq.n	8003602 <HAL_GPIO_Init+0x236>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a55      	ldr	r2, [pc, #340]	; (8003704 <HAL_GPIO_Init+0x338>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d025      	beq.n	80035fe <HAL_GPIO_Init+0x232>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a54      	ldr	r2, [pc, #336]	; (8003708 <HAL_GPIO_Init+0x33c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01f      	beq.n	80035fa <HAL_GPIO_Init+0x22e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a53      	ldr	r2, [pc, #332]	; (800370c <HAL_GPIO_Init+0x340>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d019      	beq.n	80035f6 <HAL_GPIO_Init+0x22a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a52      	ldr	r2, [pc, #328]	; (8003710 <HAL_GPIO_Init+0x344>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_GPIO_Init+0x226>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a51      	ldr	r2, [pc, #324]	; (8003714 <HAL_GPIO_Init+0x348>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00d      	beq.n	80035ee <HAL_GPIO_Init+0x222>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a50      	ldr	r2, [pc, #320]	; (8003718 <HAL_GPIO_Init+0x34c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <HAL_GPIO_Init+0x21e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4f      	ldr	r2, [pc, #316]	; (800371c <HAL_GPIO_Init+0x350>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d101      	bne.n	80035e6 <HAL_GPIO_Init+0x21a>
 80035e2:	2309      	movs	r3, #9
 80035e4:	e012      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035e6:	230a      	movs	r3, #10
 80035e8:	e010      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035ea:	2308      	movs	r3, #8
 80035ec:	e00e      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035ee:	2307      	movs	r3, #7
 80035f0:	e00c      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035f2:	2306      	movs	r3, #6
 80035f4:	e00a      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035f6:	2305      	movs	r3, #5
 80035f8:	e008      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035fa:	2304      	movs	r3, #4
 80035fc:	e006      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035fe:	2303      	movs	r3, #3
 8003600:	e004      	b.n	800360c <HAL_GPIO_Init+0x240>
 8003602:	2302      	movs	r3, #2
 8003604:	e002      	b.n	800360c <HAL_GPIO_Init+0x240>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_GPIO_Init+0x240>
 800360a:	2300      	movs	r3, #0
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	f002 0203 	and.w	r2, r2, #3
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	4093      	lsls	r3, r2
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800361c:	4935      	ldr	r1, [pc, #212]	; (80036f4 <HAL_GPIO_Init+0x328>)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	3302      	adds	r3, #2
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_GPIO_Init+0x354>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800364e:	4a34      	ldr	r2, [pc, #208]	; (8003720 <HAL_GPIO_Init+0x354>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003654:	4b32      	ldr	r3, [pc, #200]	; (8003720 <HAL_GPIO_Init+0x354>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003678:	4a29      	ldr	r2, [pc, #164]	; (8003720 <HAL_GPIO_Init+0x354>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800367e:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_GPIO_Init+0x354>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036a2:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <HAL_GPIO_Init+0x354>)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_GPIO_Init+0x354>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <HAL_GPIO_Init+0x354>)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3301      	adds	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	f67f ae86 	bls.w	80033ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3724      	adds	r7, #36	; 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40020000 	.word	0x40020000
 80036fc:	40020400 	.word	0x40020400
 8003700:	40020800 	.word	0x40020800
 8003704:	40020c00 	.word	0x40020c00
 8003708:	40021000 	.word	0x40021000
 800370c:	40021400 	.word	0x40021400
 8003710:	40021800 	.word	0x40021800
 8003714:	40021c00 	.word	0x40021c00
 8003718:	40022000 	.word	0x40022000
 800371c:	40022400 	.word	0x40022400
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e07f      	b.n	800386a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fc0e 	bl	8001fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	e006      	b.n	80037e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d104      	bne.n	80037f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_I2C_Init+0x11c>)
 80037fe:	430b      	orrs	r3, r1
 8003800:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003810:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69d9      	ldr	r1, [r3, #28]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	02008000 	.word	0x02008000

08003878 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b20      	cmp	r3, #32
 800389c:	f040 80f9 	bne.w	8003a92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_I2C_Mem_Write+0x34>
 80038a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0ed      	b.n	8003a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_I2C_Mem_Write+0x4e>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e0e6      	b.n	8003a94 <HAL_I2C_Mem_Write+0x21c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038ce:	f7ff f9a7 	bl	8002c20 <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2319      	movs	r3, #25
 80038da:	2201      	movs	r2, #1
 80038dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fac3 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0d1      	b.n	8003a94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2221      	movs	r2, #33	; 0x21
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003918:	88f8      	ldrh	r0, [r7, #6]
 800391a:	893a      	ldrh	r2, [r7, #8]
 800391c:	8979      	ldrh	r1, [r7, #10]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4603      	mov	r3, r0
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f9d3 	bl	8003cd4 <I2C_RequestMemoryWrite>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0a9      	b.n	8003a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2bff      	cmp	r3, #255	; 0xff
 8003948:	d90e      	bls.n	8003968 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	22ff      	movs	r2, #255	; 0xff
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	b2da      	uxtb	r2, r3
 8003956:	8979      	ldrh	r1, [r7, #10]
 8003958:	2300      	movs	r3, #0
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fc1f 	bl	80041a4 <I2C_TransferConfig>
 8003966:	e00f      	b.n	8003988 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	b2da      	uxtb	r2, r3
 8003978:	8979      	ldrh	r1, [r7, #10]
 800397a:	2300      	movs	r3, #0
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fc0e 	bl	80041a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 faad 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e07b      	b.n	8003a94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d034      	beq.n	8003a40 <HAL_I2C_Mem_Write+0x1c8>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d130      	bne.n	8003a40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	2200      	movs	r2, #0
 80039e6:	2180      	movs	r1, #128	; 0x80
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fa3f 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e04d      	b.n	8003a94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2bff      	cmp	r3, #255	; 0xff
 8003a00:	d90e      	bls.n	8003a20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	22ff      	movs	r2, #255	; 0xff
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	8979      	ldrh	r1, [r7, #10]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fbc3 	bl	80041a4 <I2C_TransferConfig>
 8003a1e:	e00f      	b.n	8003a40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	8979      	ldrh	r1, [r7, #10]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fbb2 	bl	80041a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d19e      	bne.n	8003988 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fa8c 	bl	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e01a      	b.n	8003a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2220      	movs	r2, #32
 8003a64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_I2C_Mem_Write+0x224>)
 8003a72:	400b      	ands	r3, r1
 8003a74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	fe00e800 	.word	0xfe00e800

08003aa0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	813b      	strh	r3, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	f040 80fd 	bne.w	8003cc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_I2C_Mem_Read+0x34>
 8003ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ada:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0f1      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_I2C_Mem_Read+0x4e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0ea      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x224>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003af6:	f7ff f893 	bl	8002c20 <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2319      	movs	r3, #25
 8003b02:	2201      	movs	r2, #1
 8003b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f9af 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0d5      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2222      	movs	r2, #34	; 0x22
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2240      	movs	r2, #64	; 0x40
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b40:	88f8      	ldrh	r0, [r7, #6]
 8003b42:	893a      	ldrh	r2, [r7, #8]
 8003b44:	8979      	ldrh	r1, [r7, #10]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	4603      	mov	r3, r0
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f913 	bl	8003d7c <I2C_RequestMemoryRead>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0ad      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2bff      	cmp	r3, #255	; 0xff
 8003b70:	d90e      	bls.n	8003b90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	22ff      	movs	r2, #255	; 0xff
 8003b76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	8979      	ldrh	r1, [r7, #10]
 8003b80:	4b52      	ldr	r3, [pc, #328]	; (8003ccc <HAL_I2C_Mem_Read+0x22c>)
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fb0b 	bl	80041a4 <I2C_TransferConfig>
 8003b8e:	e00f      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_I2C_Mem_Read+0x22c>)
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fafa 	bl	80041a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2104      	movs	r1, #4
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f956 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07c      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d034      	beq.n	8003c70 <HAL_I2C_Mem_Read+0x1d0>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d130      	bne.n	8003c70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f927 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e04d      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2bff      	cmp	r3, #255	; 0xff
 8003c30:	d90e      	bls.n	8003c50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	22ff      	movs	r2, #255	; 0xff
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 faab 	bl	80041a4 <I2C_TransferConfig>
 8003c4e:	e00f      	b.n	8003c70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa9a 	bl	80041a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d19a      	bne.n	8003bb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f974 	bl	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e01a      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2220      	movs	r2, #32
 8003c94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_I2C_Mem_Read+0x230>)
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	80002400 	.word	0x80002400
 8003cd0:	fe00e800 	.word	0xfe00e800

08003cd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	8979      	ldrh	r1, [r7, #10]
 8003cf4:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <I2C_RequestMemoryWrite+0xa4>)
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fa51 	bl	80041a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	69b9      	ldr	r1, [r7, #24]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f8f0 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e02c      	b.n	8003d70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
 8003d26:	e015      	b.n	8003d54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d28:	893b      	ldrh	r3, [r7, #8]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	69b9      	ldr	r1, [r7, #24]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f8d6 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e012      	b.n	8003d70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4a:	893b      	ldrh	r3, [r7, #8]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f884 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	80002000 	.word	0x80002000

08003d7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	817b      	strh	r3, [r7, #10]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	813b      	strh	r3, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	8979      	ldrh	r1, [r7, #10]
 8003d9c:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <I2C_RequestMemoryRead+0xa4>)
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f9fe 	bl	80041a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	69b9      	ldr	r1, [r7, #24]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f89d 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e02c      	b.n	8003e16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
 8003dcc:	e015      	b.n	8003dfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dce:	893b      	ldrh	r3, [r7, #8]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	69b9      	ldr	r1, [r7, #24]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f883 	bl	8003eec <I2C_WaitOnTXISFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e012      	b.n	8003e16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003df0:	893b      	ldrh	r3, [r7, #8]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	2200      	movs	r2, #0
 8003e02:	2140      	movs	r1, #64	; 0x40
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f831 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	80002000 	.word	0x80002000

08003e24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d103      	bne.n	8003e42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d007      	beq.n	8003e60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	619a      	str	r2, [r3, #24]
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e7c:	e022      	b.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d01e      	beq.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fe fecb 	bl	8002c20 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d113      	bne.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e00f      	b.n	8003ee4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d0cd      	beq.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef8:	e02c      	b.n	8003f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f870 	bl	8003fe4 <I2C_IsErrorOccurred>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e02a      	b.n	8003f64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d01e      	beq.n	8003f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fe fe83 	bl	8002c20 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d113      	bne.n	8003f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e007      	b.n	8003f64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d1cb      	bne.n	8003efa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f78:	e028      	b.n	8003fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f830 	bl	8003fe4 <I2C_IsErrorOccurred>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e026      	b.n	8003fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8e:	f7fe fe47 	bl	8002c20 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d113      	bne.n	8003fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e007      	b.n	8003fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d1cf      	bne.n	8003f7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d068      	beq.n	80040e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004018:	e049      	b.n	80040ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d045      	beq.n	80040ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fe fdfd 	bl	8002c20 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <I2C_IsErrorOccurred+0x54>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d13a      	bne.n	80040ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800404a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d121      	bne.n	80040a0 <I2C_IsErrorOccurred+0xbc>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004062:	d01d      	beq.n	80040a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b20      	cmp	r3, #32
 8004068:	d01a      	beq.n	80040a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004078:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800407a:	f7fe fdd1 	bl	8002c20 <HAL_GetTick>
 800407e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004080:	e00e      	b.n	80040a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004082:	f7fe fdcd 	bl	8002c20 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b19      	cmp	r3, #25
 800408e:	d907      	bls.n	80040a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f043 0320 	orr.w	r3, r3, #32
 8004096:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800409e:	e006      	b.n	80040ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d1e9      	bne.n	8004082 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d003      	beq.n	80040c4 <I2C_IsErrorOccurred+0xe0>
 80040bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0aa      	beq.n	800401a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d103      	bne.n	80040d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2220      	movs	r2, #32
 80040d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01c      	beq.n	8004192 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fe63 	bl	8003e24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <I2C_IsErrorOccurred+0x1bc>)
 800416a:	400b      	ands	r3, r1
 800416c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	fe00e800 	.word	0xfe00e800

080041a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	817b      	strh	r3, [r7, #10]
 80041b2:	4613      	mov	r3, r2
 80041b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041bc:	7a7b      	ldrb	r3, [r7, #9]
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	0d5b      	lsrs	r3, r3, #21
 80041de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <I2C_TransferConfig+0x60>)
 80041e4:	430b      	orrs	r3, r1
 80041e6:	43db      	mvns	r3, r3
 80041e8:	ea02 0103 	and.w	r1, r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	03ff63ff 	.word	0x03ff63ff

08004208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b20      	cmp	r3, #32
 800421c:	d138      	bne.n	8004290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004228:	2302      	movs	r3, #2
 800422a:	e032      	b.n	8004292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2224      	movs	r2, #36	; 0x24
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800425a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d139      	bne.n	8004328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042be:	2302      	movs	r3, #2
 80042c0:	e033      	b.n	800432a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2224      	movs	r2, #36	; 0x24
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40007000 	.word	0x40007000

08004358 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004362:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800437a:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004386:	f7fe fc4b 	bl	8002c20 <HAL_GetTick>
 800438a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800438c:	e009      	b.n	80043a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800438e:	f7fe fc47 	bl	8002c20 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800439c:	d901      	bls.n	80043a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e022      	b.n	80043e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043a2:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ae:	d1ee      	bne.n	800438e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043b0:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0f      	ldr	r2, [pc, #60]	; (80043f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043bc:	f7fe fc30 	bl	8002c20 <HAL_GetTick>
 80043c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043c2:	e009      	b.n	80043d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043c4:	f7fe fc2c 	bl	8002c20 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d2:	d901      	bls.n	80043d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e007      	b.n	80043e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e4:	d1ee      	bne.n	80043c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40007000 	.word	0x40007000

080043f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004400:	2300      	movs	r3, #0
 8004402:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e29b      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8087 	beq.w	800452a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800441c:	4b96      	ldr	r3, [pc, #600]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b04      	cmp	r3, #4
 8004426:	d00c      	beq.n	8004442 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004428:	4b93      	ldr	r3, [pc, #588]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b08      	cmp	r3, #8
 8004432:	d112      	bne.n	800445a <HAL_RCC_OscConfig+0x62>
 8004434:	4b90      	ldr	r3, [pc, #576]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004440:	d10b      	bne.n	800445a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004442:	4b8d      	ldr	r3, [pc, #564]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d06c      	beq.n	8004528 <HAL_RCC_OscConfig+0x130>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d168      	bne.n	8004528 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e275      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004462:	d106      	bne.n	8004472 <HAL_RCC_OscConfig+0x7a>
 8004464:	4b84      	ldr	r3, [pc, #528]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a83      	ldr	r2, [pc, #524]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 800446a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	e02e      	b.n	80044d0 <HAL_RCC_OscConfig+0xd8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x9c>
 800447a:	4b7f      	ldr	r3, [pc, #508]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7e      	ldr	r2, [pc, #504]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b7c      	ldr	r3, [pc, #496]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7b      	ldr	r2, [pc, #492]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 800448c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e01d      	b.n	80044d0 <HAL_RCC_OscConfig+0xd8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0xc0>
 800449e:	4b76      	ldr	r3, [pc, #472]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a75      	ldr	r2, [pc, #468]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80044a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b73      	ldr	r3, [pc, #460]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a72      	ldr	r2, [pc, #456]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e00b      	b.n	80044d0 <HAL_RCC_OscConfig+0xd8>
 80044b8:	4b6f      	ldr	r3, [pc, #444]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a6e      	ldr	r2, [pc, #440]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80044be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	4b6c      	ldr	r3, [pc, #432]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6b      	ldr	r2, [pc, #428]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80044ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d013      	beq.n	8004500 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe fba2 	bl	8002c20 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e0:	f7fe fb9e 	bl	8002c20 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e229      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b61      	ldr	r3, [pc, #388]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0xe8>
 80044fe:	e014      	b.n	800452a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fe fb8e 	bl	8002c20 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004508:	f7fe fb8a 	bl	8002c20 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e215      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	4b57      	ldr	r3, [pc, #348]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x110>
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d069      	beq.n	800460a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004536:	4b50      	ldr	r3, [pc, #320]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004542:	4b4d      	ldr	r3, [pc, #308]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b08      	cmp	r3, #8
 800454c:	d11c      	bne.n	8004588 <HAL_RCC_OscConfig+0x190>
 800454e:	4b4a      	ldr	r3, [pc, #296]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d116      	bne.n	8004588 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_RCC_OscConfig+0x17a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d001      	beq.n	8004572 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e1e9      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	493d      	ldr	r1, [pc, #244]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004586:	e040      	b.n	800460a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d023      	beq.n	80045d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004590:	4b39      	ldr	r3, [pc, #228]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a38      	ldr	r2, [pc, #224]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe fb40 	bl	8002c20 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a4:	f7fe fb3c 	bl	8002c20 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e1c7      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b30      	ldr	r3, [pc, #192]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c2:	4b2d      	ldr	r3, [pc, #180]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4929      	ldr	r1, [pc, #164]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]
 80045d6:	e018      	b.n	800460a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a26      	ldr	r2, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fe fb1c 	bl	8002c20 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fe fb18 	bl	8002c20 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1a3      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d038      	beq.n	8004688 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d019      	beq.n	8004652 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b16      	ldr	r3, [pc, #88]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004622:	4a15      	ldr	r2, [pc, #84]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462a:	f7fe faf9 	bl	8002c20 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004632:	f7fe faf5 	bl	8002c20 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e180      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x23a>
 8004650:	e01a      	b.n	8004688 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <HAL_RCC_OscConfig+0x280>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465e:	f7fe fadf 	bl	8002c20 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004664:	e00a      	b.n	800467c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004666:	f7fe fadb 	bl	8002c20 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d903      	bls.n	800467c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e166      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
 8004678:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467c:	4b92      	ldr	r3, [pc, #584]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800467e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1ee      	bne.n	8004666 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80a4 	beq.w	80047de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004696:	4b8c      	ldr	r3, [pc, #560]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	4b89      	ldr	r3, [pc, #548]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4a88      	ldr	r2, [pc, #544]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6413      	str	r3, [r2, #64]	; 0x40
 80046ae:	4b86      	ldr	r3, [pc, #536]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046be:	4b83      	ldr	r3, [pc, #524]	; (80048cc <HAL_RCC_OscConfig+0x4d4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d118      	bne.n	80046fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046ca:	4b80      	ldr	r3, [pc, #512]	; (80048cc <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a7f      	ldr	r2, [pc, #508]	; (80048cc <HAL_RCC_OscConfig+0x4d4>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fe faa3 	bl	8002c20 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fe fa9f 	bl	8002c20 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b64      	cmp	r3, #100	; 0x64
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e12a      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f0:	4b76      	ldr	r3, [pc, #472]	; (80048cc <HAL_RCC_OscConfig+0x4d4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x31a>
 8004704:	4b70      	ldr	r3, [pc, #448]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4a6f      	ldr	r2, [pc, #444]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
 8004710:	e02d      	b.n	800476e <HAL_RCC_OscConfig+0x376>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10c      	bne.n	8004734 <HAL_RCC_OscConfig+0x33c>
 800471a:	4b6b      	ldr	r3, [pc, #428]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a6a      	ldr	r2, [pc, #424]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
 8004726:	4b68      	ldr	r3, [pc, #416]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4a67      	ldr	r2, [pc, #412]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	6713      	str	r3, [r2, #112]	; 0x70
 8004732:	e01c      	b.n	800476e <HAL_RCC_OscConfig+0x376>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b05      	cmp	r3, #5
 800473a:	d10c      	bne.n	8004756 <HAL_RCC_OscConfig+0x35e>
 800473c:	4b62      	ldr	r3, [pc, #392]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	4a61      	ldr	r2, [pc, #388]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004742:	f043 0304 	orr.w	r3, r3, #4
 8004746:	6713      	str	r3, [r2, #112]	; 0x70
 8004748:	4b5f      	ldr	r3, [pc, #380]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a5e      	ldr	r2, [pc, #376]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	e00b      	b.n	800476e <HAL_RCC_OscConfig+0x376>
 8004756:	4b5c      	ldr	r3, [pc, #368]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	4a5b      	ldr	r2, [pc, #364]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	6713      	str	r3, [r2, #112]	; 0x70
 8004762:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	4a58      	ldr	r2, [pc, #352]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004768:	f023 0304 	bic.w	r3, r3, #4
 800476c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d015      	beq.n	80047a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004776:	f7fe fa53 	bl	8002c20 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	e00a      	b.n	8004794 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fe fa4f 	bl	8002c20 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	f241 3288 	movw	r2, #5000	; 0x1388
 800478c:	4293      	cmp	r3, r2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e0d8      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004794:	4b4c      	ldr	r3, [pc, #304]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ee      	beq.n	800477e <HAL_RCC_OscConfig+0x386>
 80047a0:	e014      	b.n	80047cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fe fa3d 	bl	8002c20 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fe fa39 	bl	8002c20 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e0c2      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c0:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ee      	bne.n	80047aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d105      	bne.n	80047de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d2:	4b3d      	ldr	r3, [pc, #244]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a3c      	ldr	r2, [pc, #240]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80ae 	beq.w	8004944 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e8:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d06d      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d14b      	bne.n	8004894 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b32      	ldr	r3, [pc, #200]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a31      	ldr	r2, [pc, #196]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fe fa0a 	bl	8002c20 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fe fa06 	bl	8002c20 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e091      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	4b29      	ldr	r3, [pc, #164]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	019b      	lsls	r3, r3, #6
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	3b01      	subs	r3, #1
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	491b      	ldr	r1, [pc, #108]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004860:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fe f9d8 	bl	8002c20 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004874:	f7fe f9d4 	bl	8002c20 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e05f      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0x47c>
 8004892:	e057      	b.n	8004944 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0b      	ldr	r2, [pc, #44]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 800489a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800489e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe f9be 	bl	8002c20 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fe f9ba 	bl	8002c20 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e045      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_OscConfig+0x4d0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4b0>
 80048c6:	e03d      	b.n	8004944 <HAL_RCC_OscConfig+0x54c>
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048d0:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_RCC_OscConfig+0x558>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d030      	beq.n	8004940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d129      	bne.n	8004940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d122      	bne.n	8004940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004906:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004908:	4293      	cmp	r3, r2
 800490a:	d119      	bne.n	8004940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	3b01      	subs	r3, #1
 800491a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d10f      	bne.n	8004940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d107      	bne.n	8004940 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800

08004954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0d0      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800496c:	4b6a      	ldr	r3, [pc, #424]	; (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d910      	bls.n	800499c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b67      	ldr	r3, [pc, #412]	; (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 020f 	bic.w	r2, r3, #15
 8004982:	4965      	ldr	r1, [pc, #404]	; (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	4b63      	ldr	r3, [pc, #396]	; (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0b8      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b4:	4b59      	ldr	r3, [pc, #356]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4a58      	ldr	r2, [pc, #352]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 80049ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049cc:	4b53      	ldr	r3, [pc, #332]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4a52      	ldr	r2, [pc, #328]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d8:	4b50      	ldr	r3, [pc, #320]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	494d      	ldr	r1, [pc, #308]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d040      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d107      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d115      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e07f      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d107      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a16:	4b41      	ldr	r3, [pc, #260]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e073      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a26:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e06b      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 0203 	bic.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4936      	ldr	r1, [pc, #216]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a48:	f7fe f8ea 	bl	8002c20 <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7fe f8e6 	bl	8002c20 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e053      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	4b2d      	ldr	r3, [pc, #180]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 020c 	and.w	r2, r3, #12
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d1eb      	bne.n	8004a50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a78:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d210      	bcs.n	8004aa8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 020f 	bic.w	r2, r3, #15
 8004a8e:	4922      	ldr	r1, [pc, #136]	; (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e032      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4916      	ldr	r1, [pc, #88]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	490e      	ldr	r1, [pc, #56]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ae6:	f000 f821 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 8004aea:	4602      	mov	r2, r0
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	490a      	ldr	r1, [pc, #40]	; (8004b20 <HAL_RCC_ClockConfig+0x1cc>)
 8004af8:	5ccb      	ldrb	r3, [r1, r3]
 8004afa:	fa22 f303 	lsr.w	r3, r2, r3
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <HAL_RCC_ClockConfig+0x1d0>)
 8004b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_RCC_ClockConfig+0x1d4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe f846 	bl	8002b98 <HAL_InitTick>

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40023c00 	.word	0x40023c00
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	08008f58 	.word	0x08008f58
 8004b24:	20000008 	.word	0x20000008
 8004b28:	2000000c 	.word	0x2000000c

08004b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b30:	b094      	sub	sp, #80	; 0x50
 8004b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	647b      	str	r3, [r7, #68]	; 0x44
 8004b38:	2300      	movs	r3, #0
 8004b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b44:	4b79      	ldr	r3, [pc, #484]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d00d      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x40>
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	f200 80e1 	bhi.w	8004d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x34>
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b5e:	e0db      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b60:	4b73      	ldr	r3, [pc, #460]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b64:	e0db      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b66:	4b73      	ldr	r3, [pc, #460]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b6a:	e0d8      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b6c:	4b6f      	ldr	r3, [pc, #444]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b76:	4b6d      	ldr	r3, [pc, #436]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d063      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b82:	4b6a      	ldr	r3, [pc, #424]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	2200      	movs	r2, #0
 8004b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	633b      	str	r3, [r7, #48]	; 0x30
 8004b96:	2300      	movs	r3, #0
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f04f 0100 	mov.w	r1, #0
 8004baa:	0159      	lsls	r1, r3, #5
 8004bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb0:	0150      	lsls	r0, r2, #5
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	1a51      	subs	r1, r2, r1
 8004bba:	6139      	str	r1, [r7, #16]
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	018b      	lsls	r3, r1, #6
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bda:	4651      	mov	r1, sl
 8004bdc:	018a      	lsls	r2, r1, #6
 8004bde:	4651      	mov	r1, sl
 8004be0:	ebb2 0801 	subs.w	r8, r2, r1
 8004be4:	4659      	mov	r1, fp
 8004be6:	eb63 0901 	sbc.w	r9, r3, r1
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bfe:	4690      	mov	r8, r2
 8004c00:	4699      	mov	r9, r3
 8004c02:	4623      	mov	r3, r4
 8004c04:	eb18 0303 	adds.w	r3, r8, r3
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	462b      	mov	r3, r5
 8004c0c:	eb49 0303 	adc.w	r3, r9, r3
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c1e:	4629      	mov	r1, r5
 8004c20:	024b      	lsls	r3, r1, #9
 8004c22:	4621      	mov	r1, r4
 8004c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c28:	4621      	mov	r1, r4
 8004c2a:	024a      	lsls	r2, r1, #9
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c32:	2200      	movs	r2, #0
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c3c:	f7fb fb50 	bl	80002e0 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c48:	e058      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4a:	4b38      	ldr	r3, [pc, #224]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	2200      	movs	r2, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	4611      	mov	r1, r2
 8004c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c5a:	623b      	str	r3, [r7, #32]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	f04f 0000 	mov.w	r0, #0
 8004c6c:	f04f 0100 	mov.w	r1, #0
 8004c70:	0159      	lsls	r1, r3, #5
 8004c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c76:	0150      	lsls	r0, r2, #5
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c82:	4649      	mov	r1, r9
 8004c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	00eb      	lsls	r3, r5, #3
 8004cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb2:	00e2      	lsls	r2, r4, #3
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	18e3      	adds	r3, r4, r3
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	eb45 0303 	adc.w	r3, r5, r3
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	028b      	lsls	r3, r1, #10
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cdc:	4621      	mov	r1, r4
 8004cde:	028a      	lsls	r2, r1, #10
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	61fa      	str	r2, [r7, #28]
 8004cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf0:	f7fb faf6 	bl	80002e0 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	3301      	adds	r3, #1
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d16:	e002      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3750      	adds	r7, #80	; 0x50
 8004d24:	46bd      	mov	sp, r7
 8004d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	007a1200 	.word	0x007a1200

08004d38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000008 	.word	0x20000008

08004d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d54:	f7ff fff0 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	0a9b      	lsrs	r3, r3, #10
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	4903      	ldr	r1, [pc, #12]	; (8004d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d66:	5ccb      	ldrb	r3, [r1, r3]
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40023800 	.word	0x40023800
 8004d74:	08008f68 	.word	0x08008f68

08004d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d7c:	f7ff ffdc 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	0b5b      	lsrs	r3, r3, #13
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	4903      	ldr	r1, [pc, #12]	; (8004d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d8e:	5ccb      	ldrb	r3, [r1, r3]
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	08008f68 	.word	0x08008f68

08004da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d012      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dc8:	4b69      	ldr	r3, [pc, #420]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a68      	ldr	r2, [pc, #416]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dd2:	6093      	str	r3, [r2, #8]
 8004dd4:	4b66      	ldr	r3, [pc, #408]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	4964      	ldr	r1, [pc, #400]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d017      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dfa:	4b5d      	ldr	r3, [pc, #372]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e08:	4959      	ldr	r1, [pc, #356]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e18:	d101      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d017      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e36:	4b4e      	ldr	r3, [pc, #312]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	494a      	ldr	r1, [pc, #296]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e54:	d101      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 808b 	beq.w	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e84:	4b3a      	ldr	r3, [pc, #232]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	4a39      	ldr	r2, [pc, #228]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e90:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e9c:	4b35      	ldr	r3, [pc, #212]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a34      	ldr	r2, [pc, #208]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fd feba 	bl	8002c20 <HAL_GetTick>
 8004eac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fd feb6 	bl	8002c20 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e38f      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ece:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d035      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d02e      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eec:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f02:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f0e:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f14:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d114      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fd fe7e 	bl	8002c20 <HAL_GetTick>
 8004f24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f26:	e00a      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fd fe7a 	bl	8002c20 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e351      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ee      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f56:	d111      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f66:	400b      	ands	r3, r1
 8004f68:	4901      	ldr	r1, [pc, #4]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40007000 	.word	0x40007000
 8004f78:	0ffffcff 	.word	0x0ffffcff
 8004f7c:	4bac      	ldr	r3, [pc, #688]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4aab      	ldr	r2, [pc, #684]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f86:	6093      	str	r3, [r2, #8]
 8004f88:	4ba9      	ldr	r3, [pc, #676]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f94:	49a6      	ldr	r1, [pc, #664]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fa6:	4ba2      	ldr	r3, [pc, #648]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fac:	4aa0      	ldr	r2, [pc, #640]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fb6:	4b9e      	ldr	r3, [pc, #632]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	499b      	ldr	r1, [pc, #620]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fd4:	4b96      	ldr	r3, [pc, #600]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe2:	4993      	ldr	r1, [pc, #588]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ff6:	4b8e      	ldr	r3, [pc, #568]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005004:	498a      	ldr	r1, [pc, #552]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005018:	4b85      	ldr	r3, [pc, #532]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005026:	4982      	ldr	r1, [pc, #520]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800503a:	4b7d      	ldr	r3, [pc, #500]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	4979      	ldr	r1, [pc, #484]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800505c:	4b74      	ldr	r3, [pc, #464]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f023 0203 	bic.w	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	4971      	ldr	r1, [pc, #452]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800507e:	4b6c      	ldr	r3, [pc, #432]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f023 020c 	bic.w	r2, r3, #12
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508c:	4968      	ldr	r1, [pc, #416]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050a0:	4b63      	ldr	r3, [pc, #396]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ae:	4960      	ldr	r1, [pc, #384]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050c2:	4b5b      	ldr	r3, [pc, #364]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	4957      	ldr	r1, [pc, #348]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050e4:	4b52      	ldr	r3, [pc, #328]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	494f      	ldr	r1, [pc, #316]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005106:	4b4a      	ldr	r3, [pc, #296]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	4946      	ldr	r1, [pc, #280]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005128:	4b41      	ldr	r3, [pc, #260]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005136:	493e      	ldr	r1, [pc, #248]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800514a:	4b39      	ldr	r3, [pc, #228]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005150:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005158:	4935      	ldr	r1, [pc, #212]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800516c:	4b30      	ldr	r3, [pc, #192]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800517a:	492d      	ldr	r1, [pc, #180]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d011      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800518e:	4b28      	ldr	r3, [pc, #160]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005194:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519c:	4924      	ldr	r1, [pc, #144]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ac:	d101      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051be:	2301      	movs	r3, #1
 80051c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051dc:	4914      	ldr	r1, [pc, #80]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005200:	490b      	ldr	r1, [pc, #44]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00f      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005224:	4902      	ldr	r1, [pc, #8]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800522c:	e002      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005240:	4b8a      	ldr	r3, [pc, #552]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005246:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	4986      	ldr	r1, [pc, #536]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005264:	4b81      	ldr	r3, [pc, #516]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005274:	497d      	ldr	r1, [pc, #500]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d006      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80d6 	beq.w	800543c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005290:	4b76      	ldr	r3, [pc, #472]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a75      	ldr	r2, [pc, #468]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005296:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800529a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529c:	f7fd fcc0 	bl	8002c20 <HAL_GetTick>
 80052a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052a4:	f7fd fcbc 	bl	8002c20 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	; 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e195      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052b6:	4b6d      	ldr	r3, [pc, #436]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d021      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d11d      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052d6:	4b65      	ldr	r3, [pc, #404]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052e4:	4b61      	ldr	r3, [pc, #388]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ea:	0e1b      	lsrs	r3, r3, #24
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	019a      	lsls	r2, r3, #6
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	061b      	lsls	r3, r3, #24
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	071b      	lsls	r3, r3, #28
 800530a:	4958      	ldr	r1, [pc, #352]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02e      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800533c:	d129      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800533e:	4b4b      	ldr	r3, [pc, #300]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800534c:	4b47      	ldr	r3, [pc, #284]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800534e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005352:	0f1b      	lsrs	r3, r3, #28
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	019a      	lsls	r2, r3, #6
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	061b      	lsls	r3, r3, #24
 800536c:	431a      	orrs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	071b      	lsls	r3, r3, #28
 8005372:	493e      	ldr	r1, [pc, #248]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800537a:	4b3c      	ldr	r3, [pc, #240]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005380:	f023 021f 	bic.w	r2, r3, #31
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	3b01      	subs	r3, #1
 800538a:	4938      	ldr	r1, [pc, #224]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01d      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800539e:	4b33      	ldr	r3, [pc, #204]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053ac:	4b2f      	ldr	r3, [pc, #188]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b2:	0f1b      	lsrs	r3, r3, #28
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	019a      	lsls	r2, r3, #6
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	431a      	orrs	r2, r3
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	061b      	lsls	r3, r3, #24
 80053cc:	431a      	orrs	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	071b      	lsls	r3, r3, #28
 80053d2:	4926      	ldr	r1, [pc, #152]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d011      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	019a      	lsls	r2, r3, #6
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	061b      	lsls	r3, r3, #24
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	071b      	lsls	r3, r3, #28
 8005402:	491a      	ldr	r1, [pc, #104]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800540a:	4b18      	ldr	r3, [pc, #96]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a17      	ldr	r2, [pc, #92]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005410:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005416:	f7fd fc03 	bl	8002c20 <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800541e:	f7fd fbff 	bl	8002c20 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b64      	cmp	r3, #100	; 0x64
 800542a:	d901      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e0d8      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b01      	cmp	r3, #1
 8005440:	f040 80ce 	bne.w	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800544a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005450:	f7fd fbe6 	bl	8002c20 <HAL_GetTick>
 8005454:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005456:	e00b      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005458:	f7fd fbe2 	bl	8002c20 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d904      	bls.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e0bb      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800546a:	bf00      	nop
 800546c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005470:	4b5e      	ldr	r3, [pc, #376]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800547c:	d0ec      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800549a:	2b00      	cmp	r3, #0
 800549c:	d02e      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d12a      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054a6:	4b51      	ldr	r3, [pc, #324]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054b4:	4b4d      	ldr	r3, [pc, #308]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	0f1b      	lsrs	r3, r3, #28
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	019a      	lsls	r2, r3, #6
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	071b      	lsls	r3, r3, #28
 80054da:	4944      	ldr	r1, [pc, #272]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054e2:	4b42      	ldr	r3, [pc, #264]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	3b01      	subs	r3, #1
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	493d      	ldr	r1, [pc, #244]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d022      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005510:	d11d      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005512:	4b36      	ldr	r3, [pc, #216]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	0e1b      	lsrs	r3, r3, #24
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005520:	4b32      	ldr	r3, [pc, #200]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005526:	0f1b      	lsrs	r3, r3, #28
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	019a      	lsls	r2, r3, #6
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	041b      	lsls	r3, r3, #16
 800553a:	431a      	orrs	r2, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	061b      	lsls	r3, r3, #24
 8005540:	431a      	orrs	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	071b      	lsls	r3, r3, #28
 8005546:	4929      	ldr	r1, [pc, #164]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d028      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800555a:	4b24      	ldr	r3, [pc, #144]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	0e1b      	lsrs	r3, r3, #24
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005568:	4b20      	ldr	r3, [pc, #128]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556e:	0c1b      	lsrs	r3, r3, #16
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	019a      	lsls	r2, r3, #6
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	431a      	orrs	r2, r3
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	061b      	lsls	r3, r3, #24
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	071b      	lsls	r3, r3, #28
 800558e:	4917      	ldr	r1, [pc, #92]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	4911      	ldr	r1, [pc, #68]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0e      	ldr	r2, [pc, #56]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b8:	f7fd fb32 	bl	8002c20 <HAL_GetTick>
 80055bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055c0:	f7fd fb2e 	bl	8002c20 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e007      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055d2:	4b06      	ldr	r3, [pc, #24]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055de:	d1ef      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40023800 	.word	0x40023800

080055f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e09d      	b.n	800573e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d108      	bne.n	800561c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005612:	d009      	beq.n	8005628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	61da      	str	r2, [r3, #28]
 800561a:	e005      	b.n	8005628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc fd54 	bl	80020f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005668:	d902      	bls.n	8005670 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	e002      	b.n	8005676 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005674:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800567e:	d007      	beq.n	8005690 <HAL_SPI_Init+0xa0>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005688:	d002      	beq.n	8005690 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	ea42 0103 	orr.w	r1, r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	f003 0204 	and.w	r2, r3, #4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800570c:	ea42 0103 	orr.w	r1, r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e049      	b.n	80057ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fc fd3f 	bl	80021f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3304      	adds	r3, #4
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f001 f831 	bl	80067ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d001      	beq.n	800580c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e054      	b.n	80058b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d022      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x80>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d01d      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x80>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d018      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x80>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a21      	ldr	r2, [pc, #132]	; (80058cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x80>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00e      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x80>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d009      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x80>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d004      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x80>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d115      	bne.n	80058a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	4b19      	ldr	r3, [pc, #100]	; (80058e0 <HAL_TIM_Base_Start_IT+0xec>)
 800587c:	4013      	ands	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b06      	cmp	r3, #6
 8005884:	d015      	beq.n	80058b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588c:	d011      	beq.n	80058b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589e:	e008      	b.n	80058b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e000      	b.n	80058b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40010400 	.word	0x40010400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40001800 	.word	0x40001800
 80058e0:	00010007 	.word	0x00010007

080058e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e049      	b.n	800598a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f841 	bl	8005992 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f000 ff62 	bl	80067ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e049      	b.n	8005a4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fc fd1f 	bl	8002410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f000 ff01 	bl	80067ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <HAL_TIM_PWM_Start+0x24>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e03c      	b.n	8005af2 <HAL_TIM_PWM_Start+0x9e>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d109      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x3e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e02f      	b.n	8005af2 <HAL_TIM_PWM_Start+0x9e>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d109      	bne.n	8005aac <HAL_TIM_PWM_Start+0x58>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	e022      	b.n	8005af2 <HAL_TIM_PWM_Start+0x9e>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b0c      	cmp	r3, #12
 8005ab0:	d109      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0x72>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	bf14      	ite	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	2300      	moveq	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	e015      	b.n	8005af2 <HAL_TIM_PWM_Start+0x9e>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d109      	bne.n	8005ae0 <HAL_TIM_PWM_Start+0x8c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e008      	b.n	8005af2 <HAL_TIM_PWM_Start+0x9e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e092      	b.n	8005c20 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_PWM_Start+0xb6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b08:	e023      	b.n	8005b52 <HAL_TIM_PWM_Start+0xfe>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIM_PWM_Start+0xc6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b18:	e01b      	b.n	8005b52 <HAL_TIM_PWM_Start+0xfe>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_PWM_Start+0xd6>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b28:	e013      	b.n	8005b52 <HAL_TIM_PWM_Start+0xfe>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_PWM_Start+0xe6>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b38:	e00b      	b.n	8005b52 <HAL_TIM_PWM_Start+0xfe>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_PWM_Start+0xf6>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b48:	e003      	b.n	8005b52 <HAL_TIM_PWM_Start+0xfe>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2201      	movs	r2, #1
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 fb08 	bl	8007170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a30      	ldr	r2, [pc, #192]	; (8005c28 <HAL_TIM_PWM_Start+0x1d4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIM_PWM_Start+0x120>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a2f      	ldr	r2, [pc, #188]	; (8005c2c <HAL_TIM_PWM_Start+0x1d8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d101      	bne.n	8005b78 <HAL_TIM_PWM_Start+0x124>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <HAL_TIM_PWM_Start+0x126>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <HAL_TIM_PWM_Start+0x1d4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <HAL_TIM_PWM_Start+0x18a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d01d      	beq.n	8005bde <HAL_TIM_PWM_Start+0x18a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <HAL_TIM_PWM_Start+0x1dc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d018      	beq.n	8005bde <HAL_TIM_PWM_Start+0x18a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a20      	ldr	r2, [pc, #128]	; (8005c34 <HAL_TIM_PWM_Start+0x1e0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_TIM_PWM_Start+0x18a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1f      	ldr	r2, [pc, #124]	; (8005c38 <HAL_TIM_PWM_Start+0x1e4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <HAL_TIM_PWM_Start+0x18a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a19      	ldr	r2, [pc, #100]	; (8005c2c <HAL_TIM_PWM_Start+0x1d8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_TIM_PWM_Start+0x18a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1b      	ldr	r2, [pc, #108]	; (8005c3c <HAL_TIM_PWM_Start+0x1e8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_TIM_PWM_Start+0x18a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <HAL_TIM_PWM_Start+0x1ec>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d115      	bne.n	8005c0a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	4b17      	ldr	r3, [pc, #92]	; (8005c44 <HAL_TIM_PWM_Start+0x1f0>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b06      	cmp	r3, #6
 8005bee:	d015      	beq.n	8005c1c <HAL_TIM_PWM_Start+0x1c8>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf6:	d011      	beq.n	8005c1c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c08:	e008      	b.n	8005c1c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e000      	b.n	8005c1e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40001800 	.word	0x40001800
 8005c44:	00010007 	.word	0x00010007

08005c48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e049      	b.n	8005cee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f841 	bl	8005cf6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4619      	mov	r1, r3
 8005c86:	4610      	mov	r0, r2
 8005c88:	f000 fdb0 	bl	80067ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e08f      	b.n	8005e40 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fc faf5 	bl	8002324 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6899      	ldr	r1, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <HAL_TIM_Encoder_Init+0x13c>)
 8005d4e:	400b      	ands	r3, r1
 8005d50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f000 fd45 	bl	80067ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4b31      	ldr	r3, [pc, #196]	; (8005e4c <HAL_TIM_Encoder_Init+0x140>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	4313      	orrs	r3, r2
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <HAL_TIM_Encoder_Init+0x144>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4b2a      	ldr	r3, [pc, #168]	; (8005e54 <HAL_TIM_Encoder_Init+0x148>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	4313      	orrs	r3, r2
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	011a      	lsls	r2, r3, #4
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	031b      	lsls	r3, r3, #12
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	4313      	orrs	r3, r2
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	fffebff8 	.word	0xfffebff8
 8005e4c:	fffffcfc 	.word	0xfffffcfc
 8005e50:	fffff3f3 	.word	0xfffff3f3
 8005e54:	ffff0f0f 	.word	0xffff0f0f

08005e58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d110      	bne.n	8005eaa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d102      	bne.n	8005e94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e8e:	7b7b      	ldrb	r3, [r7, #13]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d001      	beq.n	8005e98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e069      	b.n	8005f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea8:	e031      	b.n	8005f0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d110      	bne.n	8005ed2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb0:	7bbb      	ldrb	r3, [r7, #14]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d102      	bne.n	8005ebc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eb6:	7b3b      	ldrb	r3, [r7, #12]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d001      	beq.n	8005ec0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e055      	b.n	8005f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed0:	e01d      	b.n	8005f0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d108      	bne.n	8005eea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ed8:	7bbb      	ldrb	r3, [r7, #14]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d105      	bne.n	8005eea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ede:	7b7b      	ldrb	r3, [r7, #13]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d102      	bne.n	8005eea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ee4:	7b3b      	ldrb	r3, [r7, #12]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d001      	beq.n	8005eee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e03e      	b.n	8005f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_TIM_Encoder_Start+0xc4>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d008      	beq.n	8005f2c <HAL_TIM_Encoder_Start+0xd4>
 8005f1a:	e00f      	b.n	8005f3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2201      	movs	r2, #1
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 f923 	bl	8007170 <TIM_CCxChannelCmd>
      break;
 8005f2a:	e016      	b.n	8005f5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2201      	movs	r2, #1
 8005f32:	2104      	movs	r1, #4
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 f91b 	bl	8007170 <TIM_CCxChannelCmd>
      break;
 8005f3a:	e00e      	b.n	8005f5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 f913 	bl	8007170 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	2104      	movs	r1, #4
 8005f52:	4618      	mov	r0, r3
 8005f54:	f001 f90c 	bl	8007170 <TIM_CCxChannelCmd>
      break;
 8005f58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0201 	orr.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d122      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d11b      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0202 	mvn.w	r2, #2
 8005fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fbfa 	bl	80067b0 <HAL_TIM_IC_CaptureCallback>
 8005fbc:	e005      	b.n	8005fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fbec 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fbfd 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 0304 	and.w	r3, r3, #4
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d122      	bne.n	8006024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d11b      	bne.n	8006024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0204 	mvn.w	r2, #4
 8005ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fbd0 	bl	80067b0 <HAL_TIM_IC_CaptureCallback>
 8006010:	e005      	b.n	800601e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fbc2 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fbd3 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b08      	cmp	r3, #8
 8006030:	d122      	bne.n	8006078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b08      	cmp	r3, #8
 800603e:	d11b      	bne.n	8006078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0208 	mvn.w	r2, #8
 8006048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2204      	movs	r2, #4
 800604e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fba6 	bl	80067b0 <HAL_TIM_IC_CaptureCallback>
 8006064:	e005      	b.n	8006072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fb98 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fba9 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0310 	and.w	r3, r3, #16
 8006082:	2b10      	cmp	r3, #16
 8006084:	d122      	bne.n	80060cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b10      	cmp	r3, #16
 8006092:	d11b      	bne.n	80060cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0210 	mvn.w	r2, #16
 800609c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2208      	movs	r2, #8
 80060a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fb7c 	bl	80067b0 <HAL_TIM_IC_CaptureCallback>
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fb6e 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fb7f 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d10e      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d107      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0201 	mvn.w	r2, #1
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fa fc18 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	d10e      	bne.n	8006124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006110:	2b80      	cmp	r3, #128	; 0x80
 8006112:	d107      	bne.n	8006124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800611c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 f962 	bl	80073e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006132:	d10e      	bne.n	8006152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613e:	2b80      	cmp	r3, #128	; 0x80
 8006140:	d107      	bne.n	8006152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800614a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 f955 	bl	80073fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d10e      	bne.n	800617e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d107      	bne.n	800617e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fb2d 	bl	80067d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b20      	cmp	r3, #32
 800618a:	d10e      	bne.n	80061aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b20      	cmp	r3, #32
 8006198:	d107      	bne.n	80061aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0220 	mvn.w	r2, #32
 80061a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f915 	bl	80073d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e066      	b.n	80062a0 <HAL_TIM_OC_ConfigChannel+0xec>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b14      	cmp	r3, #20
 80061de:	d857      	bhi.n	8006290 <HAL_TIM_OC_ConfigChannel+0xdc>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	0800623d 	.word	0x0800623d
 80061ec:	08006291 	.word	0x08006291
 80061f0:	08006291 	.word	0x08006291
 80061f4:	08006291 	.word	0x08006291
 80061f8:	0800624b 	.word	0x0800624b
 80061fc:	08006291 	.word	0x08006291
 8006200:	08006291 	.word	0x08006291
 8006204:	08006291 	.word	0x08006291
 8006208:	08006259 	.word	0x08006259
 800620c:	08006291 	.word	0x08006291
 8006210:	08006291 	.word	0x08006291
 8006214:	08006291 	.word	0x08006291
 8006218:	08006267 	.word	0x08006267
 800621c:	08006291 	.word	0x08006291
 8006220:	08006291 	.word	0x08006291
 8006224:	08006291 	.word	0x08006291
 8006228:	08006275 	.word	0x08006275
 800622c:	08006291 	.word	0x08006291
 8006230:	08006291 	.word	0x08006291
 8006234:	08006291 	.word	0x08006291
 8006238:	08006283 	.word	0x08006283
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fb72 	bl	800692c <TIM_OC1_SetConfig>
      break;
 8006248:	e025      	b.n	8006296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fbdd 	bl	8006a10 <TIM_OC2_SetConfig>
      break;
 8006256:	e01e      	b.n	8006296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fc4e 	bl	8006b00 <TIM_OC3_SetConfig>
      break;
 8006264:	e017      	b.n	8006296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fcbd 	bl	8006bec <TIM_OC4_SetConfig>
      break;
 8006272:	e010      	b.n	8006296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fd0e 	bl	8006c9c <TIM_OC5_SetConfig>
      break;
 8006280:	e009      	b.n	8006296 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fd59 	bl	8006d40 <TIM_OC6_SetConfig>
      break;
 800628e:	e002      	b.n	8006296 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
      break;
 8006294:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e088      	b.n	80063d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11b      	bne.n	800630c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6819      	ldr	r1, [r3, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f000 fd80 	bl	8006de8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 020c 	bic.w	r2, r2, #12
 80062f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6999      	ldr	r1, [r3, #24]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	619a      	str	r2, [r3, #24]
 800630a:	e060      	b.n	80063ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b04      	cmp	r3, #4
 8006310:	d11c      	bne.n	800634c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f000 fe04 	bl	8006f2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006334:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6999      	ldr	r1, [r3, #24]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	021a      	lsls	r2, r3, #8
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	619a      	str	r2, [r3, #24]
 800634a:	e040      	b.n	80063ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b08      	cmp	r3, #8
 8006350:	d11b      	bne.n	800638a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6819      	ldr	r1, [r3, #0]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f000 fe51 	bl	8007008 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 020c 	bic.w	r2, r2, #12
 8006374:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69d9      	ldr	r1, [r3, #28]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	61da      	str	r2, [r3, #28]
 8006388:	e021      	b.n	80063ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b0c      	cmp	r3, #12
 800638e:	d11c      	bne.n	80063ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6819      	ldr	r1, [r3, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f000 fe6e 	bl	8007080 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69da      	ldr	r2, [r3, #28]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69d9      	ldr	r1, [r3, #28]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	021a      	lsls	r2, r3, #8
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	61da      	str	r2, [r3, #28]
 80063c8:	e001      	b.n	80063ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e0ff      	b.n	80065fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b14      	cmp	r3, #20
 800640a:	f200 80f0 	bhi.w	80065ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006469 	.word	0x08006469
 8006418:	080065ef 	.word	0x080065ef
 800641c:	080065ef 	.word	0x080065ef
 8006420:	080065ef 	.word	0x080065ef
 8006424:	080064a9 	.word	0x080064a9
 8006428:	080065ef 	.word	0x080065ef
 800642c:	080065ef 	.word	0x080065ef
 8006430:	080065ef 	.word	0x080065ef
 8006434:	080064eb 	.word	0x080064eb
 8006438:	080065ef 	.word	0x080065ef
 800643c:	080065ef 	.word	0x080065ef
 8006440:	080065ef 	.word	0x080065ef
 8006444:	0800652b 	.word	0x0800652b
 8006448:	080065ef 	.word	0x080065ef
 800644c:	080065ef 	.word	0x080065ef
 8006450:	080065ef 	.word	0x080065ef
 8006454:	0800656d 	.word	0x0800656d
 8006458:	080065ef 	.word	0x080065ef
 800645c:	080065ef 	.word	0x080065ef
 8006460:	080065ef 	.word	0x080065ef
 8006464:	080065ad 	.word	0x080065ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fa5c 	bl	800692c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0208 	orr.w	r2, r2, #8
 8006482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0204 	bic.w	r2, r2, #4
 8006492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6999      	ldr	r1, [r3, #24]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	619a      	str	r2, [r3, #24]
      break;
 80064a6:	e0a5      	b.n	80065f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68b9      	ldr	r1, [r7, #8]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 faae 	bl	8006a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6999      	ldr	r1, [r3, #24]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	021a      	lsls	r2, r3, #8
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	619a      	str	r2, [r3, #24]
      break;
 80064e8:	e084      	b.n	80065f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fb05 	bl	8006b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0208 	orr.w	r2, r2, #8
 8006504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0204 	bic.w	r2, r2, #4
 8006514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69d9      	ldr	r1, [r3, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	61da      	str	r2, [r3, #28]
      break;
 8006528:	e064      	b.n	80065f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fb5b 	bl	8006bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69d9      	ldr	r1, [r3, #28]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	021a      	lsls	r2, r3, #8
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	61da      	str	r2, [r3, #28]
      break;
 800656a:	e043      	b.n	80065f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fb92 	bl	8006c9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0208 	orr.w	r2, r2, #8
 8006586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0204 	bic.w	r2, r2, #4
 8006596:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065aa:	e023      	b.n	80065f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fbc4 	bl	8006d40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	021a      	lsls	r2, r3, #8
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065ec:	e002      	b.n	80065f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	75fb      	strb	r3, [r7, #23]
      break;
 80065f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop

08006608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_TIM_ConfigClockSource+0x1c>
 8006620:	2302      	movs	r3, #2
 8006622:	e0b4      	b.n	800678e <HAL_TIM_ConfigClockSource+0x186>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	4b56      	ldr	r3, [pc, #344]	; (8006798 <HAL_TIM_ConfigClockSource+0x190>)
 8006640:	4013      	ands	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800664a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665c:	d03e      	beq.n	80066dc <HAL_TIM_ConfigClockSource+0xd4>
 800665e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006662:	f200 8087 	bhi.w	8006774 <HAL_TIM_ConfigClockSource+0x16c>
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666a:	f000 8086 	beq.w	800677a <HAL_TIM_ConfigClockSource+0x172>
 800666e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006672:	d87f      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x16c>
 8006674:	2b70      	cmp	r3, #112	; 0x70
 8006676:	d01a      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0xa6>
 8006678:	2b70      	cmp	r3, #112	; 0x70
 800667a:	d87b      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x16c>
 800667c:	2b60      	cmp	r3, #96	; 0x60
 800667e:	d050      	beq.n	8006722 <HAL_TIM_ConfigClockSource+0x11a>
 8006680:	2b60      	cmp	r3, #96	; 0x60
 8006682:	d877      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b50      	cmp	r3, #80	; 0x50
 8006686:	d03c      	beq.n	8006702 <HAL_TIM_ConfigClockSource+0xfa>
 8006688:	2b50      	cmp	r3, #80	; 0x50
 800668a:	d873      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d058      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x13a>
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d86f      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x16c>
 8006694:	2b30      	cmp	r3, #48	; 0x30
 8006696:	d064      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15a>
 8006698:	2b30      	cmp	r3, #48	; 0x30
 800669a:	d86b      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x16c>
 800669c:	2b20      	cmp	r3, #32
 800669e:	d060      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15a>
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d867      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x16c>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d05c      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15a>
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d05a      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15a>
 80066ac:	e062      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6899      	ldr	r1, [r3, #8]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f000 fd37 	bl	8007130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	609a      	str	r2, [r3, #8]
      break;
 80066da:	e04f      	b.n	800677c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	6899      	ldr	r1, [r3, #8]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f000 fd20 	bl	8007130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066fe:	609a      	str	r2, [r3, #8]
      break;
 8006700:	e03c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	6859      	ldr	r1, [r3, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	461a      	mov	r2, r3
 8006710:	f000 fbde 	bl	8006ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2150      	movs	r1, #80	; 0x50
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fced 	bl	80070fa <TIM_ITRx_SetConfig>
      break;
 8006720:	e02c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6859      	ldr	r1, [r3, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	461a      	mov	r2, r3
 8006730:	f000 fc3a 	bl	8006fa8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2160      	movs	r1, #96	; 0x60
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fcdd 	bl	80070fa <TIM_ITRx_SetConfig>
      break;
 8006740:	e01c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6859      	ldr	r1, [r3, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	461a      	mov	r2, r3
 8006750:	f000 fbbe 	bl	8006ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2140      	movs	r1, #64	; 0x40
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fccd 	bl	80070fa <TIM_ITRx_SetConfig>
      break;
 8006760:	e00c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f000 fcc4 	bl	80070fa <TIM_ITRx_SetConfig>
      break;
 8006772:	e003      	b.n	800677c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
      break;
 8006778:	e000      	b.n	800677c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800677a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	fffeff88 	.word	0xfffeff88

0800679c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a40      	ldr	r2, [pc, #256]	; (8006900 <TIM_Base_SetConfig+0x114>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d013      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680a:	d00f      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a3d      	ldr	r2, [pc, #244]	; (8006904 <TIM_Base_SetConfig+0x118>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00b      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a3c      	ldr	r2, [pc, #240]	; (8006908 <TIM_Base_SetConfig+0x11c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d007      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a3b      	ldr	r2, [pc, #236]	; (800690c <TIM_Base_SetConfig+0x120>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d003      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a3a      	ldr	r2, [pc, #232]	; (8006910 <TIM_Base_SetConfig+0x124>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d108      	bne.n	800683e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a2f      	ldr	r2, [pc, #188]	; (8006900 <TIM_Base_SetConfig+0x114>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d02b      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684c:	d027      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2c      	ldr	r2, [pc, #176]	; (8006904 <TIM_Base_SetConfig+0x118>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d023      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a2b      	ldr	r2, [pc, #172]	; (8006908 <TIM_Base_SetConfig+0x11c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d01f      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a2a      	ldr	r2, [pc, #168]	; (800690c <TIM_Base_SetConfig+0x120>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d01b      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a29      	ldr	r2, [pc, #164]	; (8006910 <TIM_Base_SetConfig+0x124>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d017      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a28      	ldr	r2, [pc, #160]	; (8006914 <TIM_Base_SetConfig+0x128>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a27      	ldr	r2, [pc, #156]	; (8006918 <TIM_Base_SetConfig+0x12c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00f      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a26      	ldr	r2, [pc, #152]	; (800691c <TIM_Base_SetConfig+0x130>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00b      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a25      	ldr	r2, [pc, #148]	; (8006920 <TIM_Base_SetConfig+0x134>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d007      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a24      	ldr	r2, [pc, #144]	; (8006924 <TIM_Base_SetConfig+0x138>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a23      	ldr	r2, [pc, #140]	; (8006928 <TIM_Base_SetConfig+0x13c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d108      	bne.n	80068b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a0a      	ldr	r2, [pc, #40]	; (8006900 <TIM_Base_SetConfig+0x114>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_Base_SetConfig+0xf8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a0c      	ldr	r2, [pc, #48]	; (8006910 <TIM_Base_SetConfig+0x124>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d103      	bne.n	80068ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	615a      	str	r2, [r3, #20]
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40010000 	.word	0x40010000
 8006904:	40000400 	.word	0x40000400
 8006908:	40000800 	.word	0x40000800
 800690c:	40000c00 	.word	0x40000c00
 8006910:	40010400 	.word	0x40010400
 8006914:	40014000 	.word	0x40014000
 8006918:	40014400 	.word	0x40014400
 800691c:	40014800 	.word	0x40014800
 8006920:	40001800 	.word	0x40001800
 8006924:	40001c00 	.word	0x40001c00
 8006928:	40002000 	.word	0x40002000

0800692c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4b2b      	ldr	r3, [pc, #172]	; (8006a04 <TIM_OC1_SetConfig+0xd8>)
 8006958:	4013      	ands	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0303 	bic.w	r3, r3, #3
 8006962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f023 0302 	bic.w	r3, r3, #2
 8006974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a21      	ldr	r2, [pc, #132]	; (8006a08 <TIM_OC1_SetConfig+0xdc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_OC1_SetConfig+0x64>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a20      	ldr	r2, [pc, #128]	; (8006a0c <TIM_OC1_SetConfig+0xe0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d10c      	bne.n	80069aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 0308 	bic.w	r3, r3, #8
 8006996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f023 0304 	bic.w	r3, r3, #4
 80069a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a16      	ldr	r2, [pc, #88]	; (8006a08 <TIM_OC1_SetConfig+0xdc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_OC1_SetConfig+0x8e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a15      	ldr	r2, [pc, #84]	; (8006a0c <TIM_OC1_SetConfig+0xe0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d111      	bne.n	80069de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	621a      	str	r2, [r3, #32]
}
 80069f8:	bf00      	nop
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	fffeff8f 	.word	0xfffeff8f
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40010400 	.word	0x40010400

08006a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0210 	bic.w	r2, r3, #16
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4b2e      	ldr	r3, [pc, #184]	; (8006af4 <TIM_OC2_SetConfig+0xe4>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f023 0320 	bic.w	r3, r3, #32
 8006a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a23      	ldr	r2, [pc, #140]	; (8006af8 <TIM_OC2_SetConfig+0xe8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC2_SetConfig+0x68>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a22      	ldr	r2, [pc, #136]	; (8006afc <TIM_OC2_SetConfig+0xec>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d10d      	bne.n	8006a94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <TIM_OC2_SetConfig+0xe8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <TIM_OC2_SetConfig+0x94>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	; (8006afc <TIM_OC2_SetConfig+0xec>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d113      	bne.n	8006acc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	feff8fff 	.word	0xfeff8fff
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40010400 	.word	0x40010400

08006b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4b2d      	ldr	r3, [pc, #180]	; (8006be0 <TIM_OC3_SetConfig+0xe0>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0303 	bic.w	r3, r3, #3
 8006b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <TIM_OC3_SetConfig+0xe4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_OC3_SetConfig+0x66>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <TIM_OC3_SetConfig+0xe8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d10d      	bne.n	8006b82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <TIM_OC3_SetConfig+0xe4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <TIM_OC3_SetConfig+0x92>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <TIM_OC3_SetConfig+0xe8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d113      	bne.n	8006bba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	621a      	str	r2, [r3, #32]
}
 8006bd4:	bf00      	nop
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	fffeff8f 	.word	0xfffeff8f
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40010400 	.word	0x40010400

08006bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4b1e      	ldr	r3, [pc, #120]	; (8006c90 <TIM_OC4_SetConfig+0xa4>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	031b      	lsls	r3, r3, #12
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a13      	ldr	r2, [pc, #76]	; (8006c94 <TIM_OC4_SetConfig+0xa8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_OC4_SetConfig+0x68>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a12      	ldr	r2, [pc, #72]	; (8006c98 <TIM_OC4_SetConfig+0xac>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d109      	bne.n	8006c68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	019b      	lsls	r3, r3, #6
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	bf00      	nop
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	feff8fff 	.word	0xfeff8fff
 8006c94:	40010000 	.word	0x40010000
 8006c98:	40010400 	.word	0x40010400

08006c9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4b1b      	ldr	r3, [pc, #108]	; (8006d34 <TIM_OC5_SetConfig+0x98>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006cdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a12      	ldr	r2, [pc, #72]	; (8006d38 <TIM_OC5_SetConfig+0x9c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d003      	beq.n	8006cfa <TIM_OC5_SetConfig+0x5e>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a11      	ldr	r2, [pc, #68]	; (8006d3c <TIM_OC5_SetConfig+0xa0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d109      	bne.n	8006d0e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	621a      	str	r2, [r3, #32]
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	fffeff8f 	.word	0xfffeff8f
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40010400 	.word	0x40010400

08006d40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4b1c      	ldr	r3, [pc, #112]	; (8006ddc <TIM_OC6_SetConfig+0x9c>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	051b      	lsls	r3, r3, #20
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a13      	ldr	r2, [pc, #76]	; (8006de0 <TIM_OC6_SetConfig+0xa0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_OC6_SetConfig+0x60>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a12      	ldr	r2, [pc, #72]	; (8006de4 <TIM_OC6_SetConfig+0xa4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d109      	bne.n	8006db4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006da6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	029b      	lsls	r3, r3, #10
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	feff8fff 	.word	0xfeff8fff
 8006de0:	40010000 	.word	0x40010000
 8006de4:	40010400 	.word	0x40010400

08006de8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a28      	ldr	r2, [pc, #160]	; (8006eb4 <TIM_TI1_SetConfig+0xcc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d01b      	beq.n	8006e4e <TIM_TI1_SetConfig+0x66>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1c:	d017      	beq.n	8006e4e <TIM_TI1_SetConfig+0x66>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4a25      	ldr	r2, [pc, #148]	; (8006eb8 <TIM_TI1_SetConfig+0xd0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d013      	beq.n	8006e4e <TIM_TI1_SetConfig+0x66>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a24      	ldr	r2, [pc, #144]	; (8006ebc <TIM_TI1_SetConfig+0xd4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00f      	beq.n	8006e4e <TIM_TI1_SetConfig+0x66>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4a23      	ldr	r2, [pc, #140]	; (8006ec0 <TIM_TI1_SetConfig+0xd8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00b      	beq.n	8006e4e <TIM_TI1_SetConfig+0x66>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4a22      	ldr	r2, [pc, #136]	; (8006ec4 <TIM_TI1_SetConfig+0xdc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d007      	beq.n	8006e4e <TIM_TI1_SetConfig+0x66>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4a21      	ldr	r2, [pc, #132]	; (8006ec8 <TIM_TI1_SetConfig+0xe0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d003      	beq.n	8006e4e <TIM_TI1_SetConfig+0x66>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4a20      	ldr	r2, [pc, #128]	; (8006ecc <TIM_TI1_SetConfig+0xe4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d101      	bne.n	8006e52 <TIM_TI1_SetConfig+0x6a>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <TIM_TI1_SetConfig+0x6c>
 8006e52:	2300      	movs	r3, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	e003      	b.n	8006e72 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f043 0301 	orr.w	r3, r3, #1
 8006e70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f023 030a 	bic.w	r3, r3, #10
 8006e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f003 030a 	and.w	r3, r3, #10
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	621a      	str	r2, [r3, #32]
}
 8006ea6:	bf00      	nop
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	40010000 	.word	0x40010000
 8006eb8:	40000400 	.word	0x40000400
 8006ebc:	40000800 	.word	0x40000800
 8006ec0:	40000c00 	.word	0x40000c00
 8006ec4:	40010400 	.word	0x40010400
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40001800 	.word	0x40001800

08006ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0201 	bic.w	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f023 030a 	bic.w	r3, r3, #10
 8006f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b087      	sub	sp, #28
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	f023 0210 	bic.w	r2, r3, #16
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	031b      	lsls	r3, r3, #12
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	621a      	str	r2, [r3, #32]
}
 8006f9c:	bf00      	nop
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f023 0210 	bic.w	r2, r3, #16
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	031b      	lsls	r3, r3, #12
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fe4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	621a      	str	r2, [r3, #32]
}
 8006ffc:	bf00      	nop
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 0303 	bic.w	r3, r3, #3
 8007034:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007044:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	b2db      	uxtb	r3, r3
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007058:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	621a      	str	r2, [r3, #32]
}
 8007074:	bf00      	nop
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	031b      	lsls	r3, r3, #12
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80070d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	031b      	lsls	r3, r3, #12
 80070d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4313      	orrs	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4313      	orrs	r3, r2
 8007118:	f043 0307 	orr.w	r3, r3, #7
 800711c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	609a      	str	r2, [r3, #8]
}
 8007124:	bf00      	nop
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800714a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	021a      	lsls	r2, r3, #8
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	431a      	orrs	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4313      	orrs	r3, r2
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	609a      	str	r2, [r3, #8]
}
 8007164:	bf00      	nop
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 031f 	and.w	r3, r3, #31
 8007182:	2201      	movs	r2, #1
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1a      	ldr	r2, [r3, #32]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	43db      	mvns	r3, r3
 8007192:	401a      	ands	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1a      	ldr	r2, [r3, #32]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	fa01 f303 	lsl.w	r3, r1, r3
 80071a8:	431a      	orrs	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e06d      	b.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a30      	ldr	r2, [pc, #192]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2f      	ldr	r2, [pc, #188]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d108      	bne.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800720e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007220:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a20      	ldr	r2, [pc, #128]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d022      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007246:	d01d      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1d      	ldr	r2, [pc, #116]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d018      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1c      	ldr	r2, [pc, #112]	; (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1a      	ldr	r2, [pc, #104]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00e      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a15      	ldr	r2, [pc, #84]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d10c      	bne.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800728a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	4313      	orrs	r3, r2
 8007294:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40010400 	.word	0x40010400
 80072c4:	40000400 	.word	0x40000400
 80072c8:	40000800 	.word	0x40000800
 80072cc:	40000c00 	.word	0x40000c00
 80072d0:	40014000 	.word	0x40014000
 80072d4:	40001800 	.word	0x40001800

080072d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e065      	b.n	80073c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	041b      	lsls	r3, r3, #16
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a16      	ldr	r2, [pc, #88]	; (80073cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d004      	beq.n	8007382 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a14      	ldr	r2, [pc, #80]	; (80073d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d115      	bne.n	80073ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	051b      	lsls	r3, r3, #20
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40010400 	.word	0x40010400

080073d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e040      	b.n	80074a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fb f8d8 	bl	80025e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2224      	movs	r2, #36	; 0x24
 800743c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f974 	bl	800773c <UART_SetConfig>
 8007454:	4603      	mov	r3, r0
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e022      	b.n	80074a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fbcc 	bl	8007c04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800747a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800748a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fc53 	bl	8007d48 <UART_CheckIdleState>
 80074a2:	4603      	mov	r3, r0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08a      	sub	sp, #40	; 0x28
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	4613      	mov	r3, r2
 80074ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d171      	bne.n	80075a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_UART_Transmit+0x24>
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e06a      	b.n	80075aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2221      	movs	r2, #33	; 0x21
 80074e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074e2:	f7fb fb9d 	bl	8002c20 <HAL_GetTick>
 80074e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007500:	d108      	bne.n	8007514 <HAL_UART_Transmit+0x68>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d104      	bne.n	8007514 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	e003      	b.n	800751c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800751c:	e02c      	b.n	8007578 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2200      	movs	r2, #0
 8007526:	2180      	movs	r1, #128	; 0x80
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fc5a 	bl	8007de2 <UART_WaitOnFlagUntilTimeout>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e038      	b.n	80075aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10b      	bne.n	8007556 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800754c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	3302      	adds	r3, #2
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	e007      	b.n	8007566 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	781a      	ldrb	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	3301      	adds	r3, #1
 8007564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1cc      	bne.n	800751e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2200      	movs	r2, #0
 800758c:	2140      	movs	r1, #64	; 0x40
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fc27 	bl	8007de2 <UART_WaitOnFlagUntilTimeout>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e005      	b.n	80075aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2220      	movs	r2, #32
 80075a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	e000      	b.n	80075aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80075a8:	2302      	movs	r3, #2
  }
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3720      	adds	r7, #32
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b08a      	sub	sp, #40	; 0x28
 80075b6:	af02      	add	r7, sp, #8
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	603b      	str	r3, [r7, #0]
 80075be:	4613      	mov	r3, r2
 80075c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	f040 80b1 	bne.w	8007730 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_UART_Receive+0x28>
 80075d4:	88fb      	ldrh	r3, [r7, #6]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e0a9      	b.n	8007732 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2222      	movs	r2, #34	; 0x22
 80075ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075f4:	f7fb fb14 	bl	8002c20 <HAL_GetTick>
 80075f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	88fa      	ldrh	r2, [r7, #6]
 8007606:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007612:	d10e      	bne.n	8007632 <HAL_UART_Receive+0x80>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d105      	bne.n	8007628 <HAL_UART_Receive+0x76>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007626:	e02d      	b.n	8007684 <HAL_UART_Receive+0xd2>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	22ff      	movs	r2, #255	; 0xff
 800762c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007630:	e028      	b.n	8007684 <HAL_UART_Receive+0xd2>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10d      	bne.n	8007656 <HAL_UART_Receive+0xa4>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d104      	bne.n	800764c <HAL_UART_Receive+0x9a>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	22ff      	movs	r2, #255	; 0xff
 8007646:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800764a:	e01b      	b.n	8007684 <HAL_UART_Receive+0xd2>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	227f      	movs	r2, #127	; 0x7f
 8007650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007654:	e016      	b.n	8007684 <HAL_UART_Receive+0xd2>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800765e:	d10d      	bne.n	800767c <HAL_UART_Receive+0xca>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <HAL_UART_Receive+0xc0>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	227f      	movs	r2, #127	; 0x7f
 800766c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007670:	e008      	b.n	8007684 <HAL_UART_Receive+0xd2>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	223f      	movs	r2, #63	; 0x3f
 8007676:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800767a:	e003      	b.n	8007684 <HAL_UART_Receive+0xd2>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800768a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007694:	d108      	bne.n	80076a8 <HAL_UART_Receive+0xf6>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e003      	b.n	80076b0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80076b0:	e032      	b.n	8007718 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2200      	movs	r2, #0
 80076ba:	2120      	movs	r1, #32
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 fb90 	bl	8007de2 <UART_WaitOnFlagUntilTimeout>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e032      	b.n	8007732 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10c      	bne.n	80076ec <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	b29a      	uxth	r2, r3
 80076da:	8a7b      	ldrh	r3, [r7, #18]
 80076dc:	4013      	ands	r3, r2
 80076de:	b29a      	uxth	r2, r3
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	3302      	adds	r3, #2
 80076e8:	61bb      	str	r3, [r7, #24]
 80076ea:	e00c      	b.n	8007706 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	8a7b      	ldrh	r3, [r7, #18]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4013      	ands	r3, r2
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	3301      	adds	r3, #1
 8007704:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1c6      	bne.n	80076b2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	e000      	b.n	8007732 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007730:	2302      	movs	r3, #2
  }
}
 8007732:	4618      	mov	r0, r3
 8007734:	3720      	adds	r7, #32
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4ba6      	ldr	r3, [pc, #664]	; (8007a00 <UART_SetConfig+0x2c4>)
 8007768:	4013      	ands	r3, r2
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	6979      	ldr	r1, [r7, #20]
 8007770:	430b      	orrs	r3, r1
 8007772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a94      	ldr	r2, [pc, #592]	; (8007a04 <UART_SetConfig+0x2c8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d120      	bne.n	80077fa <UART_SetConfig+0xbe>
 80077b8:	4b93      	ldr	r3, [pc, #588]	; (8007a08 <UART_SetConfig+0x2cc>)
 80077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d816      	bhi.n	80077f4 <UART_SetConfig+0xb8>
 80077c6:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <UART_SetConfig+0x90>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	080077dd 	.word	0x080077dd
 80077d0:	080077e9 	.word	0x080077e9
 80077d4:	080077e3 	.word	0x080077e3
 80077d8:	080077ef 	.word	0x080077ef
 80077dc:	2301      	movs	r3, #1
 80077de:	77fb      	strb	r3, [r7, #31]
 80077e0:	e150      	b.n	8007a84 <UART_SetConfig+0x348>
 80077e2:	2302      	movs	r3, #2
 80077e4:	77fb      	strb	r3, [r7, #31]
 80077e6:	e14d      	b.n	8007a84 <UART_SetConfig+0x348>
 80077e8:	2304      	movs	r3, #4
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e14a      	b.n	8007a84 <UART_SetConfig+0x348>
 80077ee:	2308      	movs	r3, #8
 80077f0:	77fb      	strb	r3, [r7, #31]
 80077f2:	e147      	b.n	8007a84 <UART_SetConfig+0x348>
 80077f4:	2310      	movs	r3, #16
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e144      	b.n	8007a84 <UART_SetConfig+0x348>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a83      	ldr	r2, [pc, #524]	; (8007a0c <UART_SetConfig+0x2d0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d132      	bne.n	800786a <UART_SetConfig+0x12e>
 8007804:	4b80      	ldr	r3, [pc, #512]	; (8007a08 <UART_SetConfig+0x2cc>)
 8007806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b0c      	cmp	r3, #12
 8007810:	d828      	bhi.n	8007864 <UART_SetConfig+0x128>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0xdc>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	0800784d 	.word	0x0800784d
 800781c:	08007865 	.word	0x08007865
 8007820:	08007865 	.word	0x08007865
 8007824:	08007865 	.word	0x08007865
 8007828:	08007859 	.word	0x08007859
 800782c:	08007865 	.word	0x08007865
 8007830:	08007865 	.word	0x08007865
 8007834:	08007865 	.word	0x08007865
 8007838:	08007853 	.word	0x08007853
 800783c:	08007865 	.word	0x08007865
 8007840:	08007865 	.word	0x08007865
 8007844:	08007865 	.word	0x08007865
 8007848:	0800785f 	.word	0x0800785f
 800784c:	2300      	movs	r3, #0
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e118      	b.n	8007a84 <UART_SetConfig+0x348>
 8007852:	2302      	movs	r3, #2
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e115      	b.n	8007a84 <UART_SetConfig+0x348>
 8007858:	2304      	movs	r3, #4
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e112      	b.n	8007a84 <UART_SetConfig+0x348>
 800785e:	2308      	movs	r3, #8
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e10f      	b.n	8007a84 <UART_SetConfig+0x348>
 8007864:	2310      	movs	r3, #16
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e10c      	b.n	8007a84 <UART_SetConfig+0x348>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a68      	ldr	r2, [pc, #416]	; (8007a10 <UART_SetConfig+0x2d4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d120      	bne.n	80078b6 <UART_SetConfig+0x17a>
 8007874:	4b64      	ldr	r3, [pc, #400]	; (8007a08 <UART_SetConfig+0x2cc>)
 8007876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800787e:	2b30      	cmp	r3, #48	; 0x30
 8007880:	d013      	beq.n	80078aa <UART_SetConfig+0x16e>
 8007882:	2b30      	cmp	r3, #48	; 0x30
 8007884:	d814      	bhi.n	80078b0 <UART_SetConfig+0x174>
 8007886:	2b20      	cmp	r3, #32
 8007888:	d009      	beq.n	800789e <UART_SetConfig+0x162>
 800788a:	2b20      	cmp	r3, #32
 800788c:	d810      	bhi.n	80078b0 <UART_SetConfig+0x174>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <UART_SetConfig+0x15c>
 8007892:	2b10      	cmp	r3, #16
 8007894:	d006      	beq.n	80078a4 <UART_SetConfig+0x168>
 8007896:	e00b      	b.n	80078b0 <UART_SetConfig+0x174>
 8007898:	2300      	movs	r3, #0
 800789a:	77fb      	strb	r3, [r7, #31]
 800789c:	e0f2      	b.n	8007a84 <UART_SetConfig+0x348>
 800789e:	2302      	movs	r3, #2
 80078a0:	77fb      	strb	r3, [r7, #31]
 80078a2:	e0ef      	b.n	8007a84 <UART_SetConfig+0x348>
 80078a4:	2304      	movs	r3, #4
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e0ec      	b.n	8007a84 <UART_SetConfig+0x348>
 80078aa:	2308      	movs	r3, #8
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	e0e9      	b.n	8007a84 <UART_SetConfig+0x348>
 80078b0:	2310      	movs	r3, #16
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e0e6      	b.n	8007a84 <UART_SetConfig+0x348>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a56      	ldr	r2, [pc, #344]	; (8007a14 <UART_SetConfig+0x2d8>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d120      	bne.n	8007902 <UART_SetConfig+0x1c6>
 80078c0:	4b51      	ldr	r3, [pc, #324]	; (8007a08 <UART_SetConfig+0x2cc>)
 80078c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078ca:	2bc0      	cmp	r3, #192	; 0xc0
 80078cc:	d013      	beq.n	80078f6 <UART_SetConfig+0x1ba>
 80078ce:	2bc0      	cmp	r3, #192	; 0xc0
 80078d0:	d814      	bhi.n	80078fc <UART_SetConfig+0x1c0>
 80078d2:	2b80      	cmp	r3, #128	; 0x80
 80078d4:	d009      	beq.n	80078ea <UART_SetConfig+0x1ae>
 80078d6:	2b80      	cmp	r3, #128	; 0x80
 80078d8:	d810      	bhi.n	80078fc <UART_SetConfig+0x1c0>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <UART_SetConfig+0x1a8>
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	d006      	beq.n	80078f0 <UART_SetConfig+0x1b4>
 80078e2:	e00b      	b.n	80078fc <UART_SetConfig+0x1c0>
 80078e4:	2300      	movs	r3, #0
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e0cc      	b.n	8007a84 <UART_SetConfig+0x348>
 80078ea:	2302      	movs	r3, #2
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e0c9      	b.n	8007a84 <UART_SetConfig+0x348>
 80078f0:	2304      	movs	r3, #4
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e0c6      	b.n	8007a84 <UART_SetConfig+0x348>
 80078f6:	2308      	movs	r3, #8
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e0c3      	b.n	8007a84 <UART_SetConfig+0x348>
 80078fc:	2310      	movs	r3, #16
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	e0c0      	b.n	8007a84 <UART_SetConfig+0x348>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a44      	ldr	r2, [pc, #272]	; (8007a18 <UART_SetConfig+0x2dc>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d125      	bne.n	8007958 <UART_SetConfig+0x21c>
 800790c:	4b3e      	ldr	r3, [pc, #248]	; (8007a08 <UART_SetConfig+0x2cc>)
 800790e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800791a:	d017      	beq.n	800794c <UART_SetConfig+0x210>
 800791c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007920:	d817      	bhi.n	8007952 <UART_SetConfig+0x216>
 8007922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007926:	d00b      	beq.n	8007940 <UART_SetConfig+0x204>
 8007928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800792c:	d811      	bhi.n	8007952 <UART_SetConfig+0x216>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <UART_SetConfig+0x1fe>
 8007932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007936:	d006      	beq.n	8007946 <UART_SetConfig+0x20a>
 8007938:	e00b      	b.n	8007952 <UART_SetConfig+0x216>
 800793a:	2300      	movs	r3, #0
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e0a1      	b.n	8007a84 <UART_SetConfig+0x348>
 8007940:	2302      	movs	r3, #2
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e09e      	b.n	8007a84 <UART_SetConfig+0x348>
 8007946:	2304      	movs	r3, #4
 8007948:	77fb      	strb	r3, [r7, #31]
 800794a:	e09b      	b.n	8007a84 <UART_SetConfig+0x348>
 800794c:	2308      	movs	r3, #8
 800794e:	77fb      	strb	r3, [r7, #31]
 8007950:	e098      	b.n	8007a84 <UART_SetConfig+0x348>
 8007952:	2310      	movs	r3, #16
 8007954:	77fb      	strb	r3, [r7, #31]
 8007956:	e095      	b.n	8007a84 <UART_SetConfig+0x348>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a2f      	ldr	r2, [pc, #188]	; (8007a1c <UART_SetConfig+0x2e0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d125      	bne.n	80079ae <UART_SetConfig+0x272>
 8007962:	4b29      	ldr	r3, [pc, #164]	; (8007a08 <UART_SetConfig+0x2cc>)
 8007964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800796c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007970:	d017      	beq.n	80079a2 <UART_SetConfig+0x266>
 8007972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007976:	d817      	bhi.n	80079a8 <UART_SetConfig+0x26c>
 8007978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800797c:	d00b      	beq.n	8007996 <UART_SetConfig+0x25a>
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007982:	d811      	bhi.n	80079a8 <UART_SetConfig+0x26c>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <UART_SetConfig+0x254>
 8007988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800798c:	d006      	beq.n	800799c <UART_SetConfig+0x260>
 800798e:	e00b      	b.n	80079a8 <UART_SetConfig+0x26c>
 8007990:	2301      	movs	r3, #1
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e076      	b.n	8007a84 <UART_SetConfig+0x348>
 8007996:	2302      	movs	r3, #2
 8007998:	77fb      	strb	r3, [r7, #31]
 800799a:	e073      	b.n	8007a84 <UART_SetConfig+0x348>
 800799c:	2304      	movs	r3, #4
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e070      	b.n	8007a84 <UART_SetConfig+0x348>
 80079a2:	2308      	movs	r3, #8
 80079a4:	77fb      	strb	r3, [r7, #31]
 80079a6:	e06d      	b.n	8007a84 <UART_SetConfig+0x348>
 80079a8:	2310      	movs	r3, #16
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	e06a      	b.n	8007a84 <UART_SetConfig+0x348>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <UART_SetConfig+0x2e4>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d138      	bne.n	8007a2a <UART_SetConfig+0x2ee>
 80079b8:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <UART_SetConfig+0x2cc>)
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80079c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079c6:	d017      	beq.n	80079f8 <UART_SetConfig+0x2bc>
 80079c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079cc:	d82a      	bhi.n	8007a24 <UART_SetConfig+0x2e8>
 80079ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d2:	d00b      	beq.n	80079ec <UART_SetConfig+0x2b0>
 80079d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d8:	d824      	bhi.n	8007a24 <UART_SetConfig+0x2e8>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <UART_SetConfig+0x2aa>
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e2:	d006      	beq.n	80079f2 <UART_SetConfig+0x2b6>
 80079e4:	e01e      	b.n	8007a24 <UART_SetConfig+0x2e8>
 80079e6:	2300      	movs	r3, #0
 80079e8:	77fb      	strb	r3, [r7, #31]
 80079ea:	e04b      	b.n	8007a84 <UART_SetConfig+0x348>
 80079ec:	2302      	movs	r3, #2
 80079ee:	77fb      	strb	r3, [r7, #31]
 80079f0:	e048      	b.n	8007a84 <UART_SetConfig+0x348>
 80079f2:	2304      	movs	r3, #4
 80079f4:	77fb      	strb	r3, [r7, #31]
 80079f6:	e045      	b.n	8007a84 <UART_SetConfig+0x348>
 80079f8:	2308      	movs	r3, #8
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	e042      	b.n	8007a84 <UART_SetConfig+0x348>
 80079fe:	bf00      	nop
 8007a00:	efff69f3 	.word	0xefff69f3
 8007a04:	40011000 	.word	0x40011000
 8007a08:	40023800 	.word	0x40023800
 8007a0c:	40004400 	.word	0x40004400
 8007a10:	40004800 	.word	0x40004800
 8007a14:	40004c00 	.word	0x40004c00
 8007a18:	40005000 	.word	0x40005000
 8007a1c:	40011400 	.word	0x40011400
 8007a20:	40007800 	.word	0x40007800
 8007a24:	2310      	movs	r3, #16
 8007a26:	77fb      	strb	r3, [r7, #31]
 8007a28:	e02c      	b.n	8007a84 <UART_SetConfig+0x348>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a72      	ldr	r2, [pc, #456]	; (8007bf8 <UART_SetConfig+0x4bc>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d125      	bne.n	8007a80 <UART_SetConfig+0x344>
 8007a34:	4b71      	ldr	r3, [pc, #452]	; (8007bfc <UART_SetConfig+0x4c0>)
 8007a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a42:	d017      	beq.n	8007a74 <UART_SetConfig+0x338>
 8007a44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a48:	d817      	bhi.n	8007a7a <UART_SetConfig+0x33e>
 8007a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4e:	d00b      	beq.n	8007a68 <UART_SetConfig+0x32c>
 8007a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a54:	d811      	bhi.n	8007a7a <UART_SetConfig+0x33e>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <UART_SetConfig+0x326>
 8007a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a5e:	d006      	beq.n	8007a6e <UART_SetConfig+0x332>
 8007a60:	e00b      	b.n	8007a7a <UART_SetConfig+0x33e>
 8007a62:	2300      	movs	r3, #0
 8007a64:	77fb      	strb	r3, [r7, #31]
 8007a66:	e00d      	b.n	8007a84 <UART_SetConfig+0x348>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	77fb      	strb	r3, [r7, #31]
 8007a6c:	e00a      	b.n	8007a84 <UART_SetConfig+0x348>
 8007a6e:	2304      	movs	r3, #4
 8007a70:	77fb      	strb	r3, [r7, #31]
 8007a72:	e007      	b.n	8007a84 <UART_SetConfig+0x348>
 8007a74:	2308      	movs	r3, #8
 8007a76:	77fb      	strb	r3, [r7, #31]
 8007a78:	e004      	b.n	8007a84 <UART_SetConfig+0x348>
 8007a7a:	2310      	movs	r3, #16
 8007a7c:	77fb      	strb	r3, [r7, #31]
 8007a7e:	e001      	b.n	8007a84 <UART_SetConfig+0x348>
 8007a80:	2310      	movs	r3, #16
 8007a82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8c:	d15b      	bne.n	8007b46 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007a8e:	7ffb      	ldrb	r3, [r7, #31]
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d828      	bhi.n	8007ae6 <UART_SetConfig+0x3aa>
 8007a94:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <UART_SetConfig+0x360>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007ac1 	.word	0x08007ac1
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	08007ae7 	.word	0x08007ae7
 8007aac:	08007ad7 	.word	0x08007ad7
 8007ab0:	08007ae7 	.word	0x08007ae7
 8007ab4:	08007ae7 	.word	0x08007ae7
 8007ab8:	08007ae7 	.word	0x08007ae7
 8007abc:	08007adf 	.word	0x08007adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac0:	f7fd f946 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8007ac4:	61b8      	str	r0, [r7, #24]
        break;
 8007ac6:	e013      	b.n	8007af0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac8:	f7fd f956 	bl	8004d78 <HAL_RCC_GetPCLK2Freq>
 8007acc:	61b8      	str	r0, [r7, #24]
        break;
 8007ace:	e00f      	b.n	8007af0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad0:	4b4b      	ldr	r3, [pc, #300]	; (8007c00 <UART_SetConfig+0x4c4>)
 8007ad2:	61bb      	str	r3, [r7, #24]
        break;
 8007ad4:	e00c      	b.n	8007af0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad6:	f7fd f829 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 8007ada:	61b8      	str	r0, [r7, #24]
        break;
 8007adc:	e008      	b.n	8007af0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ae2:	61bb      	str	r3, [r7, #24]
        break;
 8007ae4:	e004      	b.n	8007af0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	77bb      	strb	r3, [r7, #30]
        break;
 8007aee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d074      	beq.n	8007be0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	005a      	lsls	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	441a      	add	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b0f      	cmp	r3, #15
 8007b10:	d916      	bls.n	8007b40 <UART_SetConfig+0x404>
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b18:	d212      	bcs.n	8007b40 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f023 030f 	bic.w	r3, r3, #15
 8007b22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	085b      	lsrs	r3, r3, #1
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	89fb      	ldrh	r3, [r7, #14]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	89fa      	ldrh	r2, [r7, #14]
 8007b3c:	60da      	str	r2, [r3, #12]
 8007b3e:	e04f      	b.n	8007be0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	77bb      	strb	r3, [r7, #30]
 8007b44:	e04c      	b.n	8007be0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b46:	7ffb      	ldrb	r3, [r7, #31]
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d828      	bhi.n	8007b9e <UART_SetConfig+0x462>
 8007b4c:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <UART_SetConfig+0x418>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007b79 	.word	0x08007b79
 8007b58:	08007b81 	.word	0x08007b81
 8007b5c:	08007b89 	.word	0x08007b89
 8007b60:	08007b9f 	.word	0x08007b9f
 8007b64:	08007b8f 	.word	0x08007b8f
 8007b68:	08007b9f 	.word	0x08007b9f
 8007b6c:	08007b9f 	.word	0x08007b9f
 8007b70:	08007b9f 	.word	0x08007b9f
 8007b74:	08007b97 	.word	0x08007b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b78:	f7fd f8ea 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8007b7c:	61b8      	str	r0, [r7, #24]
        break;
 8007b7e:	e013      	b.n	8007ba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b80:	f7fd f8fa 	bl	8004d78 <HAL_RCC_GetPCLK2Freq>
 8007b84:	61b8      	str	r0, [r7, #24]
        break;
 8007b86:	e00f      	b.n	8007ba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <UART_SetConfig+0x4c4>)
 8007b8a:	61bb      	str	r3, [r7, #24]
        break;
 8007b8c:	e00c      	b.n	8007ba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b8e:	f7fc ffcd 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 8007b92:	61b8      	str	r0, [r7, #24]
        break;
 8007b94:	e008      	b.n	8007ba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b9a:	61bb      	str	r3, [r7, #24]
        break;
 8007b9c:	e004      	b.n	8007ba8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	77bb      	strb	r3, [r7, #30]
        break;
 8007ba6:	bf00      	nop
    }

    if (pclk != 0U)
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d018      	beq.n	8007be0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	085a      	lsrs	r2, r3, #1
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	441a      	add	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b0f      	cmp	r3, #15
 8007bc6:	d909      	bls.n	8007bdc <UART_SetConfig+0x4a0>
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bce:	d205      	bcs.n	8007bdc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	e001      	b.n	8007be0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007bec:	7fbb      	ldrb	r3, [r7, #30]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40007c00 	.word	0x40007c00
 8007bfc:	40023800 	.word	0x40023800
 8007c00:	00f42400 	.word	0x00f42400

08007c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	f003 0308 	and.w	r3, r3, #8
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	f003 0310 	and.w	r3, r3, #16
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01a      	beq.n	8007d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d02:	d10a      	bne.n	8007d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	605a      	str	r2, [r3, #4]
  }
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d58:	f7fa ff62 	bl	8002c20 <HAL_GetTick>
 8007d5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0308 	and.w	r3, r3, #8
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d10e      	bne.n	8007d8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f831 	bl	8007de2 <UART_WaitOnFlagUntilTimeout>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e027      	b.n	8007dda <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d10e      	bne.n	8007db6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f81b 	bl	8007de2 <UART_WaitOnFlagUntilTimeout>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e011      	b.n	8007dda <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b09c      	sub	sp, #112	; 0x70
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	603b      	str	r3, [r7, #0]
 8007dee:	4613      	mov	r3, r2
 8007df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df2:	e0a7      	b.n	8007f44 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	f000 80a3 	beq.w	8007f44 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfe:	f7fa ff0f 	bl	8002c20 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d302      	bcc.n	8007e14 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d13f      	bne.n	8007e94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e28:	667b      	str	r3, [r7, #100]	; 0x64
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e6      	bne.n	8007e14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	f023 0301 	bic.w	r3, r3, #1
 8007e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e66:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e5      	bne.n	8007e46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e068      	b.n	8007f66 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d050      	beq.n	8007f44 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eb0:	d148      	bne.n	8007f44 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eda:	637b      	str	r3, [r7, #52]	; 0x34
 8007edc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e6      	bne.n	8007ebc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	613b      	str	r3, [r7, #16]
   return(result);
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f023 0301 	bic.w	r3, r3, #1
 8007f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f0e:	623a      	str	r2, [r7, #32]
 8007f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	69f9      	ldr	r1, [r7, #28]
 8007f14:	6a3a      	ldr	r2, [r7, #32]
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e5      	bne.n	8007eee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2220      	movs	r2, #32
 8007f26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e010      	b.n	8007f66 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	69da      	ldr	r2, [r3, #28]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	bf0c      	ite	eq
 8007f54:	2301      	moveq	r3, #1
 8007f56:	2300      	movne	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	f43f af48 	beq.w	8007df4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3770      	adds	r7, #112	; 0x70
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <__errno>:
 8007f70:	4b01      	ldr	r3, [pc, #4]	; (8007f78 <__errno+0x8>)
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20000014 	.word	0x20000014

08007f7c <__libc_init_array>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	4d0d      	ldr	r5, [pc, #52]	; (8007fb4 <__libc_init_array+0x38>)
 8007f80:	4c0d      	ldr	r4, [pc, #52]	; (8007fb8 <__libc_init_array+0x3c>)
 8007f82:	1b64      	subs	r4, r4, r5
 8007f84:	10a4      	asrs	r4, r4, #2
 8007f86:	2600      	movs	r6, #0
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	d109      	bne.n	8007fa0 <__libc_init_array+0x24>
 8007f8c:	4d0b      	ldr	r5, [pc, #44]	; (8007fbc <__libc_init_array+0x40>)
 8007f8e:	4c0c      	ldr	r4, [pc, #48]	; (8007fc0 <__libc_init_array+0x44>)
 8007f90:	f000 ffbc 	bl	8008f0c <_init>
 8007f94:	1b64      	subs	r4, r4, r5
 8007f96:	10a4      	asrs	r4, r4, #2
 8007f98:	2600      	movs	r6, #0
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	d105      	bne.n	8007faa <__libc_init_array+0x2e>
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa4:	4798      	blx	r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7ee      	b.n	8007f88 <__libc_init_array+0xc>
 8007faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fae:	4798      	blx	r3
 8007fb0:	3601      	adds	r6, #1
 8007fb2:	e7f2      	b.n	8007f9a <__libc_init_array+0x1e>
 8007fb4:	08009010 	.word	0x08009010
 8007fb8:	08009010 	.word	0x08009010
 8007fbc:	08009010 	.word	0x08009010
 8007fc0:	08009014 	.word	0x08009014

08007fc4 <memcpy>:
 8007fc4:	440a      	add	r2, r1
 8007fc6:	4291      	cmp	r1, r2
 8007fc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fcc:	d100      	bne.n	8007fd0 <memcpy+0xc>
 8007fce:	4770      	bx	lr
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fda:	4291      	cmp	r1, r2
 8007fdc:	d1f9      	bne.n	8007fd2 <memcpy+0xe>
 8007fde:	bd10      	pop	{r4, pc}

08007fe0 <memset>:
 8007fe0:	4402      	add	r2, r0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d100      	bne.n	8007fea <memset+0xa>
 8007fe8:	4770      	bx	lr
 8007fea:	f803 1b01 	strb.w	r1, [r3], #1
 8007fee:	e7f9      	b.n	8007fe4 <memset+0x4>

08007ff0 <iprintf>:
 8007ff0:	b40f      	push	{r0, r1, r2, r3}
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	; (800801c <iprintf+0x2c>)
 8007ff4:	b513      	push	{r0, r1, r4, lr}
 8007ff6:	681c      	ldr	r4, [r3, #0]
 8007ff8:	b124      	cbz	r4, 8008004 <iprintf+0x14>
 8007ffa:	69a3      	ldr	r3, [r4, #24]
 8007ffc:	b913      	cbnz	r3, 8008004 <iprintf+0x14>
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 f866 	bl	80080d0 <__sinit>
 8008004:	ab05      	add	r3, sp, #20
 8008006:	9a04      	ldr	r2, [sp, #16]
 8008008:	68a1      	ldr	r1, [r4, #8]
 800800a:	9301      	str	r3, [sp, #4]
 800800c:	4620      	mov	r0, r4
 800800e:	f000 f9bd 	bl	800838c <_vfiprintf_r>
 8008012:	b002      	add	sp, #8
 8008014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008018:	b004      	add	sp, #16
 800801a:	4770      	bx	lr
 800801c:	20000014 	.word	0x20000014

08008020 <std>:
 8008020:	2300      	movs	r3, #0
 8008022:	b510      	push	{r4, lr}
 8008024:	4604      	mov	r4, r0
 8008026:	e9c0 3300 	strd	r3, r3, [r0]
 800802a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800802e:	6083      	str	r3, [r0, #8]
 8008030:	8181      	strh	r1, [r0, #12]
 8008032:	6643      	str	r3, [r0, #100]	; 0x64
 8008034:	81c2      	strh	r2, [r0, #14]
 8008036:	6183      	str	r3, [r0, #24]
 8008038:	4619      	mov	r1, r3
 800803a:	2208      	movs	r2, #8
 800803c:	305c      	adds	r0, #92	; 0x5c
 800803e:	f7ff ffcf 	bl	8007fe0 <memset>
 8008042:	4b05      	ldr	r3, [pc, #20]	; (8008058 <std+0x38>)
 8008044:	6263      	str	r3, [r4, #36]	; 0x24
 8008046:	4b05      	ldr	r3, [pc, #20]	; (800805c <std+0x3c>)
 8008048:	62a3      	str	r3, [r4, #40]	; 0x28
 800804a:	4b05      	ldr	r3, [pc, #20]	; (8008060 <std+0x40>)
 800804c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <std+0x44>)
 8008050:	6224      	str	r4, [r4, #32]
 8008052:	6323      	str	r3, [r4, #48]	; 0x30
 8008054:	bd10      	pop	{r4, pc}
 8008056:	bf00      	nop
 8008058:	08008935 	.word	0x08008935
 800805c:	08008957 	.word	0x08008957
 8008060:	0800898f 	.word	0x0800898f
 8008064:	080089b3 	.word	0x080089b3

08008068 <_cleanup_r>:
 8008068:	4901      	ldr	r1, [pc, #4]	; (8008070 <_cleanup_r+0x8>)
 800806a:	f000 b8af 	b.w	80081cc <_fwalk_reent>
 800806e:	bf00      	nop
 8008070:	08008c8d 	.word	0x08008c8d

08008074 <__sfmoreglue>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	2268      	movs	r2, #104	; 0x68
 8008078:	1e4d      	subs	r5, r1, #1
 800807a:	4355      	muls	r5, r2
 800807c:	460e      	mov	r6, r1
 800807e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008082:	f000 f8e5 	bl	8008250 <_malloc_r>
 8008086:	4604      	mov	r4, r0
 8008088:	b140      	cbz	r0, 800809c <__sfmoreglue+0x28>
 800808a:	2100      	movs	r1, #0
 800808c:	e9c0 1600 	strd	r1, r6, [r0]
 8008090:	300c      	adds	r0, #12
 8008092:	60a0      	str	r0, [r4, #8]
 8008094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008098:	f7ff ffa2 	bl	8007fe0 <memset>
 800809c:	4620      	mov	r0, r4
 800809e:	bd70      	pop	{r4, r5, r6, pc}

080080a0 <__sfp_lock_acquire>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__sfp_lock_acquire+0x8>)
 80080a2:	f000 b8b3 	b.w	800820c <__retarget_lock_acquire_recursive>
 80080a6:	bf00      	nop
 80080a8:	20000811 	.word	0x20000811

080080ac <__sfp_lock_release>:
 80080ac:	4801      	ldr	r0, [pc, #4]	; (80080b4 <__sfp_lock_release+0x8>)
 80080ae:	f000 b8ae 	b.w	800820e <__retarget_lock_release_recursive>
 80080b2:	bf00      	nop
 80080b4:	20000811 	.word	0x20000811

080080b8 <__sinit_lock_acquire>:
 80080b8:	4801      	ldr	r0, [pc, #4]	; (80080c0 <__sinit_lock_acquire+0x8>)
 80080ba:	f000 b8a7 	b.w	800820c <__retarget_lock_acquire_recursive>
 80080be:	bf00      	nop
 80080c0:	20000812 	.word	0x20000812

080080c4 <__sinit_lock_release>:
 80080c4:	4801      	ldr	r0, [pc, #4]	; (80080cc <__sinit_lock_release+0x8>)
 80080c6:	f000 b8a2 	b.w	800820e <__retarget_lock_release_recursive>
 80080ca:	bf00      	nop
 80080cc:	20000812 	.word	0x20000812

080080d0 <__sinit>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	4604      	mov	r4, r0
 80080d4:	f7ff fff0 	bl	80080b8 <__sinit_lock_acquire>
 80080d8:	69a3      	ldr	r3, [r4, #24]
 80080da:	b11b      	cbz	r3, 80080e4 <__sinit+0x14>
 80080dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e0:	f7ff bff0 	b.w	80080c4 <__sinit_lock_release>
 80080e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080e8:	6523      	str	r3, [r4, #80]	; 0x50
 80080ea:	4b13      	ldr	r3, [pc, #76]	; (8008138 <__sinit+0x68>)
 80080ec:	4a13      	ldr	r2, [pc, #76]	; (800813c <__sinit+0x6c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	bf04      	itt	eq
 80080f6:	2301      	moveq	r3, #1
 80080f8:	61a3      	streq	r3, [r4, #24]
 80080fa:	4620      	mov	r0, r4
 80080fc:	f000 f820 	bl	8008140 <__sfp>
 8008100:	6060      	str	r0, [r4, #4]
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f81c 	bl	8008140 <__sfp>
 8008108:	60a0      	str	r0, [r4, #8]
 800810a:	4620      	mov	r0, r4
 800810c:	f000 f818 	bl	8008140 <__sfp>
 8008110:	2200      	movs	r2, #0
 8008112:	60e0      	str	r0, [r4, #12]
 8008114:	2104      	movs	r1, #4
 8008116:	6860      	ldr	r0, [r4, #4]
 8008118:	f7ff ff82 	bl	8008020 <std>
 800811c:	68a0      	ldr	r0, [r4, #8]
 800811e:	2201      	movs	r2, #1
 8008120:	2109      	movs	r1, #9
 8008122:	f7ff ff7d 	bl	8008020 <std>
 8008126:	68e0      	ldr	r0, [r4, #12]
 8008128:	2202      	movs	r2, #2
 800812a:	2112      	movs	r1, #18
 800812c:	f7ff ff78 	bl	8008020 <std>
 8008130:	2301      	movs	r3, #1
 8008132:	61a3      	str	r3, [r4, #24]
 8008134:	e7d2      	b.n	80080dc <__sinit+0xc>
 8008136:	bf00      	nop
 8008138:	08008f70 	.word	0x08008f70
 800813c:	08008069 	.word	0x08008069

08008140 <__sfp>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	4607      	mov	r7, r0
 8008144:	f7ff ffac 	bl	80080a0 <__sfp_lock_acquire>
 8008148:	4b1e      	ldr	r3, [pc, #120]	; (80081c4 <__sfp+0x84>)
 800814a:	681e      	ldr	r6, [r3, #0]
 800814c:	69b3      	ldr	r3, [r6, #24]
 800814e:	b913      	cbnz	r3, 8008156 <__sfp+0x16>
 8008150:	4630      	mov	r0, r6
 8008152:	f7ff ffbd 	bl	80080d0 <__sinit>
 8008156:	3648      	adds	r6, #72	; 0x48
 8008158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800815c:	3b01      	subs	r3, #1
 800815e:	d503      	bpl.n	8008168 <__sfp+0x28>
 8008160:	6833      	ldr	r3, [r6, #0]
 8008162:	b30b      	cbz	r3, 80081a8 <__sfp+0x68>
 8008164:	6836      	ldr	r6, [r6, #0]
 8008166:	e7f7      	b.n	8008158 <__sfp+0x18>
 8008168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800816c:	b9d5      	cbnz	r5, 80081a4 <__sfp+0x64>
 800816e:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <__sfp+0x88>)
 8008170:	60e3      	str	r3, [r4, #12]
 8008172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008176:	6665      	str	r5, [r4, #100]	; 0x64
 8008178:	f000 f847 	bl	800820a <__retarget_lock_init_recursive>
 800817c:	f7ff ff96 	bl	80080ac <__sfp_lock_release>
 8008180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008188:	6025      	str	r5, [r4, #0]
 800818a:	61a5      	str	r5, [r4, #24]
 800818c:	2208      	movs	r2, #8
 800818e:	4629      	mov	r1, r5
 8008190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008194:	f7ff ff24 	bl	8007fe0 <memset>
 8008198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800819c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081a0:	4620      	mov	r0, r4
 80081a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a4:	3468      	adds	r4, #104	; 0x68
 80081a6:	e7d9      	b.n	800815c <__sfp+0x1c>
 80081a8:	2104      	movs	r1, #4
 80081aa:	4638      	mov	r0, r7
 80081ac:	f7ff ff62 	bl	8008074 <__sfmoreglue>
 80081b0:	4604      	mov	r4, r0
 80081b2:	6030      	str	r0, [r6, #0]
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d1d5      	bne.n	8008164 <__sfp+0x24>
 80081b8:	f7ff ff78 	bl	80080ac <__sfp_lock_release>
 80081bc:	230c      	movs	r3, #12
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	e7ee      	b.n	80081a0 <__sfp+0x60>
 80081c2:	bf00      	nop
 80081c4:	08008f70 	.word	0x08008f70
 80081c8:	ffff0001 	.word	0xffff0001

080081cc <_fwalk_reent>:
 80081cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d0:	4606      	mov	r6, r0
 80081d2:	4688      	mov	r8, r1
 80081d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081d8:	2700      	movs	r7, #0
 80081da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081de:	f1b9 0901 	subs.w	r9, r9, #1
 80081e2:	d505      	bpl.n	80081f0 <_fwalk_reent+0x24>
 80081e4:	6824      	ldr	r4, [r4, #0]
 80081e6:	2c00      	cmp	r4, #0
 80081e8:	d1f7      	bne.n	80081da <_fwalk_reent+0xe>
 80081ea:	4638      	mov	r0, r7
 80081ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f0:	89ab      	ldrh	r3, [r5, #12]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d907      	bls.n	8008206 <_fwalk_reent+0x3a>
 80081f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081fa:	3301      	adds	r3, #1
 80081fc:	d003      	beq.n	8008206 <_fwalk_reent+0x3a>
 80081fe:	4629      	mov	r1, r5
 8008200:	4630      	mov	r0, r6
 8008202:	47c0      	blx	r8
 8008204:	4307      	orrs	r7, r0
 8008206:	3568      	adds	r5, #104	; 0x68
 8008208:	e7e9      	b.n	80081de <_fwalk_reent+0x12>

0800820a <__retarget_lock_init_recursive>:
 800820a:	4770      	bx	lr

0800820c <__retarget_lock_acquire_recursive>:
 800820c:	4770      	bx	lr

0800820e <__retarget_lock_release_recursive>:
 800820e:	4770      	bx	lr

08008210 <sbrk_aligned>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	4e0e      	ldr	r6, [pc, #56]	; (800824c <sbrk_aligned+0x3c>)
 8008214:	460c      	mov	r4, r1
 8008216:	6831      	ldr	r1, [r6, #0]
 8008218:	4605      	mov	r5, r0
 800821a:	b911      	cbnz	r1, 8008222 <sbrk_aligned+0x12>
 800821c:	f000 fb7a 	bl	8008914 <_sbrk_r>
 8008220:	6030      	str	r0, [r6, #0]
 8008222:	4621      	mov	r1, r4
 8008224:	4628      	mov	r0, r5
 8008226:	f000 fb75 	bl	8008914 <_sbrk_r>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	d00a      	beq.n	8008244 <sbrk_aligned+0x34>
 800822e:	1cc4      	adds	r4, r0, #3
 8008230:	f024 0403 	bic.w	r4, r4, #3
 8008234:	42a0      	cmp	r0, r4
 8008236:	d007      	beq.n	8008248 <sbrk_aligned+0x38>
 8008238:	1a21      	subs	r1, r4, r0
 800823a:	4628      	mov	r0, r5
 800823c:	f000 fb6a 	bl	8008914 <_sbrk_r>
 8008240:	3001      	adds	r0, #1
 8008242:	d101      	bne.n	8008248 <sbrk_aligned+0x38>
 8008244:	f04f 34ff 	mov.w	r4, #4294967295
 8008248:	4620      	mov	r0, r4
 800824a:	bd70      	pop	{r4, r5, r6, pc}
 800824c:	20000818 	.word	0x20000818

08008250 <_malloc_r>:
 8008250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008254:	1ccd      	adds	r5, r1, #3
 8008256:	f025 0503 	bic.w	r5, r5, #3
 800825a:	3508      	adds	r5, #8
 800825c:	2d0c      	cmp	r5, #12
 800825e:	bf38      	it	cc
 8008260:	250c      	movcc	r5, #12
 8008262:	2d00      	cmp	r5, #0
 8008264:	4607      	mov	r7, r0
 8008266:	db01      	blt.n	800826c <_malloc_r+0x1c>
 8008268:	42a9      	cmp	r1, r5
 800826a:	d905      	bls.n	8008278 <_malloc_r+0x28>
 800826c:	230c      	movs	r3, #12
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	2600      	movs	r6, #0
 8008272:	4630      	mov	r0, r6
 8008274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008278:	4e2e      	ldr	r6, [pc, #184]	; (8008334 <_malloc_r+0xe4>)
 800827a:	f000 fdbb 	bl	8008df4 <__malloc_lock>
 800827e:	6833      	ldr	r3, [r6, #0]
 8008280:	461c      	mov	r4, r3
 8008282:	bb34      	cbnz	r4, 80082d2 <_malloc_r+0x82>
 8008284:	4629      	mov	r1, r5
 8008286:	4638      	mov	r0, r7
 8008288:	f7ff ffc2 	bl	8008210 <sbrk_aligned>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	4604      	mov	r4, r0
 8008290:	d14d      	bne.n	800832e <_malloc_r+0xde>
 8008292:	6834      	ldr	r4, [r6, #0]
 8008294:	4626      	mov	r6, r4
 8008296:	2e00      	cmp	r6, #0
 8008298:	d140      	bne.n	800831c <_malloc_r+0xcc>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	4631      	mov	r1, r6
 800829e:	4638      	mov	r0, r7
 80082a0:	eb04 0803 	add.w	r8, r4, r3
 80082a4:	f000 fb36 	bl	8008914 <_sbrk_r>
 80082a8:	4580      	cmp	r8, r0
 80082aa:	d13a      	bne.n	8008322 <_malloc_r+0xd2>
 80082ac:	6821      	ldr	r1, [r4, #0]
 80082ae:	3503      	adds	r5, #3
 80082b0:	1a6d      	subs	r5, r5, r1
 80082b2:	f025 0503 	bic.w	r5, r5, #3
 80082b6:	3508      	adds	r5, #8
 80082b8:	2d0c      	cmp	r5, #12
 80082ba:	bf38      	it	cc
 80082bc:	250c      	movcc	r5, #12
 80082be:	4629      	mov	r1, r5
 80082c0:	4638      	mov	r0, r7
 80082c2:	f7ff ffa5 	bl	8008210 <sbrk_aligned>
 80082c6:	3001      	adds	r0, #1
 80082c8:	d02b      	beq.n	8008322 <_malloc_r+0xd2>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	442b      	add	r3, r5
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	e00e      	b.n	80082f0 <_malloc_r+0xa0>
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	1b52      	subs	r2, r2, r5
 80082d6:	d41e      	bmi.n	8008316 <_malloc_r+0xc6>
 80082d8:	2a0b      	cmp	r2, #11
 80082da:	d916      	bls.n	800830a <_malloc_r+0xba>
 80082dc:	1961      	adds	r1, r4, r5
 80082de:	42a3      	cmp	r3, r4
 80082e0:	6025      	str	r5, [r4, #0]
 80082e2:	bf18      	it	ne
 80082e4:	6059      	strne	r1, [r3, #4]
 80082e6:	6863      	ldr	r3, [r4, #4]
 80082e8:	bf08      	it	eq
 80082ea:	6031      	streq	r1, [r6, #0]
 80082ec:	5162      	str	r2, [r4, r5]
 80082ee:	604b      	str	r3, [r1, #4]
 80082f0:	4638      	mov	r0, r7
 80082f2:	f104 060b 	add.w	r6, r4, #11
 80082f6:	f000 fd83 	bl	8008e00 <__malloc_unlock>
 80082fa:	f026 0607 	bic.w	r6, r6, #7
 80082fe:	1d23      	adds	r3, r4, #4
 8008300:	1af2      	subs	r2, r6, r3
 8008302:	d0b6      	beq.n	8008272 <_malloc_r+0x22>
 8008304:	1b9b      	subs	r3, r3, r6
 8008306:	50a3      	str	r3, [r4, r2]
 8008308:	e7b3      	b.n	8008272 <_malloc_r+0x22>
 800830a:	6862      	ldr	r2, [r4, #4]
 800830c:	42a3      	cmp	r3, r4
 800830e:	bf0c      	ite	eq
 8008310:	6032      	streq	r2, [r6, #0]
 8008312:	605a      	strne	r2, [r3, #4]
 8008314:	e7ec      	b.n	80082f0 <_malloc_r+0xa0>
 8008316:	4623      	mov	r3, r4
 8008318:	6864      	ldr	r4, [r4, #4]
 800831a:	e7b2      	b.n	8008282 <_malloc_r+0x32>
 800831c:	4634      	mov	r4, r6
 800831e:	6876      	ldr	r6, [r6, #4]
 8008320:	e7b9      	b.n	8008296 <_malloc_r+0x46>
 8008322:	230c      	movs	r3, #12
 8008324:	603b      	str	r3, [r7, #0]
 8008326:	4638      	mov	r0, r7
 8008328:	f000 fd6a 	bl	8008e00 <__malloc_unlock>
 800832c:	e7a1      	b.n	8008272 <_malloc_r+0x22>
 800832e:	6025      	str	r5, [r4, #0]
 8008330:	e7de      	b.n	80082f0 <_malloc_r+0xa0>
 8008332:	bf00      	nop
 8008334:	20000814 	.word	0x20000814

08008338 <__sfputc_r>:
 8008338:	6893      	ldr	r3, [r2, #8]
 800833a:	3b01      	subs	r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	b410      	push	{r4}
 8008340:	6093      	str	r3, [r2, #8]
 8008342:	da08      	bge.n	8008356 <__sfputc_r+0x1e>
 8008344:	6994      	ldr	r4, [r2, #24]
 8008346:	42a3      	cmp	r3, r4
 8008348:	db01      	blt.n	800834e <__sfputc_r+0x16>
 800834a:	290a      	cmp	r1, #10
 800834c:	d103      	bne.n	8008356 <__sfputc_r+0x1e>
 800834e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008352:	f000 bb33 	b.w	80089bc <__swbuf_r>
 8008356:	6813      	ldr	r3, [r2, #0]
 8008358:	1c58      	adds	r0, r3, #1
 800835a:	6010      	str	r0, [r2, #0]
 800835c:	7019      	strb	r1, [r3, #0]
 800835e:	4608      	mov	r0, r1
 8008360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008364:	4770      	bx	lr

08008366 <__sfputs_r>:
 8008366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008368:	4606      	mov	r6, r0
 800836a:	460f      	mov	r7, r1
 800836c:	4614      	mov	r4, r2
 800836e:	18d5      	adds	r5, r2, r3
 8008370:	42ac      	cmp	r4, r5
 8008372:	d101      	bne.n	8008378 <__sfputs_r+0x12>
 8008374:	2000      	movs	r0, #0
 8008376:	e007      	b.n	8008388 <__sfputs_r+0x22>
 8008378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837c:	463a      	mov	r2, r7
 800837e:	4630      	mov	r0, r6
 8008380:	f7ff ffda 	bl	8008338 <__sfputc_r>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d1f3      	bne.n	8008370 <__sfputs_r+0xa>
 8008388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800838c <_vfiprintf_r>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	460d      	mov	r5, r1
 8008392:	b09d      	sub	sp, #116	; 0x74
 8008394:	4614      	mov	r4, r2
 8008396:	4698      	mov	r8, r3
 8008398:	4606      	mov	r6, r0
 800839a:	b118      	cbz	r0, 80083a4 <_vfiprintf_r+0x18>
 800839c:	6983      	ldr	r3, [r0, #24]
 800839e:	b90b      	cbnz	r3, 80083a4 <_vfiprintf_r+0x18>
 80083a0:	f7ff fe96 	bl	80080d0 <__sinit>
 80083a4:	4b89      	ldr	r3, [pc, #548]	; (80085cc <_vfiprintf_r+0x240>)
 80083a6:	429d      	cmp	r5, r3
 80083a8:	d11b      	bne.n	80083e2 <_vfiprintf_r+0x56>
 80083aa:	6875      	ldr	r5, [r6, #4]
 80083ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	d405      	bmi.n	80083be <_vfiprintf_r+0x32>
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	059a      	lsls	r2, r3, #22
 80083b6:	d402      	bmi.n	80083be <_vfiprintf_r+0x32>
 80083b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ba:	f7ff ff27 	bl	800820c <__retarget_lock_acquire_recursive>
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	071b      	lsls	r3, r3, #28
 80083c2:	d501      	bpl.n	80083c8 <_vfiprintf_r+0x3c>
 80083c4:	692b      	ldr	r3, [r5, #16]
 80083c6:	b9eb      	cbnz	r3, 8008404 <_vfiprintf_r+0x78>
 80083c8:	4629      	mov	r1, r5
 80083ca:	4630      	mov	r0, r6
 80083cc:	f000 fb5a 	bl	8008a84 <__swsetup_r>
 80083d0:	b1c0      	cbz	r0, 8008404 <_vfiprintf_r+0x78>
 80083d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083d4:	07dc      	lsls	r4, r3, #31
 80083d6:	d50e      	bpl.n	80083f6 <_vfiprintf_r+0x6a>
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295
 80083dc:	b01d      	add	sp, #116	; 0x74
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	4b7b      	ldr	r3, [pc, #492]	; (80085d0 <_vfiprintf_r+0x244>)
 80083e4:	429d      	cmp	r5, r3
 80083e6:	d101      	bne.n	80083ec <_vfiprintf_r+0x60>
 80083e8:	68b5      	ldr	r5, [r6, #8]
 80083ea:	e7df      	b.n	80083ac <_vfiprintf_r+0x20>
 80083ec:	4b79      	ldr	r3, [pc, #484]	; (80085d4 <_vfiprintf_r+0x248>)
 80083ee:	429d      	cmp	r5, r3
 80083f0:	bf08      	it	eq
 80083f2:	68f5      	ldreq	r5, [r6, #12]
 80083f4:	e7da      	b.n	80083ac <_vfiprintf_r+0x20>
 80083f6:	89ab      	ldrh	r3, [r5, #12]
 80083f8:	0598      	lsls	r0, r3, #22
 80083fa:	d4ed      	bmi.n	80083d8 <_vfiprintf_r+0x4c>
 80083fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083fe:	f7ff ff06 	bl	800820e <__retarget_lock_release_recursive>
 8008402:	e7e9      	b.n	80083d8 <_vfiprintf_r+0x4c>
 8008404:	2300      	movs	r3, #0
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
 8008408:	2320      	movs	r3, #32
 800840a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800840e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008412:	2330      	movs	r3, #48	; 0x30
 8008414:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085d8 <_vfiprintf_r+0x24c>
 8008418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800841c:	f04f 0901 	mov.w	r9, #1
 8008420:	4623      	mov	r3, r4
 8008422:	469a      	mov	sl, r3
 8008424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008428:	b10a      	cbz	r2, 800842e <_vfiprintf_r+0xa2>
 800842a:	2a25      	cmp	r2, #37	; 0x25
 800842c:	d1f9      	bne.n	8008422 <_vfiprintf_r+0x96>
 800842e:	ebba 0b04 	subs.w	fp, sl, r4
 8008432:	d00b      	beq.n	800844c <_vfiprintf_r+0xc0>
 8008434:	465b      	mov	r3, fp
 8008436:	4622      	mov	r2, r4
 8008438:	4629      	mov	r1, r5
 800843a:	4630      	mov	r0, r6
 800843c:	f7ff ff93 	bl	8008366 <__sfputs_r>
 8008440:	3001      	adds	r0, #1
 8008442:	f000 80aa 	beq.w	800859a <_vfiprintf_r+0x20e>
 8008446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008448:	445a      	add	r2, fp
 800844a:	9209      	str	r2, [sp, #36]	; 0x24
 800844c:	f89a 3000 	ldrb.w	r3, [sl]
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80a2 	beq.w	800859a <_vfiprintf_r+0x20e>
 8008456:	2300      	movs	r3, #0
 8008458:	f04f 32ff 	mov.w	r2, #4294967295
 800845c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008460:	f10a 0a01 	add.w	sl, sl, #1
 8008464:	9304      	str	r3, [sp, #16]
 8008466:	9307      	str	r3, [sp, #28]
 8008468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800846c:	931a      	str	r3, [sp, #104]	; 0x68
 800846e:	4654      	mov	r4, sl
 8008470:	2205      	movs	r2, #5
 8008472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008476:	4858      	ldr	r0, [pc, #352]	; (80085d8 <_vfiprintf_r+0x24c>)
 8008478:	f7f7 fee2 	bl	8000240 <memchr>
 800847c:	9a04      	ldr	r2, [sp, #16]
 800847e:	b9d8      	cbnz	r0, 80084b8 <_vfiprintf_r+0x12c>
 8008480:	06d1      	lsls	r1, r2, #27
 8008482:	bf44      	itt	mi
 8008484:	2320      	movmi	r3, #32
 8008486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800848a:	0713      	lsls	r3, r2, #28
 800848c:	bf44      	itt	mi
 800848e:	232b      	movmi	r3, #43	; 0x2b
 8008490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008494:	f89a 3000 	ldrb.w	r3, [sl]
 8008498:	2b2a      	cmp	r3, #42	; 0x2a
 800849a:	d015      	beq.n	80084c8 <_vfiprintf_r+0x13c>
 800849c:	9a07      	ldr	r2, [sp, #28]
 800849e:	4654      	mov	r4, sl
 80084a0:	2000      	movs	r0, #0
 80084a2:	f04f 0c0a 	mov.w	ip, #10
 80084a6:	4621      	mov	r1, r4
 80084a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ac:	3b30      	subs	r3, #48	; 0x30
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	d94e      	bls.n	8008550 <_vfiprintf_r+0x1c4>
 80084b2:	b1b0      	cbz	r0, 80084e2 <_vfiprintf_r+0x156>
 80084b4:	9207      	str	r2, [sp, #28]
 80084b6:	e014      	b.n	80084e2 <_vfiprintf_r+0x156>
 80084b8:	eba0 0308 	sub.w	r3, r0, r8
 80084bc:	fa09 f303 	lsl.w	r3, r9, r3
 80084c0:	4313      	orrs	r3, r2
 80084c2:	9304      	str	r3, [sp, #16]
 80084c4:	46a2      	mov	sl, r4
 80084c6:	e7d2      	b.n	800846e <_vfiprintf_r+0xe2>
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	1d19      	adds	r1, r3, #4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	9103      	str	r1, [sp, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	bfbb      	ittet	lt
 80084d4:	425b      	neglt	r3, r3
 80084d6:	f042 0202 	orrlt.w	r2, r2, #2
 80084da:	9307      	strge	r3, [sp, #28]
 80084dc:	9307      	strlt	r3, [sp, #28]
 80084de:	bfb8      	it	lt
 80084e0:	9204      	strlt	r2, [sp, #16]
 80084e2:	7823      	ldrb	r3, [r4, #0]
 80084e4:	2b2e      	cmp	r3, #46	; 0x2e
 80084e6:	d10c      	bne.n	8008502 <_vfiprintf_r+0x176>
 80084e8:	7863      	ldrb	r3, [r4, #1]
 80084ea:	2b2a      	cmp	r3, #42	; 0x2a
 80084ec:	d135      	bne.n	800855a <_vfiprintf_r+0x1ce>
 80084ee:	9b03      	ldr	r3, [sp, #12]
 80084f0:	1d1a      	adds	r2, r3, #4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	9203      	str	r2, [sp, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfb8      	it	lt
 80084fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80084fe:	3402      	adds	r4, #2
 8008500:	9305      	str	r3, [sp, #20]
 8008502:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085e8 <_vfiprintf_r+0x25c>
 8008506:	7821      	ldrb	r1, [r4, #0]
 8008508:	2203      	movs	r2, #3
 800850a:	4650      	mov	r0, sl
 800850c:	f7f7 fe98 	bl	8000240 <memchr>
 8008510:	b140      	cbz	r0, 8008524 <_vfiprintf_r+0x198>
 8008512:	2340      	movs	r3, #64	; 0x40
 8008514:	eba0 000a 	sub.w	r0, r0, sl
 8008518:	fa03 f000 	lsl.w	r0, r3, r0
 800851c:	9b04      	ldr	r3, [sp, #16]
 800851e:	4303      	orrs	r3, r0
 8008520:	3401      	adds	r4, #1
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008528:	482c      	ldr	r0, [pc, #176]	; (80085dc <_vfiprintf_r+0x250>)
 800852a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800852e:	2206      	movs	r2, #6
 8008530:	f7f7 fe86 	bl	8000240 <memchr>
 8008534:	2800      	cmp	r0, #0
 8008536:	d03f      	beq.n	80085b8 <_vfiprintf_r+0x22c>
 8008538:	4b29      	ldr	r3, [pc, #164]	; (80085e0 <_vfiprintf_r+0x254>)
 800853a:	bb1b      	cbnz	r3, 8008584 <_vfiprintf_r+0x1f8>
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	3307      	adds	r3, #7
 8008540:	f023 0307 	bic.w	r3, r3, #7
 8008544:	3308      	adds	r3, #8
 8008546:	9303      	str	r3, [sp, #12]
 8008548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854a:	443b      	add	r3, r7
 800854c:	9309      	str	r3, [sp, #36]	; 0x24
 800854e:	e767      	b.n	8008420 <_vfiprintf_r+0x94>
 8008550:	fb0c 3202 	mla	r2, ip, r2, r3
 8008554:	460c      	mov	r4, r1
 8008556:	2001      	movs	r0, #1
 8008558:	e7a5      	b.n	80084a6 <_vfiprintf_r+0x11a>
 800855a:	2300      	movs	r3, #0
 800855c:	3401      	adds	r4, #1
 800855e:	9305      	str	r3, [sp, #20]
 8008560:	4619      	mov	r1, r3
 8008562:	f04f 0c0a 	mov.w	ip, #10
 8008566:	4620      	mov	r0, r4
 8008568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800856c:	3a30      	subs	r2, #48	; 0x30
 800856e:	2a09      	cmp	r2, #9
 8008570:	d903      	bls.n	800857a <_vfiprintf_r+0x1ee>
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0c5      	beq.n	8008502 <_vfiprintf_r+0x176>
 8008576:	9105      	str	r1, [sp, #20]
 8008578:	e7c3      	b.n	8008502 <_vfiprintf_r+0x176>
 800857a:	fb0c 2101 	mla	r1, ip, r1, r2
 800857e:	4604      	mov	r4, r0
 8008580:	2301      	movs	r3, #1
 8008582:	e7f0      	b.n	8008566 <_vfiprintf_r+0x1da>
 8008584:	ab03      	add	r3, sp, #12
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	462a      	mov	r2, r5
 800858a:	4b16      	ldr	r3, [pc, #88]	; (80085e4 <_vfiprintf_r+0x258>)
 800858c:	a904      	add	r1, sp, #16
 800858e:	4630      	mov	r0, r6
 8008590:	f3af 8000 	nop.w
 8008594:	4607      	mov	r7, r0
 8008596:	1c78      	adds	r0, r7, #1
 8008598:	d1d6      	bne.n	8008548 <_vfiprintf_r+0x1bc>
 800859a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800859c:	07d9      	lsls	r1, r3, #31
 800859e:	d405      	bmi.n	80085ac <_vfiprintf_r+0x220>
 80085a0:	89ab      	ldrh	r3, [r5, #12]
 80085a2:	059a      	lsls	r2, r3, #22
 80085a4:	d402      	bmi.n	80085ac <_vfiprintf_r+0x220>
 80085a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085a8:	f7ff fe31 	bl	800820e <__retarget_lock_release_recursive>
 80085ac:	89ab      	ldrh	r3, [r5, #12]
 80085ae:	065b      	lsls	r3, r3, #25
 80085b0:	f53f af12 	bmi.w	80083d8 <_vfiprintf_r+0x4c>
 80085b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b6:	e711      	b.n	80083dc <_vfiprintf_r+0x50>
 80085b8:	ab03      	add	r3, sp, #12
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	462a      	mov	r2, r5
 80085be:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <_vfiprintf_r+0x258>)
 80085c0:	a904      	add	r1, sp, #16
 80085c2:	4630      	mov	r0, r6
 80085c4:	f000 f880 	bl	80086c8 <_printf_i>
 80085c8:	e7e4      	b.n	8008594 <_vfiprintf_r+0x208>
 80085ca:	bf00      	nop
 80085cc:	08008f94 	.word	0x08008f94
 80085d0:	08008fb4 	.word	0x08008fb4
 80085d4:	08008f74 	.word	0x08008f74
 80085d8:	08008fd4 	.word	0x08008fd4
 80085dc:	08008fde 	.word	0x08008fde
 80085e0:	00000000 	.word	0x00000000
 80085e4:	08008367 	.word	0x08008367
 80085e8:	08008fda 	.word	0x08008fda

080085ec <_printf_common>:
 80085ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f0:	4616      	mov	r6, r2
 80085f2:	4699      	mov	r9, r3
 80085f4:	688a      	ldr	r2, [r1, #8]
 80085f6:	690b      	ldr	r3, [r1, #16]
 80085f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085fc:	4293      	cmp	r3, r2
 80085fe:	bfb8      	it	lt
 8008600:	4613      	movlt	r3, r2
 8008602:	6033      	str	r3, [r6, #0]
 8008604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008608:	4607      	mov	r7, r0
 800860a:	460c      	mov	r4, r1
 800860c:	b10a      	cbz	r2, 8008612 <_printf_common+0x26>
 800860e:	3301      	adds	r3, #1
 8008610:	6033      	str	r3, [r6, #0]
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	0699      	lsls	r1, r3, #26
 8008616:	bf42      	ittt	mi
 8008618:	6833      	ldrmi	r3, [r6, #0]
 800861a:	3302      	addmi	r3, #2
 800861c:	6033      	strmi	r3, [r6, #0]
 800861e:	6825      	ldr	r5, [r4, #0]
 8008620:	f015 0506 	ands.w	r5, r5, #6
 8008624:	d106      	bne.n	8008634 <_printf_common+0x48>
 8008626:	f104 0a19 	add.w	sl, r4, #25
 800862a:	68e3      	ldr	r3, [r4, #12]
 800862c:	6832      	ldr	r2, [r6, #0]
 800862e:	1a9b      	subs	r3, r3, r2
 8008630:	42ab      	cmp	r3, r5
 8008632:	dc26      	bgt.n	8008682 <_printf_common+0x96>
 8008634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008638:	1e13      	subs	r3, r2, #0
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	bf18      	it	ne
 800863e:	2301      	movne	r3, #1
 8008640:	0692      	lsls	r2, r2, #26
 8008642:	d42b      	bmi.n	800869c <_printf_common+0xb0>
 8008644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008648:	4649      	mov	r1, r9
 800864a:	4638      	mov	r0, r7
 800864c:	47c0      	blx	r8
 800864e:	3001      	adds	r0, #1
 8008650:	d01e      	beq.n	8008690 <_printf_common+0xa4>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	68e5      	ldr	r5, [r4, #12]
 8008656:	6832      	ldr	r2, [r6, #0]
 8008658:	f003 0306 	and.w	r3, r3, #6
 800865c:	2b04      	cmp	r3, #4
 800865e:	bf08      	it	eq
 8008660:	1aad      	subeq	r5, r5, r2
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	bf0c      	ite	eq
 8008668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800866c:	2500      	movne	r5, #0
 800866e:	4293      	cmp	r3, r2
 8008670:	bfc4      	itt	gt
 8008672:	1a9b      	subgt	r3, r3, r2
 8008674:	18ed      	addgt	r5, r5, r3
 8008676:	2600      	movs	r6, #0
 8008678:	341a      	adds	r4, #26
 800867a:	42b5      	cmp	r5, r6
 800867c:	d11a      	bne.n	80086b4 <_printf_common+0xc8>
 800867e:	2000      	movs	r0, #0
 8008680:	e008      	b.n	8008694 <_printf_common+0xa8>
 8008682:	2301      	movs	r3, #1
 8008684:	4652      	mov	r2, sl
 8008686:	4649      	mov	r1, r9
 8008688:	4638      	mov	r0, r7
 800868a:	47c0      	blx	r8
 800868c:	3001      	adds	r0, #1
 800868e:	d103      	bne.n	8008698 <_printf_common+0xac>
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008698:	3501      	adds	r5, #1
 800869a:	e7c6      	b.n	800862a <_printf_common+0x3e>
 800869c:	18e1      	adds	r1, r4, r3
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	2030      	movs	r0, #48	; 0x30
 80086a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086a6:	4422      	add	r2, r4
 80086a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086b0:	3302      	adds	r3, #2
 80086b2:	e7c7      	b.n	8008644 <_printf_common+0x58>
 80086b4:	2301      	movs	r3, #1
 80086b6:	4622      	mov	r2, r4
 80086b8:	4649      	mov	r1, r9
 80086ba:	4638      	mov	r0, r7
 80086bc:	47c0      	blx	r8
 80086be:	3001      	adds	r0, #1
 80086c0:	d0e6      	beq.n	8008690 <_printf_common+0xa4>
 80086c2:	3601      	adds	r6, #1
 80086c4:	e7d9      	b.n	800867a <_printf_common+0x8e>
	...

080086c8 <_printf_i>:
 80086c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086cc:	7e0f      	ldrb	r7, [r1, #24]
 80086ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086d0:	2f78      	cmp	r7, #120	; 0x78
 80086d2:	4691      	mov	r9, r2
 80086d4:	4680      	mov	r8, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	469a      	mov	sl, r3
 80086da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086de:	d807      	bhi.n	80086f0 <_printf_i+0x28>
 80086e0:	2f62      	cmp	r7, #98	; 0x62
 80086e2:	d80a      	bhi.n	80086fa <_printf_i+0x32>
 80086e4:	2f00      	cmp	r7, #0
 80086e6:	f000 80d8 	beq.w	800889a <_printf_i+0x1d2>
 80086ea:	2f58      	cmp	r7, #88	; 0x58
 80086ec:	f000 80a3 	beq.w	8008836 <_printf_i+0x16e>
 80086f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086f8:	e03a      	b.n	8008770 <_printf_i+0xa8>
 80086fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086fe:	2b15      	cmp	r3, #21
 8008700:	d8f6      	bhi.n	80086f0 <_printf_i+0x28>
 8008702:	a101      	add	r1, pc, #4	; (adr r1, 8008708 <_printf_i+0x40>)
 8008704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008708:	08008761 	.word	0x08008761
 800870c:	08008775 	.word	0x08008775
 8008710:	080086f1 	.word	0x080086f1
 8008714:	080086f1 	.word	0x080086f1
 8008718:	080086f1 	.word	0x080086f1
 800871c:	080086f1 	.word	0x080086f1
 8008720:	08008775 	.word	0x08008775
 8008724:	080086f1 	.word	0x080086f1
 8008728:	080086f1 	.word	0x080086f1
 800872c:	080086f1 	.word	0x080086f1
 8008730:	080086f1 	.word	0x080086f1
 8008734:	08008881 	.word	0x08008881
 8008738:	080087a5 	.word	0x080087a5
 800873c:	08008863 	.word	0x08008863
 8008740:	080086f1 	.word	0x080086f1
 8008744:	080086f1 	.word	0x080086f1
 8008748:	080088a3 	.word	0x080088a3
 800874c:	080086f1 	.word	0x080086f1
 8008750:	080087a5 	.word	0x080087a5
 8008754:	080086f1 	.word	0x080086f1
 8008758:	080086f1 	.word	0x080086f1
 800875c:	0800886b 	.word	0x0800886b
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	1d1a      	adds	r2, r3, #4
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	602a      	str	r2, [r5, #0]
 8008768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800876c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008770:	2301      	movs	r3, #1
 8008772:	e0a3      	b.n	80088bc <_printf_i+0x1f4>
 8008774:	6820      	ldr	r0, [r4, #0]
 8008776:	6829      	ldr	r1, [r5, #0]
 8008778:	0606      	lsls	r6, r0, #24
 800877a:	f101 0304 	add.w	r3, r1, #4
 800877e:	d50a      	bpl.n	8008796 <_printf_i+0xce>
 8008780:	680e      	ldr	r6, [r1, #0]
 8008782:	602b      	str	r3, [r5, #0]
 8008784:	2e00      	cmp	r6, #0
 8008786:	da03      	bge.n	8008790 <_printf_i+0xc8>
 8008788:	232d      	movs	r3, #45	; 0x2d
 800878a:	4276      	negs	r6, r6
 800878c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008790:	485e      	ldr	r0, [pc, #376]	; (800890c <_printf_i+0x244>)
 8008792:	230a      	movs	r3, #10
 8008794:	e019      	b.n	80087ca <_printf_i+0x102>
 8008796:	680e      	ldr	r6, [r1, #0]
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800879e:	bf18      	it	ne
 80087a0:	b236      	sxthne	r6, r6
 80087a2:	e7ef      	b.n	8008784 <_printf_i+0xbc>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	6820      	ldr	r0, [r4, #0]
 80087a8:	1d19      	adds	r1, r3, #4
 80087aa:	6029      	str	r1, [r5, #0]
 80087ac:	0601      	lsls	r1, r0, #24
 80087ae:	d501      	bpl.n	80087b4 <_printf_i+0xec>
 80087b0:	681e      	ldr	r6, [r3, #0]
 80087b2:	e002      	b.n	80087ba <_printf_i+0xf2>
 80087b4:	0646      	lsls	r6, r0, #25
 80087b6:	d5fb      	bpl.n	80087b0 <_printf_i+0xe8>
 80087b8:	881e      	ldrh	r6, [r3, #0]
 80087ba:	4854      	ldr	r0, [pc, #336]	; (800890c <_printf_i+0x244>)
 80087bc:	2f6f      	cmp	r7, #111	; 0x6f
 80087be:	bf0c      	ite	eq
 80087c0:	2308      	moveq	r3, #8
 80087c2:	230a      	movne	r3, #10
 80087c4:	2100      	movs	r1, #0
 80087c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ca:	6865      	ldr	r5, [r4, #4]
 80087cc:	60a5      	str	r5, [r4, #8]
 80087ce:	2d00      	cmp	r5, #0
 80087d0:	bfa2      	ittt	ge
 80087d2:	6821      	ldrge	r1, [r4, #0]
 80087d4:	f021 0104 	bicge.w	r1, r1, #4
 80087d8:	6021      	strge	r1, [r4, #0]
 80087da:	b90e      	cbnz	r6, 80087e0 <_printf_i+0x118>
 80087dc:	2d00      	cmp	r5, #0
 80087de:	d04d      	beq.n	800887c <_printf_i+0x1b4>
 80087e0:	4615      	mov	r5, r2
 80087e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80087e6:	fb03 6711 	mls	r7, r3, r1, r6
 80087ea:	5dc7      	ldrb	r7, [r0, r7]
 80087ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087f0:	4637      	mov	r7, r6
 80087f2:	42bb      	cmp	r3, r7
 80087f4:	460e      	mov	r6, r1
 80087f6:	d9f4      	bls.n	80087e2 <_printf_i+0x11a>
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d10b      	bne.n	8008814 <_printf_i+0x14c>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	07de      	lsls	r6, r3, #31
 8008800:	d508      	bpl.n	8008814 <_printf_i+0x14c>
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	6861      	ldr	r1, [r4, #4]
 8008806:	4299      	cmp	r1, r3
 8008808:	bfde      	ittt	le
 800880a:	2330      	movle	r3, #48	; 0x30
 800880c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008810:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008814:	1b52      	subs	r2, r2, r5
 8008816:	6122      	str	r2, [r4, #16]
 8008818:	f8cd a000 	str.w	sl, [sp]
 800881c:	464b      	mov	r3, r9
 800881e:	aa03      	add	r2, sp, #12
 8008820:	4621      	mov	r1, r4
 8008822:	4640      	mov	r0, r8
 8008824:	f7ff fee2 	bl	80085ec <_printf_common>
 8008828:	3001      	adds	r0, #1
 800882a:	d14c      	bne.n	80088c6 <_printf_i+0x1fe>
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	b004      	add	sp, #16
 8008832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008836:	4835      	ldr	r0, [pc, #212]	; (800890c <_printf_i+0x244>)
 8008838:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800883c:	6829      	ldr	r1, [r5, #0]
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	f851 6b04 	ldr.w	r6, [r1], #4
 8008844:	6029      	str	r1, [r5, #0]
 8008846:	061d      	lsls	r5, r3, #24
 8008848:	d514      	bpl.n	8008874 <_printf_i+0x1ac>
 800884a:	07df      	lsls	r7, r3, #31
 800884c:	bf44      	itt	mi
 800884e:	f043 0320 	orrmi.w	r3, r3, #32
 8008852:	6023      	strmi	r3, [r4, #0]
 8008854:	b91e      	cbnz	r6, 800885e <_printf_i+0x196>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	f023 0320 	bic.w	r3, r3, #32
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	2310      	movs	r3, #16
 8008860:	e7b0      	b.n	80087c4 <_printf_i+0xfc>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	f043 0320 	orr.w	r3, r3, #32
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	2378      	movs	r3, #120	; 0x78
 800886c:	4828      	ldr	r0, [pc, #160]	; (8008910 <_printf_i+0x248>)
 800886e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008872:	e7e3      	b.n	800883c <_printf_i+0x174>
 8008874:	0659      	lsls	r1, r3, #25
 8008876:	bf48      	it	mi
 8008878:	b2b6      	uxthmi	r6, r6
 800887a:	e7e6      	b.n	800884a <_printf_i+0x182>
 800887c:	4615      	mov	r5, r2
 800887e:	e7bb      	b.n	80087f8 <_printf_i+0x130>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	6826      	ldr	r6, [r4, #0]
 8008884:	6961      	ldr	r1, [r4, #20]
 8008886:	1d18      	adds	r0, r3, #4
 8008888:	6028      	str	r0, [r5, #0]
 800888a:	0635      	lsls	r5, r6, #24
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	d501      	bpl.n	8008894 <_printf_i+0x1cc>
 8008890:	6019      	str	r1, [r3, #0]
 8008892:	e002      	b.n	800889a <_printf_i+0x1d2>
 8008894:	0670      	lsls	r0, r6, #25
 8008896:	d5fb      	bpl.n	8008890 <_printf_i+0x1c8>
 8008898:	8019      	strh	r1, [r3, #0]
 800889a:	2300      	movs	r3, #0
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	4615      	mov	r5, r2
 80088a0:	e7ba      	b.n	8008818 <_printf_i+0x150>
 80088a2:	682b      	ldr	r3, [r5, #0]
 80088a4:	1d1a      	adds	r2, r3, #4
 80088a6:	602a      	str	r2, [r5, #0]
 80088a8:	681d      	ldr	r5, [r3, #0]
 80088aa:	6862      	ldr	r2, [r4, #4]
 80088ac:	2100      	movs	r1, #0
 80088ae:	4628      	mov	r0, r5
 80088b0:	f7f7 fcc6 	bl	8000240 <memchr>
 80088b4:	b108      	cbz	r0, 80088ba <_printf_i+0x1f2>
 80088b6:	1b40      	subs	r0, r0, r5
 80088b8:	6060      	str	r0, [r4, #4]
 80088ba:	6863      	ldr	r3, [r4, #4]
 80088bc:	6123      	str	r3, [r4, #16]
 80088be:	2300      	movs	r3, #0
 80088c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088c4:	e7a8      	b.n	8008818 <_printf_i+0x150>
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	462a      	mov	r2, r5
 80088ca:	4649      	mov	r1, r9
 80088cc:	4640      	mov	r0, r8
 80088ce:	47d0      	blx	sl
 80088d0:	3001      	adds	r0, #1
 80088d2:	d0ab      	beq.n	800882c <_printf_i+0x164>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	079b      	lsls	r3, r3, #30
 80088d8:	d413      	bmi.n	8008902 <_printf_i+0x23a>
 80088da:	68e0      	ldr	r0, [r4, #12]
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	4298      	cmp	r0, r3
 80088e0:	bfb8      	it	lt
 80088e2:	4618      	movlt	r0, r3
 80088e4:	e7a4      	b.n	8008830 <_printf_i+0x168>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4632      	mov	r2, r6
 80088ea:	4649      	mov	r1, r9
 80088ec:	4640      	mov	r0, r8
 80088ee:	47d0      	blx	sl
 80088f0:	3001      	adds	r0, #1
 80088f2:	d09b      	beq.n	800882c <_printf_i+0x164>
 80088f4:	3501      	adds	r5, #1
 80088f6:	68e3      	ldr	r3, [r4, #12]
 80088f8:	9903      	ldr	r1, [sp, #12]
 80088fa:	1a5b      	subs	r3, r3, r1
 80088fc:	42ab      	cmp	r3, r5
 80088fe:	dcf2      	bgt.n	80088e6 <_printf_i+0x21e>
 8008900:	e7eb      	b.n	80088da <_printf_i+0x212>
 8008902:	2500      	movs	r5, #0
 8008904:	f104 0619 	add.w	r6, r4, #25
 8008908:	e7f5      	b.n	80088f6 <_printf_i+0x22e>
 800890a:	bf00      	nop
 800890c:	08008fe5 	.word	0x08008fe5
 8008910:	08008ff6 	.word	0x08008ff6

08008914 <_sbrk_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d06      	ldr	r5, [pc, #24]	; (8008930 <_sbrk_r+0x1c>)
 8008918:	2300      	movs	r3, #0
 800891a:	4604      	mov	r4, r0
 800891c:	4608      	mov	r0, r1
 800891e:	602b      	str	r3, [r5, #0]
 8008920:	f7fa f8b8 	bl	8002a94 <_sbrk>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_sbrk_r+0x1a>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_sbrk_r+0x1a>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	2000081c 	.word	0x2000081c

08008934 <__sread>:
 8008934:	b510      	push	{r4, lr}
 8008936:	460c      	mov	r4, r1
 8008938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893c:	f000 fab2 	bl	8008ea4 <_read_r>
 8008940:	2800      	cmp	r0, #0
 8008942:	bfab      	itete	ge
 8008944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008946:	89a3      	ldrhlt	r3, [r4, #12]
 8008948:	181b      	addge	r3, r3, r0
 800894a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800894e:	bfac      	ite	ge
 8008950:	6563      	strge	r3, [r4, #84]	; 0x54
 8008952:	81a3      	strhlt	r3, [r4, #12]
 8008954:	bd10      	pop	{r4, pc}

08008956 <__swrite>:
 8008956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895a:	461f      	mov	r7, r3
 800895c:	898b      	ldrh	r3, [r1, #12]
 800895e:	05db      	lsls	r3, r3, #23
 8008960:	4605      	mov	r5, r0
 8008962:	460c      	mov	r4, r1
 8008964:	4616      	mov	r6, r2
 8008966:	d505      	bpl.n	8008974 <__swrite+0x1e>
 8008968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896c:	2302      	movs	r3, #2
 800896e:	2200      	movs	r2, #0
 8008970:	f000 f9c8 	bl	8008d04 <_lseek_r>
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800897a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	4632      	mov	r2, r6
 8008982:	463b      	mov	r3, r7
 8008984:	4628      	mov	r0, r5
 8008986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800898a:	f000 b869 	b.w	8008a60 <_write_r>

0800898e <__sseek>:
 800898e:	b510      	push	{r4, lr}
 8008990:	460c      	mov	r4, r1
 8008992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008996:	f000 f9b5 	bl	8008d04 <_lseek_r>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	bf15      	itete	ne
 80089a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089aa:	81a3      	strheq	r3, [r4, #12]
 80089ac:	bf18      	it	ne
 80089ae:	81a3      	strhne	r3, [r4, #12]
 80089b0:	bd10      	pop	{r4, pc}

080089b2 <__sclose>:
 80089b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b6:	f000 b8d3 	b.w	8008b60 <_close_r>
	...

080089bc <__swbuf_r>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	460e      	mov	r6, r1
 80089c0:	4614      	mov	r4, r2
 80089c2:	4605      	mov	r5, r0
 80089c4:	b118      	cbz	r0, 80089ce <__swbuf_r+0x12>
 80089c6:	6983      	ldr	r3, [r0, #24]
 80089c8:	b90b      	cbnz	r3, 80089ce <__swbuf_r+0x12>
 80089ca:	f7ff fb81 	bl	80080d0 <__sinit>
 80089ce:	4b21      	ldr	r3, [pc, #132]	; (8008a54 <__swbuf_r+0x98>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	d12b      	bne.n	8008a2c <__swbuf_r+0x70>
 80089d4:	686c      	ldr	r4, [r5, #4]
 80089d6:	69a3      	ldr	r3, [r4, #24]
 80089d8:	60a3      	str	r3, [r4, #8]
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	071a      	lsls	r2, r3, #28
 80089de:	d52f      	bpl.n	8008a40 <__swbuf_r+0x84>
 80089e0:	6923      	ldr	r3, [r4, #16]
 80089e2:	b36b      	cbz	r3, 8008a40 <__swbuf_r+0x84>
 80089e4:	6923      	ldr	r3, [r4, #16]
 80089e6:	6820      	ldr	r0, [r4, #0]
 80089e8:	1ac0      	subs	r0, r0, r3
 80089ea:	6963      	ldr	r3, [r4, #20]
 80089ec:	b2f6      	uxtb	r6, r6
 80089ee:	4283      	cmp	r3, r0
 80089f0:	4637      	mov	r7, r6
 80089f2:	dc04      	bgt.n	80089fe <__swbuf_r+0x42>
 80089f4:	4621      	mov	r1, r4
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 f948 	bl	8008c8c <_fflush_r>
 80089fc:	bb30      	cbnz	r0, 8008a4c <__swbuf_r+0x90>
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	60a3      	str	r3, [r4, #8]
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	701e      	strb	r6, [r3, #0]
 8008a0c:	6963      	ldr	r3, [r4, #20]
 8008a0e:	3001      	adds	r0, #1
 8008a10:	4283      	cmp	r3, r0
 8008a12:	d004      	beq.n	8008a1e <__swbuf_r+0x62>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	07db      	lsls	r3, r3, #31
 8008a18:	d506      	bpl.n	8008a28 <__swbuf_r+0x6c>
 8008a1a:	2e0a      	cmp	r6, #10
 8008a1c:	d104      	bne.n	8008a28 <__swbuf_r+0x6c>
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 f933 	bl	8008c8c <_fflush_r>
 8008a26:	b988      	cbnz	r0, 8008a4c <__swbuf_r+0x90>
 8008a28:	4638      	mov	r0, r7
 8008a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <__swbuf_r+0x9c>)
 8008a2e:	429c      	cmp	r4, r3
 8008a30:	d101      	bne.n	8008a36 <__swbuf_r+0x7a>
 8008a32:	68ac      	ldr	r4, [r5, #8]
 8008a34:	e7cf      	b.n	80089d6 <__swbuf_r+0x1a>
 8008a36:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <__swbuf_r+0xa0>)
 8008a38:	429c      	cmp	r4, r3
 8008a3a:	bf08      	it	eq
 8008a3c:	68ec      	ldreq	r4, [r5, #12]
 8008a3e:	e7ca      	b.n	80089d6 <__swbuf_r+0x1a>
 8008a40:	4621      	mov	r1, r4
 8008a42:	4628      	mov	r0, r5
 8008a44:	f000 f81e 	bl	8008a84 <__swsetup_r>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d0cb      	beq.n	80089e4 <__swbuf_r+0x28>
 8008a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a50:	e7ea      	b.n	8008a28 <__swbuf_r+0x6c>
 8008a52:	bf00      	nop
 8008a54:	08008f94 	.word	0x08008f94
 8008a58:	08008fb4 	.word	0x08008fb4
 8008a5c:	08008f74 	.word	0x08008f74

08008a60 <_write_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4d07      	ldr	r5, [pc, #28]	; (8008a80 <_write_r+0x20>)
 8008a64:	4604      	mov	r4, r0
 8008a66:	4608      	mov	r0, r1
 8008a68:	4611      	mov	r1, r2
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	602a      	str	r2, [r5, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f7f9 ffbf 	bl	80029f2 <_write>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_write_r+0x1e>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_write_r+0x1e>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	2000081c 	.word	0x2000081c

08008a84 <__swsetup_r>:
 8008a84:	4b32      	ldr	r3, [pc, #200]	; (8008b50 <__swsetup_r+0xcc>)
 8008a86:	b570      	push	{r4, r5, r6, lr}
 8008a88:	681d      	ldr	r5, [r3, #0]
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	b125      	cbz	r5, 8008a9a <__swsetup_r+0x16>
 8008a90:	69ab      	ldr	r3, [r5, #24]
 8008a92:	b913      	cbnz	r3, 8008a9a <__swsetup_r+0x16>
 8008a94:	4628      	mov	r0, r5
 8008a96:	f7ff fb1b 	bl	80080d0 <__sinit>
 8008a9a:	4b2e      	ldr	r3, [pc, #184]	; (8008b54 <__swsetup_r+0xd0>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	d10f      	bne.n	8008ac0 <__swsetup_r+0x3c>
 8008aa0:	686c      	ldr	r4, [r5, #4]
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aa8:	0719      	lsls	r1, r3, #28
 8008aaa:	d42c      	bmi.n	8008b06 <__swsetup_r+0x82>
 8008aac:	06dd      	lsls	r5, r3, #27
 8008aae:	d411      	bmi.n	8008ad4 <__swsetup_r+0x50>
 8008ab0:	2309      	movs	r3, #9
 8008ab2:	6033      	str	r3, [r6, #0]
 8008ab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	e03e      	b.n	8008b3e <__swsetup_r+0xba>
 8008ac0:	4b25      	ldr	r3, [pc, #148]	; (8008b58 <__swsetup_r+0xd4>)
 8008ac2:	429c      	cmp	r4, r3
 8008ac4:	d101      	bne.n	8008aca <__swsetup_r+0x46>
 8008ac6:	68ac      	ldr	r4, [r5, #8]
 8008ac8:	e7eb      	b.n	8008aa2 <__swsetup_r+0x1e>
 8008aca:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <__swsetup_r+0xd8>)
 8008acc:	429c      	cmp	r4, r3
 8008ace:	bf08      	it	eq
 8008ad0:	68ec      	ldreq	r4, [r5, #12]
 8008ad2:	e7e6      	b.n	8008aa2 <__swsetup_r+0x1e>
 8008ad4:	0758      	lsls	r0, r3, #29
 8008ad6:	d512      	bpl.n	8008afe <__swsetup_r+0x7a>
 8008ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ada:	b141      	cbz	r1, 8008aee <__swsetup_r+0x6a>
 8008adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ae0:	4299      	cmp	r1, r3
 8008ae2:	d002      	beq.n	8008aea <__swsetup_r+0x66>
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f000 f991 	bl	8008e0c <_free_r>
 8008aea:	2300      	movs	r3, #0
 8008aec:	6363      	str	r3, [r4, #52]	; 0x34
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	2300      	movs	r3, #0
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f043 0308 	orr.w	r3, r3, #8
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	6923      	ldr	r3, [r4, #16]
 8008b08:	b94b      	cbnz	r3, 8008b1e <__swsetup_r+0x9a>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b14:	d003      	beq.n	8008b1e <__swsetup_r+0x9a>
 8008b16:	4621      	mov	r1, r4
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f000 f92b 	bl	8008d74 <__smakebuf_r>
 8008b1e:	89a0      	ldrh	r0, [r4, #12]
 8008b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b24:	f010 0301 	ands.w	r3, r0, #1
 8008b28:	d00a      	beq.n	8008b40 <__swsetup_r+0xbc>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60a3      	str	r3, [r4, #8]
 8008b2e:	6963      	ldr	r3, [r4, #20]
 8008b30:	425b      	negs	r3, r3
 8008b32:	61a3      	str	r3, [r4, #24]
 8008b34:	6923      	ldr	r3, [r4, #16]
 8008b36:	b943      	cbnz	r3, 8008b4a <__swsetup_r+0xc6>
 8008b38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b3c:	d1ba      	bne.n	8008ab4 <__swsetup_r+0x30>
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	0781      	lsls	r1, r0, #30
 8008b42:	bf58      	it	pl
 8008b44:	6963      	ldrpl	r3, [r4, #20]
 8008b46:	60a3      	str	r3, [r4, #8]
 8008b48:	e7f4      	b.n	8008b34 <__swsetup_r+0xb0>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e7f7      	b.n	8008b3e <__swsetup_r+0xba>
 8008b4e:	bf00      	nop
 8008b50:	20000014 	.word	0x20000014
 8008b54:	08008f94 	.word	0x08008f94
 8008b58:	08008fb4 	.word	0x08008fb4
 8008b5c:	08008f74 	.word	0x08008f74

08008b60 <_close_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d06      	ldr	r5, [pc, #24]	; (8008b7c <_close_r+0x1c>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	602b      	str	r3, [r5, #0]
 8008b6c:	f7f9 ff5d 	bl	8002a2a <_close>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_close_r+0x1a>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_close_r+0x1a>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	2000081c 	.word	0x2000081c

08008b80 <__sflush_r>:
 8008b80:	898a      	ldrh	r2, [r1, #12]
 8008b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b86:	4605      	mov	r5, r0
 8008b88:	0710      	lsls	r0, r2, #28
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	d458      	bmi.n	8008c40 <__sflush_r+0xc0>
 8008b8e:	684b      	ldr	r3, [r1, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dc05      	bgt.n	8008ba0 <__sflush_r+0x20>
 8008b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	dc02      	bgt.n	8008ba0 <__sflush_r+0x20>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba2:	2e00      	cmp	r6, #0
 8008ba4:	d0f9      	beq.n	8008b9a <__sflush_r+0x1a>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bac:	682f      	ldr	r7, [r5, #0]
 8008bae:	602b      	str	r3, [r5, #0]
 8008bb0:	d032      	beq.n	8008c18 <__sflush_r+0x98>
 8008bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	075a      	lsls	r2, r3, #29
 8008bb8:	d505      	bpl.n	8008bc6 <__sflush_r+0x46>
 8008bba:	6863      	ldr	r3, [r4, #4]
 8008bbc:	1ac0      	subs	r0, r0, r3
 8008bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bc0:	b10b      	cbz	r3, 8008bc6 <__sflush_r+0x46>
 8008bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bc4:	1ac0      	subs	r0, r0, r3
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	4602      	mov	r2, r0
 8008bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bcc:	6a21      	ldr	r1, [r4, #32]
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b0      	blx	r6
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	d106      	bne.n	8008be6 <__sflush_r+0x66>
 8008bd8:	6829      	ldr	r1, [r5, #0]
 8008bda:	291d      	cmp	r1, #29
 8008bdc:	d82c      	bhi.n	8008c38 <__sflush_r+0xb8>
 8008bde:	4a2a      	ldr	r2, [pc, #168]	; (8008c88 <__sflush_r+0x108>)
 8008be0:	40ca      	lsrs	r2, r1
 8008be2:	07d6      	lsls	r6, r2, #31
 8008be4:	d528      	bpl.n	8008c38 <__sflush_r+0xb8>
 8008be6:	2200      	movs	r2, #0
 8008be8:	6062      	str	r2, [r4, #4]
 8008bea:	04d9      	lsls	r1, r3, #19
 8008bec:	6922      	ldr	r2, [r4, #16]
 8008bee:	6022      	str	r2, [r4, #0]
 8008bf0:	d504      	bpl.n	8008bfc <__sflush_r+0x7c>
 8008bf2:	1c42      	adds	r2, r0, #1
 8008bf4:	d101      	bne.n	8008bfa <__sflush_r+0x7a>
 8008bf6:	682b      	ldr	r3, [r5, #0]
 8008bf8:	b903      	cbnz	r3, 8008bfc <__sflush_r+0x7c>
 8008bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8008bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfe:	602f      	str	r7, [r5, #0]
 8008c00:	2900      	cmp	r1, #0
 8008c02:	d0ca      	beq.n	8008b9a <__sflush_r+0x1a>
 8008c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c08:	4299      	cmp	r1, r3
 8008c0a:	d002      	beq.n	8008c12 <__sflush_r+0x92>
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f000 f8fd 	bl	8008e0c <_free_r>
 8008c12:	2000      	movs	r0, #0
 8008c14:	6360      	str	r0, [r4, #52]	; 0x34
 8008c16:	e7c1      	b.n	8008b9c <__sflush_r+0x1c>
 8008c18:	6a21      	ldr	r1, [r4, #32]
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	47b0      	blx	r6
 8008c20:	1c41      	adds	r1, r0, #1
 8008c22:	d1c7      	bne.n	8008bb4 <__sflush_r+0x34>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0c4      	beq.n	8008bb4 <__sflush_r+0x34>
 8008c2a:	2b1d      	cmp	r3, #29
 8008c2c:	d001      	beq.n	8008c32 <__sflush_r+0xb2>
 8008c2e:	2b16      	cmp	r3, #22
 8008c30:	d101      	bne.n	8008c36 <__sflush_r+0xb6>
 8008c32:	602f      	str	r7, [r5, #0]
 8008c34:	e7b1      	b.n	8008b9a <__sflush_r+0x1a>
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	e7ad      	b.n	8008b9c <__sflush_r+0x1c>
 8008c40:	690f      	ldr	r7, [r1, #16]
 8008c42:	2f00      	cmp	r7, #0
 8008c44:	d0a9      	beq.n	8008b9a <__sflush_r+0x1a>
 8008c46:	0793      	lsls	r3, r2, #30
 8008c48:	680e      	ldr	r6, [r1, #0]
 8008c4a:	bf08      	it	eq
 8008c4c:	694b      	ldreq	r3, [r1, #20]
 8008c4e:	600f      	str	r7, [r1, #0]
 8008c50:	bf18      	it	ne
 8008c52:	2300      	movne	r3, #0
 8008c54:	eba6 0807 	sub.w	r8, r6, r7
 8008c58:	608b      	str	r3, [r1, #8]
 8008c5a:	f1b8 0f00 	cmp.w	r8, #0
 8008c5e:	dd9c      	ble.n	8008b9a <__sflush_r+0x1a>
 8008c60:	6a21      	ldr	r1, [r4, #32]
 8008c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c64:	4643      	mov	r3, r8
 8008c66:	463a      	mov	r2, r7
 8008c68:	4628      	mov	r0, r5
 8008c6a:	47b0      	blx	r6
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	dc06      	bgt.n	8008c7e <__sflush_r+0xfe>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c76:	81a3      	strh	r3, [r4, #12]
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7c:	e78e      	b.n	8008b9c <__sflush_r+0x1c>
 8008c7e:	4407      	add	r7, r0
 8008c80:	eba8 0800 	sub.w	r8, r8, r0
 8008c84:	e7e9      	b.n	8008c5a <__sflush_r+0xda>
 8008c86:	bf00      	nop
 8008c88:	20400001 	.word	0x20400001

08008c8c <_fflush_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	690b      	ldr	r3, [r1, #16]
 8008c90:	4605      	mov	r5, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	b913      	cbnz	r3, 8008c9c <_fflush_r+0x10>
 8008c96:	2500      	movs	r5, #0
 8008c98:	4628      	mov	r0, r5
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	b118      	cbz	r0, 8008ca6 <_fflush_r+0x1a>
 8008c9e:	6983      	ldr	r3, [r0, #24]
 8008ca0:	b90b      	cbnz	r3, 8008ca6 <_fflush_r+0x1a>
 8008ca2:	f7ff fa15 	bl	80080d0 <__sinit>
 8008ca6:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <_fflush_r+0x6c>)
 8008ca8:	429c      	cmp	r4, r3
 8008caa:	d11b      	bne.n	8008ce4 <_fflush_r+0x58>
 8008cac:	686c      	ldr	r4, [r5, #4]
 8008cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0ef      	beq.n	8008c96 <_fflush_r+0xa>
 8008cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cb8:	07d0      	lsls	r0, r2, #31
 8008cba:	d404      	bmi.n	8008cc6 <_fflush_r+0x3a>
 8008cbc:	0599      	lsls	r1, r3, #22
 8008cbe:	d402      	bmi.n	8008cc6 <_fflush_r+0x3a>
 8008cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cc2:	f7ff faa3 	bl	800820c <__retarget_lock_acquire_recursive>
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	4621      	mov	r1, r4
 8008cca:	f7ff ff59 	bl	8008b80 <__sflush_r>
 8008cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cd0:	07da      	lsls	r2, r3, #31
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	d4e0      	bmi.n	8008c98 <_fflush_r+0xc>
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	059b      	lsls	r3, r3, #22
 8008cda:	d4dd      	bmi.n	8008c98 <_fflush_r+0xc>
 8008cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cde:	f7ff fa96 	bl	800820e <__retarget_lock_release_recursive>
 8008ce2:	e7d9      	b.n	8008c98 <_fflush_r+0xc>
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <_fflush_r+0x70>)
 8008ce6:	429c      	cmp	r4, r3
 8008ce8:	d101      	bne.n	8008cee <_fflush_r+0x62>
 8008cea:	68ac      	ldr	r4, [r5, #8]
 8008cec:	e7df      	b.n	8008cae <_fflush_r+0x22>
 8008cee:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <_fflush_r+0x74>)
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	bf08      	it	eq
 8008cf4:	68ec      	ldreq	r4, [r5, #12]
 8008cf6:	e7da      	b.n	8008cae <_fflush_r+0x22>
 8008cf8:	08008f94 	.word	0x08008f94
 8008cfc:	08008fb4 	.word	0x08008fb4
 8008d00:	08008f74 	.word	0x08008f74

08008d04 <_lseek_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d07      	ldr	r5, [pc, #28]	; (8008d24 <_lseek_r+0x20>)
 8008d08:	4604      	mov	r4, r0
 8008d0a:	4608      	mov	r0, r1
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	602a      	str	r2, [r5, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	f7f9 feb0 	bl	8002a78 <_lseek>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	d102      	bne.n	8008d22 <_lseek_r+0x1e>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	b103      	cbz	r3, 8008d22 <_lseek_r+0x1e>
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	2000081c 	.word	0x2000081c

08008d28 <__swhatbuf_r>:
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	460e      	mov	r6, r1
 8008d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d30:	2900      	cmp	r1, #0
 8008d32:	b096      	sub	sp, #88	; 0x58
 8008d34:	4614      	mov	r4, r2
 8008d36:	461d      	mov	r5, r3
 8008d38:	da08      	bge.n	8008d4c <__swhatbuf_r+0x24>
 8008d3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	602a      	str	r2, [r5, #0]
 8008d42:	061a      	lsls	r2, r3, #24
 8008d44:	d410      	bmi.n	8008d68 <__swhatbuf_r+0x40>
 8008d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d4a:	e00e      	b.n	8008d6a <__swhatbuf_r+0x42>
 8008d4c:	466a      	mov	r2, sp
 8008d4e:	f000 f8bb 	bl	8008ec8 <_fstat_r>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	dbf1      	blt.n	8008d3a <__swhatbuf_r+0x12>
 8008d56:	9a01      	ldr	r2, [sp, #4]
 8008d58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d60:	425a      	negs	r2, r3
 8008d62:	415a      	adcs	r2, r3
 8008d64:	602a      	str	r2, [r5, #0]
 8008d66:	e7ee      	b.n	8008d46 <__swhatbuf_r+0x1e>
 8008d68:	2340      	movs	r3, #64	; 0x40
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	b016      	add	sp, #88	; 0x58
 8008d70:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d74 <__smakebuf_r>:
 8008d74:	898b      	ldrh	r3, [r1, #12]
 8008d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d78:	079d      	lsls	r5, r3, #30
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	d507      	bpl.n	8008d90 <__smakebuf_r+0x1c>
 8008d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	6123      	str	r3, [r4, #16]
 8008d88:	2301      	movs	r3, #1
 8008d8a:	6163      	str	r3, [r4, #20]
 8008d8c:	b002      	add	sp, #8
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	ab01      	add	r3, sp, #4
 8008d92:	466a      	mov	r2, sp
 8008d94:	f7ff ffc8 	bl	8008d28 <__swhatbuf_r>
 8008d98:	9900      	ldr	r1, [sp, #0]
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7ff fa57 	bl	8008250 <_malloc_r>
 8008da2:	b948      	cbnz	r0, 8008db8 <__smakebuf_r+0x44>
 8008da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da8:	059a      	lsls	r2, r3, #22
 8008daa:	d4ef      	bmi.n	8008d8c <__smakebuf_r+0x18>
 8008dac:	f023 0303 	bic.w	r3, r3, #3
 8008db0:	f043 0302 	orr.w	r3, r3, #2
 8008db4:	81a3      	strh	r3, [r4, #12]
 8008db6:	e7e3      	b.n	8008d80 <__smakebuf_r+0xc>
 8008db8:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <__smakebuf_r+0x7c>)
 8008dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	6020      	str	r0, [r4, #0]
 8008dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	9b00      	ldr	r3, [sp, #0]
 8008dc8:	6163      	str	r3, [r4, #20]
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	6120      	str	r0, [r4, #16]
 8008dce:	b15b      	cbz	r3, 8008de8 <__smakebuf_r+0x74>
 8008dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f889 	bl	8008eec <_isatty_r>
 8008dda:	b128      	cbz	r0, 8008de8 <__smakebuf_r+0x74>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	f043 0301 	orr.w	r3, r3, #1
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	89a0      	ldrh	r0, [r4, #12]
 8008dea:	4305      	orrs	r5, r0
 8008dec:	81a5      	strh	r5, [r4, #12]
 8008dee:	e7cd      	b.n	8008d8c <__smakebuf_r+0x18>
 8008df0:	08008069 	.word	0x08008069

08008df4 <__malloc_lock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__malloc_lock+0x8>)
 8008df6:	f7ff ba09 	b.w	800820c <__retarget_lock_acquire_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20000810 	.word	0x20000810

08008e00 <__malloc_unlock>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__malloc_unlock+0x8>)
 8008e02:	f7ff ba04 	b.w	800820e <__retarget_lock_release_recursive>
 8008e06:	bf00      	nop
 8008e08:	20000810 	.word	0x20000810

08008e0c <_free_r>:
 8008e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e0e:	2900      	cmp	r1, #0
 8008e10:	d044      	beq.n	8008e9c <_free_r+0x90>
 8008e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e16:	9001      	str	r0, [sp, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e1e:	bfb8      	it	lt
 8008e20:	18e4      	addlt	r4, r4, r3
 8008e22:	f7ff ffe7 	bl	8008df4 <__malloc_lock>
 8008e26:	4a1e      	ldr	r2, [pc, #120]	; (8008ea0 <_free_r+0x94>)
 8008e28:	9801      	ldr	r0, [sp, #4]
 8008e2a:	6813      	ldr	r3, [r2, #0]
 8008e2c:	b933      	cbnz	r3, 8008e3c <_free_r+0x30>
 8008e2e:	6063      	str	r3, [r4, #4]
 8008e30:	6014      	str	r4, [r2, #0]
 8008e32:	b003      	add	sp, #12
 8008e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e38:	f7ff bfe2 	b.w	8008e00 <__malloc_unlock>
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	d908      	bls.n	8008e52 <_free_r+0x46>
 8008e40:	6825      	ldr	r5, [r4, #0]
 8008e42:	1961      	adds	r1, r4, r5
 8008e44:	428b      	cmp	r3, r1
 8008e46:	bf01      	itttt	eq
 8008e48:	6819      	ldreq	r1, [r3, #0]
 8008e4a:	685b      	ldreq	r3, [r3, #4]
 8008e4c:	1949      	addeq	r1, r1, r5
 8008e4e:	6021      	streq	r1, [r4, #0]
 8008e50:	e7ed      	b.n	8008e2e <_free_r+0x22>
 8008e52:	461a      	mov	r2, r3
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	b10b      	cbz	r3, 8008e5c <_free_r+0x50>
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	d9fa      	bls.n	8008e52 <_free_r+0x46>
 8008e5c:	6811      	ldr	r1, [r2, #0]
 8008e5e:	1855      	adds	r5, r2, r1
 8008e60:	42a5      	cmp	r5, r4
 8008e62:	d10b      	bne.n	8008e7c <_free_r+0x70>
 8008e64:	6824      	ldr	r4, [r4, #0]
 8008e66:	4421      	add	r1, r4
 8008e68:	1854      	adds	r4, r2, r1
 8008e6a:	42a3      	cmp	r3, r4
 8008e6c:	6011      	str	r1, [r2, #0]
 8008e6e:	d1e0      	bne.n	8008e32 <_free_r+0x26>
 8008e70:	681c      	ldr	r4, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	6053      	str	r3, [r2, #4]
 8008e76:	4421      	add	r1, r4
 8008e78:	6011      	str	r1, [r2, #0]
 8008e7a:	e7da      	b.n	8008e32 <_free_r+0x26>
 8008e7c:	d902      	bls.n	8008e84 <_free_r+0x78>
 8008e7e:	230c      	movs	r3, #12
 8008e80:	6003      	str	r3, [r0, #0]
 8008e82:	e7d6      	b.n	8008e32 <_free_r+0x26>
 8008e84:	6825      	ldr	r5, [r4, #0]
 8008e86:	1961      	adds	r1, r4, r5
 8008e88:	428b      	cmp	r3, r1
 8008e8a:	bf04      	itt	eq
 8008e8c:	6819      	ldreq	r1, [r3, #0]
 8008e8e:	685b      	ldreq	r3, [r3, #4]
 8008e90:	6063      	str	r3, [r4, #4]
 8008e92:	bf04      	itt	eq
 8008e94:	1949      	addeq	r1, r1, r5
 8008e96:	6021      	streq	r1, [r4, #0]
 8008e98:	6054      	str	r4, [r2, #4]
 8008e9a:	e7ca      	b.n	8008e32 <_free_r+0x26>
 8008e9c:	b003      	add	sp, #12
 8008e9e:	bd30      	pop	{r4, r5, pc}
 8008ea0:	20000814 	.word	0x20000814

08008ea4 <_read_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	; (8008ec4 <_read_r+0x20>)
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	602a      	str	r2, [r5, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f7f9 fd80 	bl	80029b8 <_read>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_read_r+0x1e>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_read_r+0x1e>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	2000081c 	.word	0x2000081c

08008ec8 <_fstat_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d07      	ldr	r5, [pc, #28]	; (8008ee8 <_fstat_r+0x20>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	f7f9 fdb4 	bl	8002a42 <_fstat>
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	d102      	bne.n	8008ee4 <_fstat_r+0x1c>
 8008ede:	682b      	ldr	r3, [r5, #0]
 8008ee0:	b103      	cbz	r3, 8008ee4 <_fstat_r+0x1c>
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
 8008ee6:	bf00      	nop
 8008ee8:	2000081c 	.word	0x2000081c

08008eec <_isatty_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4d06      	ldr	r5, [pc, #24]	; (8008f08 <_isatty_r+0x1c>)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	602b      	str	r3, [r5, #0]
 8008ef8:	f7f9 fdb3 	bl	8002a62 <_isatty>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_isatty_r+0x1a>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_isatty_r+0x1a>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	2000081c 	.word	0x2000081c

08008f0c <_init>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr

08008f18 <_fini>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr
