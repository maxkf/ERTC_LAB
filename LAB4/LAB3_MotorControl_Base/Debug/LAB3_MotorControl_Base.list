
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e5c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800905c  0800905c  0001905c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009140  08009140  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009140  08009140  00019140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009148  08009148  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800914c  0800914c  0001914c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000078  080091c8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  080091c8  00020820  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186ab  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c29  00000000  00000000  00038751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003b380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  0003c870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a905  00000000  00000000  0003dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4e5  00000000  00000000  0006852d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107809  00000000  00000000  00083a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b21b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c4  00000000  00000000  0018b26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08009044 	.word	0x08009044

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08009044 	.word	0x08009044

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000600:	2301      	movs	r3, #1
 8000602:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8000604:	e025      	b.n	8000652 <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <cobsEncode+0x3e>
            FinishBlock(code);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	7efa      	ldrb	r2, [r7, #27]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	2301      	movs	r3, #1
 800061e:	76fb      	strb	r3, [r7, #27]
 8000620:	e014      	b.n	800064c <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 800062e:	7efb      	ldrb	r3, [r7, #27]
 8000630:	3301      	adds	r3, #1
 8000632:	76fb      	strb	r3, [r7, #27]
 8000634:	7efb      	ldrb	r3, [r7, #27]
 8000636:	2bff      	cmp	r3, #255	; 0xff
 8000638:	d108      	bne.n	800064c <cobsEncode+0x68>
                FinishBlock(code);
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	7efa      	ldrb	r2, [r7, #27]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	2301      	movs	r3, #1
 800064a:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3d5      	bcc.n	8000606 <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	7efa      	ldrb	r2, [r7, #27]
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	2301      	movs	r3, #1
 800066a:	76fb      	strb	r3, [r7, #27]
}
 800066c:	bf00      	nop
 800066e:	3724      	adds	r7, #36	; 0x24
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01c      	beq.n	80006c6 <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3321      	adds	r3, #33	; 0x21
 8000690:	461a      	mov	r2, r3
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff ffa5 	bl	80005e4 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3302      	adds	r3, #2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	f006 ff91 	bl	80075e4 <HAL_UART_Transmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e000      	b.n	80006c8 <ertc_dlog_send+0x50>
	}

	return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c59      	adds	r1, r3, #1
 80006e2:	2303      	movs	r3, #3
 80006e4:	2201      	movs	r2, #1
 80006e6:	f007 f800 	bl	80076ea <HAL_UART_Receive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d112      	bne.n	8000716 <ertc_dlog_update+0x46>
		switch (logger->rxbuff[0]) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b41      	cmp	r3, #65	; 0x41
 80006f6:	d002      	beq.n	80006fe <ertc_dlog_update+0x2e>
 80006f8:	2b42      	cmp	r3, #66	; 0x42
 80006fa:	d004      	beq.n	8000706 <ertc_dlog_update+0x36>
 80006fc:	e007      	b.n	800070e <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				break;
 8000704:	e008      	b.n	8000718 <ertc_dlog_update+0x48>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
				break;
 800070c:	e004      	b.n	8000718 <ertc_dlog_update+0x48>
			default:
				logger->tx_enable = false;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e000      	b.n	8000718 <ertc_dlog_update+0x48>
		}
	}
 8000716:	bf00      	nop
	return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	0000      	movs	r0, r0
 8000724:	0000      	movs	r0, r0
	...

08000728 <PI_controller>:

float Kp = 0.34;
float KI = 0.2;


float PI_controller (float error){
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	ed87 0a01 	vstr	s0, [r7, #4]
	float P = Kp * error;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <PI_controller+0x78>)
 8000734:	edd3 7a00 	vldr	s15, [r3]
 8000738:	ed97 7a01 	vldr	s14, [r7, #4]
 800073c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000740:	edc7 7a03 	vstr	s15, [r7, #12]
	static float I = 0;
	I = I + error * KI * TS;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <PI_controller+0x7c>)
 8000746:	edd3 7a00 	vldr	s15, [r3]
 800074a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <PI_controller+0x80>)
 8000750:	ed93 7a00 	vldr	s14, [r3]
 8000754:	edd7 7a01 	vldr	s15, [r7, #4]
 8000758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800075c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000760:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000798 <PI_controller+0x70>
 8000764:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000768:	ee36 7b07 	vadd.f64	d7, d6, d7
 800076c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <PI_controller+0x7c>)
 8000772:	edc3 7a00 	vstr	s15, [r3]
	//if(I>10){
	//	I=10;
	//}
	return P + I;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <PI_controller+0x7c>)
 8000778:	ed93 7a00 	vldr	s14, [r3]
 800077c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000780:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000784:	eeb0 0a67 	vmov.f32	s0, s15
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	47ae147b 	.word	0x47ae147b
 800079c:	3f847ae1 	.word	0x3f847ae1
 80007a0:	20000000 	.word	0x20000000
 80007a4:	200007fc 	.word	0x200007fc
 80007a8:	20000004 	.word	0x20000004

080007ac <findBinary>:

void findBinary(int decimal, int * binary){
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	//int base = 1;
	int i =0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
   while(decimal > 0){
 80007ba:	e015      	b.n	80007e8 <findBinary+0x3c>
	   int rem = decimal % 2;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	bfb8      	it	lt
 80007c6:	425b      	neglt	r3, r3
 80007c8:	60bb      	str	r3, [r7, #8]
	   binary[i] = rem;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	4413      	add	r3, r2
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	601a      	str	r2, [r3, #0]
	   i++;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
	   decimal = decimal / 2;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	da00      	bge.n	80007e4 <findBinary+0x38>
 80007e2:	3301      	adds	r3, #1
 80007e4:	105b      	asrs	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
   while(decimal > 0){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	dce6      	bgt.n	80007bc <findBinary+0x10>
	   //base = base * 10;
   }
   //printf("Binary: %d\n\r", binary);
//   return binary;
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <calc_error_line>:

int calc_error_line (int binary[]){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	; 0x38
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	float distance_from_middle[8]={0};
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2220      	movs	r2, #32
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f007 fc83 	bl	8008118 <memset>
	float sum_dist = 0;
 8000812:	f04f 0300 	mov.w	r3, #0
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
	int sum_binary = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
	for(int n=0;n<8;n++){
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000820:	e038      	b.n	8000894 <calc_error_line+0x98>
		sum_binary += binary[n];
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800082e:	4413      	add	r3, r2
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
		distance_from_middle[n]=((7.0/2.0)-n)*4;
 8000832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000834:	ee07 3a90 	vmov	s15, r3
 8000838:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800083c:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 8000840:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000844:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000848:	ee27 7b06 	vmul.f64	d7, d7, d6
 800084c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	3338      	adds	r3, #56	; 0x38
 8000856:	443b      	add	r3, r7
 8000858:	3b30      	subs	r3, #48	; 0x30
 800085a:	edc3 7a00 	vstr	s15, [r3]
		sum_dist += binary[n]*distance_from_middle[n];
 800085e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	3338      	adds	r3, #56	; 0x38
 8000876:	443b      	add	r3, r7
 8000878:	3b30      	subs	r3, #48	; 0x30
 800087a:	edd3 7a00 	vldr	s15, [r3]
 800087e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000882:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800088a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int n=0;n<8;n++){
 800088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000890:	3301      	adds	r3, #1
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000896:	2b07      	cmp	r3, #7
 8000898:	ddc3      	ble.n	8000822 <calc_error_line+0x26>
	}
	float line_error = sum_dist / sum_binary;
 800089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008a4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80008a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return line_error;
 80008b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b8:	ee17 3a90 	vmov	r3, s15
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3738      	adds	r7, #56	; 0x38
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <calc_yaw_error>:

float calc_yaw_error(float line_error){
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	ed87 0a01 	vstr	s0, [r7, #4]
	float omega_L = current_rpm_L *2*3.14/60;
	float linear_speed_R = 34*omega_R;
	float linear_speed_L = 34*omega_L;
	float robot_rotation_speed = (linear_speed_R-linear_speed_L)/165;
	static float last_time = 0;*/
	float phi_err = line_error/85;
 80008ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80008d2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000904 <calc_yaw_error+0x40>
 80008d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008da:	edc7 7a03 	vstr	s15, [r7, #12]
	float yaw_err = phi_err * (165/2);
 80008de:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000908 <calc_yaw_error+0x44>
 80008e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ea:	edc7 7a02 	vstr	s15, [r7, #8]
	return yaw_err;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	ee07 3a90 	vmov	s15, r3
}
 80008f4:	eeb0 0a67 	vmov.f32	s0, s15
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	42aa0000 	.word	0x42aa0000
 8000908:	42a40000 	.word	0x42a40000
 800090c:	00000000 	.word	0x00000000

08000910 <HAL_TIM_PeriodElapsedCallback>:
uint8_t data;
HAL_StatusTypeDef status;
int32_t duty_1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b098      	sub	sp, #96	; 0x60
 8000914:	af04      	add	r7, sp, #16
 8000916:	6078      	str	r0, [r7, #4]
	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4aa0      	ldr	r2, [pc, #640]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800091e:	4293      	cmp	r3, r2
 8000920:	f040 8248 	bne.w	8000db4 <HAL_TIM_PeriodElapsedCallback+0x4a4>
	{
		/*
	    * 1. read the counter value from the encoder
	    * 2. compute the difference between the current value and the old value
	    */
		status = HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &lineData, 1, I2C_TIMEOUT);
 8000924:	23c8      	movs	r3, #200	; 0xc8
 8000926:	9302      	str	r3, [sp, #8]
 8000928:	2301      	movs	r3, #1
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	4b9d      	ldr	r3, [pc, #628]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	2210      	movs	r2, #16
 8000934:	217c      	movs	r1, #124	; 0x7c
 8000936:	489c      	ldr	r0, [pc, #624]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000938:	f003 f94e 	bl	8003bd8 <HAL_I2C_Mem_Read>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	4b9a      	ldr	r3, [pc, #616]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000942:	701a      	strb	r2, [r3, #0]
		  int binary[8] = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2220      	movs	r2, #32
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f007 fbe3 	bl	8008118 <memset>
		  findBinary(lineData, binary);
 8000952:	4b94      	ldr	r3, [pc, #592]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4619      	mov	r1, r3
 800095e:	4610      	mov	r0, r2
 8000960:	f7ff ff24 	bl	80007ac <findBinary>
		  float line_error = calc_error_line(binary);
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff47 	bl	80007fc <calc_error_line>
 800096e:	ee07 0a90 	vmov	s15, r0
 8000972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000976:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		  //phi_err = line_error/85;
		  float yaw_err = calc_yaw_error(line_error);
 800097a:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800097e:	f7ff ffa1 	bl	80008c4 <calc_yaw_error>
 8000982:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		  int gain;
		  if(ABS(line_error)<=2 && ABS(line_error)>=0){
 8000986:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800098a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800098e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000992:	dd09      	ble.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x98>
 8000994:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000998:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800099c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a4:	d909      	bls.n	80009ba <HAL_TIM_PeriodElapsedCallback+0xaa>
 80009a6:	e021      	b.n	80009ec <HAL_TIM_PeriodElapsedCallback+0xdc>
 80009a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009ac:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80009b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009b8:	db18      	blt.n	80009ec <HAL_TIM_PeriodElapsedCallback+0xdc>
 80009ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c6:	dd07      	ble.n	80009d8 <HAL_TIM_PeriodElapsedCallback+0xc8>
 80009c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d4:	da07      	bge.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xd6>
 80009d6:	e009      	b.n	80009ec <HAL_TIM_PeriodElapsedCallback+0xdc>
 80009d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e4:	d802      	bhi.n	80009ec <HAL_TIM_PeriodElapsedCallback+0xdc>
			  gain = 2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009ea:	e0a6      	b.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x22a>
		  }
		  else if(ABS(line_error)<=6 && ABS(line_error)>2){
 80009ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f8:	dd09      	ble.n	8000a0e <HAL_TIM_PeriodElapsedCallback+0xfe>
 80009fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009fe:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0a:	d909      	bls.n	8000a20 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000a0c:	e025      	b.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x14a>
 8000a0e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a12:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8000a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1e:	db1c      	blt.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x14a>
 8000a20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a2c:	dd09      	ble.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x132>
 8000a2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a32:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3e:	dc09      	bgt.n	8000a54 <HAL_TIM_PeriodElapsedCallback+0x144>
 8000a40:	e00b      	b.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x14a>
 8000a42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a46:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a52:	d502      	bpl.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x14a>
			  gain = 6;
 8000a54:	2306      	movs	r3, #6
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a58:	e06f      	b.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x22a>
		  }
		  else if(ABS(line_error)<=10 && ABS(line_error)>6){
 8000a5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a66:	dd09      	ble.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0x16c>
 8000a68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a78:	d909      	bls.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x17e>
 8000a7a:	e025      	b.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000a7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a80:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8000a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8c:	db1c      	blt.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000a8e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9a:	dd09      	ble.n	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 8000a9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000aa0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aac:	dc09      	bgt.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 8000aae:	e00b      	b.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ab4:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8000ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac0:	d502      	bpl.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			  gain = 9;
 8000ac2:	2309      	movs	r3, #9
 8000ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ac6:	e038      	b.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x22a>
		  }
		  else if(ABS(line_error)<=14 && ABS(line_error)>10){
 8000ac8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad4:	dd09      	ble.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x1da>
 8000ad6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ada:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8000ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae6:	d909      	bls.n	8000afc <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8000ae8:	e025      	b.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x226>
 8000aea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000aee:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8000af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afa:	db1c      	blt.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x226>
 8000afc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b08:	dd09      	ble.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x20e>
 8000b0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b0e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1a:	dc09      	bgt.n	8000b30 <HAL_TIM_PeriodElapsedCallback+0x220>
 8000b1c:	e00b      	b.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x226>
 8000b1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b22:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8000b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2e:	d502      	bpl.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x226>
			  gain = 12;
 8000b30:	230c      	movs	r3, #12
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b34:	e001      	b.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x22a>
		  }else{
			  gain = 15;
 8000b36:	230f      	movs	r3, #15
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c

		// reference_rpm_L = 100 - yaw_err*ABS(yaw_err);
		// reference_rpm_R = 100 + yaw_err*ABS(yaw_err);


		reference_rpm_L = 100 ;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b3e:	601a      	str	r2, [r3, #0]
		reference_rpm_R = 100 ;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b44:	601a      	str	r2, [r3, #0]

		uint32_t TIM3_CurrentCount , TIM4_CurrentCount;
		int32_t TIM3_DiffCount , TIM4_DiffCount;
		static uint32_t TIM3_PreviousCount = 0, TIM4_PreviousCount = 0;

		TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
		TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34


		/*  evaluate increment of TIM3 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0310 	and.w	r3, r3, #16
 8000b60:	2b10      	cmp	r3, #16
 8000b62:	d112      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x27a>
		{
			/* check for counter underflow */
			if (TIM3_CurrentCount <= TIM3_PreviousCount)
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d805      	bhi.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x26a>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b78:	e02d      	b.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x2c6>
			else
				TIM3_DiffCount = -((TIM3_ARR_VALUE+1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b88:	e025      	b.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x2c6>
		}
		else
		{
		/* check for counter overflow */
			if (TIM3_CurrentCount >= TIM3_PreviousCount)
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d319      	bcc.n	8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2b8>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b9e:	e01a      	b.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x2c6>
 8000ba0:	40001000 	.word	0x40001000
 8000ba4:	200007f4 	.word	0x200007f4
 8000ba8:	200000dc 	.word	0x200000dc
 8000bac:	200007f6 	.word	0x200007f6
 8000bb0:	200007d4 	.word	0x200007d4
 8000bb4:	42c80000 	.word	0x42c80000
 8000bb8:	200007d8 	.word	0x200007d8
 8000bbc:	20000280 	.word	0x20000280
 8000bc0:	200002cc 	.word	0x200002cc
 8000bc4:	20000800 	.word	0x20000800
			else
				TIM3_DiffCount = ((TIM3_ARR_VALUE+1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 8000bc8:	4b83      	ldr	r3, [pc, #524]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8000bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

		TIM3_PreviousCount = TIM3_CurrentCount;
 8000bd6:	4a80      	ldr	r2, [pc, #512]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8000bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bda:	6013      	str	r3, [r2, #0]
	    // 3. compute the motor speed, in [rpm] for example

		float current_rpm_R = ((float)TIM3_DiffCount/(2.0*1920.0))*(60.0/TS );
 8000bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bde:	ee07 3a90 	vmov	s15, r3
 8000be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000be6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000bea:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8000dc0 <HAL_TIM_PeriodElapsedCallback+0x4b0>
 8000bee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bf2:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8000dc8 <HAL_TIM_PeriodElapsedCallback+0x4b8>
 8000bf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bfa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bfe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    tracking_error_1 = reference_rpm_R - current_rpm_R;
 8000c02:	4b76      	ldr	r3, [pc, #472]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8000c04:	ed93 7a00 	vldr	s14, [r3]
 8000c08:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c10:	4b73      	ldr	r3, [pc, #460]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8000c12:	edc3 7a00 	vstr	s15, [r3]




		/*  evaluate increment of TIM4 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8000c16:	4b73      	ldr	r3, [pc, #460]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	2b10      	cmp	r3, #16
 8000c22:	d112      	bne.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x33a>
		{
			/* check for counter underflow */
			if (TIM4_CurrentCount <= TIM4_PreviousCount)
 8000c24:	4b70      	ldr	r3, [pc, #448]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d805      	bhi.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x32a>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000c2e:	4b6e      	ldr	r3, [pc, #440]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c38:	e019      	b.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x35e>
			else
				TIM4_DiffCount = -((TIM4_ARR_VALUE+1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 8000c3a:	4b6b      	ldr	r3, [pc, #428]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c48:	e011      	b.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x35e>
		}
		else
		{
		/* check for counter overflow */
			if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8000c4a:	4b67      	ldr	r3, [pc, #412]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d305      	bcc.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0x350>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000c54:	4b64      	ldr	r3, [pc, #400]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c5e:	e006      	b.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x35e>
			else
				TIM4_DiffCount = ((TIM4_ARR_VALUE+1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 8000c60:	4b61      	ldr	r3, [pc, #388]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8000c6c:	64bb      	str	r3, [r7, #72]	; 0x48
		}

		TIM4_PreviousCount = TIM4_CurrentCount;
 8000c6e:	4a5e      	ldr	r2, [pc, #376]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8000c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c72:	6013      	str	r3, [r2, #0]

		float current_rpm_L = ((float)TIM4_DiffCount/(2.0*1920.0))*(60.0/TS );
 8000c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c76:	ee07 3a90 	vmov	s15, r3
 8000c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c7e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c82:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8000dc0 <HAL_TIM_PeriodElapsedCallback+0x4b0>
 8000c86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c8a:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000dc8 <HAL_TIM_PeriodElapsedCallback+0x4b8>
 8000c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c96:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	    tracking_error_2 = reference_rpm_L - current_rpm_L;
 8000c9a:	4b54      	ldr	r3, [pc, #336]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8000c9c:	ed93 7a00 	vldr	s14, [r3]
 8000ca0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ca8:	4b51      	ldr	r3, [pc, #324]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8000caa:	edc3 7a00 	vstr	s15, [r3]
	    /* 4. compute the tracking error
	    * 5. compute the proportional term
	    * 6. compute the integral term (simplest way is to use forward Euler method) * u_int=u_int+Ki*TS*err
	    * 7. calculate the PI signal and set the pwm of the motor properly
	    */
	     controller_return_1 = PI_controller(tracking_error_1);
 8000cae:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb8:	f7ff fd36 	bl	8000728 <PI_controller>
 8000cbc:	eef0 7a40 	vmov.f32	s15, s0
 8000cc0:	4b4c      	ldr	r3, [pc, #304]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8000cc2:	edc3 7a00 	vstr	s15, [r3]
	     controller_return_2 = PI_controller(tracking_error_2);
 8000cc6:	4b4a      	ldr	r3, [pc, #296]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8000cc8:	edd3 7a00 	vldr	s15, [r3]
 8000ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd0:	f7ff fd2a 	bl	8000728 <PI_controller>
 8000cd4:	eef0 7a40 	vmov.f32	s15, s0
 8000cd8:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8000cda:	edc3 7a00 	vstr	s15, [r3]

	     motor_V_1 = controller_return_1;
 8000cde:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8000ce4:	6013      	str	r3, [r2, #0]
	     motor_V_2 = controller_return_2;
 8000ce6:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a45      	ldr	r2, [pc, #276]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8000cec:	6013      	str	r3, [r2, #0]
	    	motor_V_2 = 5;
	    if(motor_V_2 < -5)
	    	motor_V_2 = -5;
*/

	    duty_1 = V2DUTY*motor_V_1;
 8000cee:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8000cf0:	edd3 7a00 	vldr	s15, [r3]
 8000cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000dd0 <HAL_TIM_PeriodElapsedCallback+0x4c0>
 8000cfc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d00:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d04:	ee17 2a90 	vmov	r2, s15
 8000d08:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000d0a:	601a      	str	r2, [r3, #0]
	    //	duty_1 = 399;


	    // command a motor
		/* calculate duty properly */
		if (duty_1 >= 0) {
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db09      	blt.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x418>

			// rotate forward
			// alternate between forward and coast
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty_1);
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38
 8000d26:	e009      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x42c>
			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)(TIM8_ARR_VALUE - duty_1));

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty_1);
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	425a      	negs	r2, r3
 8000d36:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38





	    int32_t duty_2 = V2DUTY*motor_V_2;
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d46:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000dd0 <HAL_TIM_PeriodElapsedCallback+0x4c0>
 8000d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d4e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d52:	ee17 3a90 	vmov	r3, s15
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
	    //if (duty_2 > 399)
	   	//   	 duty_2 = 399;
	    // command a motor
		/* calculate duty properly */
		if (duty_2 >= 0) {
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db08      	blt.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x460>

			// rotate forward
			// alternate between forward and coast
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)duty_2);
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d64:	63da      	str	r2, [r3, #60]	; 0x3c
	        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d6e:	e008      	b.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x472>
			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)(TIM8_ARR_VALUE - duty_2));

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)-duty_2);
 8000d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7a:	425a      	negs	r2, r3
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40
		}
     	/*	Prepare data packet */
		data_log.w1 = reference_rpm_L;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8000d88:	6013      	str	r3, [r2, #0]
		data_log.w2 = current_rpm_L;
 8000d8a:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8e:	6053      	str	r3, [r2, #4]

		data_log.u1 = line_error;
 8000d90:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8000d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d94:	6093      	str	r3, [r2, #8]
		data_log.u2 = yaw_err;
 8000d96:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8000d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d9a:	60d3      	str	r3, [r2, #12]

		data_log.x1 = reference_rpm_R;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8000da2:	6113      	str	r3, [r2, #16]
		data_log.x2 = current_rpm_R;
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8000da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da8:	6153      	str	r3, [r2, #20]

		ertc_dlog_send(&logger, &data_log, sizeof(data_log));
 8000daa:	2218      	movs	r2, #24
 8000dac:	4917      	ldr	r1, [pc, #92]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8000dae:	4818      	ldr	r0, [pc, #96]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8000db0:	f7ff fc62 	bl	8000678 <ertc_dlog_send>
	}
}
 8000db4:	bf00      	nop
 8000db6:	3750      	adds	r7, #80	; 0x50
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	00000000 	.word	0x00000000
 8000dc4:	40ae0000 	.word	0x40ae0000
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	40b77000 	.word	0x40b77000
 8000dd0:	00000000 	.word	0x00000000
 8000dd4:	40490000 	.word	0x40490000
 8000dd8:	20000800 	.word	0x20000800
 8000ddc:	200007d8 	.word	0x200007d8
 8000de0:	200007c4 	.word	0x200007c4
 8000de4:	200002cc 	.word	0x200002cc
 8000de8:	20000804 	.word	0x20000804
 8000dec:	200007d4 	.word	0x200007d4
 8000df0:	200007d0 	.word	0x200007d0
 8000df4:	200007bc 	.word	0x200007bc
 8000df8:	200007c8 	.word	0x200007c8
 8000dfc:	200007c0 	.word	0x200007c0
 8000e00:	200007cc 	.word	0x200007cc
 8000e04:	200007f8 	.word	0x200007f8
 8000e08:	200003b0 	.word	0x200003b0
 8000e0c:	200007dc 	.word	0x200007dc
 8000e10:	200006f0 	.word	0x200006f0

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1a:	f001 ff4c 	bl	8002cb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1e:	f000 f965 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e22:	f000 ffbd 	bl	8001da0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e26:	f000 ff8b 	bl	8001d40 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e2a:	f000 f9d1 	bl	80011d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e2e:	f000 fa21 	bl	8001274 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e32:	f000 fa5f 	bl	80012f4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000e36:	f000 fa9d 	bl	8001374 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e3a:	f000 fad9 	bl	80013f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e3e:	f000 fba7 	bl	8001590 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e42:	f000 fc3f 	bl	80016c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e46:	f000 fc93 	bl	8001770 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e4a:	f000 fce7 	bl	800181c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000e4e:	f000 fd95 	bl	800197c <MX_TIM8_Init>
  MX_UART4_Init();
 8000e52:	f000 feb5 	bl	8001bc0 <MX_UART4_Init>
  MX_UART5_Init();
 8000e56:	f000 fee3 	bl	8001c20 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000e5a:	f000 ff11 	bl	8001c80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e5e:	f000 ff3f 	bl	8001ce0 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000e62:	f000 fe5d 	bl	8001b20 <MX_TIM9_Init>
  MX_TIM6_Init();
 8000e66:	f000 fd51 	bl	800190c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  logger.uart_handle = huart3; // for serial
  logger.uart_handle = huart2; // for wifi
 8000e6a:	4b92      	ldr	r3, [pc, #584]	; (80010b4 <main+0x2a0>)
 8000e6c:	4a92      	ldr	r2, [pc, #584]	; (80010b8 <main+0x2a4>)
 8000e6e:	3344      	adds	r3, #68	; 0x44
 8000e70:	4611      	mov	r1, r2
 8000e72:	2288      	movs	r2, #136	; 0x88
 8000e74:	4618      	mov	r0, r3
 8000e76:	f007 f941 	bl	80080fc <memcpy>

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	488f      	ldr	r0, [pc, #572]	; (80010bc <main+0x2a8>)
 8000e80:	f002 fcec 	bl	800385c <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e88:	f001 ff72 	bl	8002d70 <HAL_Delay>

  data = 0x12;
 8000e8c:	4b8c      	ldr	r3, [pc, #560]	; (80010c0 <main+0x2ac>)
 8000e8e:	2212      	movs	r2, #18
 8000e90:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000e92:	23c8      	movs	r3, #200	; 0xc8
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	2301      	movs	r3, #1
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	4b89      	ldr	r3, [pc, #548]	; (80010c0 <main+0x2ac>)
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	227d      	movs	r2, #125	; 0x7d
 8000ea2:	217c      	movs	r1, #124	; 0x7c
 8000ea4:	4887      	ldr	r0, [pc, #540]	; (80010c4 <main+0x2b0>)
 8000ea6:	f002 fd83 	bl	80039b0 <HAL_I2C_Mem_Write>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b86      	ldr	r3, [pc, #536]	; (80010c8 <main+0x2b4>)
 8000eb0:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000eb2:	4b85      	ldr	r3, [pc, #532]	; (80010c8 <main+0x2b4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <main+0xb2>
      printf("I2C communication error (%X).\n", status);
 8000eba:	4b83      	ldr	r3, [pc, #524]	; (80010c8 <main+0x2b4>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4882      	ldr	r0, [pc, #520]	; (80010cc <main+0x2b8>)
 8000ec2:	f007 f931 	bl	8008128 <iprintf>

    data = 0x34;
 8000ec6:	4b7e      	ldr	r3, [pc, #504]	; (80010c0 <main+0x2ac>)
 8000ec8:	2234      	movs	r2, #52	; 0x34
 8000eca:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000ecc:	23c8      	movs	r3, #200	; 0xc8
 8000ece:	9302      	str	r3, [sp, #8]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	4b7a      	ldr	r3, [pc, #488]	; (80010c0 <main+0x2ac>)
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	227d      	movs	r2, #125	; 0x7d
 8000edc:	217c      	movs	r1, #124	; 0x7c
 8000ede:	4879      	ldr	r0, [pc, #484]	; (80010c4 <main+0x2b0>)
 8000ee0:	f002 fd66 	bl	80039b0 <HAL_I2C_Mem_Write>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b77      	ldr	r3, [pc, #476]	; (80010c8 <main+0x2b4>)
 8000eea:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000eec:	4b76      	ldr	r3, [pc, #472]	; (80010c8 <main+0x2b4>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <main+0xec>
      printf("I2C communication error (%X).\n", status);
 8000ef4:	4b74      	ldr	r3, [pc, #464]	; (80010c8 <main+0x2b4>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4874      	ldr	r0, [pc, #464]	; (80010cc <main+0x2b8>)
 8000efc:	f007 f914 	bl	8008128 <iprintf>

    HAL_Delay(100);
 8000f00:	2064      	movs	r0, #100	; 0x64
 8000f02:	f001 ff35 	bl	8002d70 <HAL_Delay>

    /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000f06:	4b6e      	ldr	r3, [pc, #440]	; (80010c0 <main+0x2ac>)
 8000f08:	22ff      	movs	r2, #255	; 0xff
 8000f0a:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000f0c:	23c8      	movs	r3, #200	; 0xc8
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	4b6a      	ldr	r3, [pc, #424]	; (80010c0 <main+0x2ac>)
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	217c      	movs	r1, #124	; 0x7c
 8000f1e:	4869      	ldr	r0, [pc, #420]	; (80010c4 <main+0x2b0>)
 8000f20:	f002 fd46 	bl	80039b0 <HAL_I2C_Mem_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <main+0x2b4>)
 8000f2a:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000f2c:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <main+0x2b4>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <main+0x12c>
      printf("I2C communication error (%X).\n", status);
 8000f34:	4b64      	ldr	r3, [pc, #400]	; (80010c8 <main+0x2b4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4864      	ldr	r0, [pc, #400]	; (80010cc <main+0x2b8>)
 8000f3c:	f007 f8f4 	bl	8008128 <iprintf>

    /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000f40:	4b5f      	ldr	r3, [pc, #380]	; (80010c0 <main+0x2ac>)
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000f46:	23c8      	movs	r3, #200	; 0xc8
 8000f48:	9302      	str	r3, [sp, #8]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <main+0x2ac>)
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	220e      	movs	r2, #14
 8000f56:	217c      	movs	r1, #124	; 0x7c
 8000f58:	485a      	ldr	r0, [pc, #360]	; (80010c4 <main+0x2b0>)
 8000f5a:	f002 fd29 	bl	80039b0 <HAL_I2C_Mem_Write>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <main+0x2b4>)
 8000f64:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000f66:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <main+0x2b4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d005      	beq.n	8000f7a <main+0x166>
      printf("I2C communication error (%X).\n", status);
 8000f6e:	4b56      	ldr	r3, [pc, #344]	; (80010c8 <main+0x2b4>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4619      	mov	r1, r3
 8000f74:	4855      	ldr	r0, [pc, #340]	; (80010cc <main+0x2b8>)
 8000f76:	f007 f8d7 	bl	8008128 <iprintf>

    /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
    data = 0x00;
 8000f7a:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <main+0x2ac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000f80:	23c8      	movs	r3, #200	; 0xc8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <main+0x2ac>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	2213      	movs	r2, #19
 8000f90:	217c      	movs	r1, #124	; 0x7c
 8000f92:	484c      	ldr	r0, [pc, #304]	; (80010c4 <main+0x2b0>)
 8000f94:	f002 fd0c 	bl	80039b0 <HAL_I2C_Mem_Write>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <main+0x2b4>)
 8000f9e:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000fa0:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <main+0x2b4>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <main+0x1a0>
      printf("I2C communication error (%X).\n", status);
 8000fa8:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <main+0x2b4>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4847      	ldr	r0, [pc, #284]	; (80010cc <main+0x2b8>)
 8000fb0:	f007 f8ba 	bl	8008128 <iprintf>

    /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000fb4:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <main+0x2ac>)
 8000fb6:	22aa      	movs	r2, #170	; 0xaa
 8000fb8:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000fba:	23c8      	movs	r3, #200	; 0xc8
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <main+0x2ac>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2216      	movs	r2, #22
 8000fca:	217c      	movs	r1, #124	; 0x7c
 8000fcc:	483d      	ldr	r0, [pc, #244]	; (80010c4 <main+0x2b0>)
 8000fce:	f002 fcef 	bl	80039b0 <HAL_I2C_Mem_Write>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <main+0x2b4>)
 8000fd8:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <main+0x2b4>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <main+0x1da>
      printf("I2C communication error (%X).\n", status);
 8000fe2:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <main+0x2b4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4838      	ldr	r0, [pc, #224]	; (80010cc <main+0x2b8>)
 8000fea:	f007 f89d 	bl	8008128 <iprintf>

    /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <main+0x2ac>)
 8000ff0:	22aa      	movs	r2, #170	; 0xaa
 8000ff2:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000ff4:	23c8      	movs	r3, #200	; 0xc8
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <main+0x2ac>)
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2217      	movs	r2, #23
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	482f      	ldr	r0, [pc, #188]	; (80010c4 <main+0x2b0>)
 8001008:	f002 fcd2 	bl	80039b0 <HAL_I2C_Mem_Write>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <main+0x2b4>)
 8001012:	701a      	strb	r2, [r3, #0]
    if (status != HAL_OK)
 8001014:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <main+0x2b4>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <main+0x214>
      printf("I2C communication error (%X).\n", status);
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <main+0x2b4>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	482a      	ldr	r0, [pc, #168]	; (80010cc <main+0x2b8>)
 8001024:	f007 f880 	bl	8008128 <iprintf>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001028:	213c      	movs	r1, #60	; 0x3c
 800102a:	4829      	ldr	r0, [pc, #164]	; (80010d0 <main+0x2bc>)
 800102c:	f004 ffb0 	bl	8005f90 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001030:	213c      	movs	r1, #60	; 0x3c
 8001032:	4828      	ldr	r0, [pc, #160]	; (80010d4 <main+0x2c0>)
 8001034:	f004 ffac 	bl	8005f90 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001038:	2100      	movs	r1, #0
 800103a:	4827      	ldr	r0, [pc, #156]	; (80010d8 <main+0x2c4>)
 800103c:	f004 fda6 	bl	8005b8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001040:	2104      	movs	r1, #4
 8001042:	4825      	ldr	r0, [pc, #148]	; (80010d8 <main+0x2c4>)
 8001044:	f004 fda2 	bl	8005b8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001048:	2108      	movs	r1, #8
 800104a:	4823      	ldr	r0, [pc, #140]	; (80010d8 <main+0x2c4>)
 800104c:	f004 fd9e 	bl	8005b8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001050:	210c      	movs	r1, #12
 8001052:	4821      	ldr	r0, [pc, #132]	; (80010d8 <main+0x2c4>)
 8001054:	f004 fd9a 	bl	8005b8c <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <main+0x2c8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2200      	movs	r2, #0
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <main+0x2c8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2200      	movs	r2, #0
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <main+0x2c8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2200      	movs	r2, #0
 800106e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <main+0x2c8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2200      	movs	r2, #0
 8001076:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001078:	2100      	movs	r1, #0
 800107a:	4818      	ldr	r0, [pc, #96]	; (80010dc <main+0x2c8>)
 800107c:	f004 fd86 	bl	8005b8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001080:	2104      	movs	r1, #4
 8001082:	4816      	ldr	r0, [pc, #88]	; (80010dc <main+0x2c8>)
 8001084:	f004 fd82 	bl	8005b8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001088:	2108      	movs	r1, #8
 800108a:	4814      	ldr	r0, [pc, #80]	; (80010dc <main+0x2c8>)
 800108c:	f004 fd7e 	bl	8005b8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001090:	210c      	movs	r1, #12
 8001092:	4812      	ldr	r0, [pc, #72]	; (80010dc <main+0x2c8>)
 8001094:	f004 fd7a 	bl	8005b8c <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <main+0x2cc>)
 800109a:	f004 fc47 	bl	800592c <HAL_TIM_Base_Start_IT>


	  //reference_rpm_L = 150 - yaw_err*18;
	  //reference_rpm_R = 150 + yaw_err*18; FASTEST

	  printf("Decimal is: %d \n\r", lineData);
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <main+0x2d0>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <main+0x2d4>)
 80010a6:	f007 f83f 	bl	8008128 <iprintf>
	  //HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <main+0x2a0>)
 80010ac:	f7ff fb10 	bl	80006d0 <ertc_dlog_update>
	  printf("Decimal is: %d \n\r", lineData);
 80010b0:	e7f5      	b.n	800109e <main+0x28a>
 80010b2:	bf00      	nop
 80010b4:	200006f0 	.word	0x200006f0
 80010b8:	200005e0 	.word	0x200005e0
 80010bc:	40021000 	.word	0x40021000
 80010c0:	200007f5 	.word	0x200007f5
 80010c4:	200000dc 	.word	0x200000dc
 80010c8:	200007f6 	.word	0x200007f6
 80010cc:	0800905c 	.word	0x0800905c
 80010d0:	20000280 	.word	0x20000280
 80010d4:	200002cc 	.word	0x200002cc
 80010d8:	200001e8 	.word	0x200001e8
 80010dc:	200003b0 	.word	0x200003b0
 80010e0:	20000364 	.word	0x20000364
 80010e4:	200007f4 	.word	0x200007f4
 80010e8:	0800907c 	.word	0x0800907c

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2234      	movs	r2, #52	; 0x34
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f007 f80c 	bl	8008118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001110:	f003 f9ae 	bl	8004470 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <SystemClock_Config+0xdc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a2b      	ldr	r2, [pc, #172]	; (80011c8 <SystemClock_Config+0xdc>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <SystemClock_Config+0xdc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <SystemClock_Config+0xe0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001134:	4a25      	ldr	r2, [pc, #148]	; (80011cc <SystemClock_Config+0xe0>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <SystemClock_Config+0xe0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800114c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001150:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800116c:	2302      	movs	r3, #2
 800116e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4618      	mov	r0, r3
 8001176:	f003 f9db 	bl	8004530 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001180:	f000 ff40 	bl	8002004 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001184:	f003 f984 	bl	8004490 <HAL_PWREx_EnableOverDrive>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800118e:	f000 ff39 	bl	8002004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2103      	movs	r1, #3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fc6c 	bl	8004a8c <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011ba:	f000 ff23 	bl	8002004 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	; 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_ADC1_Init+0x98>)
 80011e4:	4a21      	ldr	r2, [pc, #132]	; (800126c <MX_ADC1_Init+0x9c>)
 80011e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_ADC1_Init+0x98>)
 80011ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_ADC1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_ADC1_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_ADC1_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_ADC1_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_ADC1_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_ADC1_Init+0x98>)
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <MX_ADC1_Init+0xa0>)
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_ADC1_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_ADC1_Init+0x98>)
 800121e:	2201      	movs	r2, #1
 8001220:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_ADC1_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_ADC1_Init+0x98>)
 800122c:	2201      	movs	r2, #1
 800122e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_ADC1_Init+0x98>)
 8001232:	f001 fdc1 	bl	8002db8 <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800123c:	f000 fee2 	bl	8002004 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001240:	2303      	movs	r3, #3
 8001242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001244:	2301      	movs	r3, #1
 8001246:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_ADC1_Init+0x98>)
 8001252:	f001 fdf5 	bl	8002e40 <HAL_ADC_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800125c:	f000 fed2 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000094 	.word	0x20000094
 800126c:	40012000 	.word	0x40012000
 8001270:	0f000001 	.word	0x0f000001

08001274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_I2C1_Init+0x74>)
 800127a:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <MX_I2C1_Init+0x78>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <MX_I2C1_Init+0x7c>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_I2C1_Init+0x74>)
 800128c:	2201      	movs	r2, #1
 800128e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012b0:	f002 faee 	bl	8003890 <HAL_I2C_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ba:	f000 fea3 	bl	8002004 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012be:	2100      	movs	r1, #0
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012c2:	f003 f83d 	bl	8004340 <HAL_I2CEx_ConfigAnalogFilter>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012cc:	f000 fe9a 	bl	8002004 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012d4:	f003 f87f 	bl	80043d6 <HAL_I2CEx_ConfigDigitalFilter>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012de:	f000 fe91 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200000dc 	.word	0x200000dc
 80012ec:	40005400 	.word	0x40005400
 80012f0:	20303e5d 	.word	0x20303e5d

080012f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_I2C2_Init+0x74>)
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <MX_I2C2_Init+0x78>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_I2C2_Init+0x74>)
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <MX_I2C2_Init+0x7c>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_I2C2_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_I2C2_Init+0x74>)
 800130c:	2201      	movs	r2, #1
 800130e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_I2C2_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_I2C2_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_I2C2_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_I2C2_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_I2C2_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <MX_I2C2_Init+0x74>)
 8001330:	f002 faae 	bl	8003890 <HAL_I2C_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800133a:	f000 fe63 	bl	8002004 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133e:	2100      	movs	r1, #0
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <MX_I2C2_Init+0x74>)
 8001342:	f002 fffd 	bl	8004340 <HAL_I2CEx_ConfigAnalogFilter>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800134c:	f000 fe5a 	bl	8002004 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_I2C2_Init+0x74>)
 8001354:	f003 f83f 	bl	80043d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800135e:	f000 fe51 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000130 	.word	0x20000130
 800136c:	40005800 	.word	0x40005800
 8001370:	20303e5d 	.word	0x20303e5d

08001374 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_SPI1_Init+0x74>)
 800137a:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <MX_SPI1_Init+0x78>)
 800137c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_SPI1_Init+0x74>)
 8001380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001384:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_SPI1_Init+0x74>)
 800138e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001392:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_SPI1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_SPI1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_SPI1_Init+0x74>)
 80013a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_SPI1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_SPI1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_SPI1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_SPI1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_SPI1_Init+0x74>)
 80013c2:	2207      	movs	r2, #7
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_SPI1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_SPI1_Init+0x74>)
 80013ce:	2208      	movs	r2, #8
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_SPI1_Init+0x74>)
 80013d4:	f004 f9a8 	bl	8005728 <HAL_SPI_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013de:	f000 fe11 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000184 	.word	0x20000184
 80013ec:	40013000 	.word	0x40013000

080013f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09a      	sub	sp, #104	; 0x68
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001410:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	222c      	movs	r2, #44	; 0x2c
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f006 fe74 	bl	8008118 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001430:	4b55      	ldr	r3, [pc, #340]	; (8001588 <MX_TIM1_Init+0x198>)
 8001432:	4a56      	ldr	r2, [pc, #344]	; (800158c <MX_TIM1_Init+0x19c>)
 8001434:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001436:	4b54      	ldr	r3, [pc, #336]	; (8001588 <MX_TIM1_Init+0x198>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b52      	ldr	r3, [pc, #328]	; (8001588 <MX_TIM1_Init+0x198>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001442:	4b51      	ldr	r3, [pc, #324]	; (8001588 <MX_TIM1_Init+0x198>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <MX_TIM1_Init+0x198>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800144e:	4b4e      	ldr	r3, [pc, #312]	; (8001588 <MX_TIM1_Init+0x198>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <MX_TIM1_Init+0x198>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800145a:	484b      	ldr	r0, [pc, #300]	; (8001588 <MX_TIM1_Init+0x198>)
 800145c:	f004 fa0f 	bl	800587e <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001466:	f000 fdcd 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001474:	4619      	mov	r1, r3
 8001476:	4844      	ldr	r0, [pc, #272]	; (8001588 <MX_TIM1_Init+0x198>)
 8001478:	f005 f962 	bl	8006740 <HAL_TIM_ConfigClockSource>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001482:	f000 fdbf 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001486:	4840      	ldr	r0, [pc, #256]	; (8001588 <MX_TIM1_Init+0x198>)
 8001488:	f004 fac8 	bl	8005a1c <HAL_TIM_OC_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001492:	f000 fdb7 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014a6:	4619      	mov	r1, r3
 80014a8:	4837      	ldr	r0, [pc, #220]	; (8001588 <MX_TIM1_Init+0x198>)
 80014aa:	f005 ff23 	bl	80072f4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80014b4:	f000 fda6 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80014b8:	2350      	movs	r3, #80	; 0x50
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014c0:	2302      	movs	r3, #2
 80014c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	482a      	ldr	r0, [pc, #168]	; (8001588 <MX_TIM1_Init+0x198>)
 80014de:	f004 ff05 	bl	80062ec <HAL_TIM_OC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80014e8:	f000 fd8c 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f0:	2204      	movs	r2, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4824      	ldr	r0, [pc, #144]	; (8001588 <MX_TIM1_Init+0x198>)
 80014f6:	f004 fef9 	bl	80062ec <HAL_TIM_OC_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001500:	f000 fd80 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001508:	2208      	movs	r2, #8
 800150a:	4619      	mov	r1, r3
 800150c:	481e      	ldr	r0, [pc, #120]	; (8001588 <MX_TIM1_Init+0x198>)
 800150e:	f004 feed 	bl	80062ec <HAL_TIM_OC_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001518:	f000 fd74 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800151c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001520:	220c      	movs	r2, #12
 8001522:	4619      	mov	r1, r3
 8001524:	4818      	ldr	r0, [pc, #96]	; (8001588 <MX_TIM1_Init+0x198>)
 8001526:	f004 fee1 	bl	80062ec <HAL_TIM_OC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001530:	f000 fd68 	bl	8002004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM1_Init+0x198>)
 800156a:	f005 ff51 	bl	8007410 <HAL_TIMEx_ConfigBreakDeadTime>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001574:	f000 fd46 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM1_Init+0x198>)
 800157a:	f001 f805 	bl	8002588 <HAL_TIM_MspPostInit>

}
 800157e:	bf00      	nop
 8001580:	3768      	adds	r7, #104	; 0x68
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001e8 	.word	0x200001e8
 800158c:	40010000 	.word	0x40010000

08001590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b092      	sub	sp, #72	; 0x48
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001596:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d0:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <MX_TIM2_Init+0x130>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <MX_TIM2_Init+0x130>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <MX_TIM2_Init+0x130>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <MX_TIM2_Init+0x130>)
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ec:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <MX_TIM2_Init+0x130>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <MX_TIM2_Init+0x130>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f8:	4831      	ldr	r0, [pc, #196]	; (80016c0 <MX_TIM2_Init+0x130>)
 80015fa:	f004 f940 	bl	800587e <HAL_TIM_Base_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001604:	f000 fcfe 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800160e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001612:	4619      	mov	r1, r3
 8001614:	482a      	ldr	r0, [pc, #168]	; (80016c0 <MX_TIM2_Init+0x130>)
 8001616:	f005 f893 	bl	8006740 <HAL_TIM_ConfigClockSource>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001620:	f000 fcf0 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001624:	4826      	ldr	r0, [pc, #152]	; (80016c0 <MX_TIM2_Init+0x130>)
 8001626:	f004 fa5a 	bl	8005ade <HAL_TIM_PWM_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001630:	f000 fce8 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001634:	4822      	ldr	r0, [pc, #136]	; (80016c0 <MX_TIM2_Init+0x130>)
 8001636:	f004 fba3 	bl	8005d80 <HAL_TIM_IC_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001640:	f000 fce0 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800164c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001650:	4619      	mov	r1, r3
 8001652:	481b      	ldr	r0, [pc, #108]	; (80016c0 <MX_TIM2_Init+0x130>)
 8001654:	f005 fe4e 	bl	80072f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800165e:	f000 fcd1 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001662:	2360      	movs	r3, #96	; 0x60
 8001664:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4811      	ldr	r0, [pc, #68]	; (80016c0 <MX_TIM2_Init+0x130>)
 800167c:	f004 ff4c 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001686:	f000 fcbd 	bl	8002004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800168e:	2301      	movs	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800169a:	463b      	mov	r3, r7
 800169c:	2208      	movs	r2, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <MX_TIM2_Init+0x130>)
 80016a2:	f004 fe9d 	bl	80063e0 <HAL_TIM_IC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80016ac:	f000 fcaa 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <MX_TIM2_Init+0x130>)
 80016b2:	f000 ff69 	bl	8002588 <HAL_TIM_MspPostInit>

}
 80016b6:	bf00      	nop
 80016b8:	3748      	adds	r7, #72	; 0x48
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000234 	.word	0x20000234

080016c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2224      	movs	r2, #36	; 0x24
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f006 fd20 	bl	8008118 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_TIM3_Init+0xa4>)
 80016e4:	4a21      	ldr	r2, [pc, #132]	; (800176c <MX_TIM3_Init+0xa8>)
 80016e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <MX_TIM3_Init+0xa4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_TIM3_Init+0xa4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_TIM3_Init+0xa4>)
 80016f6:	f640 62ff 	movw	r2, #3839	; 0xeff
 80016fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_TIM3_Init+0xa4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_TIM3_Init+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001708:	2303      	movs	r3, #3
 800170a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001710:	2301      	movs	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001718:	230f      	movs	r3, #15
 800171a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001720:	2301      	movs	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001728:	230f      	movs	r3, #15
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_TIM3_Init+0xa4>)
 8001734:	f004 fb86 	bl	8005e44 <HAL_TIM_Encoder_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800173e:	f000 fc61 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_TIM3_Init+0xa4>)
 8001750:	f005 fdd0 	bl	80072f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800175a:	f000 fc53 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3730      	adds	r7, #48	; 0x30
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000280 	.word	0x20000280
 800176c:	40000400 	.word	0x40000400

08001770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f006 fcca 	bl	8008118 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_TIM4_Init+0xa4>)
 8001790:	4a21      	ldr	r2, [pc, #132]	; (8001818 <MX_TIM4_Init+0xa8>)
 8001792:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <MX_TIM4_Init+0xa4>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_TIM4_Init+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <MX_TIM4_Init+0xa4>)
 80017a2:	f640 62ff 	movw	r2, #3839	; 0xeff
 80017a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_TIM4_Init+0xa4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM4_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017b4:	2303      	movs	r3, #3
 80017b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017bc:	2301      	movs	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80017c4:	230f      	movs	r3, #15
 80017c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017cc:	2301      	movs	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80017d4:	230f      	movs	r3, #15
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <MX_TIM4_Init+0xa4>)
 80017e0:	f004 fb30 	bl	8005e44 <HAL_TIM_Encoder_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80017ea:	f000 fc0b 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <MX_TIM4_Init+0xa4>)
 80017fc:	f005 fd7a 	bl	80072f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001806:	f000 fbfd 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3730      	adds	r7, #48	; 0x30
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200002cc 	.word	0x200002cc
 8001818:	40000800 	.word	0x40000800

0800181c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08e      	sub	sp, #56	; 0x38
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <MX_TIM5_Init+0xe8>)
 8001850:	4a2d      	ldr	r2, [pc, #180]	; (8001908 <MX_TIM5_Init+0xec>)
 8001852:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <MX_TIM5_Init+0xe8>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <MX_TIM5_Init+0xe8>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <MX_TIM5_Init+0xe8>)
 8001862:	f04f 32ff 	mov.w	r2, #4294967295
 8001866:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <MX_TIM5_Init+0xe8>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <MX_TIM5_Init+0xe8>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001874:	4823      	ldr	r0, [pc, #140]	; (8001904 <MX_TIM5_Init+0xe8>)
 8001876:	f004 f802 	bl	800587e <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001880:	f000 fbc0 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	4619      	mov	r1, r3
 8001890:	481c      	ldr	r0, [pc, #112]	; (8001904 <MX_TIM5_Init+0xe8>)
 8001892:	f004 ff55 	bl	8006740 <HAL_TIM_ConfigClockSource>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800189c:	f000 fbb2 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80018a0:	4818      	ldr	r0, [pc, #96]	; (8001904 <MX_TIM5_Init+0xe8>)
 80018a2:	f004 f91c 	bl	8005ade <HAL_TIM_PWM_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80018ac:	f000 fbaa 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4811      	ldr	r0, [pc, #68]	; (8001904 <MX_TIM5_Init+0xe8>)
 80018c0:	f005 fd18 	bl	80072f4 <HAL_TIMEx_MasterConfigSynchronization>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80018ca:	f000 fb9b 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ce:	2360      	movs	r3, #96	; 0x60
 80018d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	2200      	movs	r2, #0
 80018e2:	4619      	mov	r1, r3
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_TIM5_Init+0xe8>)
 80018e6:	f004 fe17 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80018f0:	f000 fb88 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <MX_TIM5_Init+0xe8>)
 80018f6:	f000 fe47 	bl	8002588 <HAL_TIM_MspPostInit>

}
 80018fa:	bf00      	nop
 80018fc:	3738      	adds	r7, #56	; 0x38
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000318 	.word	0x20000318
 8001908:	40000c00 	.word	0x40000c00

0800190c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_TIM6_Init+0x68>)
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <MX_TIM6_Init+0x6c>)
 8001920:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_TIM6_Init+0x68>)
 8001924:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001928:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_TIM6_Init+0x68>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <MX_TIM6_Init+0x68>)
 8001932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001936:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_TIM6_Init+0x68>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <MX_TIM6_Init+0x68>)
 8001940:	f003 ff9d 	bl	800587e <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800194a:	f000 fb5b 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <MX_TIM6_Init+0x68>)
 800195c:	f005 fcca 	bl	80072f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001966:	f000 fb4d 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000364 	.word	0x20000364
 8001978:	40001000 	.word	0x40001000

0800197c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b09a      	sub	sp, #104	; 0x68
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	615a      	str	r2, [r3, #20]
 80019ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	222c      	movs	r2, #44	; 0x2c
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f006 fbae 	bl	8008118 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019bc:	4b56      	ldr	r3, [pc, #344]	; (8001b18 <MX_TIM8_Init+0x19c>)
 80019be:	4a57      	ldr	r2, [pc, #348]	; (8001b1c <MX_TIM8_Init+0x1a0>)
 80019c0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80019c2:	4b55      	ldr	r3, [pc, #340]	; (8001b18 <MX_TIM8_Init+0x19c>)
 80019c4:	f240 32bf 	movw	r2, #959	; 0x3bf
 80019c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <MX_TIM8_Init+0x19c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 80019d0:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <MX_TIM8_Init+0x19c>)
 80019d2:	f240 128f 	movw	r2, #399	; 0x18f
 80019d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <MX_TIM8_Init+0x19c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019de:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <MX_TIM8_Init+0x19c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <MX_TIM8_Init+0x19c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019ea:	484b      	ldr	r0, [pc, #300]	; (8001b18 <MX_TIM8_Init+0x19c>)
 80019ec:	f003 ff47 	bl	800587e <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80019f6:	f000 fb05 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a04:	4619      	mov	r1, r3
 8001a06:	4844      	ldr	r0, [pc, #272]	; (8001b18 <MX_TIM8_Init+0x19c>)
 8001a08:	f004 fe9a 	bl	8006740 <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001a12:	f000 faf7 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a16:	4840      	ldr	r0, [pc, #256]	; (8001b18 <MX_TIM8_Init+0x19c>)
 8001a18:	f004 f861 	bl	8005ade <HAL_TIM_PWM_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001a22:	f000 faef 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a36:	4619      	mov	r1, r3
 8001a38:	4837      	ldr	r0, [pc, #220]	; (8001b18 <MX_TIM8_Init+0x19c>)
 8001a3a:	f005 fc5b 	bl	80072f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001a44:	f000 fade 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a48:	2360      	movs	r3, #96	; 0x60
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482a      	ldr	r0, [pc, #168]	; (8001b18 <MX_TIM8_Init+0x19c>)
 8001a6e:	f004 fd53 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001a78:	f000 fac4 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a80:	2204      	movs	r2, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4824      	ldr	r0, [pc, #144]	; (8001b18 <MX_TIM8_Init+0x19c>)
 8001a86:	f004 fd47 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001a90:	f000 fab8 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a98:	2208      	movs	r2, #8
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	481e      	ldr	r0, [pc, #120]	; (8001b18 <MX_TIM8_Init+0x19c>)
 8001a9e:	f004 fd3b 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001aa8:	f000 faac 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ab0:	220c      	movs	r2, #12
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4818      	ldr	r0, [pc, #96]	; (8001b18 <MX_TIM8_Init+0x19c>)
 8001ab6:	f004 fd2f 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001ac0:	f000 faa0 	bl	8002004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001adc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4619      	mov	r1, r3
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_TIM8_Init+0x19c>)
 8001afa:	f005 fc89 	bl	8007410 <HAL_TIMEx_ConfigBreakDeadTime>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001b04:	f000 fa7e 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <MX_TIM8_Init+0x19c>)
 8001b0a:	f000 fd3d 	bl	8002588 <HAL_TIM_MspPostInit>

}
 8001b0e:	bf00      	nop
 8001b10:	3768      	adds	r7, #104	; 0x68
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200003b0 	.word	0x200003b0
 8001b1c:	40010400 	.word	0x40010400

08001b20 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001b3a:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <MX_TIM9_Init+0x9c>)
 8001b3c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b50:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001b5e:	4816      	ldr	r0, [pc, #88]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001b60:	f003 ffbd 	bl	8005ade <HAL_TIM_PWM_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001b6a:	f000 fa4b 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6e:	2360      	movs	r3, #96	; 0x60
 8001b70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001b86:	f004 fcc7 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001b90:	f000 fa38 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2204      	movs	r2, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001b9c:	f004 fcbc 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001ba6:	f000 fa2d 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_TIM9_Init+0x98>)
 8001bac:	f000 fcec 	bl	8002588 <HAL_TIM_MspPostInit>

}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200003fc 	.word	0x200003fc
 8001bbc:	40014000 	.word	0x40014000

08001bc0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <MX_UART4_Init+0x5c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_UART4_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_UART4_Init+0x58>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_UART4_Init+0x58>)
 8001c04:	f005 fca0 	bl	8007548 <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c0e:	f000 f9f9 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000448 	.word	0x20000448
 8001c1c:	40004c00 	.word	0x40004c00

08001c20 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c26:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <MX_UART5_Init+0x5c>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c30:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_UART5_Init+0x58>)
 8001c64:	f005 fc70 	bl	8007548 <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001c6e:	f000 f9c9 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200004d0 	.word	0x200004d0
 8001c7c:	40005000 	.word	0x40005000

08001c80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <MX_USART1_UART_Init+0x5c>)
 8001c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_USART1_UART_Init+0x58>)
 8001cc4:	f005 fc40 	bl	8007548 <HAL_UART_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cce:	f000 f999 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000558 	.word	0x20000558
 8001cdc:	40011000 	.word	0x40011000

08001ce0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001ce6:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <MX_USART2_UART_Init+0x58>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001cec:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <MX_USART2_UART_Init+0x5c>)
 8001cee:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001d04:	220c      	movs	r2, #12
 8001d06:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d08:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d20:	4804      	ldr	r0, [pc, #16]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001d22:	f005 fc11 	bl	8007548 <HAL_UART_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001d2c:	f000 f96a 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200005e0 	.word	0x200005e0
 8001d38:	40004400 	.word	0x40004400
 8001d3c:	000f4240 	.word	0x000f4240

08001d40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <MX_USART3_UART_Init+0x5c>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_USART3_UART_Init+0x58>)
 8001d84:	f005 fbe0 	bl	8007548 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d8e:	f000 f939 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000668 	.word	0x20000668
 8001d9c:	40004800 	.word	0x40004800

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08e      	sub	sp, #56	; 0x38
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db6:	4b8c      	ldr	r3, [pc, #560]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a8b      	ldr	r2, [pc, #556]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	623b      	str	r3, [r7, #32]
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	4b86      	ldr	r3, [pc, #536]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a85      	ldr	r2, [pc, #532]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b83      	ldr	r3, [pc, #524]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001de6:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a7f      	ldr	r2, [pc, #508]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001dec:	f043 0320 	orr.w	r3, r3, #32
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b7d      	ldr	r3, [pc, #500]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	4b7a      	ldr	r3, [pc, #488]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a79      	ldr	r2, [pc, #484]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b74      	ldr	r3, [pc, #464]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a73      	ldr	r2, [pc, #460]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b71      	ldr	r3, [pc, #452]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a6d      	ldr	r2, [pc, #436]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e46:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a67      	ldr	r2, [pc, #412]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e5e:	4b62      	ldr	r3, [pc, #392]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a61      	ldr	r2, [pc, #388]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b5f      	ldr	r3, [pc, #380]	; (8001fe8 <MX_GPIO_Init+0x248>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2118      	movs	r1, #24
 8001e7a:	485c      	ldr	r0, [pc, #368]	; (8001fec <MX_GPIO_Init+0x24c>)
 8001e7c:	f001 fcee 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e86:	485a      	ldr	r0, [pc, #360]	; (8001ff0 <MX_GPIO_Init+0x250>)
 8001e88:	f001 fce8 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2140      	movs	r1, #64	; 0x40
 8001e90:	4858      	ldr	r0, [pc, #352]	; (8001ff4 <MX_GPIO_Init+0x254>)
 8001e92:	f001 fce3 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001e96:	2318      	movs	r3, #24
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	484f      	ldr	r0, [pc, #316]	; (8001fec <MX_GPIO_Init+0x24c>)
 8001eae:	f001 fb29 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001eb2:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eb8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	484b      	ldr	r0, [pc, #300]	; (8001ff8 <MX_GPIO_Init+0x258>)
 8001eca:	f001 fb1b 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ece:	2332      	movs	r3, #50	; 0x32
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ede:	230b      	movs	r3, #11
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4844      	ldr	r0, [pc, #272]	; (8001ffc <MX_GPIO_Init+0x25c>)
 8001eea:	f001 fb0b 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001eee:	2386      	movs	r3, #134	; 0x86
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001efe:	230b      	movs	r3, #11
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	483d      	ldr	r0, [pc, #244]	; (8002000 <MX_GPIO_Init+0x260>)
 8001f0a:	f001 fafb 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001f0e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	4832      	ldr	r0, [pc, #200]	; (8001ff0 <MX_GPIO_Init+0x250>)
 8001f28:	f001 faec 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f3e:	230b      	movs	r3, #11
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f46:	4619      	mov	r1, r3
 8001f48:	4829      	ldr	r0, [pc, #164]	; (8001ff0 <MX_GPIO_Init+0x250>)
 8001f4a:	f001 fadb 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f4e:	2340      	movs	r3, #64	; 0x40
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f62:	4619      	mov	r1, r3
 8001f64:	4823      	ldr	r0, [pc, #140]	; (8001ff4 <MX_GPIO_Init+0x254>)
 8001f66:	f001 facd 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481d      	ldr	r0, [pc, #116]	; (8001ff4 <MX_GPIO_Init+0x254>)
 8001f7e:	f001 fac1 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f82:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f94:	230a      	movs	r3, #10
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4818      	ldr	r0, [pc, #96]	; (8002000 <MX_GPIO_Init+0x260>)
 8001fa0:	f001 fab0 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4811      	ldr	r0, [pc, #68]	; (8002000 <MX_GPIO_Init+0x260>)
 8001fba:	f001 faa3 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001fbe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fd0:	230b      	movs	r3, #11
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <MX_GPIO_Init+0x254>)
 8001fdc:	f001 fa92 	bl	8003504 <HAL_GPIO_Init>

}
 8001fe0:	bf00      	nop
 8001fe2:	3738      	adds	r7, #56	; 0x38
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	40021400 	.word	0x40021400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020000 	.word	0x40020000

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	e7fe      	b.n	800200c <Error_Handler+0x8>
	...

08002010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_MspInit+0x44>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <HAL_MspInit+0x44>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_MspInit+0x44>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_MspInit+0x44>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_MspInit+0x44>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_MspInit+0x44>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_ADC_MspInit+0x74>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d123      	bne.n	80020c2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_ADC_MspInit+0x78>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_ADC_MspInit+0x78>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_ADC_MspInit+0x78>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_ADC_MspInit+0x78>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_ADC_MspInit+0x78>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_ADC_MspInit+0x78>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 80020aa:	2308      	movs	r3, #8
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ae:	2303      	movs	r3, #3
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <HAL_ADC_MspInit+0x7c>)
 80020be:	f001 fa21 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	3728      	adds	r7, #40	; 0x28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40012000 	.word	0x40012000
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020000 	.word	0x40020000

080020d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b0b0      	sub	sp, #192	; 0xc0
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	2290      	movs	r2, #144	; 0x90
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f006 f80d 	bl	8008118 <memset>
  if(hi2c->Instance==I2C1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a44      	ldr	r2, [pc, #272]	; (8002214 <HAL_I2C_MspInit+0x13c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d13e      	bne.n	8002186 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002108:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800210c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4618      	mov	r0, r3
 800211a:	f002 fedd 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002124:	f7ff ff6e 	bl	8002004 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_I2C_MspInit+0x140>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <HAL_I2C_MspInit+0x140>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	6313      	str	r3, [r2, #48]	; 0x30
 8002134:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_I2C_MspInit+0x140>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002140:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002148:	2312      	movs	r3, #18
 800214a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214e:	2301      	movs	r3, #1
 8002150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800215a:	2304      	movs	r3, #4
 800215c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002164:	4619      	mov	r1, r3
 8002166:	482d      	ldr	r0, [pc, #180]	; (800221c <HAL_I2C_MspInit+0x144>)
 8002168:	f001 f9cc 	bl	8003504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_I2C_MspInit+0x140>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <HAL_I2C_MspInit+0x140>)
 8002172:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002176:	6413      	str	r3, [r2, #64]	; 0x40
 8002178:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_I2C_MspInit+0x140>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002184:	e041      	b.n	800220a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <HAL_I2C_MspInit+0x148>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d13c      	bne.n	800220a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002194:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 fe99 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80021ac:	f7ff ff2a 	bl	8002004 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_I2C_MspInit+0x140>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	4a18      	ldr	r2, [pc, #96]	; (8002218 <HAL_I2C_MspInit+0x140>)
 80021b6:	f043 0320 	orr.w	r3, r3, #32
 80021ba:	6313      	str	r3, [r2, #48]	; 0x30
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_I2C_MspInit+0x140>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ce:	2312      	movs	r3, #18
 80021d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021e0:	2304      	movs	r3, #4
 80021e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021ea:	4619      	mov	r1, r3
 80021ec:	480d      	ldr	r0, [pc, #52]	; (8002224 <HAL_I2C_MspInit+0x14c>)
 80021ee:	f001 f989 	bl	8003504 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_I2C_MspInit+0x140>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_I2C_MspInit+0x140>)
 80021f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_I2C_MspInit+0x140>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
}
 800220a:	bf00      	nop
 800220c:	37c0      	adds	r7, #192	; 0xc0
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40005400 	.word	0x40005400
 8002218:	40023800 	.word	0x40023800
 800221c:	40020400 	.word	0x40020400
 8002220:	40005800 	.word	0x40005800
 8002224:	40021400 	.word	0x40021400

08002228 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a33      	ldr	r2, [pc, #204]	; (8002314 <HAL_SPI_MspInit+0xec>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d160      	bne.n	800230c <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800224a:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a32      	ldr	r2, [pc, #200]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 8002250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a2c      	ldr	r2, [pc, #176]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a26      	ldr	r2, [pc, #152]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a20      	ldr	r2, [pc, #128]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 8002298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_SPI_MspInit+0xf0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022aa:	2320      	movs	r3, #32
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ba:	2305      	movs	r3, #5
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	4815      	ldr	r0, [pc, #84]	; (800231c <HAL_SPI_MspInit+0xf4>)
 80022c6:	f001 f91d 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022da:	2305      	movs	r3, #5
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	480e      	ldr	r0, [pc, #56]	; (8002320 <HAL_SPI_MspInit+0xf8>)
 80022e6:	f001 f90d 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fc:	2305      	movs	r3, #5
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4807      	ldr	r0, [pc, #28]	; (8002324 <HAL_SPI_MspInit+0xfc>)
 8002308:	f001 f8fc 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800230c:	bf00      	nop
 800230e:	3730      	adds	r7, #48	; 0x30
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40013000 	.word	0x40013000
 8002318:	40023800 	.word	0x40023800
 800231c:	40020000 	.word	0x40020000
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40021800 	.word	0x40021800

08002328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	; 0x38
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <HAL_TIM_Base_MspInit+0x11c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d10c      	bne.n	8002364 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234a:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a3e      	ldr	r2, [pc, #248]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002362:	e06b      	b.n	800243c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236c:	d129      	bne.n	80023c2 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a35      	ldr	r2, [pc, #212]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b33      	ldr	r3, [pc, #204]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a2f      	ldr	r2, [pc, #188]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 800239e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023b0:	2301      	movs	r3, #1
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b8:	4619      	mov	r1, r3
 80023ba:	4824      	ldr	r0, [pc, #144]	; (800244c <HAL_TIM_Base_MspInit+0x124>)
 80023bc:	f001 f8a2 	bl	8003504 <HAL_GPIO_Init>
}
 80023c0:	e03c      	b.n	800243c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <HAL_TIM_Base_MspInit+0x128>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d10c      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 80023d2:	f043 0308 	orr.w	r3, r3, #8
 80023d6:	6413      	str	r3, [r2, #64]	; 0x40
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697b      	ldr	r3, [r7, #20]
}
 80023e4:	e02a      	b.n	800243c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_TIM_Base_MspInit+0x12c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d114      	bne.n	800241a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	6413      	str	r3, [r2, #64]	; 0x40
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2101      	movs	r1, #1
 800240c:	2036      	movs	r0, #54	; 0x36
 800240e:	f001 f842 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002412:	2036      	movs	r0, #54	; 0x36
 8002414:	f001 f85b 	bl	80034ce <HAL_NVIC_EnableIRQ>
}
 8002418:	e010      	b.n	800243c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_TIM_Base_MspInit+0x130>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d10b      	bne.n	800243c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	6453      	str	r3, [r2, #68]	; 0x44
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_TIM_Base_MspInit+0x120>)
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	bf00      	nop
 800243e:	3738      	adds	r7, #56	; 0x38
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40010000 	.word	0x40010000
 8002448:	40023800 	.word	0x40023800
 800244c:	40020400 	.word	0x40020400
 8002450:	40000c00 	.word	0x40000c00
 8002454:	40001000 	.word	0x40001000
 8002458:	40010400 	.word	0x40010400

0800245c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	; 0x30
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <HAL_TIM_Encoder_MspInit+0xd8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d128      	bne.n	80024d0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800247e:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	4b28      	ldr	r3, [pc, #160]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a27      	ldr	r2, [pc, #156]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b25      	ldr	r3, [pc, #148]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 80024ae:	2330      	movs	r3, #48	; 0x30
 80024b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024be:	2302      	movs	r3, #2
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4619      	mov	r1, r3
 80024c8:	481c      	ldr	r0, [pc, #112]	; (800253c <HAL_TIM_Encoder_MspInit+0xe0>)
 80024ca:	f001 f81b 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024ce:	e02d      	b.n	800252c <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <HAL_TIM_Encoder_MspInit+0xe4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d128      	bne.n	800252c <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	4a16      	ldr	r2, [pc, #88]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 800250a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800250e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800251c:	2302      	movs	r3, #2
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	4619      	mov	r1, r3
 8002526:	4807      	ldr	r0, [pc, #28]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002528:	f000 ffec 	bl	8003504 <HAL_GPIO_Init>
}
 800252c:	bf00      	nop
 800252e:	3730      	adds	r7, #48	; 0x30
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40000400 	.word	0x40000400
 8002538:	40023800 	.word	0x40023800
 800253c:	40020400 	.word	0x40020400
 8002540:	40000800 	.word	0x40000800
 8002544:	40020c00 	.word	0x40020c00

08002548 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_TIM_PWM_MspInit+0x38>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10b      	bne.n	8002572 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_TIM_PWM_MspInit+0x3c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_TIM_PWM_MspInit+0x3c>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6453      	str	r3, [r2, #68]	; 0x44
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_TIM_PWM_MspInit+0x3c>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40014000 	.word	0x40014000
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	; 0x30
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a56      	ldr	r2, [pc, #344]	; (8002700 <HAL_TIM_MspPostInit+0x178>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d11d      	bne.n	80025e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025aa:	4b56      	ldr	r3, [pc, #344]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a55      	ldr	r2, [pc, #340]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 80025b0:	f043 0310 	orr.w	r3, r3, #16
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80025c2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	484a      	ldr	r0, [pc, #296]	; (8002708 <HAL_TIM_MspPostInit+0x180>)
 80025e0:	f000 ff90 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80025e4:	e088      	b.n	80026f8 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ee:	d11d      	bne.n	800262c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f0:	4b44      	ldr	r3, [pc, #272]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a43      	ldr	r2, [pc, #268]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800261a:	2301      	movs	r3, #1
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	4619      	mov	r1, r3
 8002624:	4839      	ldr	r0, [pc, #228]	; (800270c <HAL_TIM_MspPostInit+0x184>)
 8002626:	f000 ff6d 	bl	8003504 <HAL_GPIO_Init>
}
 800262a:	e065      	b.n	80026f8 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a37      	ldr	r2, [pc, #220]	; (8002710 <HAL_TIM_MspPostInit+0x188>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d11c      	bne.n	8002670 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a32      	ldr	r2, [pc, #200]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 800264e:	2301      	movs	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800265e:	2302      	movs	r3, #2
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4828      	ldr	r0, [pc, #160]	; (800270c <HAL_TIM_MspPostInit+0x184>)
 800266a:	f000 ff4b 	bl	8003504 <HAL_GPIO_Init>
}
 800266e:	e043      	b.n	80026f8 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a27      	ldr	r2, [pc, #156]	; (8002714 <HAL_TIM_MspPostInit+0x18c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d11d      	bne.n	80026b6 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a21      	ldr	r2, [pc, #132]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002692:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026a4:	2303      	movs	r3, #3
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	4619      	mov	r1, r3
 80026ae:	481a      	ldr	r0, [pc, #104]	; (8002718 <HAL_TIM_MspPostInit+0x190>)
 80026b0:	f000 ff28 	bl	8003504 <HAL_GPIO_Init>
}
 80026b4:	e020      	b.n	80026f8 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_TIM_MspPostInit+0x194>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 80026c6:	f043 0310 	orr.w	r3, r3, #16
 80026ca:	6313      	str	r3, [r2, #48]	; 0x30
 80026cc:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_TIM_MspPostInit+0x17c>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 80026d8:	2360      	movs	r3, #96	; 0x60
 80026da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80026e8:	2303      	movs	r3, #3
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	4619      	mov	r1, r3
 80026f2:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_TIM_MspPostInit+0x180>)
 80026f4:	f000 ff06 	bl	8003504 <HAL_GPIO_Init>
}
 80026f8:	bf00      	nop
 80026fa:	3730      	adds	r7, #48	; 0x30
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40010000 	.word	0x40010000
 8002704:	40023800 	.word	0x40023800
 8002708:	40021000 	.word	0x40021000
 800270c:	40020000 	.word	0x40020000
 8002710:	40000c00 	.word	0x40000c00
 8002714:	40010400 	.word	0x40010400
 8002718:	40020800 	.word	0x40020800
 800271c:	40014000 	.word	0x40014000

08002720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b0b6      	sub	sp, #216	; 0xd8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002738:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800273c:	2290      	movs	r2, #144	; 0x90
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f005 fce9 	bl	8008118 <memset>
  if(huart->Instance==UART4)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4aa0      	ldr	r2, [pc, #640]	; (80029cc <HAL_UART_MspInit+0x2ac>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d13e      	bne.n	80027ce <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002756:	2300      	movs	r3, #0
 8002758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800275c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fbb9 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800276c:	f7ff fc4a 	bl	8002004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002770:	4b97      	ldr	r3, [pc, #604]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4a96      	ldr	r2, [pc, #600]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800277a:	6413      	str	r3, [r2, #64]	; 0x40
 800277c:	4b94      	ldr	r3, [pc, #592]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002788:	4b91      	ldr	r3, [pc, #580]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	4a90      	ldr	r2, [pc, #576]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6313      	str	r3, [r2, #48]	; 0x30
 8002794:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80027a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027ba:	2308      	movs	r3, #8
 80027bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027c4:	4619      	mov	r1, r3
 80027c6:	4883      	ldr	r0, [pc, #524]	; (80029d4 <HAL_UART_MspInit+0x2b4>)
 80027c8:	f000 fe9c 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027cc:	e151      	b.n	8002a72 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a81      	ldr	r2, [pc, #516]	; (80029d8 <HAL_UART_MspInit+0x2b8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d160      	bne.n	800289a <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80027d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fb75 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80027f4:	f7ff fc06 	bl	8002004 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	4a74      	ldr	r2, [pc, #464]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002802:	6413      	str	r3, [r2, #64]	; 0x40
 8002804:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002810:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	6313      	str	r3, [r2, #48]	; 0x30
 800281c:	4b6c      	ldr	r3, [pc, #432]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002828:	4b69      	ldr	r3, [pc, #420]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4a68      	ldr	r2, [pc, #416]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6313      	str	r3, [r2, #48]	; 0x30
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	623b      	str	r3, [r7, #32]
 800283e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800285a:	2308      	movs	r3, #8
 800285c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002860:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002864:	4619      	mov	r1, r3
 8002866:	485d      	ldr	r0, [pc, #372]	; (80029dc <HAL_UART_MspInit+0x2bc>)
 8002868:	f000 fe4c 	bl	8003504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800286c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002886:	2308      	movs	r3, #8
 8002888:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002890:	4619      	mov	r1, r3
 8002892:	4850      	ldr	r0, [pc, #320]	; (80029d4 <HAL_UART_MspInit+0x2b4>)
 8002894:	f000 fe36 	bl	8003504 <HAL_GPIO_Init>
}
 8002898:	e0eb      	b.n	8002a72 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a50      	ldr	r2, [pc, #320]	; (80029e0 <HAL_UART_MspInit+0x2c0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d151      	bne.n	8002948 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028a4:	2340      	movs	r3, #64	; 0x40
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028a8:	2300      	movs	r3, #0
 80028aa:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fb11 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80028bc:	f7ff fba2 	bl	8002004 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c0:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	4a42      	ldr	r2, [pc, #264]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 80028c6:	f043 0310 	orr.w	r3, r3, #16
 80028ca:	6453      	str	r3, [r2, #68]	; 0x44
 80028cc:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d8:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 80028e4:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002904:	2303      	movs	r3, #3
 8002906:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800290a:	2304      	movs	r3, #4
 800290c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002914:	4619      	mov	r1, r3
 8002916:	4831      	ldr	r0, [pc, #196]	; (80029dc <HAL_UART_MspInit+0x2bc>)
 8002918:	f000 fdf4 	bl	8003504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800291c:	2340      	movs	r3, #64	; 0x40
 800291e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002934:	2307      	movs	r3, #7
 8002936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800293e:	4619      	mov	r1, r3
 8002940:	4826      	ldr	r0, [pc, #152]	; (80029dc <HAL_UART_MspInit+0x2bc>)
 8002942:	f000 fddf 	bl	8003504 <HAL_GPIO_Init>
}
 8002946:	e094      	b.n	8002a72 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <HAL_UART_MspInit+0x2c4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d14c      	bne.n	80029ec <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002956:	2300      	movs	r3, #0
 8002958:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800295a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800295e:	4618      	mov	r0, r3
 8002960:	f002 faba 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800296a:	f7ff fb4b 	bl	8002004 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_UART_MspInit+0x2b0>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800299e:	2360      	movs	r3, #96	; 0x60
 80029a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029b6:	2307      	movs	r3, #7
 80029b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4809      	ldr	r0, [pc, #36]	; (80029e8 <HAL_UART_MspInit+0x2c8>)
 80029c4:	f000 fd9e 	bl	8003504 <HAL_GPIO_Init>
}
 80029c8:	e053      	b.n	8002a72 <HAL_UART_MspInit+0x352>
 80029ca:	bf00      	nop
 80029cc:	40004c00 	.word	0x40004c00
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020800 	.word	0x40020800
 80029d8:	40005000 	.word	0x40005000
 80029dc:	40020400 	.word	0x40020400
 80029e0:	40011000 	.word	0x40011000
 80029e4:	40004400 	.word	0x40004400
 80029e8:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_UART_MspInit+0x35c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d13d      	bne.n	8002a72 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029fa:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fa66 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002a12:	f7ff faf7 	bl	8002004 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_UART_MspInit+0x360>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_UART_MspInit+0x360>)
 8002a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_UART_MspInit+0x360>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_UART_MspInit+0x360>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <HAL_UART_MspInit+0x360>)
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_UART_MspInit+0x360>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a60:	2307      	movs	r3, #7
 8002a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a66:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <HAL_UART_MspInit+0x364>)
 8002a6e:	f000 fd49 	bl	8003504 <HAL_GPIO_Init>
}
 8002a72:	bf00      	nop
 8002a74:	37d8      	adds	r7, #216	; 0xd8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40004800 	.word	0x40004800
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020c00 	.word	0x40020c00

08002a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <NMI_Handler+0x4>

08002a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a92:	e7fe      	b.n	8002a92 <HardFault_Handler+0x4>

08002a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <MemManage_Handler+0x4>

08002a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <BusFault_Handler+0x4>

08002aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <UsageFault_Handler+0x4>

08002aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad4:	f000 f92c 	bl	8002d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}

08002adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <TIM6_DAC_IRQHandler+0x10>)
 8002ae2:	f003 fae3 	bl	80060ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000364 	.word	0x20000364

08002af0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	e00a      	b.n	8002b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b02:	f3af 8000 	nop.w
 8002b06:	4601      	mov	r1, r0
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	60ba      	str	r2, [r7, #8]
 8002b0e:	b2ca      	uxtb	r2, r1
 8002b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	dbf0      	blt.n	8002b02 <_read+0x12>
	}

return len;
 8002b20:	687b      	ldr	r3, [r7, #4]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e009      	b.n	8002b50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	60ba      	str	r2, [r7, #8]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	dbf1      	blt.n	8002b3c <_write+0x12>
	}
	return len;
 8002b58:	687b      	ldr	r3, [r7, #4]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <_close>:

int _close(int file)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
	return -1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <_isatty>:

int _isatty(int file)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
	return 1;
 8002ba2:	2301      	movs	r3, #1
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
	return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <_sbrk+0x5c>)
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <_sbrk+0x60>)
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <_sbrk+0x64>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <_sbrk+0x64>)
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <_sbrk+0x68>)
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <_sbrk+0x64>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d207      	bcs.n	8002c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bfc:	f005 fa54 	bl	80080a8 <__errno>
 8002c00:	4603      	mov	r3, r0
 8002c02:	220c      	movs	r2, #12
 8002c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	e009      	b.n	8002c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c0c:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <_sbrk+0x64>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <_sbrk+0x64>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <_sbrk+0x64>)
 8002c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20080000 	.word	0x20080000
 8002c2c:	00000400 	.word	0x00000400
 8002c30:	20000808 	.word	0x20000808
 8002c34:	20000820 	.word	0x20000820

08002c38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <SystemInit+0x28>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <SystemInit+0x28>)
 8002c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <SystemInit+0x28>)
 8002c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c52:	609a      	str	r2, [r3, #8]
#endif
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c6a:	e003      	b.n	8002c74 <LoopCopyDataInit>

08002c6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c72:	3104      	adds	r1, #4

08002c74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c74:	480b      	ldr	r0, [pc, #44]	; (8002ca4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c7c:	d3f6      	bcc.n	8002c6c <CopyDataInit>
  ldr  r2, =_sbss
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c80:	e002      	b.n	8002c88 <LoopFillZerobss>

08002c82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c84:	f842 3b04 	str.w	r3, [r2], #4

08002c88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c8c:	d3f9      	bcc.n	8002c82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c8e:	f7ff ffd3 	bl	8002c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c92:	f005 fa0f 	bl	80080b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c96:	f7fe f8bd 	bl	8000e14 <main>
  bx  lr    
 8002c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c9c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002ca0:	08009150 	.word	0x08009150
  ldr  r0, =_sdata
 8002ca4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ca8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002cac:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002cb0:	20000820 	.word	0x20000820

08002cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC_IRQHandler>

08002cb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cba:	2003      	movs	r0, #3
 8002cbc:	f000 fbe0 	bl	8003480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f000 f805 	bl	8002cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc6:	f7ff f9a3 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_InitTick+0x54>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_InitTick+0x58>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fbfb 	bl	80034ea <HAL_SYSTICK_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00e      	b.n	8002d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d80a      	bhi.n	8002d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d04:	2200      	movs	r2, #0
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f000 fbc3 	bl	8003496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d10:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <HAL_InitTick+0x5c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000008 	.word	0x20000008
 8002d28:	20000010 	.word	0x20000010
 8002d2c:	2000000c 	.word	0x2000000c

08002d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x20>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_IncTick+0x24>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_IncTick+0x24>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000010 	.word	0x20000010
 8002d54:	2000080c 	.word	0x2000080c

08002d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_GetTick+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000080c 	.word	0x2000080c

08002d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7ff ffee 	bl	8002d58 <HAL_GetTick>
 8002d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d005      	beq.n	8002d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_Delay+0x44>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d96:	bf00      	nop
 8002d98:	f7ff ffde 	bl	8002d58 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d8f7      	bhi.n	8002d98 <HAL_Delay+0x28>
  {
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000010 	.word	0x20000010

08002db8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e031      	b.n	8002e32 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff f93e 	bl	8002058 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_ADC_Init+0x84>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f970 	bl	80030ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	f043 0201 	orr.w	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
 8002e22:	e001      	b.n	8002e28 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	ffffeefd 	.word	0xffffeefd

08002e40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1c>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e136      	b.n	80030ca <HAL_ADC_ConfigChannel+0x28a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b09      	cmp	r3, #9
 8002e6a:	d93a      	bls.n	8002ee2 <HAL_ADC_ConfigChannel+0xa2>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e74:	d035      	beq.n	8002ee2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68d9      	ldr	r1, [r3, #12]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b1e      	subs	r3, #30
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	400a      	ands	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a8d      	ldr	r2, [pc, #564]	; (80030d8 <HAL_ADC_ConfigChannel+0x298>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10a      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68d9      	ldr	r1, [r3, #12]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	061a      	lsls	r2, r3, #24
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eba:	e035      	b.n	8002f28 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68d9      	ldr	r1, [r3, #12]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4403      	add	r3, r0
 8002ed4:	3b1e      	subs	r3, #30
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ee0:	e022      	b.n	8002f28 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6919      	ldr	r1, [r3, #16]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43da      	mvns	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	400a      	ands	r2, r1
 8002f04:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6919      	ldr	r1, [r3, #16]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4403      	add	r3, r0
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b06      	cmp	r3, #6
 8002f2e:	d824      	bhi.n	8002f7a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	3b05      	subs	r3, #5
 8002f42:	221f      	movs	r2, #31
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	400a      	ands	r2, r1
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	3b05      	subs	r3, #5
 8002f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	635a      	str	r2, [r3, #52]	; 0x34
 8002f78:	e04c      	b.n	8003014 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d824      	bhi.n	8002fcc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	3b23      	subs	r3, #35	; 0x23
 8002f94:	221f      	movs	r2, #31
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	3b23      	subs	r3, #35	; 0x23
 8002fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fca:	e023      	b.n	8003014 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b41      	subs	r3, #65	; 0x41
 8002fde:	221f      	movs	r2, #31
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	400a      	ands	r2, r1
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	3b41      	subs	r3, #65	; 0x41
 8003008:	fa00 f203 	lsl.w	r2, r0, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a30      	ldr	r2, [pc, #192]	; (80030dc <HAL_ADC_ConfigChannel+0x29c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10a      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x1f4>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003026:	d105      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003028:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800302e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003032:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_ADC_ConfigChannel+0x29c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10f      	bne.n	800305e <HAL_ADC_ConfigChannel+0x21e>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b12      	cmp	r3, #18
 8003044:	d10b      	bne.n	800305e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a25      	ldr	r2, [pc, #148]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800304c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003050:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800305c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <HAL_ADC_ConfigChannel+0x29c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d12b      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x280>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <HAL_ADC_ConfigChannel+0x298>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <HAL_ADC_ConfigChannel+0x23a>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b11      	cmp	r3, #17
 8003078:	d122      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800307a:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003080:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003084:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800308c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003090:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <HAL_ADC_ConfigChannel+0x298>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_ADC_ConfigChannel+0x2a4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <HAL_ADC_ConfigChannel+0x2a8>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0c9a      	lsrs	r2, r3, #18
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030b2:	e002      	b.n	80030ba <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f9      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	10000012 	.word	0x10000012
 80030dc:	40012000 	.word	0x40012000
 80030e0:	40012300 	.word	0x40012300
 80030e4:	20000008 	.word	0x20000008
 80030e8:	431bde83 	.word	0x431bde83

080030ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80030f4:	4b78      	ldr	r3, [pc, #480]	; (80032d8 <ADC_Init+0x1ec>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a77      	ldr	r2, [pc, #476]	; (80032d8 <ADC_Init+0x1ec>)
 80030fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80030fe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003100:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <ADC_Init+0x1ec>)
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4973      	ldr	r1, [pc, #460]	; (80032d8 <ADC_Init+0x1ec>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	021a      	lsls	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	4a58      	ldr	r2, [pc, #352]	; (80032dc <ADC_Init+0x1f0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800318e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	e00f      	b.n	80031e6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0202 	bic.w	r2, r2, #2
 80031f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	005a      	lsls	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003232:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	3b01      	subs	r3, #1
 8003240:	035a      	lsls	r2, r3, #13
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	e007      	b.n	800325c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	3b01      	subs	r3, #1
 8003278:	051a      	lsls	r2, r3, #20
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800329e:	025a      	lsls	r2, r3, #9
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	029a      	lsls	r2, r3, #10
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40012300 	.word	0x40012300
 80032dc:	0f000001 	.word	0x0f000001

080032e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <__NVIC_SetPriorityGrouping+0x40>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032fc:	4013      	ands	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <__NVIC_SetPriorityGrouping+0x44>)
 800330a:	4313      	orrs	r3, r2
 800330c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <__NVIC_SetPriorityGrouping+0x40>)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	60d3      	str	r3, [r2, #12]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00
 8003324:	05fa0000 	.word	0x05fa0000

08003328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <__NVIC_GetPriorityGrouping+0x18>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	0a1b      	lsrs	r3, r3, #8
 8003332:	f003 0307 	and.w	r3, r3, #7
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	2b00      	cmp	r3, #0
 8003354:	db0b      	blt.n	800336e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	f003 021f 	and.w	r2, r3, #31
 800335c:	4907      	ldr	r1, [pc, #28]	; (800337c <__NVIC_EnableIRQ+0x38>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2001      	movs	r0, #1
 8003366:	fa00 f202 	lsl.w	r2, r0, r2
 800336a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000e100 	.word	0xe000e100

08003380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003390:	2b00      	cmp	r3, #0
 8003392:	db0a      	blt.n	80033aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	490c      	ldr	r1, [pc, #48]	; (80033cc <__NVIC_SetPriority+0x4c>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	440b      	add	r3, r1
 80033a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a8:	e00a      	b.n	80033c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4908      	ldr	r1, [pc, #32]	; (80033d0 <__NVIC_SetPriority+0x50>)
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	3b04      	subs	r3, #4
 80033b8:	0112      	lsls	r2, r2, #4
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	440b      	add	r3, r1
 80033be:	761a      	strb	r2, [r3, #24]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000e100 	.word	0xe000e100
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f1c3 0307 	rsb	r3, r3, #7
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	bf28      	it	cs
 80033f2:	2304      	movcs	r3, #4
 80033f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d902      	bls.n	8003404 <NVIC_EncodePriority+0x30>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3b03      	subs	r3, #3
 8003402:	e000      	b.n	8003406 <NVIC_EncodePriority+0x32>
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	f04f 32ff 	mov.w	r2, #4294967295
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43da      	mvns	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	401a      	ands	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800341c:	f04f 31ff 	mov.w	r1, #4294967295
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43d9      	mvns	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	4313      	orrs	r3, r2
         );
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800344c:	d301      	bcc.n	8003452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800344e:	2301      	movs	r3, #1
 8003450:	e00f      	b.n	8003472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <SysTick_Config+0x40>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345a:	210f      	movs	r1, #15
 800345c:	f04f 30ff 	mov.w	r0, #4294967295
 8003460:	f7ff ff8e 	bl	8003380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <SysTick_Config+0x40>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <SysTick_Config+0x40>)
 800346c:	2207      	movs	r2, #7
 800346e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	e000e010 	.word	0xe000e010

08003480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff29 	bl	80032e0 <__NVIC_SetPriorityGrouping>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a8:	f7ff ff3e 	bl	8003328 <__NVIC_GetPriorityGrouping>
 80034ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	6978      	ldr	r0, [r7, #20]
 80034b4:	f7ff ff8e 	bl	80033d4 <NVIC_EncodePriority>
 80034b8:	4602      	mov	r2, r0
 80034ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff5d 	bl	8003380 <__NVIC_SetPriority>
}
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff31 	bl	8003344 <__NVIC_EnableIRQ>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ffa2 	bl	800343c <SysTick_Config>
 80034f8:	4603      	mov	r3, r0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	e175      	b.n	8003810 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003524:	2201      	movs	r2, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	429a      	cmp	r2, r3
 800353e:	f040 8164 	bne.w	800380a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d005      	beq.n	800355a <HAL_GPIO_Init+0x56>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d130      	bne.n	80035bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 0201 	and.w	r2, r3, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d017      	beq.n	80035f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2203      	movs	r2, #3
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d123      	bne.n	800364c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	08da      	lsrs	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3208      	adds	r2, #8
 800360c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	220f      	movs	r2, #15
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	08da      	lsrs	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3208      	adds	r2, #8
 8003646:	69b9      	ldr	r1, [r7, #24]
 8003648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0203 	and.w	r2, r3, #3
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80be 	beq.w	800380a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368e:	4b66      	ldr	r3, [pc, #408]	; (8003828 <HAL_GPIO_Init+0x324>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	4a65      	ldr	r2, [pc, #404]	; (8003828 <HAL_GPIO_Init+0x324>)
 8003694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003698:	6453      	str	r3, [r2, #68]	; 0x44
 800369a:	4b63      	ldr	r3, [pc, #396]	; (8003828 <HAL_GPIO_Init+0x324>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036a6:	4a61      	ldr	r2, [pc, #388]	; (800382c <HAL_GPIO_Init+0x328>)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a58      	ldr	r2, [pc, #352]	; (8003830 <HAL_GPIO_Init+0x32c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d037      	beq.n	8003742 <HAL_GPIO_Init+0x23e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a57      	ldr	r2, [pc, #348]	; (8003834 <HAL_GPIO_Init+0x330>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_GPIO_Init+0x23a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_GPIO_Init+0x334>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02b      	beq.n	800373a <HAL_GPIO_Init+0x236>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a55      	ldr	r2, [pc, #340]	; (800383c <HAL_GPIO_Init+0x338>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d025      	beq.n	8003736 <HAL_GPIO_Init+0x232>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_GPIO_Init+0x33c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x22e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a53      	ldr	r2, [pc, #332]	; (8003844 <HAL_GPIO_Init+0x340>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x22a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_GPIO_Init+0x344>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x226>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a51      	ldr	r2, [pc, #324]	; (800384c <HAL_GPIO_Init+0x348>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x222>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a50      	ldr	r2, [pc, #320]	; (8003850 <HAL_GPIO_Init+0x34c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x21e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_GPIO_Init+0x350>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x21a>
 800371a:	2309      	movs	r3, #9
 800371c:	e012      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800371e:	230a      	movs	r3, #10
 8003720:	e010      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003722:	2308      	movs	r3, #8
 8003724:	e00e      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003726:	2307      	movs	r3, #7
 8003728:	e00c      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800372a:	2306      	movs	r3, #6
 800372c:	e00a      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800372e:	2305      	movs	r3, #5
 8003730:	e008      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003732:	2304      	movs	r3, #4
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003736:	2303      	movs	r3, #3
 8003738:	e004      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800373a:	2302      	movs	r3, #2
 800373c:	e002      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003742:	2300      	movs	r3, #0
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f002 0203 	and.w	r2, r2, #3
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	4093      	lsls	r3, r2
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003754:	4935      	ldr	r1, [pc, #212]	; (800382c <HAL_GPIO_Init+0x328>)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003762:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <HAL_GPIO_Init+0x354>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003786:	4a34      	ldr	r2, [pc, #208]	; (8003858 <HAL_GPIO_Init+0x354>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800378c:	4b32      	ldr	r3, [pc, #200]	; (8003858 <HAL_GPIO_Init+0x354>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b0:	4a29      	ldr	r2, [pc, #164]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037b6:	4b28      	ldr	r3, [pc, #160]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <HAL_GPIO_Init+0x354>)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3301      	adds	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	f67f ae86 	bls.w	8003524 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	40013800 	.word	0x40013800
 8003830:	40020000 	.word	0x40020000
 8003834:	40020400 	.word	0x40020400
 8003838:	40020800 	.word	0x40020800
 800383c:	40020c00 	.word	0x40020c00
 8003840:	40021000 	.word	0x40021000
 8003844:	40021400 	.word	0x40021400
 8003848:	40021800 	.word	0x40021800
 800384c:	40021c00 	.word	0x40021c00
 8003850:	40022000 	.word	0x40022000
 8003854:	40022400 	.word	0x40022400
 8003858:	40013c00 	.word	0x40013c00

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
 8003868:	4613      	mov	r3, r2
 800386a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800386c:	787b      	ldrb	r3, [r7, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003878:	e003      	b.n	8003882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	041a      	lsls	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e07f      	b.n	80039a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe fc0e 	bl	80020d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	; 0x24
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	e006      	b.n	8003918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d104      	bne.n	800392a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_I2C_Init+0x11c>)
 8003936:	430b      	orrs	r3, r1
 8003938:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003948:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69d9      	ldr	r1, [r3, #28]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1a      	ldr	r2, [r3, #32]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	02008000 	.word	0x02008000

080039b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	817b      	strh	r3, [r7, #10]
 80039c2:	460b      	mov	r3, r1
 80039c4:	813b      	strh	r3, [r7, #8]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	f040 80f9 	bne.w	8003bca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_I2C_Mem_Write+0x34>
 80039de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d105      	bne.n	80039f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0ed      	b.n	8003bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_I2C_Mem_Write+0x4e>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0e6      	b.n	8003bcc <HAL_I2C_Mem_Write+0x21c>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a06:	f7ff f9a7 	bl	8002d58 <HAL_GetTick>
 8003a0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2319      	movs	r3, #25
 8003a12:	2201      	movs	r2, #1
 8003a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fac3 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0d1      	b.n	8003bcc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2221      	movs	r2, #33	; 0x21
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a50:	88f8      	ldrh	r0, [r7, #6]
 8003a52:	893a      	ldrh	r2, [r7, #8]
 8003a54:	8979      	ldrh	r1, [r7, #10]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	4603      	mov	r3, r0
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f9d3 	bl	8003e0c <I2C_RequestMemoryWrite>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0a9      	b.n	8003bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2bff      	cmp	r3, #255	; 0xff
 8003a80:	d90e      	bls.n	8003aa0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	8979      	ldrh	r1, [r7, #10]
 8003a90:	2300      	movs	r3, #0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fc1f 	bl	80042dc <I2C_TransferConfig>
 8003a9e:	e00f      	b.n	8003ac0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	8979      	ldrh	r1, [r7, #10]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fc0e 	bl	80042dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 faad 	bl	8004024 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e07b      	b.n	8003bcc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d034      	beq.n	8003b78 <HAL_I2C_Mem_Write+0x1c8>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d130      	bne.n	8003b78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2180      	movs	r1, #128	; 0x80
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fa3f 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e04d      	b.n	8003bcc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2bff      	cmp	r3, #255	; 0xff
 8003b38:	d90e      	bls.n	8003b58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	22ff      	movs	r2, #255	; 0xff
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	8979      	ldrh	r1, [r7, #10]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fbc3 	bl	80042dc <I2C_TransferConfig>
 8003b56:	e00f      	b.n	8003b78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	8979      	ldrh	r1, [r7, #10]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fbb2 	bl	80042dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d19e      	bne.n	8003ac0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fa8c 	bl	80040a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e01a      	b.n	8003bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <HAL_I2C_Mem_Write+0x224>)
 8003baa:	400b      	ands	r3, r1
 8003bac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	fe00e800 	.word	0xfe00e800

08003bd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	4608      	mov	r0, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	461a      	mov	r2, r3
 8003be6:	4603      	mov	r3, r0
 8003be8:	817b      	strh	r3, [r7, #10]
 8003bea:	460b      	mov	r3, r1
 8003bec:	813b      	strh	r3, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	f040 80fd 	bne.w	8003dfa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x34>
 8003c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0f1      	b.n	8003dfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x4e>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e0ea      	b.n	8003dfc <HAL_I2C_Mem_Read+0x224>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c2e:	f7ff f893 	bl	8002d58 <HAL_GetTick>
 8003c32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2319      	movs	r3, #25
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f9af 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0d5      	b.n	8003dfc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2222      	movs	r2, #34	; 0x22
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2240      	movs	r2, #64	; 0x40
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c78:	88f8      	ldrh	r0, [r7, #6]
 8003c7a:	893a      	ldrh	r2, [r7, #8]
 8003c7c:	8979      	ldrh	r1, [r7, #10]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	4603      	mov	r3, r0
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f913 	bl	8003eb4 <I2C_RequestMemoryRead>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0ad      	b.n	8003dfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2bff      	cmp	r3, #255	; 0xff
 8003ca8:	d90e      	bls.n	8003cc8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	22ff      	movs	r2, #255	; 0xff
 8003cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	8979      	ldrh	r1, [r7, #10]
 8003cb8:	4b52      	ldr	r3, [pc, #328]	; (8003e04 <HAL_I2C_Mem_Read+0x22c>)
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fb0b 	bl	80042dc <I2C_TransferConfig>
 8003cc6:	e00f      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	8979      	ldrh	r1, [r7, #10]
 8003cda:	4b4a      	ldr	r3, [pc, #296]	; (8003e04 <HAL_I2C_Mem_Read+0x22c>)
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fafa 	bl	80042dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f956 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07c      	b.n	8003dfc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d034      	beq.n	8003da8 <HAL_I2C_Mem_Read+0x1d0>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d130      	bne.n	8003da8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f927 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e04d      	b.n	8003dfc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2bff      	cmp	r3, #255	; 0xff
 8003d68:	d90e      	bls.n	8003d88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 faab 	bl	80042dc <I2C_TransferConfig>
 8003d86:	e00f      	b.n	8003da8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	8979      	ldrh	r1, [r7, #10]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fa9a 	bl	80042dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d19a      	bne.n	8003ce8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f974 	bl	80040a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e01a      	b.n	8003dfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_I2C_Mem_Read+0x230>)
 8003dda:	400b      	ands	r3, r1
 8003ddc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	80002400 	.word	0x80002400
 8003e08:	fe00e800 	.word	0xfe00e800

08003e0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	813b      	strh	r3, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	8979      	ldrh	r1, [r7, #10]
 8003e2c:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <I2C_RequestMemoryWrite+0xa4>)
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fa51 	bl	80042dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	69b9      	ldr	r1, [r7, #24]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f8f0 	bl	8004024 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e02c      	b.n	8003ea8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e54:	893b      	ldrh	r3, [r7, #8]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e5e:	e015      	b.n	8003e8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e60:	893b      	ldrh	r3, [r7, #8]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	69b9      	ldr	r1, [r7, #24]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f8d6 	bl	8004024 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e012      	b.n	8003ea8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e82:	893b      	ldrh	r3, [r7, #8]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2200      	movs	r2, #0
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f884 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	80002000 	.word	0x80002000

08003eb4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	817b      	strh	r3, [r7, #10]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	813b      	strh	r3, [r7, #8]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	8979      	ldrh	r1, [r7, #10]
 8003ed4:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <I2C_RequestMemoryRead+0xa4>)
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f9fe 	bl	80042dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	69b9      	ldr	r1, [r7, #24]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f89d 	bl	8004024 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e02c      	b.n	8003f4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003efa:	893b      	ldrh	r3, [r7, #8]
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
 8003f04:	e015      	b.n	8003f32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f06:	893b      	ldrh	r3, [r7, #8]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	69b9      	ldr	r1, [r7, #24]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f883 	bl	8004024 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e012      	b.n	8003f4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f28:	893b      	ldrh	r3, [r7, #8]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2140      	movs	r1, #64	; 0x40
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f831 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	80002000 	.word	0x80002000

08003f5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d103      	bne.n	8003f7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d007      	beq.n	8003f98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	619a      	str	r2, [r3, #24]
  }
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb4:	e022      	b.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d01e      	beq.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7fe fecb 	bl	8002d58 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d113      	bne.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e00f      	b.n	800401c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	429a      	cmp	r2, r3
 800400a:	bf0c      	ite	eq
 800400c:	2301      	moveq	r3, #1
 800400e:	2300      	movne	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	429a      	cmp	r2, r3
 8004018:	d0cd      	beq.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004030:	e02c      	b.n	800408c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f870 	bl	800411c <I2C_IsErrorOccurred>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e02a      	b.n	800409c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d01e      	beq.n	800408c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fe fe83 	bl	8002d58 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d113      	bne.n	800408c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e007      	b.n	800409c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b02      	cmp	r3, #2
 8004098:	d1cb      	bne.n	8004032 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040b0:	e028      	b.n	8004104 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f830 	bl	800411c <I2C_IsErrorOccurred>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e026      	b.n	8004114 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fe fe47 	bl	8002d58 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d113      	bne.n	8004104 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e007      	b.n	8004114 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b20      	cmp	r3, #32
 8004110:	d1cf      	bne.n	80040b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d068      	beq.n	800421a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2210      	movs	r2, #16
 800414e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004150:	e049      	b.n	80041e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d045      	beq.n	80041e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe fdfd 	bl	8002d58 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_IsErrorOccurred+0x54>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d13a      	bne.n	80041e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004182:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800418e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004192:	d121      	bne.n	80041d8 <I2C_IsErrorOccurred+0xbc>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800419a:	d01d      	beq.n	80041d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d01a      	beq.n	80041d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041b2:	f7fe fdd1 	bl	8002d58 <HAL_GetTick>
 80041b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b8:	e00e      	b.n	80041d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041ba:	f7fe fdcd 	bl	8002d58 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b19      	cmp	r3, #25
 80041c6:	d907      	bls.n	80041d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	f043 0320 	orr.w	r3, r3, #32
 80041ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80041d6:	e006      	b.n	80041e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d1e9      	bne.n	80041ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d003      	beq.n	80041fc <I2C_IsErrorOccurred+0xe0>
 80041f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0aa      	beq.n	8004152 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2220      	movs	r2, #32
 800420a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800423c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00b      	beq.n	8004266 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	f043 0308 	orr.w	r3, r3, #8
 8004254:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800425e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	f043 0302 	orr.w	r3, r3, #2
 8004276:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004280:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01c      	beq.n	80042ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff fe63 	bl	8003f5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <I2C_IsErrorOccurred+0x1bc>)
 80042a2:	400b      	ands	r3, r1
 80042a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80042ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3728      	adds	r7, #40	; 0x28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	fe00e800 	.word	0xfe00e800

080042dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	817b      	strh	r3, [r7, #10]
 80042ea:	4613      	mov	r3, r2
 80042ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042ee:	897b      	ldrh	r3, [r7, #10]
 80042f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042f4:	7a7b      	ldrb	r3, [r7, #9]
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	4313      	orrs	r3, r2
 8004306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800430a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	0d5b      	lsrs	r3, r3, #21
 8004316:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <I2C_TransferConfig+0x60>)
 800431c:	430b      	orrs	r3, r1
 800431e:	43db      	mvns	r3, r3
 8004320:	ea02 0103 	and.w	r1, r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	03ff63ff 	.word	0x03ff63ff

08004340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b20      	cmp	r3, #32
 8004354:	d138      	bne.n	80043c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004360:	2302      	movs	r3, #2
 8004362:	e032      	b.n	80043ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2224      	movs	r2, #36	; 0x24
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0201 	bic.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d139      	bne.n	8004460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e033      	b.n	8004462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2224      	movs	r2, #36	; 0x24
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a04      	ldr	r2, [pc, #16]	; (800448c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800447a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447e:	6013      	str	r3, [r2, #0]
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40007000 	.word	0x40007000

08004490 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	4b23      	ldr	r3, [pc, #140]	; (8004528 <HAL_PWREx_EnableOverDrive+0x98>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	4a22      	ldr	r2, [pc, #136]	; (8004528 <HAL_PWREx_EnableOverDrive+0x98>)
 80044a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6413      	str	r3, [r2, #64]	; 0x40
 80044a6:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_PWREx_EnableOverDrive+0x98>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044be:	f7fe fc4b 	bl	8002d58 <HAL_GetTick>
 80044c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044c4:	e009      	b.n	80044da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044c6:	f7fe fc47 	bl	8002d58 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044d4:	d901      	bls.n	80044da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e022      	b.n	8004520 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044da:	4b14      	ldr	r3, [pc, #80]	; (800452c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e6:	d1ee      	bne.n	80044c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044e8:	4b10      	ldr	r3, [pc, #64]	; (800452c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0f      	ldr	r2, [pc, #60]	; (800452c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044f4:	f7fe fc30 	bl	8002d58 <HAL_GetTick>
 80044f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044fa:	e009      	b.n	8004510 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044fc:	f7fe fc2c 	bl	8002d58 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800450a:	d901      	bls.n	8004510 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e007      	b.n	8004520 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800451c:	d1ee      	bne.n	80044fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	40007000 	.word	0x40007000

08004530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004538:	2300      	movs	r3, #0
 800453a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e29b      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 8087 	beq.w	8004662 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004554:	4b96      	ldr	r3, [pc, #600]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b04      	cmp	r3, #4
 800455e:	d00c      	beq.n	800457a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004560:	4b93      	ldr	r3, [pc, #588]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d112      	bne.n	8004592 <HAL_RCC_OscConfig+0x62>
 800456c:	4b90      	ldr	r3, [pc, #576]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004578:	d10b      	bne.n	8004592 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457a:	4b8d      	ldr	r3, [pc, #564]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d06c      	beq.n	8004660 <HAL_RCC_OscConfig+0x130>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d168      	bne.n	8004660 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e275      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x7a>
 800459c:	4b84      	ldr	r3, [pc, #528]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a83      	ldr	r2, [pc, #524]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	e02e      	b.n	8004608 <HAL_RCC_OscConfig+0xd8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x9c>
 80045b2:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7e      	ldr	r2, [pc, #504]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4b7c      	ldr	r3, [pc, #496]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7b      	ldr	r2, [pc, #492]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e01d      	b.n	8004608 <HAL_RCC_OscConfig+0xd8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0xc0>
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a75      	ldr	r2, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b73      	ldr	r3, [pc, #460]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a72      	ldr	r2, [pc, #456]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0xd8>
 80045f0:	4b6f      	ldr	r3, [pc, #444]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a6e      	ldr	r2, [pc, #440]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b6c      	ldr	r3, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6b      	ldr	r2, [pc, #428]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d013      	beq.n	8004638 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fe fba2 	bl	8002d58 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004618:	f7fe fb9e 	bl	8002d58 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e229      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4b61      	ldr	r3, [pc, #388]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0xe8>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fe fb8e 	bl	8002d58 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004640:	f7fe fb8a 	bl	8002d58 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e215      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004652:	4b57      	ldr	r3, [pc, #348]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x110>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d069      	beq.n	8004742 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800466e:	4b50      	ldr	r3, [pc, #320]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467a:	4b4d      	ldr	r3, [pc, #308]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b08      	cmp	r3, #8
 8004684:	d11c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x190>
 8004686:	4b4a      	ldr	r3, [pc, #296]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCC_OscConfig+0x17a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e1e9      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	493d      	ldr	r1, [pc, #244]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	e040      	b.n	8004742 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d023      	beq.n	8004710 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c8:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a38      	ldr	r2, [pc, #224]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fe fb40 	bl	8002d58 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046dc:	f7fe fb3c 	bl	8002d58 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e1c7      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ee:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fa:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4929      	ldr	r1, [pc, #164]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800470a:	4313      	orrs	r3, r2
 800470c:	600b      	str	r3, [r1, #0]
 800470e:	e018      	b.n	8004742 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004710:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe fb1c 	bl	8002d58 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004724:	f7fe fb18 	bl	8002d58 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e1a3      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004736:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d038      	beq.n	80047c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d019      	beq.n	800478a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004762:	f7fe faf9 	bl	8002d58 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476a:	f7fe faf5 	bl	8002d58 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e180      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x23a>
 8004788:	e01a      	b.n	80047c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478a:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478e:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004796:	f7fe fadf 	bl	8002d58 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	e00a      	b.n	80047b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479e:	f7fe fadb 	bl	8002d58 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d903      	bls.n	80047b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e166      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
 80047b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b4:	4b92      	ldr	r3, [pc, #584]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1ee      	bne.n	800479e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80a4 	beq.w	8004916 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ce:	4b8c      	ldr	r3, [pc, #560]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10d      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	4b89      	ldr	r3, [pc, #548]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a88      	ldr	r2, [pc, #544]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b86      	ldr	r3, [pc, #536]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f6:	4b83      	ldr	r3, [pc, #524]	; (8004a04 <HAL_RCC_OscConfig+0x4d4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d118      	bne.n	8004834 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004802:	4b80      	ldr	r3, [pc, #512]	; (8004a04 <HAL_RCC_OscConfig+0x4d4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a7f      	ldr	r2, [pc, #508]	; (8004a04 <HAL_RCC_OscConfig+0x4d4>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fe faa3 	bl	8002d58 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fe fa9f 	bl	8002d58 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b64      	cmp	r3, #100	; 0x64
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e12a      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004828:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <HAL_RCC_OscConfig+0x4d4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x31a>
 800483c:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a6f      	ldr	r2, [pc, #444]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e02d      	b.n	80048a6 <HAL_RCC_OscConfig+0x376>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x33c>
 8004852:	4b6b      	ldr	r3, [pc, #428]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a6a      	ldr	r2, [pc, #424]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	4b68      	ldr	r3, [pc, #416]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a67      	ldr	r2, [pc, #412]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	e01c      	b.n	80048a6 <HAL_RCC_OscConfig+0x376>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b05      	cmp	r3, #5
 8004872:	d10c      	bne.n	800488e <HAL_RCC_OscConfig+0x35e>
 8004874:	4b62      	ldr	r3, [pc, #392]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	4a61      	ldr	r2, [pc, #388]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 800487a:	f043 0304 	orr.w	r3, r3, #4
 800487e:	6713      	str	r3, [r2, #112]	; 0x70
 8004880:	4b5f      	ldr	r3, [pc, #380]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	4a5e      	ldr	r2, [pc, #376]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6713      	str	r3, [r2, #112]	; 0x70
 800488c:	e00b      	b.n	80048a6 <HAL_RCC_OscConfig+0x376>
 800488e:	4b5c      	ldr	r3, [pc, #368]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a5b      	ldr	r2, [pc, #364]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	6713      	str	r3, [r2, #112]	; 0x70
 800489a:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	4a58      	ldr	r2, [pc, #352]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80048a0:	f023 0304 	bic.w	r3, r3, #4
 80048a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d015      	beq.n	80048da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fe fa53 	bl	8002d58 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fe fa4f 	bl	8002d58 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e0d8      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	4b4c      	ldr	r3, [pc, #304]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ee      	beq.n	80048b6 <HAL_RCC_OscConfig+0x386>
 80048d8:	e014      	b.n	8004904 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fe fa3d 	bl	8002d58 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e0:	e00a      	b.n	80048f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fe fa39 	bl	8002d58 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e0c2      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ee      	bne.n	80048e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d105      	bne.n	8004916 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490a:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004914:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80ae 	beq.w	8004a7c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004920:	4b37      	ldr	r3, [pc, #220]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b08      	cmp	r3, #8
 800492a:	d06d      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d14b      	bne.n	80049cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004934:	4b32      	ldr	r3, [pc, #200]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a31      	ldr	r2, [pc, #196]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fe fa0a 	bl	8002d58 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fe fa06 	bl	8002d58 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e091      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	3b01      	subs	r3, #1
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	491b      	ldr	r1, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004998:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fe f9d8 	bl	8002d58 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fe f9d4 	bl	8002d58 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e05f      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x47c>
 80049ca:	e057      	b.n	8004a7c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80049d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fe f9be 	bl	8002d58 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fe f9ba 	bl	8002d58 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e045      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f2:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4b0>
 80049fe:	e03d      	b.n	8004a7c <HAL_RCC_OscConfig+0x54c>
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a08:	4b1f      	ldr	r3, [pc, #124]	; (8004a88 <HAL_RCC_OscConfig+0x558>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d030      	beq.n	8004a78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d129      	bne.n	8004a78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d122      	bne.n	8004a78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d119      	bne.n	8004a78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	3b01      	subs	r3, #1
 8004a52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d10f      	bne.n	8004a78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d107      	bne.n	8004a78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40023800 	.word	0x40023800

08004a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0d0      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b6a      	ldr	r3, [pc, #424]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d910      	bls.n	8004ad4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b67      	ldr	r3, [pc, #412]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 020f 	bic.w	r2, r3, #15
 8004aba:	4965      	ldr	r1, [pc, #404]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b63      	ldr	r3, [pc, #396]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0b8      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d020      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aec:	4b59      	ldr	r3, [pc, #356]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4a58      	ldr	r2, [pc, #352]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004af6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b04:	4b53      	ldr	r3, [pc, #332]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4a52      	ldr	r2, [pc, #328]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b10:	4b50      	ldr	r3, [pc, #320]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	494d      	ldr	r1, [pc, #308]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d040      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d107      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b36:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d115      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e07f      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4e:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e073      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5e:	4b3d      	ldr	r3, [pc, #244]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06b      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b6e:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 0203 	bic.w	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4936      	ldr	r1, [pc, #216]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b80:	f7fe f8ea 	bl	8002d58 <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b88:	f7fe f8e6 	bl	8002d58 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e053      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 020c 	and.w	r2, r3, #12
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d1eb      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d210      	bcs.n	8004be0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbe:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 020f 	bic.w	r2, r3, #15
 8004bc6:	4922      	ldr	r1, [pc, #136]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e032      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bec:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4916      	ldr	r1, [pc, #88]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c0a:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	490e      	ldr	r1, [pc, #56]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c1e:	f000 f821 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004c22:	4602      	mov	r2, r0
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	490a      	ldr	r1, [pc, #40]	; (8004c58 <HAL_RCC_ClockConfig+0x1cc>)
 8004c30:	5ccb      	ldrb	r3, [r1, r3]
 8004c32:	fa22 f303 	lsr.w	r3, r2, r3
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <HAL_RCC_ClockConfig+0x1d0>)
 8004c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCC_ClockConfig+0x1d4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe f846 	bl	8002cd0 <HAL_InitTick>

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40023c00 	.word	0x40023c00
 8004c54:	40023800 	.word	0x40023800
 8004c58:	08009090 	.word	0x08009090
 8004c5c:	20000008 	.word	0x20000008
 8004c60:	2000000c 	.word	0x2000000c

08004c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c68:	b094      	sub	sp, #80	; 0x50
 8004c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c70:	2300      	movs	r3, #0
 8004c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c74:	2300      	movs	r3, #0
 8004c76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c7c:	4b79      	ldr	r3, [pc, #484]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 030c 	and.w	r3, r3, #12
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d00d      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	f200 80e1 	bhi.w	8004e50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x34>
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d003      	beq.n	8004c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c96:	e0db      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c98:	4b73      	ldr	r3, [pc, #460]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c9c:	e0db      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c9e:	4b73      	ldr	r3, [pc, #460]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ca2:	e0d8      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca4:	4b6f      	ldr	r3, [pc, #444]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004cae:	4b6d      	ldr	r3, [pc, #436]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d063      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cba:	4b6a      	ldr	r3, [pc, #424]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8004cce:	2300      	movs	r3, #0
 8004cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	462b      	mov	r3, r5
 8004cda:	f04f 0000 	mov.w	r0, #0
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	0159      	lsls	r1, r3, #5
 8004ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce8:	0150      	lsls	r0, r2, #5
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4621      	mov	r1, r4
 8004cf0:	1a51      	subs	r1, r2, r1
 8004cf2:	6139      	str	r1, [r7, #16]
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d08:	4659      	mov	r1, fp
 8004d0a:	018b      	lsls	r3, r1, #6
 8004d0c:	4651      	mov	r1, sl
 8004d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d12:	4651      	mov	r1, sl
 8004d14:	018a      	lsls	r2, r1, #6
 8004d16:	4651      	mov	r1, sl
 8004d18:	ebb2 0801 	subs.w	r8, r2, r1
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d36:	4690      	mov	r8, r2
 8004d38:	4699      	mov	r9, r3
 8004d3a:	4623      	mov	r3, r4
 8004d3c:	eb18 0303 	adds.w	r3, r8, r3
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	462b      	mov	r3, r5
 8004d44:	eb49 0303 	adc.w	r3, r9, r3
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d56:	4629      	mov	r1, r5
 8004d58:	024b      	lsls	r3, r1, #9
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d60:	4621      	mov	r1, r4
 8004d62:	024a      	lsls	r2, r1, #9
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d74:	f7fb fab4 	bl	80002e0 <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d80:	e058      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d82:	4b38      	ldr	r3, [pc, #224]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	2200      	movs	r2, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	2300      	movs	r3, #0
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
 8004d98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	f04f 0000 	mov.w	r0, #0
 8004da4:	f04f 0100 	mov.w	r1, #0
 8004da8:	0159      	lsls	r1, r3, #5
 8004daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dae:	0150      	lsls	r0, r2, #5
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4641      	mov	r1, r8
 8004db6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dba:	4649      	mov	r1, r9
 8004dbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004dd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	00eb      	lsls	r3, r5, #3
 8004de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dea:	00e2      	lsls	r2, r4, #3
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	4643      	mov	r3, r8
 8004df2:	18e3      	adds	r3, r4, r3
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	464b      	mov	r3, r9
 8004df8:	eb45 0303 	adc.w	r3, r5, r3
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	028b      	lsls	r3, r1, #10
 8004e0e:	4621      	mov	r1, r4
 8004e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e14:	4621      	mov	r1, r4
 8004e16:	028a      	lsls	r2, r1, #10
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	61fa      	str	r2, [r7, #28]
 8004e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e28:	f7fb fa5a 	bl	80002e0 <__aeabi_uldivmod>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4613      	mov	r3, r2
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	0c1b      	lsrs	r3, r3, #16
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	3301      	adds	r3, #1
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004e44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e4e:	e002      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3750      	adds	r7, #80	; 0x50
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e62:	bf00      	nop
 8004e64:	40023800 	.word	0x40023800
 8004e68:	00f42400 	.word	0x00f42400
 8004e6c:	007a1200 	.word	0x007a1200

08004e70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e74:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e76:	681b      	ldr	r3, [r3, #0]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000008 	.word	0x20000008

08004e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e8c:	f7ff fff0 	bl	8004e70 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0a9b      	lsrs	r3, r3, #10
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4903      	ldr	r1, [pc, #12]	; (8004eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	080090a0 	.word	0x080090a0

08004eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004eb4:	f7ff ffdc 	bl	8004e70 <HAL_RCC_GetHCLKFreq>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	0b5b      	lsrs	r3, r3, #13
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	4903      	ldr	r1, [pc, #12]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	080090a0 	.word	0x080090a0

08004ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d012      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f00:	4b69      	ldr	r3, [pc, #420]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4a68      	ldr	r2, [pc, #416]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f0a:	6093      	str	r3, [r2, #8]
 8004f0c:	4b66      	ldr	r3, [pc, #408]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f14:	4964      	ldr	r1, [pc, #400]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f22:	2301      	movs	r3, #1
 8004f24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d017      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f32:	4b5d      	ldr	r3, [pc, #372]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f40:	4959      	ldr	r1, [pc, #356]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f50:	d101      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d017      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f6e:	4b4e      	ldr	r3, [pc, #312]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	494a      	ldr	r1, [pc, #296]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004faa:	2301      	movs	r3, #1
 8004fac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 808b 	beq.w	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fbc:	4b3a      	ldr	r3, [pc, #232]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	4a39      	ldr	r2, [pc, #228]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc8:	4b37      	ldr	r3, [pc, #220]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fd4:	4b35      	ldr	r3, [pc, #212]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a34      	ldr	r2, [pc, #208]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe0:	f7fd feba 	bl	8002d58 <HAL_GetTick>
 8004fe4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe8:	f7fd feb6 	bl	8002d58 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	; 0x64
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e38f      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ffa:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005006:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d035      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	429a      	cmp	r2, r3
 8005022:	d02e      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005024:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800502e:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a1a      	ldr	r2, [pc, #104]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005046:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800504c:	4b16      	ldr	r3, [pc, #88]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d114      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005058:	f7fd fe7e 	bl	8002d58 <HAL_GetTick>
 800505c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505e:	e00a      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005060:	f7fd fe7a 	bl	8002d58 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	; 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e351      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0ee      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800508e:	d111      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800509c:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800509e:	400b      	ands	r3, r1
 80050a0:	4901      	ldr	r1, [pc, #4]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
 80050a6:	e00b      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80050a8:	40023800 	.word	0x40023800
 80050ac:	40007000 	.word	0x40007000
 80050b0:	0ffffcff 	.word	0x0ffffcff
 80050b4:	4bac      	ldr	r3, [pc, #688]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4aab      	ldr	r2, [pc, #684]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050be:	6093      	str	r3, [r2, #8]
 80050c0:	4ba9      	ldr	r3, [pc, #676]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050cc:	49a6      	ldr	r1, [pc, #664]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d010      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050de:	4ba2      	ldr	r3, [pc, #648]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e4:	4aa0      	ldr	r2, [pc, #640]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050ee:	4b9e      	ldr	r3, [pc, #632]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	499b      	ldr	r1, [pc, #620]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800510c:	4b96      	ldr	r3, [pc, #600]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511a:	4993      	ldr	r1, [pc, #588]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800512e:	4b8e      	ldr	r3, [pc, #568]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800513c:	498a      	ldr	r1, [pc, #552]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005150:	4b85      	ldr	r3, [pc, #532]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515e:	4982      	ldr	r1, [pc, #520]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005172:	4b7d      	ldr	r3, [pc, #500]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	4979      	ldr	r1, [pc, #484]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005194:	4b74      	ldr	r3, [pc, #464]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	f023 0203 	bic.w	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	4971      	ldr	r1, [pc, #452]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051b6:	4b6c      	ldr	r3, [pc, #432]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051bc:	f023 020c 	bic.w	r2, r3, #12
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c4:	4968      	ldr	r1, [pc, #416]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051d8:	4b63      	ldr	r3, [pc, #396]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e6:	4960      	ldr	r1, [pc, #384]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051fa:	4b5b      	ldr	r3, [pc, #364]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005200:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005208:	4957      	ldr	r1, [pc, #348]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800521c:	4b52      	ldr	r3, [pc, #328]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	494f      	ldr	r1, [pc, #316]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800523e:	4b4a      	ldr	r3, [pc, #296]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524c:	4946      	ldr	r1, [pc, #280]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005260:	4b41      	ldr	r3, [pc, #260]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	493e      	ldr	r1, [pc, #248]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005282:	4b39      	ldr	r3, [pc, #228]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005290:	4935      	ldr	r1, [pc, #212]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052a4:	4b30      	ldr	r3, [pc, #192]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052b2:	492d      	ldr	r1, [pc, #180]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d011      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052c6:	4b28      	ldr	r3, [pc, #160]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d4:	4924      	ldr	r1, [pc, #144]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e4:	d101      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052e6:	2301      	movs	r3, #1
 80052e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80052f6:	2301      	movs	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005306:	4b18      	ldr	r3, [pc, #96]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005314:	4914      	ldr	r1, [pc, #80]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005338:	490b      	ldr	r1, [pc, #44]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00f      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800535c:	4902      	ldr	r1, [pc, #8]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005364:	e002      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005378:	4b8a      	ldr	r3, [pc, #552]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	4986      	ldr	r1, [pc, #536]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800539c:	4b81      	ldr	r3, [pc, #516]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800539e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ac:	497d      	ldr	r1, [pc, #500]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d006      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80d6 	beq.w	8005574 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053c8:	4b76      	ldr	r3, [pc, #472]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a75      	ldr	r2, [pc, #468]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d4:	f7fd fcc0 	bl	8002d58 <HAL_GetTick>
 80053d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053dc:	f7fd fcbc 	bl	8002d58 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e195      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053ee:	4b6d      	ldr	r3, [pc, #436]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d021      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d11d      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800540e:	4b65      	ldr	r3, [pc, #404]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800541c:	4b61      	ldr	r3, [pc, #388]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005422:	0e1b      	lsrs	r3, r3, #24
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	019a      	lsls	r2, r3, #6
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	041b      	lsls	r3, r3, #16
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	071b      	lsls	r3, r3, #28
 8005442:	4958      	ldr	r1, [pc, #352]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005468:	2b00      	cmp	r3, #0
 800546a:	d02e      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005474:	d129      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005476:	4b4b      	ldr	r3, [pc, #300]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005484:	4b47      	ldr	r3, [pc, #284]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548a:	0f1b      	lsrs	r3, r3, #28
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	019a      	lsls	r2, r3, #6
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	493e      	ldr	r1, [pc, #248]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054b2:	4b3c      	ldr	r3, [pc, #240]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b8:	f023 021f 	bic.w	r2, r3, #31
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	3b01      	subs	r3, #1
 80054c2:	4938      	ldr	r1, [pc, #224]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01d      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054d6:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054dc:	0e1b      	lsrs	r3, r3, #24
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054e4:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ea:	0f1b      	lsrs	r3, r3, #28
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	019a      	lsls	r2, r3, #6
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	041b      	lsls	r3, r3, #16
 80054fe:	431a      	orrs	r2, r3
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	061b      	lsls	r3, r3, #24
 8005504:	431a      	orrs	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	071b      	lsls	r3, r3, #28
 800550a:	4926      	ldr	r1, [pc, #152]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	019a      	lsls	r2, r3, #6
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	041b      	lsls	r3, r3, #16
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	071b      	lsls	r3, r3, #28
 800553a:	491a      	ldr	r1, [pc, #104]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a17      	ldr	r2, [pc, #92]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800554c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554e:	f7fd fc03 	bl	8002d58 <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005556:	f7fd fbff 	bl	8002d58 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b64      	cmp	r3, #100	; 0x64
 8005562:	d901      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e0d8      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005568:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b01      	cmp	r3, #1
 8005578:	f040 80ce 	bne.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005588:	f7fd fbe6 	bl	8002d58 <HAL_GetTick>
 800558c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800558e:	e00b      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005590:	f7fd fbe2 	bl	8002d58 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	; 0x64
 800559c:	d904      	bls.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e0bb      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80055a2:	bf00      	nop
 80055a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055a8:	4b5e      	ldr	r3, [pc, #376]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055b4:	d0ec      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d02e      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d12a      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055de:	4b51      	ldr	r3, [pc, #324]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	0c1b      	lsrs	r3, r3, #16
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055ec:	4b4d      	ldr	r3, [pc, #308]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	0f1b      	lsrs	r3, r3, #28
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	019a      	lsls	r2, r3, #6
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	061b      	lsls	r3, r3, #24
 800560c:	431a      	orrs	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	071b      	lsls	r3, r3, #28
 8005612:	4944      	ldr	r1, [pc, #272]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800561a:	4b42      	ldr	r3, [pc, #264]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800561c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005620:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	3b01      	subs	r3, #1
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	493d      	ldr	r1, [pc, #244]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d022      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005648:	d11d      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800564a:	4b36      	ldr	r3, [pc, #216]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	0e1b      	lsrs	r3, r3, #24
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005658:	4b32      	ldr	r3, [pc, #200]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	0f1b      	lsrs	r3, r3, #28
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	019a      	lsls	r2, r3, #6
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	431a      	orrs	r2, r3
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	061b      	lsls	r3, r3, #24
 8005678:	431a      	orrs	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	071b      	lsls	r3, r3, #28
 800567e:	4929      	ldr	r1, [pc, #164]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d028      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005692:	4b24      	ldr	r3, [pc, #144]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	0e1b      	lsrs	r3, r3, #24
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056a0:	4b20      	ldr	r3, [pc, #128]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a6:	0c1b      	lsrs	r3, r3, #16
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	019a      	lsls	r2, r3, #6
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	431a      	orrs	r2, r3
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	061b      	lsls	r3, r3, #24
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	071b      	lsls	r3, r3, #28
 80056c6:	4917      	ldr	r1, [pc, #92]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056ce:	4b15      	ldr	r3, [pc, #84]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4911      	ldr	r1, [pc, #68]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a0e      	ldr	r2, [pc, #56]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f0:	f7fd fb32 	bl	8002d58 <HAL_GetTick>
 80056f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056f8:	f7fd fb2e 	bl	8002d58 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b64      	cmp	r3, #100	; 0x64
 8005704:	d901      	bls.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e007      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005716:	d1ef      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800

08005728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e09d      	b.n	8005876 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	d108      	bne.n	8005754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574a:	d009      	beq.n	8005760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	61da      	str	r2, [r3, #28]
 8005752:	e005      	b.n	8005760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fc fd54 	bl	8002228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057a0:	d902      	bls.n	80057a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e002      	b.n	80057ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80057b6:	d007      	beq.n	80057c8 <HAL_SPI_Init+0xa0>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057c0:	d002      	beq.n	80057c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580a:	ea42 0103 	orr.w	r1, r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	0c1b      	lsrs	r3, r3, #16
 8005824:	f003 0204 	and.w	r2, r3, #4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005844:	ea42 0103 	orr.w	r1, r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e049      	b.n	8005924 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fc fd3f 	bl	8002328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f001 f831 	bl	8006924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b01      	cmp	r3, #1
 800593e:	d001      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e054      	b.n	80059ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a26      	ldr	r2, [pc, #152]	; (80059fc <HAL_TIM_Base_Start_IT+0xd0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d022      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x80>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d01d      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x80>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <HAL_TIM_Base_Start_IT+0xd4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d018      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x80>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <HAL_TIM_Base_Start_IT+0xd8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d013      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x80>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <HAL_TIM_Base_Start_IT+0xdc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00e      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x80>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <HAL_TIM_Base_Start_IT+0xe0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d009      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x80>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <HAL_TIM_Base_Start_IT+0xe4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x80>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <HAL_TIM_Base_Start_IT+0xe8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d115      	bne.n	80059d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <HAL_TIM_Base_Start_IT+0xec>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b06      	cmp	r3, #6
 80059bc:	d015      	beq.n	80059ea <HAL_TIM_Base_Start_IT+0xbe>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c4:	d011      	beq.n	80059ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	e008      	b.n	80059ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	e000      	b.n	80059ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40000c00 	.word	0x40000c00
 8005a0c:	40010400 	.word	0x40010400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40001800 	.word	0x40001800
 8005a18:	00010007 	.word	0x00010007

08005a1c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e049      	b.n	8005ac2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f841 	bl	8005aca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f000 ff62 	bl	8006924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e049      	b.n	8005b84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7fc fd1f 	bl	8002548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f000 ff01 	bl	8006924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_TIM_PWM_Start+0x24>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	e03c      	b.n	8005c2a <HAL_TIM_PWM_Start+0x9e>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d109      	bne.n	8005bca <HAL_TIM_PWM_Start+0x3e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	bf14      	ite	ne
 8005bc2:	2301      	movne	r3, #1
 8005bc4:	2300      	moveq	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	e02f      	b.n	8005c2a <HAL_TIM_PWM_Start+0x9e>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d109      	bne.n	8005be4 <HAL_TIM_PWM_Start+0x58>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	e022      	b.n	8005c2a <HAL_TIM_PWM_Start+0x9e>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b0c      	cmp	r3, #12
 8005be8:	d109      	bne.n	8005bfe <HAL_TIM_PWM_Start+0x72>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	bf14      	ite	ne
 8005bf6:	2301      	movne	r3, #1
 8005bf8:	2300      	moveq	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	e015      	b.n	8005c2a <HAL_TIM_PWM_Start+0x9e>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d109      	bne.n	8005c18 <HAL_TIM_PWM_Start+0x8c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	bf14      	ite	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	2300      	moveq	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	e008      	b.n	8005c2a <HAL_TIM_PWM_Start+0x9e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e092      	b.n	8005d58 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_PWM_Start+0xb6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c40:	e023      	b.n	8005c8a <HAL_TIM_PWM_Start+0xfe>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_PWM_Start+0xc6>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c50:	e01b      	b.n	8005c8a <HAL_TIM_PWM_Start+0xfe>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_PWM_Start+0xd6>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c60:	e013      	b.n	8005c8a <HAL_TIM_PWM_Start+0xfe>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_PWM_Start+0xe6>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c70:	e00b      	b.n	8005c8a <HAL_TIM_PWM_Start+0xfe>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d104      	bne.n	8005c82 <HAL_TIM_PWM_Start+0xf6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c80:	e003      	b.n	8005c8a <HAL_TIM_PWM_Start+0xfe>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 fb08 	bl	80072a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a30      	ldr	r2, [pc, #192]	; (8005d60 <HAL_TIM_PWM_Start+0x1d4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_TIM_PWM_Start+0x120>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a2f      	ldr	r2, [pc, #188]	; (8005d64 <HAL_TIM_PWM_Start+0x1d8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_PWM_Start+0x124>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x126>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a25      	ldr	r2, [pc, #148]	; (8005d60 <HAL_TIM_PWM_Start+0x1d4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d022      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x18a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd8:	d01d      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x18a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a22      	ldr	r2, [pc, #136]	; (8005d68 <HAL_TIM_PWM_Start+0x1dc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d018      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x18a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a20      	ldr	r2, [pc, #128]	; (8005d6c <HAL_TIM_PWM_Start+0x1e0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d013      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x18a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1f      	ldr	r2, [pc, #124]	; (8005d70 <HAL_TIM_PWM_Start+0x1e4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00e      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x18a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <HAL_TIM_PWM_Start+0x1d8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x18a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_TIM_PWM_Start+0x1e8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x18a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <HAL_TIM_PWM_Start+0x1ec>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d115      	bne.n	8005d42 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <HAL_TIM_PWM_Start+0x1f0>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b06      	cmp	r3, #6
 8005d26:	d015      	beq.n	8005d54 <HAL_TIM_PWM_Start+0x1c8>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2e:	d011      	beq.n	8005d54 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d40:	e008      	b.n	8005d54 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0201 	orr.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	e000      	b.n	8005d56 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40000800 	.word	0x40000800
 8005d70:	40000c00 	.word	0x40000c00
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40001800 	.word	0x40001800
 8005d7c:	00010007 	.word	0x00010007

08005d80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e049      	b.n	8005e26 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f841 	bl	8005e2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f000 fdb0 	bl	8006924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e08f      	b.n	8005f78 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fc faf5 	bl	800245c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6899      	ldr	r1, [r3, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b3e      	ldr	r3, [pc, #248]	; (8005f80 <HAL_TIM_Encoder_Init+0x13c>)
 8005e86:	400b      	ands	r3, r1
 8005e88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f000 fd45 	bl	8006924 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <HAL_TIM_Encoder_Init+0x140>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <HAL_TIM_Encoder_Init+0x144>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <HAL_TIM_Encoder_Init+0x148>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	011a      	lsls	r2, r3, #4
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	031b      	lsls	r3, r3, #12
 8005f04:	4313      	orrs	r3, r2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	4313      	orrs	r3, r2
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	fffebff8 	.word	0xfffebff8
 8005f84:	fffffcfc 	.word	0xfffffcfc
 8005f88:	fffff3f3 	.word	0xfffff3f3
 8005f8c:	ffff0f0f 	.word	0xffff0f0f

08005f90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d110      	bne.n	8005fe2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d102      	bne.n	8005fcc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fc6:	7b7b      	ldrb	r3, [r7, #13]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d001      	beq.n	8005fd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e069      	b.n	80060a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe0:	e031      	b.n	8006046 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d110      	bne.n	800600a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d102      	bne.n	8005ff4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fee:	7b3b      	ldrb	r3, [r7, #12]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d001      	beq.n	8005ff8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e055      	b.n	80060a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006008:	e01d      	b.n	8006046 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d108      	bne.n	8006022 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d105      	bne.n	8006022 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006016:	7b7b      	ldrb	r3, [r7, #13]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d102      	bne.n	8006022 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800601c:	7b3b      	ldrb	r3, [r7, #12]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d001      	beq.n	8006026 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e03e      	b.n	80060a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_TIM_Encoder_Start+0xc4>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b04      	cmp	r3, #4
 8006050:	d008      	beq.n	8006064 <HAL_TIM_Encoder_Start+0xd4>
 8006052:	e00f      	b.n	8006074 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2201      	movs	r2, #1
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f001 f923 	bl	80072a8 <TIM_CCxChannelCmd>
      break;
 8006062:	e016      	b.n	8006092 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2201      	movs	r2, #1
 800606a:	2104      	movs	r1, #4
 800606c:	4618      	mov	r0, r3
 800606e:	f001 f91b 	bl	80072a8 <TIM_CCxChannelCmd>
      break;
 8006072:	e00e      	b.n	8006092 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2201      	movs	r2, #1
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f001 f913 	bl	80072a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2201      	movs	r2, #1
 8006088:	2104      	movs	r1, #4
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f90c 	bl	80072a8 <TIM_CCxChannelCmd>
      break;
 8006090:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0201 	orr.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d122      	bne.n	8006108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d11b      	bne.n	8006108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0202 	mvn.w	r2, #2
 80060d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fbfa 	bl	80068e8 <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fbec 	bl	80068d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fbfd 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b04      	cmp	r3, #4
 8006114:	d122      	bne.n	800615c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b04      	cmp	r3, #4
 8006122:	d11b      	bne.n	800615c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0204 	mvn.w	r2, #4
 800612c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fbd0 	bl	80068e8 <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fbc2 	bl	80068d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fbd3 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b08      	cmp	r3, #8
 8006168:	d122      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b08      	cmp	r3, #8
 8006176:	d11b      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0208 	mvn.w	r2, #8
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2204      	movs	r2, #4
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fba6 	bl	80068e8 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fb98 	bl	80068d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fba9 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b10      	cmp	r3, #16
 80061bc:	d122      	bne.n	8006204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d11b      	bne.n	8006204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0210 	mvn.w	r2, #16
 80061d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2208      	movs	r2, #8
 80061da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fb7c 	bl	80068e8 <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fb6e 	bl	80068d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb7f 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10e      	bne.n	8006230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b01      	cmp	r3, #1
 800621e:	d107      	bne.n	8006230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0201 	mvn.w	r2, #1
 8006228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fa fb70 	bl	8000910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623a:	2b80      	cmp	r3, #128	; 0x80
 800623c:	d10e      	bne.n	800625c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006248:	2b80      	cmp	r3, #128	; 0x80
 800624a:	d107      	bne.n	800625c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 f962 	bl	8007520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626a:	d10e      	bne.n	800628a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d107      	bne.n	800628a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 f955 	bl	8007534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d10e      	bne.n	80062b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d107      	bne.n	80062b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fb2d 	bl	8006910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d10e      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d107      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f06f 0220 	mvn.w	r2, #32
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 f915 	bl	800750c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006306:	2302      	movs	r3, #2
 8006308:	e066      	b.n	80063d8 <HAL_TIM_OC_ConfigChannel+0xec>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b14      	cmp	r3, #20
 8006316:	d857      	bhi.n	80063c8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006318:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <HAL_TIM_OC_ConfigChannel+0x34>)
 800631a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631e:	bf00      	nop
 8006320:	08006375 	.word	0x08006375
 8006324:	080063c9 	.word	0x080063c9
 8006328:	080063c9 	.word	0x080063c9
 800632c:	080063c9 	.word	0x080063c9
 8006330:	08006383 	.word	0x08006383
 8006334:	080063c9 	.word	0x080063c9
 8006338:	080063c9 	.word	0x080063c9
 800633c:	080063c9 	.word	0x080063c9
 8006340:	08006391 	.word	0x08006391
 8006344:	080063c9 	.word	0x080063c9
 8006348:	080063c9 	.word	0x080063c9
 800634c:	080063c9 	.word	0x080063c9
 8006350:	0800639f 	.word	0x0800639f
 8006354:	080063c9 	.word	0x080063c9
 8006358:	080063c9 	.word	0x080063c9
 800635c:	080063c9 	.word	0x080063c9
 8006360:	080063ad 	.word	0x080063ad
 8006364:	080063c9 	.word	0x080063c9
 8006368:	080063c9 	.word	0x080063c9
 800636c:	080063c9 	.word	0x080063c9
 8006370:	080063bb 	.word	0x080063bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fb72 	bl	8006a64 <TIM_OC1_SetConfig>
      break;
 8006380:	e025      	b.n	80063ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fbdd 	bl	8006b48 <TIM_OC2_SetConfig>
      break;
 800638e:	e01e      	b.n	80063ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fc4e 	bl	8006c38 <TIM_OC3_SetConfig>
      break;
 800639c:	e017      	b.n	80063ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fcbd 	bl	8006d24 <TIM_OC4_SetConfig>
      break;
 80063aa:	e010      	b.n	80063ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fd0e 	bl	8006dd4 <TIM_OC5_SetConfig>
      break;
 80063b8:	e009      	b.n	80063ce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fd59 	bl	8006e78 <TIM_OC6_SetConfig>
      break;
 80063c6:	e002      	b.n	80063ce <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	75fb      	strb	r3, [r7, #23]
      break;
 80063cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e088      	b.n	8006510 <HAL_TIM_IC_ConfigChannel+0x130>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d11b      	bne.n	8006444 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6819      	ldr	r1, [r3, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f000 fd80 	bl	8006f20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 020c 	bic.w	r2, r2, #12
 800642e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6999      	ldr	r1, [r3, #24]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	619a      	str	r2, [r3, #24]
 8006442:	e060      	b.n	8006506 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b04      	cmp	r3, #4
 8006448:	d11c      	bne.n	8006484 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6819      	ldr	r1, [r3, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f000 fe04 	bl	8007066 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699a      	ldr	r2, [r3, #24]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800646c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6999      	ldr	r1, [r3, #24]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	021a      	lsls	r2, r3, #8
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	619a      	str	r2, [r3, #24]
 8006482:	e040      	b.n	8006506 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b08      	cmp	r3, #8
 8006488:	d11b      	bne.n	80064c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f000 fe51 	bl	8007140 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 020c 	bic.w	r2, r2, #12
 80064ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69d9      	ldr	r1, [r3, #28]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	61da      	str	r2, [r3, #28]
 80064c0:	e021      	b.n	8006506 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	d11c      	bne.n	8006502 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6819      	ldr	r1, [r3, #0]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f000 fe6e 	bl	80071b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69da      	ldr	r2, [r3, #28]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69d9      	ldr	r1, [r3, #28]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	021a      	lsls	r2, r3, #8
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	61da      	str	r2, [r3, #28]
 8006500:	e001      	b.n	8006506 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800650e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006532:	2302      	movs	r3, #2
 8006534:	e0ff      	b.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b14      	cmp	r3, #20
 8006542:	f200 80f0 	bhi.w	8006726 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	080065a1 	.word	0x080065a1
 8006550:	08006727 	.word	0x08006727
 8006554:	08006727 	.word	0x08006727
 8006558:	08006727 	.word	0x08006727
 800655c:	080065e1 	.word	0x080065e1
 8006560:	08006727 	.word	0x08006727
 8006564:	08006727 	.word	0x08006727
 8006568:	08006727 	.word	0x08006727
 800656c:	08006623 	.word	0x08006623
 8006570:	08006727 	.word	0x08006727
 8006574:	08006727 	.word	0x08006727
 8006578:	08006727 	.word	0x08006727
 800657c:	08006663 	.word	0x08006663
 8006580:	08006727 	.word	0x08006727
 8006584:	08006727 	.word	0x08006727
 8006588:	08006727 	.word	0x08006727
 800658c:	080066a5 	.word	0x080066a5
 8006590:	08006727 	.word	0x08006727
 8006594:	08006727 	.word	0x08006727
 8006598:	08006727 	.word	0x08006727
 800659c:	080066e5 	.word	0x080066e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fa5c 	bl	8006a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0208 	orr.w	r2, r2, #8
 80065ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0204 	bic.w	r2, r2, #4
 80065ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6999      	ldr	r1, [r3, #24]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	619a      	str	r2, [r3, #24]
      break;
 80065de:	e0a5      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 faae 	bl	8006b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6999      	ldr	r1, [r3, #24]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	021a      	lsls	r2, r3, #8
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	619a      	str	r2, [r3, #24]
      break;
 8006620:	e084      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fb05 	bl	8006c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0208 	orr.w	r2, r2, #8
 800663c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0204 	bic.w	r2, r2, #4
 800664c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69d9      	ldr	r1, [r3, #28]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	61da      	str	r2, [r3, #28]
      break;
 8006660:	e064      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fb5b 	bl	8006d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69d9      	ldr	r1, [r3, #28]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	021a      	lsls	r2, r3, #8
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	61da      	str	r2, [r3, #28]
      break;
 80066a2:	e043      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fb92 	bl	8006dd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0208 	orr.w	r2, r2, #8
 80066be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0204 	bic.w	r2, r2, #4
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066e2:	e023      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fbc4 	bl	8006e78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	021a      	lsls	r2, r3, #8
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006724:	e002      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
      break;
 800672a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006734:	7dfb      	ldrb	r3, [r7, #23]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop

08006740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_TIM_ConfigClockSource+0x1c>
 8006758:	2302      	movs	r3, #2
 800675a:	e0b4      	b.n	80068c6 <HAL_TIM_ConfigClockSource+0x186>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	4b56      	ldr	r3, [pc, #344]	; (80068d0 <HAL_TIM_ConfigClockSource+0x190>)
 8006778:	4013      	ands	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006794:	d03e      	beq.n	8006814 <HAL_TIM_ConfigClockSource+0xd4>
 8006796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800679a:	f200 8087 	bhi.w	80068ac <HAL_TIM_ConfigClockSource+0x16c>
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a2:	f000 8086 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x172>
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067aa:	d87f      	bhi.n	80068ac <HAL_TIM_ConfigClockSource+0x16c>
 80067ac:	2b70      	cmp	r3, #112	; 0x70
 80067ae:	d01a      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0xa6>
 80067b0:	2b70      	cmp	r3, #112	; 0x70
 80067b2:	d87b      	bhi.n	80068ac <HAL_TIM_ConfigClockSource+0x16c>
 80067b4:	2b60      	cmp	r3, #96	; 0x60
 80067b6:	d050      	beq.n	800685a <HAL_TIM_ConfigClockSource+0x11a>
 80067b8:	2b60      	cmp	r3, #96	; 0x60
 80067ba:	d877      	bhi.n	80068ac <HAL_TIM_ConfigClockSource+0x16c>
 80067bc:	2b50      	cmp	r3, #80	; 0x50
 80067be:	d03c      	beq.n	800683a <HAL_TIM_ConfigClockSource+0xfa>
 80067c0:	2b50      	cmp	r3, #80	; 0x50
 80067c2:	d873      	bhi.n	80068ac <HAL_TIM_ConfigClockSource+0x16c>
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d058      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x13a>
 80067c8:	2b40      	cmp	r3, #64	; 0x40
 80067ca:	d86f      	bhi.n	80068ac <HAL_TIM_ConfigClockSource+0x16c>
 80067cc:	2b30      	cmp	r3, #48	; 0x30
 80067ce:	d064      	beq.n	800689a <HAL_TIM_ConfigClockSource+0x15a>
 80067d0:	2b30      	cmp	r3, #48	; 0x30
 80067d2:	d86b      	bhi.n	80068ac <HAL_TIM_ConfigClockSource+0x16c>
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d060      	beq.n	800689a <HAL_TIM_ConfigClockSource+0x15a>
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d867      	bhi.n	80068ac <HAL_TIM_ConfigClockSource+0x16c>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d05c      	beq.n	800689a <HAL_TIM_ConfigClockSource+0x15a>
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	d05a      	beq.n	800689a <HAL_TIM_ConfigClockSource+0x15a>
 80067e4:	e062      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6899      	ldr	r1, [r3, #8]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f000 fd37 	bl	8007268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	609a      	str	r2, [r3, #8]
      break;
 8006812:	e04f      	b.n	80068b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	6899      	ldr	r1, [r3, #8]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f000 fd20 	bl	8007268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006836:	609a      	str	r2, [r3, #8]
      break;
 8006838:	e03c      	b.n	80068b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6859      	ldr	r1, [r3, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	461a      	mov	r2, r3
 8006848:	f000 fbde 	bl	8007008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2150      	movs	r1, #80	; 0x50
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fced 	bl	8007232 <TIM_ITRx_SetConfig>
      break;
 8006858:	e02c      	b.n	80068b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6859      	ldr	r1, [r3, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	461a      	mov	r2, r3
 8006868:	f000 fc3a 	bl	80070e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2160      	movs	r1, #96	; 0x60
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fcdd 	bl	8007232 <TIM_ITRx_SetConfig>
      break;
 8006878:	e01c      	b.n	80068b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	6859      	ldr	r1, [r3, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	461a      	mov	r2, r3
 8006888:	f000 fbbe 	bl	8007008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2140      	movs	r1, #64	; 0x40
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fccd 	bl	8007232 <TIM_ITRx_SetConfig>
      break;
 8006898:	e00c      	b.n	80068b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f000 fcc4 	bl	8007232 <TIM_ITRx_SetConfig>
      break;
 80068aa:	e003      	b.n	80068b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
      break;
 80068b0:	e000      	b.n	80068b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	fffeff88 	.word	0xfffeff88

080068d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a40      	ldr	r2, [pc, #256]	; (8006a38 <TIM_Base_SetConfig+0x114>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006942:	d00f      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a3d      	ldr	r2, [pc, #244]	; (8006a3c <TIM_Base_SetConfig+0x118>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00b      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a3c      	ldr	r2, [pc, #240]	; (8006a40 <TIM_Base_SetConfig+0x11c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d007      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a3b      	ldr	r2, [pc, #236]	; (8006a44 <TIM_Base_SetConfig+0x120>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d003      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a3a      	ldr	r2, [pc, #232]	; (8006a48 <TIM_Base_SetConfig+0x124>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d108      	bne.n	8006976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a2f      	ldr	r2, [pc, #188]	; (8006a38 <TIM_Base_SetConfig+0x114>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d02b      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006984:	d027      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a2c      	ldr	r2, [pc, #176]	; (8006a3c <TIM_Base_SetConfig+0x118>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d023      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a2b      	ldr	r2, [pc, #172]	; (8006a40 <TIM_Base_SetConfig+0x11c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01f      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a2a      	ldr	r2, [pc, #168]	; (8006a44 <TIM_Base_SetConfig+0x120>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d01b      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a29      	ldr	r2, [pc, #164]	; (8006a48 <TIM_Base_SetConfig+0x124>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d017      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a28      	ldr	r2, [pc, #160]	; (8006a4c <TIM_Base_SetConfig+0x128>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d013      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a27      	ldr	r2, [pc, #156]	; (8006a50 <TIM_Base_SetConfig+0x12c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00f      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a26      	ldr	r2, [pc, #152]	; (8006a54 <TIM_Base_SetConfig+0x130>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00b      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a25      	ldr	r2, [pc, #148]	; (8006a58 <TIM_Base_SetConfig+0x134>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d007      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a24      	ldr	r2, [pc, #144]	; (8006a5c <TIM_Base_SetConfig+0x138>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a23      	ldr	r2, [pc, #140]	; (8006a60 <TIM_Base_SetConfig+0x13c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d108      	bne.n	80069e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a0a      	ldr	r2, [pc, #40]	; (8006a38 <TIM_Base_SetConfig+0x114>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_Base_SetConfig+0xf8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a0c      	ldr	r2, [pc, #48]	; (8006a48 <TIM_Base_SetConfig+0x124>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d103      	bne.n	8006a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	691a      	ldr	r2, [r3, #16]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	615a      	str	r2, [r3, #20]
}
 8006a2a:	bf00      	nop
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40010400 	.word	0x40010400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40014400 	.word	0x40014400
 8006a54:	40014800 	.word	0x40014800
 8006a58:	40001800 	.word	0x40001800
 8006a5c:	40001c00 	.word	0x40001c00
 8006a60:	40002000 	.word	0x40002000

08006a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	f023 0201 	bic.w	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4b2b      	ldr	r3, [pc, #172]	; (8006b3c <TIM_OC1_SetConfig+0xd8>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f023 0302 	bic.w	r3, r3, #2
 8006aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a21      	ldr	r2, [pc, #132]	; (8006b40 <TIM_OC1_SetConfig+0xdc>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d003      	beq.n	8006ac8 <TIM_OC1_SetConfig+0x64>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a20      	ldr	r2, [pc, #128]	; (8006b44 <TIM_OC1_SetConfig+0xe0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d10c      	bne.n	8006ae2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f023 0308 	bic.w	r3, r3, #8
 8006ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f023 0304 	bic.w	r3, r3, #4
 8006ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <TIM_OC1_SetConfig+0xdc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_OC1_SetConfig+0x8e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a15      	ldr	r2, [pc, #84]	; (8006b44 <TIM_OC1_SetConfig+0xe0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d111      	bne.n	8006b16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	fffeff8f 	.word	0xfffeff8f
 8006b40:	40010000 	.word	0x40010000
 8006b44:	40010400 	.word	0x40010400

08006b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0210 	bic.w	r2, r3, #16
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4b2e      	ldr	r3, [pc, #184]	; (8006c2c <TIM_OC2_SetConfig+0xe4>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f023 0320 	bic.w	r3, r3, #32
 8006b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a23      	ldr	r2, [pc, #140]	; (8006c30 <TIM_OC2_SetConfig+0xe8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_OC2_SetConfig+0x68>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a22      	ldr	r2, [pc, #136]	; (8006c34 <TIM_OC2_SetConfig+0xec>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d10d      	bne.n	8006bcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <TIM_OC2_SetConfig+0xe8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_OC2_SetConfig+0x94>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <TIM_OC2_SetConfig+0xec>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d113      	bne.n	8006c04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	feff8fff 	.word	0xfeff8fff
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40010400 	.word	0x40010400

08006c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4b2d      	ldr	r3, [pc, #180]	; (8006d18 <TIM_OC3_SetConfig+0xe0>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0303 	bic.w	r3, r3, #3
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	021b      	lsls	r3, r3, #8
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a22      	ldr	r2, [pc, #136]	; (8006d1c <TIM_OC3_SetConfig+0xe4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d003      	beq.n	8006c9e <TIM_OC3_SetConfig+0x66>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a21      	ldr	r2, [pc, #132]	; (8006d20 <TIM_OC3_SetConfig+0xe8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d10d      	bne.n	8006cba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a17      	ldr	r2, [pc, #92]	; (8006d1c <TIM_OC3_SetConfig+0xe4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_OC3_SetConfig+0x92>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a16      	ldr	r2, [pc, #88]	; (8006d20 <TIM_OC3_SetConfig+0xe8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d113      	bne.n	8006cf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	621a      	str	r2, [r3, #32]
}
 8006d0c:	bf00      	nop
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	fffeff8f 	.word	0xfffeff8f
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40010400 	.word	0x40010400

08006d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	; (8006dc8 <TIM_OC4_SetConfig+0xa4>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	031b      	lsls	r3, r3, #12
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a13      	ldr	r2, [pc, #76]	; (8006dcc <TIM_OC4_SetConfig+0xa8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d003      	beq.n	8006d8c <TIM_OC4_SetConfig+0x68>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a12      	ldr	r2, [pc, #72]	; (8006dd0 <TIM_OC4_SetConfig+0xac>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d109      	bne.n	8006da0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	019b      	lsls	r3, r3, #6
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	feff8fff 	.word	0xfeff8fff
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40010400 	.word	0x40010400

08006dd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <TIM_OC5_SetConfig+0x98>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	041b      	lsls	r3, r3, #16
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a12      	ldr	r2, [pc, #72]	; (8006e70 <TIM_OC5_SetConfig+0x9c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d003      	beq.n	8006e32 <TIM_OC5_SetConfig+0x5e>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a11      	ldr	r2, [pc, #68]	; (8006e74 <TIM_OC5_SetConfig+0xa0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d109      	bne.n	8006e46 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	621a      	str	r2, [r3, #32]
}
 8006e60:	bf00      	nop
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	fffeff8f 	.word	0xfffeff8f
 8006e70:	40010000 	.word	0x40010000
 8006e74:	40010400 	.word	0x40010400

08006e78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4b1c      	ldr	r3, [pc, #112]	; (8006f14 <TIM_OC6_SetConfig+0x9c>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	051b      	lsls	r3, r3, #20
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <TIM_OC6_SetConfig+0xa0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x60>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a12      	ldr	r2, [pc, #72]	; (8006f1c <TIM_OC6_SetConfig+0xa4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d109      	bne.n	8006eec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	feff8fff 	.word	0xfeff8fff
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40010400 	.word	0x40010400

08006f20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0201 	bic.w	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4a28      	ldr	r2, [pc, #160]	; (8006fec <TIM_TI1_SetConfig+0xcc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d01b      	beq.n	8006f86 <TIM_TI1_SetConfig+0x66>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f54:	d017      	beq.n	8006f86 <TIM_TI1_SetConfig+0x66>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4a25      	ldr	r2, [pc, #148]	; (8006ff0 <TIM_TI1_SetConfig+0xd0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d013      	beq.n	8006f86 <TIM_TI1_SetConfig+0x66>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4a24      	ldr	r2, [pc, #144]	; (8006ff4 <TIM_TI1_SetConfig+0xd4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00f      	beq.n	8006f86 <TIM_TI1_SetConfig+0x66>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4a23      	ldr	r2, [pc, #140]	; (8006ff8 <TIM_TI1_SetConfig+0xd8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00b      	beq.n	8006f86 <TIM_TI1_SetConfig+0x66>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <TIM_TI1_SetConfig+0xdc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d007      	beq.n	8006f86 <TIM_TI1_SetConfig+0x66>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4a21      	ldr	r2, [pc, #132]	; (8007000 <TIM_TI1_SetConfig+0xe0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <TIM_TI1_SetConfig+0x66>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4a20      	ldr	r2, [pc, #128]	; (8007004 <TIM_TI1_SetConfig+0xe4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d101      	bne.n	8006f8a <TIM_TI1_SetConfig+0x6a>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <TIM_TI1_SetConfig+0x6c>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d008      	beq.n	8006fa2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f023 0303 	bic.w	r3, r3, #3
 8006f96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	e003      	b.n	8006faa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f023 030a 	bic.w	r3, r3, #10
 8006fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f003 030a 	and.w	r3, r3, #10
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40010000 	.word	0x40010000
 8006ff0:	40000400 	.word	0x40000400
 8006ff4:	40000800 	.word	0x40000800
 8006ff8:	40000c00 	.word	0x40000c00
 8006ffc:	40010400 	.word	0x40010400
 8007000:	40014000 	.word	0x40014000
 8007004:	40001800 	.word	0x40001800

08007008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 0201 	bic.w	r2, r3, #1
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f023 030a 	bic.w	r3, r3, #10
 8007044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007066:	b480      	push	{r7}
 8007068:	b087      	sub	sp, #28
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f023 0210 	bic.w	r2, r3, #16
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007092:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	031b      	lsls	r3, r3, #12
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	621a      	str	r2, [r3, #32]
}
 80070d4:	bf00      	nop
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	f023 0210 	bic.w	r2, r3, #16
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800710a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	031b      	lsls	r3, r3, #12
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800711c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	011b      	lsls	r3, r3, #4
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	621a      	str	r2, [r3, #32]
}
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f023 0303 	bic.w	r3, r3, #3
 800716c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4313      	orrs	r3, r2
 8007174:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800717c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	b2db      	uxtb	r3, r3
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007190:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	621a      	str	r2, [r3, #32]
}
 80071ac:	bf00      	nop
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	031b      	lsls	r3, r3, #12
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800720a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	031b      	lsls	r3, r3, #12
 8007210:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	f043 0307 	orr.w	r3, r3, #7
 8007254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	609a      	str	r2, [r3, #8]
}
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	431a      	orrs	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4313      	orrs	r3, r2
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	609a      	str	r2, [r3, #8]
}
 800729c:	bf00      	nop
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 031f 	and.w	r3, r3, #31
 80072ba:	2201      	movs	r2, #1
 80072bc:	fa02 f303 	lsl.w	r3, r2, r3
 80072c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1a      	ldr	r2, [r3, #32]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	43db      	mvns	r3, r3
 80072ca:	401a      	ands	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a1a      	ldr	r2, [r3, #32]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	fa01 f303 	lsl.w	r3, r1, r3
 80072e0:	431a      	orrs	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
	...

080072f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007308:	2302      	movs	r3, #2
 800730a:	e06d      	b.n	80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a30      	ldr	r2, [pc, #192]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d004      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d108      	bne.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007346:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007358:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4313      	orrs	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a20      	ldr	r2, [pc, #128]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d022      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737e:	d01d      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1d      	ldr	r2, [pc, #116]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d018      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1c      	ldr	r2, [pc, #112]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d013      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a1a      	ldr	r2, [pc, #104]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00e      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a15      	ldr	r2, [pc, #84]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d009      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a16      	ldr	r2, [pc, #88]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a15      	ldr	r2, [pc, #84]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d10c      	bne.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40010400 	.word	0x40010400
 80073fc:	40000400 	.word	0x40000400
 8007400:	40000800 	.word	0x40000800
 8007404:	40000c00 	.word	0x40000c00
 8007408:	40014000 	.word	0x40014000
 800740c:	40001800 	.word	0x40001800

08007410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007428:	2302      	movs	r3, #2
 800742a:	e065      	b.n	80074f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a16      	ldr	r2, [pc, #88]	; (8007504 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a14      	ldr	r2, [pc, #80]	; (8007508 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d115      	bne.n	80074e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	051b      	lsls	r3, r3, #20
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	40010000 	.word	0x40010000
 8007508:	40010400 	.word	0x40010400

0800750c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e040      	b.n	80075dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fb f8d8 	bl	8002720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2224      	movs	r2, #36	; 0x24
 8007574:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0201 	bic.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f974 	bl	8007874 <UART_SetConfig>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e022      	b.n	80075dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fbcc 	bl	8007d3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fc53 	bl	8007e80 <UART_CheckIdleState>
 80075da:	4603      	mov	r3, r0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08a      	sub	sp, #40	; 0x28
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d171      	bne.n	80076e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <HAL_UART_Transmit+0x24>
 8007602:	88fb      	ldrh	r3, [r7, #6]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e06a      	b.n	80076e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2221      	movs	r2, #33	; 0x21
 8007618:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800761a:	f7fb fb9d 	bl	8002d58 <HAL_GetTick>
 800761e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	88fa      	ldrh	r2, [r7, #6]
 800762c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007638:	d108      	bne.n	800764c <HAL_UART_Transmit+0x68>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d104      	bne.n	800764c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e003      	b.n	8007654 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007654:	e02c      	b.n	80076b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2200      	movs	r2, #0
 800765e:	2180      	movs	r1, #128	; 0x80
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fc5a 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e038      	b.n	80076e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007684:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	3302      	adds	r3, #2
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	e007      	b.n	800769e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	3301      	adds	r3, #1
 800769c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1cc      	bne.n	8007656 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2200      	movs	r2, #0
 80076c4:	2140      	movs	r1, #64	; 0x40
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fc27 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e005      	b.n	80076e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	e000      	b.n	80076e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80076e0:	2302      	movs	r3, #2
  }
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3720      	adds	r7, #32
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b08a      	sub	sp, #40	; 0x28
 80076ee:	af02      	add	r7, sp, #8
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007700:	2b20      	cmp	r3, #32
 8007702:	f040 80b1 	bne.w	8007868 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <HAL_UART_Receive+0x28>
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e0a9      	b.n	800786a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2222      	movs	r2, #34	; 0x22
 8007722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800772c:	f7fb fb14 	bl	8002d58 <HAL_GetTick>
 8007730:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	88fa      	ldrh	r2, [r7, #6]
 8007736:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	88fa      	ldrh	r2, [r7, #6]
 800773e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774a:	d10e      	bne.n	800776a <HAL_UART_Receive+0x80>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d105      	bne.n	8007760 <HAL_UART_Receive+0x76>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f240 12ff 	movw	r2, #511	; 0x1ff
 800775a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800775e:	e02d      	b.n	80077bc <HAL_UART_Receive+0xd2>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	22ff      	movs	r2, #255	; 0xff
 8007764:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007768:	e028      	b.n	80077bc <HAL_UART_Receive+0xd2>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10d      	bne.n	800778e <HAL_UART_Receive+0xa4>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d104      	bne.n	8007784 <HAL_UART_Receive+0x9a>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	22ff      	movs	r2, #255	; 0xff
 800777e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007782:	e01b      	b.n	80077bc <HAL_UART_Receive+0xd2>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	227f      	movs	r2, #127	; 0x7f
 8007788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800778c:	e016      	b.n	80077bc <HAL_UART_Receive+0xd2>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007796:	d10d      	bne.n	80077b4 <HAL_UART_Receive+0xca>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <HAL_UART_Receive+0xc0>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	227f      	movs	r2, #127	; 0x7f
 80077a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077a8:	e008      	b.n	80077bc <HAL_UART_Receive+0xd2>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	223f      	movs	r2, #63	; 0x3f
 80077ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077b2:	e003      	b.n	80077bc <HAL_UART_Receive+0xd2>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077cc:	d108      	bne.n	80077e0 <HAL_UART_Receive+0xf6>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	e003      	b.n	80077e8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80077e8:	e032      	b.n	8007850 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2200      	movs	r2, #0
 80077f2:	2120      	movs	r1, #32
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fb90 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e032      	b.n	800786a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10c      	bne.n	8007824 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	b29a      	uxth	r2, r3
 8007812:	8a7b      	ldrh	r3, [r7, #18]
 8007814:	4013      	ands	r3, r2
 8007816:	b29a      	uxth	r2, r3
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	3302      	adds	r3, #2
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	e00c      	b.n	800783e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	b2da      	uxtb	r2, r3
 800782c:	8a7b      	ldrh	r3, [r7, #18]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	4013      	ands	r3, r2
 8007832:	b2da      	uxtb	r2, r3
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	3301      	adds	r3, #1
 800783c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1c6      	bne.n	80077ea <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	e000      	b.n	800786a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007868:	2302      	movs	r3, #2
  }
}
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4ba6      	ldr	r3, [pc, #664]	; (8007b38 <UART_SetConfig+0x2c4>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	6979      	ldr	r1, [r7, #20]
 80078a8:	430b      	orrs	r3, r1
 80078aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a94      	ldr	r2, [pc, #592]	; (8007b3c <UART_SetConfig+0x2c8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d120      	bne.n	8007932 <UART_SetConfig+0xbe>
 80078f0:	4b93      	ldr	r3, [pc, #588]	; (8007b40 <UART_SetConfig+0x2cc>)
 80078f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d816      	bhi.n	800792c <UART_SetConfig+0xb8>
 80078fe:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <UART_SetConfig+0x90>)
 8007900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007904:	08007915 	.word	0x08007915
 8007908:	08007921 	.word	0x08007921
 800790c:	0800791b 	.word	0x0800791b
 8007910:	08007927 	.word	0x08007927
 8007914:	2301      	movs	r3, #1
 8007916:	77fb      	strb	r3, [r7, #31]
 8007918:	e150      	b.n	8007bbc <UART_SetConfig+0x348>
 800791a:	2302      	movs	r3, #2
 800791c:	77fb      	strb	r3, [r7, #31]
 800791e:	e14d      	b.n	8007bbc <UART_SetConfig+0x348>
 8007920:	2304      	movs	r3, #4
 8007922:	77fb      	strb	r3, [r7, #31]
 8007924:	e14a      	b.n	8007bbc <UART_SetConfig+0x348>
 8007926:	2308      	movs	r3, #8
 8007928:	77fb      	strb	r3, [r7, #31]
 800792a:	e147      	b.n	8007bbc <UART_SetConfig+0x348>
 800792c:	2310      	movs	r3, #16
 800792e:	77fb      	strb	r3, [r7, #31]
 8007930:	e144      	b.n	8007bbc <UART_SetConfig+0x348>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a83      	ldr	r2, [pc, #524]	; (8007b44 <UART_SetConfig+0x2d0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d132      	bne.n	80079a2 <UART_SetConfig+0x12e>
 800793c:	4b80      	ldr	r3, [pc, #512]	; (8007b40 <UART_SetConfig+0x2cc>)
 800793e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007942:	f003 030c 	and.w	r3, r3, #12
 8007946:	2b0c      	cmp	r3, #12
 8007948:	d828      	bhi.n	800799c <UART_SetConfig+0x128>
 800794a:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <UART_SetConfig+0xdc>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	08007985 	.word	0x08007985
 8007954:	0800799d 	.word	0x0800799d
 8007958:	0800799d 	.word	0x0800799d
 800795c:	0800799d 	.word	0x0800799d
 8007960:	08007991 	.word	0x08007991
 8007964:	0800799d 	.word	0x0800799d
 8007968:	0800799d 	.word	0x0800799d
 800796c:	0800799d 	.word	0x0800799d
 8007970:	0800798b 	.word	0x0800798b
 8007974:	0800799d 	.word	0x0800799d
 8007978:	0800799d 	.word	0x0800799d
 800797c:	0800799d 	.word	0x0800799d
 8007980:	08007997 	.word	0x08007997
 8007984:	2300      	movs	r3, #0
 8007986:	77fb      	strb	r3, [r7, #31]
 8007988:	e118      	b.n	8007bbc <UART_SetConfig+0x348>
 800798a:	2302      	movs	r3, #2
 800798c:	77fb      	strb	r3, [r7, #31]
 800798e:	e115      	b.n	8007bbc <UART_SetConfig+0x348>
 8007990:	2304      	movs	r3, #4
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e112      	b.n	8007bbc <UART_SetConfig+0x348>
 8007996:	2308      	movs	r3, #8
 8007998:	77fb      	strb	r3, [r7, #31]
 800799a:	e10f      	b.n	8007bbc <UART_SetConfig+0x348>
 800799c:	2310      	movs	r3, #16
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e10c      	b.n	8007bbc <UART_SetConfig+0x348>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a68      	ldr	r2, [pc, #416]	; (8007b48 <UART_SetConfig+0x2d4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d120      	bne.n	80079ee <UART_SetConfig+0x17a>
 80079ac:	4b64      	ldr	r3, [pc, #400]	; (8007b40 <UART_SetConfig+0x2cc>)
 80079ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079b6:	2b30      	cmp	r3, #48	; 0x30
 80079b8:	d013      	beq.n	80079e2 <UART_SetConfig+0x16e>
 80079ba:	2b30      	cmp	r3, #48	; 0x30
 80079bc:	d814      	bhi.n	80079e8 <UART_SetConfig+0x174>
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d009      	beq.n	80079d6 <UART_SetConfig+0x162>
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	d810      	bhi.n	80079e8 <UART_SetConfig+0x174>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <UART_SetConfig+0x15c>
 80079ca:	2b10      	cmp	r3, #16
 80079cc:	d006      	beq.n	80079dc <UART_SetConfig+0x168>
 80079ce:	e00b      	b.n	80079e8 <UART_SetConfig+0x174>
 80079d0:	2300      	movs	r3, #0
 80079d2:	77fb      	strb	r3, [r7, #31]
 80079d4:	e0f2      	b.n	8007bbc <UART_SetConfig+0x348>
 80079d6:	2302      	movs	r3, #2
 80079d8:	77fb      	strb	r3, [r7, #31]
 80079da:	e0ef      	b.n	8007bbc <UART_SetConfig+0x348>
 80079dc:	2304      	movs	r3, #4
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e0ec      	b.n	8007bbc <UART_SetConfig+0x348>
 80079e2:	2308      	movs	r3, #8
 80079e4:	77fb      	strb	r3, [r7, #31]
 80079e6:	e0e9      	b.n	8007bbc <UART_SetConfig+0x348>
 80079e8:	2310      	movs	r3, #16
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	e0e6      	b.n	8007bbc <UART_SetConfig+0x348>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a56      	ldr	r2, [pc, #344]	; (8007b4c <UART_SetConfig+0x2d8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d120      	bne.n	8007a3a <UART_SetConfig+0x1c6>
 80079f8:	4b51      	ldr	r3, [pc, #324]	; (8007b40 <UART_SetConfig+0x2cc>)
 80079fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a02:	2bc0      	cmp	r3, #192	; 0xc0
 8007a04:	d013      	beq.n	8007a2e <UART_SetConfig+0x1ba>
 8007a06:	2bc0      	cmp	r3, #192	; 0xc0
 8007a08:	d814      	bhi.n	8007a34 <UART_SetConfig+0x1c0>
 8007a0a:	2b80      	cmp	r3, #128	; 0x80
 8007a0c:	d009      	beq.n	8007a22 <UART_SetConfig+0x1ae>
 8007a0e:	2b80      	cmp	r3, #128	; 0x80
 8007a10:	d810      	bhi.n	8007a34 <UART_SetConfig+0x1c0>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <UART_SetConfig+0x1a8>
 8007a16:	2b40      	cmp	r3, #64	; 0x40
 8007a18:	d006      	beq.n	8007a28 <UART_SetConfig+0x1b4>
 8007a1a:	e00b      	b.n	8007a34 <UART_SetConfig+0x1c0>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e0cc      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a22:	2302      	movs	r3, #2
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e0c9      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a28:	2304      	movs	r3, #4
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e0c6      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a2e:	2308      	movs	r3, #8
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e0c3      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a34:	2310      	movs	r3, #16
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e0c0      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a44      	ldr	r2, [pc, #272]	; (8007b50 <UART_SetConfig+0x2dc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d125      	bne.n	8007a90 <UART_SetConfig+0x21c>
 8007a44:	4b3e      	ldr	r3, [pc, #248]	; (8007b40 <UART_SetConfig+0x2cc>)
 8007a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a52:	d017      	beq.n	8007a84 <UART_SetConfig+0x210>
 8007a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a58:	d817      	bhi.n	8007a8a <UART_SetConfig+0x216>
 8007a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a5e:	d00b      	beq.n	8007a78 <UART_SetConfig+0x204>
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a64:	d811      	bhi.n	8007a8a <UART_SetConfig+0x216>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <UART_SetConfig+0x1fe>
 8007a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6e:	d006      	beq.n	8007a7e <UART_SetConfig+0x20a>
 8007a70:	e00b      	b.n	8007a8a <UART_SetConfig+0x216>
 8007a72:	2300      	movs	r3, #0
 8007a74:	77fb      	strb	r3, [r7, #31]
 8007a76:	e0a1      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	77fb      	strb	r3, [r7, #31]
 8007a7c:	e09e      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a7e:	2304      	movs	r3, #4
 8007a80:	77fb      	strb	r3, [r7, #31]
 8007a82:	e09b      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a84:	2308      	movs	r3, #8
 8007a86:	77fb      	strb	r3, [r7, #31]
 8007a88:	e098      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a8a:	2310      	movs	r3, #16
 8007a8c:	77fb      	strb	r3, [r7, #31]
 8007a8e:	e095      	b.n	8007bbc <UART_SetConfig+0x348>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a2f      	ldr	r2, [pc, #188]	; (8007b54 <UART_SetConfig+0x2e0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d125      	bne.n	8007ae6 <UART_SetConfig+0x272>
 8007a9a:	4b29      	ldr	r3, [pc, #164]	; (8007b40 <UART_SetConfig+0x2cc>)
 8007a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007aa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007aa8:	d017      	beq.n	8007ada <UART_SetConfig+0x266>
 8007aaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007aae:	d817      	bhi.n	8007ae0 <UART_SetConfig+0x26c>
 8007ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab4:	d00b      	beq.n	8007ace <UART_SetConfig+0x25a>
 8007ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aba:	d811      	bhi.n	8007ae0 <UART_SetConfig+0x26c>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <UART_SetConfig+0x254>
 8007ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac4:	d006      	beq.n	8007ad4 <UART_SetConfig+0x260>
 8007ac6:	e00b      	b.n	8007ae0 <UART_SetConfig+0x26c>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	77fb      	strb	r3, [r7, #31]
 8007acc:	e076      	b.n	8007bbc <UART_SetConfig+0x348>
 8007ace:	2302      	movs	r3, #2
 8007ad0:	77fb      	strb	r3, [r7, #31]
 8007ad2:	e073      	b.n	8007bbc <UART_SetConfig+0x348>
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	77fb      	strb	r3, [r7, #31]
 8007ad8:	e070      	b.n	8007bbc <UART_SetConfig+0x348>
 8007ada:	2308      	movs	r3, #8
 8007adc:	77fb      	strb	r3, [r7, #31]
 8007ade:	e06d      	b.n	8007bbc <UART_SetConfig+0x348>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	77fb      	strb	r3, [r7, #31]
 8007ae4:	e06a      	b.n	8007bbc <UART_SetConfig+0x348>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1b      	ldr	r2, [pc, #108]	; (8007b58 <UART_SetConfig+0x2e4>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d138      	bne.n	8007b62 <UART_SetConfig+0x2ee>
 8007af0:	4b13      	ldr	r3, [pc, #76]	; (8007b40 <UART_SetConfig+0x2cc>)
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007afa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007afe:	d017      	beq.n	8007b30 <UART_SetConfig+0x2bc>
 8007b00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b04:	d82a      	bhi.n	8007b5c <UART_SetConfig+0x2e8>
 8007b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b0a:	d00b      	beq.n	8007b24 <UART_SetConfig+0x2b0>
 8007b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b10:	d824      	bhi.n	8007b5c <UART_SetConfig+0x2e8>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <UART_SetConfig+0x2aa>
 8007b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b1a:	d006      	beq.n	8007b2a <UART_SetConfig+0x2b6>
 8007b1c:	e01e      	b.n	8007b5c <UART_SetConfig+0x2e8>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	77fb      	strb	r3, [r7, #31]
 8007b22:	e04b      	b.n	8007bbc <UART_SetConfig+0x348>
 8007b24:	2302      	movs	r3, #2
 8007b26:	77fb      	strb	r3, [r7, #31]
 8007b28:	e048      	b.n	8007bbc <UART_SetConfig+0x348>
 8007b2a:	2304      	movs	r3, #4
 8007b2c:	77fb      	strb	r3, [r7, #31]
 8007b2e:	e045      	b.n	8007bbc <UART_SetConfig+0x348>
 8007b30:	2308      	movs	r3, #8
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	e042      	b.n	8007bbc <UART_SetConfig+0x348>
 8007b36:	bf00      	nop
 8007b38:	efff69f3 	.word	0xefff69f3
 8007b3c:	40011000 	.word	0x40011000
 8007b40:	40023800 	.word	0x40023800
 8007b44:	40004400 	.word	0x40004400
 8007b48:	40004800 	.word	0x40004800
 8007b4c:	40004c00 	.word	0x40004c00
 8007b50:	40005000 	.word	0x40005000
 8007b54:	40011400 	.word	0x40011400
 8007b58:	40007800 	.word	0x40007800
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	77fb      	strb	r3, [r7, #31]
 8007b60:	e02c      	b.n	8007bbc <UART_SetConfig+0x348>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a72      	ldr	r2, [pc, #456]	; (8007d30 <UART_SetConfig+0x4bc>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d125      	bne.n	8007bb8 <UART_SetConfig+0x344>
 8007b6c:	4b71      	ldr	r3, [pc, #452]	; (8007d34 <UART_SetConfig+0x4c0>)
 8007b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b7a:	d017      	beq.n	8007bac <UART_SetConfig+0x338>
 8007b7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b80:	d817      	bhi.n	8007bb2 <UART_SetConfig+0x33e>
 8007b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b86:	d00b      	beq.n	8007ba0 <UART_SetConfig+0x32c>
 8007b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8c:	d811      	bhi.n	8007bb2 <UART_SetConfig+0x33e>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <UART_SetConfig+0x326>
 8007b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b96:	d006      	beq.n	8007ba6 <UART_SetConfig+0x332>
 8007b98:	e00b      	b.n	8007bb2 <UART_SetConfig+0x33e>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	77fb      	strb	r3, [r7, #31]
 8007b9e:	e00d      	b.n	8007bbc <UART_SetConfig+0x348>
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	77fb      	strb	r3, [r7, #31]
 8007ba4:	e00a      	b.n	8007bbc <UART_SetConfig+0x348>
 8007ba6:	2304      	movs	r3, #4
 8007ba8:	77fb      	strb	r3, [r7, #31]
 8007baa:	e007      	b.n	8007bbc <UART_SetConfig+0x348>
 8007bac:	2308      	movs	r3, #8
 8007bae:	77fb      	strb	r3, [r7, #31]
 8007bb0:	e004      	b.n	8007bbc <UART_SetConfig+0x348>
 8007bb2:	2310      	movs	r3, #16
 8007bb4:	77fb      	strb	r3, [r7, #31]
 8007bb6:	e001      	b.n	8007bbc <UART_SetConfig+0x348>
 8007bb8:	2310      	movs	r3, #16
 8007bba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc4:	d15b      	bne.n	8007c7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007bc6:	7ffb      	ldrb	r3, [r7, #31]
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d828      	bhi.n	8007c1e <UART_SetConfig+0x3aa>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <UART_SetConfig+0x360>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007bf9 	.word	0x08007bf9
 8007bd8:	08007c01 	.word	0x08007c01
 8007bdc:	08007c09 	.word	0x08007c09
 8007be0:	08007c1f 	.word	0x08007c1f
 8007be4:	08007c0f 	.word	0x08007c0f
 8007be8:	08007c1f 	.word	0x08007c1f
 8007bec:	08007c1f 	.word	0x08007c1f
 8007bf0:	08007c1f 	.word	0x08007c1f
 8007bf4:	08007c17 	.word	0x08007c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf8:	f7fd f946 	bl	8004e88 <HAL_RCC_GetPCLK1Freq>
 8007bfc:	61b8      	str	r0, [r7, #24]
        break;
 8007bfe:	e013      	b.n	8007c28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c00:	f7fd f956 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 8007c04:	61b8      	str	r0, [r7, #24]
        break;
 8007c06:	e00f      	b.n	8007c28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c08:	4b4b      	ldr	r3, [pc, #300]	; (8007d38 <UART_SetConfig+0x4c4>)
 8007c0a:	61bb      	str	r3, [r7, #24]
        break;
 8007c0c:	e00c      	b.n	8007c28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c0e:	f7fd f829 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8007c12:	61b8      	str	r0, [r7, #24]
        break;
 8007c14:	e008      	b.n	8007c28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c1a:	61bb      	str	r3, [r7, #24]
        break;
 8007c1c:	e004      	b.n	8007c28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	77bb      	strb	r3, [r7, #30]
        break;
 8007c26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d074      	beq.n	8007d18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	005a      	lsls	r2, r3, #1
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	085b      	lsrs	r3, r3, #1
 8007c38:	441a      	add	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d916      	bls.n	8007c78 <UART_SetConfig+0x404>
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c50:	d212      	bcs.n	8007c78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f023 030f 	bic.w	r3, r3, #15
 8007c5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	085b      	lsrs	r3, r3, #1
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	89fb      	ldrh	r3, [r7, #14]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	89fa      	ldrh	r2, [r7, #14]
 8007c74:	60da      	str	r2, [r3, #12]
 8007c76:	e04f      	b.n	8007d18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	77bb      	strb	r3, [r7, #30]
 8007c7c:	e04c      	b.n	8007d18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c7e:	7ffb      	ldrb	r3, [r7, #31]
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d828      	bhi.n	8007cd6 <UART_SetConfig+0x462>
 8007c84:	a201      	add	r2, pc, #4	; (adr r2, 8007c8c <UART_SetConfig+0x418>)
 8007c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8a:	bf00      	nop
 8007c8c:	08007cb1 	.word	0x08007cb1
 8007c90:	08007cb9 	.word	0x08007cb9
 8007c94:	08007cc1 	.word	0x08007cc1
 8007c98:	08007cd7 	.word	0x08007cd7
 8007c9c:	08007cc7 	.word	0x08007cc7
 8007ca0:	08007cd7 	.word	0x08007cd7
 8007ca4:	08007cd7 	.word	0x08007cd7
 8007ca8:	08007cd7 	.word	0x08007cd7
 8007cac:	08007ccf 	.word	0x08007ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cb0:	f7fd f8ea 	bl	8004e88 <HAL_RCC_GetPCLK1Freq>
 8007cb4:	61b8      	str	r0, [r7, #24]
        break;
 8007cb6:	e013      	b.n	8007ce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cb8:	f7fd f8fa 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 8007cbc:	61b8      	str	r0, [r7, #24]
        break;
 8007cbe:	e00f      	b.n	8007ce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cc0:	4b1d      	ldr	r3, [pc, #116]	; (8007d38 <UART_SetConfig+0x4c4>)
 8007cc2:	61bb      	str	r3, [r7, #24]
        break;
 8007cc4:	e00c      	b.n	8007ce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cc6:	f7fc ffcd 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8007cca:	61b8      	str	r0, [r7, #24]
        break;
 8007ccc:	e008      	b.n	8007ce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cd2:	61bb      	str	r3, [r7, #24]
        break;
 8007cd4:	e004      	b.n	8007ce0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8007cde:	bf00      	nop
    }

    if (pclk != 0U)
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d018      	beq.n	8007d18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	085a      	lsrs	r2, r3, #1
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	441a      	add	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b0f      	cmp	r3, #15
 8007cfe:	d909      	bls.n	8007d14 <UART_SetConfig+0x4a0>
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d06:	d205      	bcs.n	8007d14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	e001      	b.n	8007d18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d24:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3720      	adds	r7, #32
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40007c00 	.word	0x40007c00
 8007d34:	40023800 	.word	0x40023800
 8007d38:	00f42400 	.word	0x00f42400

08007d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	f003 0310 	and.w	r3, r3, #16
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	f003 0320 	and.w	r3, r3, #32
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01a      	beq.n	8007e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e3a:	d10a      	bne.n	8007e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	605a      	str	r2, [r3, #4]
  }
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af02      	add	r7, sp, #8
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e90:	f7fa ff62 	bl	8002d58 <HAL_GetTick>
 8007e94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d10e      	bne.n	8007ec2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f831 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e027      	b.n	8007f12 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d10e      	bne.n	8007eee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f81b 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e011      	b.n	8007f12 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b09c      	sub	sp, #112	; 0x70
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	4613      	mov	r3, r2
 8007f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f2a:	e0a7      	b.n	800807c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	f000 80a3 	beq.w	800807c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f36:	f7fa ff0f 	bl	8002d58 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d302      	bcc.n	8007f4c <UART_WaitOnFlagUntilTimeout+0x32>
 8007f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d13f      	bne.n	8007fcc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f60:	667b      	str	r3, [r7, #100]	; 0x64
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e6      	bne.n	8007f4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3308      	adds	r3, #8
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	f023 0301 	bic.w	r3, r3, #1
 8007f94:	663b      	str	r3, [r7, #96]	; 0x60
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fa0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e5      	bne.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e068      	b.n	800809e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d050      	beq.n	800807c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe8:	d148      	bne.n	800807c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ff2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008008:	66fb      	str	r3, [r7, #108]	; 0x6c
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008012:	637b      	str	r3, [r7, #52]	; 0x34
 8008014:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e6      	bne.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3308      	adds	r3, #8
 800802c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	613b      	str	r3, [r7, #16]
   return(result);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f023 0301 	bic.w	r3, r3, #1
 800803c:	66bb      	str	r3, [r7, #104]	; 0x68
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3308      	adds	r3, #8
 8008044:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008046:	623a      	str	r2, [r7, #32]
 8008048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	69f9      	ldr	r1, [r7, #28]
 800804c:	6a3a      	ldr	r2, [r7, #32]
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	61bb      	str	r3, [r7, #24]
   return(result);
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e5      	bne.n	8008026 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2220      	movs	r2, #32
 8008064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2220      	movs	r2, #32
 800806c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e010      	b.n	800809e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69da      	ldr	r2, [r3, #28]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4013      	ands	r3, r2
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	429a      	cmp	r2, r3
 800808a:	bf0c      	ite	eq
 800808c:	2301      	moveq	r3, #1
 800808e:	2300      	movne	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	461a      	mov	r2, r3
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	429a      	cmp	r2, r3
 8008098:	f43f af48 	beq.w	8007f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3770      	adds	r7, #112	; 0x70
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <__errno>:
 80080a8:	4b01      	ldr	r3, [pc, #4]	; (80080b0 <__errno+0x8>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20000014 	.word	0x20000014

080080b4 <__libc_init_array>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	4d0d      	ldr	r5, [pc, #52]	; (80080ec <__libc_init_array+0x38>)
 80080b8:	4c0d      	ldr	r4, [pc, #52]	; (80080f0 <__libc_init_array+0x3c>)
 80080ba:	1b64      	subs	r4, r4, r5
 80080bc:	10a4      	asrs	r4, r4, #2
 80080be:	2600      	movs	r6, #0
 80080c0:	42a6      	cmp	r6, r4
 80080c2:	d109      	bne.n	80080d8 <__libc_init_array+0x24>
 80080c4:	4d0b      	ldr	r5, [pc, #44]	; (80080f4 <__libc_init_array+0x40>)
 80080c6:	4c0c      	ldr	r4, [pc, #48]	; (80080f8 <__libc_init_array+0x44>)
 80080c8:	f000 ffbc 	bl	8009044 <_init>
 80080cc:	1b64      	subs	r4, r4, r5
 80080ce:	10a4      	asrs	r4, r4, #2
 80080d0:	2600      	movs	r6, #0
 80080d2:	42a6      	cmp	r6, r4
 80080d4:	d105      	bne.n	80080e2 <__libc_init_array+0x2e>
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080dc:	4798      	blx	r3
 80080de:	3601      	adds	r6, #1
 80080e0:	e7ee      	b.n	80080c0 <__libc_init_array+0xc>
 80080e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e6:	4798      	blx	r3
 80080e8:	3601      	adds	r6, #1
 80080ea:	e7f2      	b.n	80080d2 <__libc_init_array+0x1e>
 80080ec:	08009148 	.word	0x08009148
 80080f0:	08009148 	.word	0x08009148
 80080f4:	08009148 	.word	0x08009148
 80080f8:	0800914c 	.word	0x0800914c

080080fc <memcpy>:
 80080fc:	440a      	add	r2, r1
 80080fe:	4291      	cmp	r1, r2
 8008100:	f100 33ff 	add.w	r3, r0, #4294967295
 8008104:	d100      	bne.n	8008108 <memcpy+0xc>
 8008106:	4770      	bx	lr
 8008108:	b510      	push	{r4, lr}
 800810a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800810e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008112:	4291      	cmp	r1, r2
 8008114:	d1f9      	bne.n	800810a <memcpy+0xe>
 8008116:	bd10      	pop	{r4, pc}

08008118 <memset>:
 8008118:	4402      	add	r2, r0
 800811a:	4603      	mov	r3, r0
 800811c:	4293      	cmp	r3, r2
 800811e:	d100      	bne.n	8008122 <memset+0xa>
 8008120:	4770      	bx	lr
 8008122:	f803 1b01 	strb.w	r1, [r3], #1
 8008126:	e7f9      	b.n	800811c <memset+0x4>

08008128 <iprintf>:
 8008128:	b40f      	push	{r0, r1, r2, r3}
 800812a:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <iprintf+0x2c>)
 800812c:	b513      	push	{r0, r1, r4, lr}
 800812e:	681c      	ldr	r4, [r3, #0]
 8008130:	b124      	cbz	r4, 800813c <iprintf+0x14>
 8008132:	69a3      	ldr	r3, [r4, #24]
 8008134:	b913      	cbnz	r3, 800813c <iprintf+0x14>
 8008136:	4620      	mov	r0, r4
 8008138:	f000 f866 	bl	8008208 <__sinit>
 800813c:	ab05      	add	r3, sp, #20
 800813e:	9a04      	ldr	r2, [sp, #16]
 8008140:	68a1      	ldr	r1, [r4, #8]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	4620      	mov	r0, r4
 8008146:	f000 f9bd 	bl	80084c4 <_vfiprintf_r>
 800814a:	b002      	add	sp, #8
 800814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008150:	b004      	add	sp, #16
 8008152:	4770      	bx	lr
 8008154:	20000014 	.word	0x20000014

08008158 <std>:
 8008158:	2300      	movs	r3, #0
 800815a:	b510      	push	{r4, lr}
 800815c:	4604      	mov	r4, r0
 800815e:	e9c0 3300 	strd	r3, r3, [r0]
 8008162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008166:	6083      	str	r3, [r0, #8]
 8008168:	8181      	strh	r1, [r0, #12]
 800816a:	6643      	str	r3, [r0, #100]	; 0x64
 800816c:	81c2      	strh	r2, [r0, #14]
 800816e:	6183      	str	r3, [r0, #24]
 8008170:	4619      	mov	r1, r3
 8008172:	2208      	movs	r2, #8
 8008174:	305c      	adds	r0, #92	; 0x5c
 8008176:	f7ff ffcf 	bl	8008118 <memset>
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <std+0x38>)
 800817c:	6263      	str	r3, [r4, #36]	; 0x24
 800817e:	4b05      	ldr	r3, [pc, #20]	; (8008194 <std+0x3c>)
 8008180:	62a3      	str	r3, [r4, #40]	; 0x28
 8008182:	4b05      	ldr	r3, [pc, #20]	; (8008198 <std+0x40>)
 8008184:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008186:	4b05      	ldr	r3, [pc, #20]	; (800819c <std+0x44>)
 8008188:	6224      	str	r4, [r4, #32]
 800818a:	6323      	str	r3, [r4, #48]	; 0x30
 800818c:	bd10      	pop	{r4, pc}
 800818e:	bf00      	nop
 8008190:	08008a6d 	.word	0x08008a6d
 8008194:	08008a8f 	.word	0x08008a8f
 8008198:	08008ac7 	.word	0x08008ac7
 800819c:	08008aeb 	.word	0x08008aeb

080081a0 <_cleanup_r>:
 80081a0:	4901      	ldr	r1, [pc, #4]	; (80081a8 <_cleanup_r+0x8>)
 80081a2:	f000 b8af 	b.w	8008304 <_fwalk_reent>
 80081a6:	bf00      	nop
 80081a8:	08008dc5 	.word	0x08008dc5

080081ac <__sfmoreglue>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	2268      	movs	r2, #104	; 0x68
 80081b0:	1e4d      	subs	r5, r1, #1
 80081b2:	4355      	muls	r5, r2
 80081b4:	460e      	mov	r6, r1
 80081b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081ba:	f000 f8e5 	bl	8008388 <_malloc_r>
 80081be:	4604      	mov	r4, r0
 80081c0:	b140      	cbz	r0, 80081d4 <__sfmoreglue+0x28>
 80081c2:	2100      	movs	r1, #0
 80081c4:	e9c0 1600 	strd	r1, r6, [r0]
 80081c8:	300c      	adds	r0, #12
 80081ca:	60a0      	str	r0, [r4, #8]
 80081cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081d0:	f7ff ffa2 	bl	8008118 <memset>
 80081d4:	4620      	mov	r0, r4
 80081d6:	bd70      	pop	{r4, r5, r6, pc}

080081d8 <__sfp_lock_acquire>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__sfp_lock_acquire+0x8>)
 80081da:	f000 b8b3 	b.w	8008344 <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	20000811 	.word	0x20000811

080081e4 <__sfp_lock_release>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__sfp_lock_release+0x8>)
 80081e6:	f000 b8ae 	b.w	8008346 <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	20000811 	.word	0x20000811

080081f0 <__sinit_lock_acquire>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__sinit_lock_acquire+0x8>)
 80081f2:	f000 b8a7 	b.w	8008344 <__retarget_lock_acquire_recursive>
 80081f6:	bf00      	nop
 80081f8:	20000812 	.word	0x20000812

080081fc <__sinit_lock_release>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__sinit_lock_release+0x8>)
 80081fe:	f000 b8a2 	b.w	8008346 <__retarget_lock_release_recursive>
 8008202:	bf00      	nop
 8008204:	20000812 	.word	0x20000812

08008208 <__sinit>:
 8008208:	b510      	push	{r4, lr}
 800820a:	4604      	mov	r4, r0
 800820c:	f7ff fff0 	bl	80081f0 <__sinit_lock_acquire>
 8008210:	69a3      	ldr	r3, [r4, #24]
 8008212:	b11b      	cbz	r3, 800821c <__sinit+0x14>
 8008214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008218:	f7ff bff0 	b.w	80081fc <__sinit_lock_release>
 800821c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008220:	6523      	str	r3, [r4, #80]	; 0x50
 8008222:	4b13      	ldr	r3, [pc, #76]	; (8008270 <__sinit+0x68>)
 8008224:	4a13      	ldr	r2, [pc, #76]	; (8008274 <__sinit+0x6c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	62a2      	str	r2, [r4, #40]	; 0x28
 800822a:	42a3      	cmp	r3, r4
 800822c:	bf04      	itt	eq
 800822e:	2301      	moveq	r3, #1
 8008230:	61a3      	streq	r3, [r4, #24]
 8008232:	4620      	mov	r0, r4
 8008234:	f000 f820 	bl	8008278 <__sfp>
 8008238:	6060      	str	r0, [r4, #4]
 800823a:	4620      	mov	r0, r4
 800823c:	f000 f81c 	bl	8008278 <__sfp>
 8008240:	60a0      	str	r0, [r4, #8]
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f818 	bl	8008278 <__sfp>
 8008248:	2200      	movs	r2, #0
 800824a:	60e0      	str	r0, [r4, #12]
 800824c:	2104      	movs	r1, #4
 800824e:	6860      	ldr	r0, [r4, #4]
 8008250:	f7ff ff82 	bl	8008158 <std>
 8008254:	68a0      	ldr	r0, [r4, #8]
 8008256:	2201      	movs	r2, #1
 8008258:	2109      	movs	r1, #9
 800825a:	f7ff ff7d 	bl	8008158 <std>
 800825e:	68e0      	ldr	r0, [r4, #12]
 8008260:	2202      	movs	r2, #2
 8008262:	2112      	movs	r1, #18
 8008264:	f7ff ff78 	bl	8008158 <std>
 8008268:	2301      	movs	r3, #1
 800826a:	61a3      	str	r3, [r4, #24]
 800826c:	e7d2      	b.n	8008214 <__sinit+0xc>
 800826e:	bf00      	nop
 8008270:	080090a8 	.word	0x080090a8
 8008274:	080081a1 	.word	0x080081a1

08008278 <__sfp>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	4607      	mov	r7, r0
 800827c:	f7ff ffac 	bl	80081d8 <__sfp_lock_acquire>
 8008280:	4b1e      	ldr	r3, [pc, #120]	; (80082fc <__sfp+0x84>)
 8008282:	681e      	ldr	r6, [r3, #0]
 8008284:	69b3      	ldr	r3, [r6, #24]
 8008286:	b913      	cbnz	r3, 800828e <__sfp+0x16>
 8008288:	4630      	mov	r0, r6
 800828a:	f7ff ffbd 	bl	8008208 <__sinit>
 800828e:	3648      	adds	r6, #72	; 0x48
 8008290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008294:	3b01      	subs	r3, #1
 8008296:	d503      	bpl.n	80082a0 <__sfp+0x28>
 8008298:	6833      	ldr	r3, [r6, #0]
 800829a:	b30b      	cbz	r3, 80082e0 <__sfp+0x68>
 800829c:	6836      	ldr	r6, [r6, #0]
 800829e:	e7f7      	b.n	8008290 <__sfp+0x18>
 80082a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082a4:	b9d5      	cbnz	r5, 80082dc <__sfp+0x64>
 80082a6:	4b16      	ldr	r3, [pc, #88]	; (8008300 <__sfp+0x88>)
 80082a8:	60e3      	str	r3, [r4, #12]
 80082aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082ae:	6665      	str	r5, [r4, #100]	; 0x64
 80082b0:	f000 f847 	bl	8008342 <__retarget_lock_init_recursive>
 80082b4:	f7ff ff96 	bl	80081e4 <__sfp_lock_release>
 80082b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082c0:	6025      	str	r5, [r4, #0]
 80082c2:	61a5      	str	r5, [r4, #24]
 80082c4:	2208      	movs	r2, #8
 80082c6:	4629      	mov	r1, r5
 80082c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082cc:	f7ff ff24 	bl	8008118 <memset>
 80082d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082d8:	4620      	mov	r0, r4
 80082da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082dc:	3468      	adds	r4, #104	; 0x68
 80082de:	e7d9      	b.n	8008294 <__sfp+0x1c>
 80082e0:	2104      	movs	r1, #4
 80082e2:	4638      	mov	r0, r7
 80082e4:	f7ff ff62 	bl	80081ac <__sfmoreglue>
 80082e8:	4604      	mov	r4, r0
 80082ea:	6030      	str	r0, [r6, #0]
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d1d5      	bne.n	800829c <__sfp+0x24>
 80082f0:	f7ff ff78 	bl	80081e4 <__sfp_lock_release>
 80082f4:	230c      	movs	r3, #12
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	e7ee      	b.n	80082d8 <__sfp+0x60>
 80082fa:	bf00      	nop
 80082fc:	080090a8 	.word	0x080090a8
 8008300:	ffff0001 	.word	0xffff0001

08008304 <_fwalk_reent>:
 8008304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008308:	4606      	mov	r6, r0
 800830a:	4688      	mov	r8, r1
 800830c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008310:	2700      	movs	r7, #0
 8008312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008316:	f1b9 0901 	subs.w	r9, r9, #1
 800831a:	d505      	bpl.n	8008328 <_fwalk_reent+0x24>
 800831c:	6824      	ldr	r4, [r4, #0]
 800831e:	2c00      	cmp	r4, #0
 8008320:	d1f7      	bne.n	8008312 <_fwalk_reent+0xe>
 8008322:	4638      	mov	r0, r7
 8008324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008328:	89ab      	ldrh	r3, [r5, #12]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d907      	bls.n	800833e <_fwalk_reent+0x3a>
 800832e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008332:	3301      	adds	r3, #1
 8008334:	d003      	beq.n	800833e <_fwalk_reent+0x3a>
 8008336:	4629      	mov	r1, r5
 8008338:	4630      	mov	r0, r6
 800833a:	47c0      	blx	r8
 800833c:	4307      	orrs	r7, r0
 800833e:	3568      	adds	r5, #104	; 0x68
 8008340:	e7e9      	b.n	8008316 <_fwalk_reent+0x12>

08008342 <__retarget_lock_init_recursive>:
 8008342:	4770      	bx	lr

08008344 <__retarget_lock_acquire_recursive>:
 8008344:	4770      	bx	lr

08008346 <__retarget_lock_release_recursive>:
 8008346:	4770      	bx	lr

08008348 <sbrk_aligned>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	4e0e      	ldr	r6, [pc, #56]	; (8008384 <sbrk_aligned+0x3c>)
 800834c:	460c      	mov	r4, r1
 800834e:	6831      	ldr	r1, [r6, #0]
 8008350:	4605      	mov	r5, r0
 8008352:	b911      	cbnz	r1, 800835a <sbrk_aligned+0x12>
 8008354:	f000 fb7a 	bl	8008a4c <_sbrk_r>
 8008358:	6030      	str	r0, [r6, #0]
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 fb75 	bl	8008a4c <_sbrk_r>
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	d00a      	beq.n	800837c <sbrk_aligned+0x34>
 8008366:	1cc4      	adds	r4, r0, #3
 8008368:	f024 0403 	bic.w	r4, r4, #3
 800836c:	42a0      	cmp	r0, r4
 800836e:	d007      	beq.n	8008380 <sbrk_aligned+0x38>
 8008370:	1a21      	subs	r1, r4, r0
 8008372:	4628      	mov	r0, r5
 8008374:	f000 fb6a 	bl	8008a4c <_sbrk_r>
 8008378:	3001      	adds	r0, #1
 800837a:	d101      	bne.n	8008380 <sbrk_aligned+0x38>
 800837c:	f04f 34ff 	mov.w	r4, #4294967295
 8008380:	4620      	mov	r0, r4
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	20000818 	.word	0x20000818

08008388 <_malloc_r>:
 8008388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838c:	1ccd      	adds	r5, r1, #3
 800838e:	f025 0503 	bic.w	r5, r5, #3
 8008392:	3508      	adds	r5, #8
 8008394:	2d0c      	cmp	r5, #12
 8008396:	bf38      	it	cc
 8008398:	250c      	movcc	r5, #12
 800839a:	2d00      	cmp	r5, #0
 800839c:	4607      	mov	r7, r0
 800839e:	db01      	blt.n	80083a4 <_malloc_r+0x1c>
 80083a0:	42a9      	cmp	r1, r5
 80083a2:	d905      	bls.n	80083b0 <_malloc_r+0x28>
 80083a4:	230c      	movs	r3, #12
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	2600      	movs	r6, #0
 80083aa:	4630      	mov	r0, r6
 80083ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b0:	4e2e      	ldr	r6, [pc, #184]	; (800846c <_malloc_r+0xe4>)
 80083b2:	f000 fdbb 	bl	8008f2c <__malloc_lock>
 80083b6:	6833      	ldr	r3, [r6, #0]
 80083b8:	461c      	mov	r4, r3
 80083ba:	bb34      	cbnz	r4, 800840a <_malloc_r+0x82>
 80083bc:	4629      	mov	r1, r5
 80083be:	4638      	mov	r0, r7
 80083c0:	f7ff ffc2 	bl	8008348 <sbrk_aligned>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	4604      	mov	r4, r0
 80083c8:	d14d      	bne.n	8008466 <_malloc_r+0xde>
 80083ca:	6834      	ldr	r4, [r6, #0]
 80083cc:	4626      	mov	r6, r4
 80083ce:	2e00      	cmp	r6, #0
 80083d0:	d140      	bne.n	8008454 <_malloc_r+0xcc>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	4631      	mov	r1, r6
 80083d6:	4638      	mov	r0, r7
 80083d8:	eb04 0803 	add.w	r8, r4, r3
 80083dc:	f000 fb36 	bl	8008a4c <_sbrk_r>
 80083e0:	4580      	cmp	r8, r0
 80083e2:	d13a      	bne.n	800845a <_malloc_r+0xd2>
 80083e4:	6821      	ldr	r1, [r4, #0]
 80083e6:	3503      	adds	r5, #3
 80083e8:	1a6d      	subs	r5, r5, r1
 80083ea:	f025 0503 	bic.w	r5, r5, #3
 80083ee:	3508      	adds	r5, #8
 80083f0:	2d0c      	cmp	r5, #12
 80083f2:	bf38      	it	cc
 80083f4:	250c      	movcc	r5, #12
 80083f6:	4629      	mov	r1, r5
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7ff ffa5 	bl	8008348 <sbrk_aligned>
 80083fe:	3001      	adds	r0, #1
 8008400:	d02b      	beq.n	800845a <_malloc_r+0xd2>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	442b      	add	r3, r5
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	e00e      	b.n	8008428 <_malloc_r+0xa0>
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	1b52      	subs	r2, r2, r5
 800840e:	d41e      	bmi.n	800844e <_malloc_r+0xc6>
 8008410:	2a0b      	cmp	r2, #11
 8008412:	d916      	bls.n	8008442 <_malloc_r+0xba>
 8008414:	1961      	adds	r1, r4, r5
 8008416:	42a3      	cmp	r3, r4
 8008418:	6025      	str	r5, [r4, #0]
 800841a:	bf18      	it	ne
 800841c:	6059      	strne	r1, [r3, #4]
 800841e:	6863      	ldr	r3, [r4, #4]
 8008420:	bf08      	it	eq
 8008422:	6031      	streq	r1, [r6, #0]
 8008424:	5162      	str	r2, [r4, r5]
 8008426:	604b      	str	r3, [r1, #4]
 8008428:	4638      	mov	r0, r7
 800842a:	f104 060b 	add.w	r6, r4, #11
 800842e:	f000 fd83 	bl	8008f38 <__malloc_unlock>
 8008432:	f026 0607 	bic.w	r6, r6, #7
 8008436:	1d23      	adds	r3, r4, #4
 8008438:	1af2      	subs	r2, r6, r3
 800843a:	d0b6      	beq.n	80083aa <_malloc_r+0x22>
 800843c:	1b9b      	subs	r3, r3, r6
 800843e:	50a3      	str	r3, [r4, r2]
 8008440:	e7b3      	b.n	80083aa <_malloc_r+0x22>
 8008442:	6862      	ldr	r2, [r4, #4]
 8008444:	42a3      	cmp	r3, r4
 8008446:	bf0c      	ite	eq
 8008448:	6032      	streq	r2, [r6, #0]
 800844a:	605a      	strne	r2, [r3, #4]
 800844c:	e7ec      	b.n	8008428 <_malloc_r+0xa0>
 800844e:	4623      	mov	r3, r4
 8008450:	6864      	ldr	r4, [r4, #4]
 8008452:	e7b2      	b.n	80083ba <_malloc_r+0x32>
 8008454:	4634      	mov	r4, r6
 8008456:	6876      	ldr	r6, [r6, #4]
 8008458:	e7b9      	b.n	80083ce <_malloc_r+0x46>
 800845a:	230c      	movs	r3, #12
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	4638      	mov	r0, r7
 8008460:	f000 fd6a 	bl	8008f38 <__malloc_unlock>
 8008464:	e7a1      	b.n	80083aa <_malloc_r+0x22>
 8008466:	6025      	str	r5, [r4, #0]
 8008468:	e7de      	b.n	8008428 <_malloc_r+0xa0>
 800846a:	bf00      	nop
 800846c:	20000814 	.word	0x20000814

08008470 <__sfputc_r>:
 8008470:	6893      	ldr	r3, [r2, #8]
 8008472:	3b01      	subs	r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	b410      	push	{r4}
 8008478:	6093      	str	r3, [r2, #8]
 800847a:	da08      	bge.n	800848e <__sfputc_r+0x1e>
 800847c:	6994      	ldr	r4, [r2, #24]
 800847e:	42a3      	cmp	r3, r4
 8008480:	db01      	blt.n	8008486 <__sfputc_r+0x16>
 8008482:	290a      	cmp	r1, #10
 8008484:	d103      	bne.n	800848e <__sfputc_r+0x1e>
 8008486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800848a:	f000 bb33 	b.w	8008af4 <__swbuf_r>
 800848e:	6813      	ldr	r3, [r2, #0]
 8008490:	1c58      	adds	r0, r3, #1
 8008492:	6010      	str	r0, [r2, #0]
 8008494:	7019      	strb	r1, [r3, #0]
 8008496:	4608      	mov	r0, r1
 8008498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800849c:	4770      	bx	lr

0800849e <__sfputs_r>:
 800849e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a0:	4606      	mov	r6, r0
 80084a2:	460f      	mov	r7, r1
 80084a4:	4614      	mov	r4, r2
 80084a6:	18d5      	adds	r5, r2, r3
 80084a8:	42ac      	cmp	r4, r5
 80084aa:	d101      	bne.n	80084b0 <__sfputs_r+0x12>
 80084ac:	2000      	movs	r0, #0
 80084ae:	e007      	b.n	80084c0 <__sfputs_r+0x22>
 80084b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b4:	463a      	mov	r2, r7
 80084b6:	4630      	mov	r0, r6
 80084b8:	f7ff ffda 	bl	8008470 <__sfputc_r>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d1f3      	bne.n	80084a8 <__sfputs_r+0xa>
 80084c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084c4 <_vfiprintf_r>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	460d      	mov	r5, r1
 80084ca:	b09d      	sub	sp, #116	; 0x74
 80084cc:	4614      	mov	r4, r2
 80084ce:	4698      	mov	r8, r3
 80084d0:	4606      	mov	r6, r0
 80084d2:	b118      	cbz	r0, 80084dc <_vfiprintf_r+0x18>
 80084d4:	6983      	ldr	r3, [r0, #24]
 80084d6:	b90b      	cbnz	r3, 80084dc <_vfiprintf_r+0x18>
 80084d8:	f7ff fe96 	bl	8008208 <__sinit>
 80084dc:	4b89      	ldr	r3, [pc, #548]	; (8008704 <_vfiprintf_r+0x240>)
 80084de:	429d      	cmp	r5, r3
 80084e0:	d11b      	bne.n	800851a <_vfiprintf_r+0x56>
 80084e2:	6875      	ldr	r5, [r6, #4]
 80084e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	d405      	bmi.n	80084f6 <_vfiprintf_r+0x32>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	059a      	lsls	r2, r3, #22
 80084ee:	d402      	bmi.n	80084f6 <_vfiprintf_r+0x32>
 80084f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f2:	f7ff ff27 	bl	8008344 <__retarget_lock_acquire_recursive>
 80084f6:	89ab      	ldrh	r3, [r5, #12]
 80084f8:	071b      	lsls	r3, r3, #28
 80084fa:	d501      	bpl.n	8008500 <_vfiprintf_r+0x3c>
 80084fc:	692b      	ldr	r3, [r5, #16]
 80084fe:	b9eb      	cbnz	r3, 800853c <_vfiprintf_r+0x78>
 8008500:	4629      	mov	r1, r5
 8008502:	4630      	mov	r0, r6
 8008504:	f000 fb5a 	bl	8008bbc <__swsetup_r>
 8008508:	b1c0      	cbz	r0, 800853c <_vfiprintf_r+0x78>
 800850a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800850c:	07dc      	lsls	r4, r3, #31
 800850e:	d50e      	bpl.n	800852e <_vfiprintf_r+0x6a>
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	b01d      	add	sp, #116	; 0x74
 8008516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851a:	4b7b      	ldr	r3, [pc, #492]	; (8008708 <_vfiprintf_r+0x244>)
 800851c:	429d      	cmp	r5, r3
 800851e:	d101      	bne.n	8008524 <_vfiprintf_r+0x60>
 8008520:	68b5      	ldr	r5, [r6, #8]
 8008522:	e7df      	b.n	80084e4 <_vfiprintf_r+0x20>
 8008524:	4b79      	ldr	r3, [pc, #484]	; (800870c <_vfiprintf_r+0x248>)
 8008526:	429d      	cmp	r5, r3
 8008528:	bf08      	it	eq
 800852a:	68f5      	ldreq	r5, [r6, #12]
 800852c:	e7da      	b.n	80084e4 <_vfiprintf_r+0x20>
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	0598      	lsls	r0, r3, #22
 8008532:	d4ed      	bmi.n	8008510 <_vfiprintf_r+0x4c>
 8008534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008536:	f7ff ff06 	bl	8008346 <__retarget_lock_release_recursive>
 800853a:	e7e9      	b.n	8008510 <_vfiprintf_r+0x4c>
 800853c:	2300      	movs	r3, #0
 800853e:	9309      	str	r3, [sp, #36]	; 0x24
 8008540:	2320      	movs	r3, #32
 8008542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008546:	f8cd 800c 	str.w	r8, [sp, #12]
 800854a:	2330      	movs	r3, #48	; 0x30
 800854c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008710 <_vfiprintf_r+0x24c>
 8008550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008554:	f04f 0901 	mov.w	r9, #1
 8008558:	4623      	mov	r3, r4
 800855a:	469a      	mov	sl, r3
 800855c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008560:	b10a      	cbz	r2, 8008566 <_vfiprintf_r+0xa2>
 8008562:	2a25      	cmp	r2, #37	; 0x25
 8008564:	d1f9      	bne.n	800855a <_vfiprintf_r+0x96>
 8008566:	ebba 0b04 	subs.w	fp, sl, r4
 800856a:	d00b      	beq.n	8008584 <_vfiprintf_r+0xc0>
 800856c:	465b      	mov	r3, fp
 800856e:	4622      	mov	r2, r4
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ff93 	bl	800849e <__sfputs_r>
 8008578:	3001      	adds	r0, #1
 800857a:	f000 80aa 	beq.w	80086d2 <_vfiprintf_r+0x20e>
 800857e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008580:	445a      	add	r2, fp
 8008582:	9209      	str	r2, [sp, #36]	; 0x24
 8008584:	f89a 3000 	ldrb.w	r3, [sl]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80a2 	beq.w	80086d2 <_vfiprintf_r+0x20e>
 800858e:	2300      	movs	r3, #0
 8008590:	f04f 32ff 	mov.w	r2, #4294967295
 8008594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008598:	f10a 0a01 	add.w	sl, sl, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a4:	931a      	str	r3, [sp, #104]	; 0x68
 80085a6:	4654      	mov	r4, sl
 80085a8:	2205      	movs	r2, #5
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	4858      	ldr	r0, [pc, #352]	; (8008710 <_vfiprintf_r+0x24c>)
 80085b0:	f7f7 fe46 	bl	8000240 <memchr>
 80085b4:	9a04      	ldr	r2, [sp, #16]
 80085b6:	b9d8      	cbnz	r0, 80085f0 <_vfiprintf_r+0x12c>
 80085b8:	06d1      	lsls	r1, r2, #27
 80085ba:	bf44      	itt	mi
 80085bc:	2320      	movmi	r3, #32
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c2:	0713      	lsls	r3, r2, #28
 80085c4:	bf44      	itt	mi
 80085c6:	232b      	movmi	r3, #43	; 0x2b
 80085c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085cc:	f89a 3000 	ldrb.w	r3, [sl]
 80085d0:	2b2a      	cmp	r3, #42	; 0x2a
 80085d2:	d015      	beq.n	8008600 <_vfiprintf_r+0x13c>
 80085d4:	9a07      	ldr	r2, [sp, #28]
 80085d6:	4654      	mov	r4, sl
 80085d8:	2000      	movs	r0, #0
 80085da:	f04f 0c0a 	mov.w	ip, #10
 80085de:	4621      	mov	r1, r4
 80085e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e4:	3b30      	subs	r3, #48	; 0x30
 80085e6:	2b09      	cmp	r3, #9
 80085e8:	d94e      	bls.n	8008688 <_vfiprintf_r+0x1c4>
 80085ea:	b1b0      	cbz	r0, 800861a <_vfiprintf_r+0x156>
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	e014      	b.n	800861a <_vfiprintf_r+0x156>
 80085f0:	eba0 0308 	sub.w	r3, r0, r8
 80085f4:	fa09 f303 	lsl.w	r3, r9, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	46a2      	mov	sl, r4
 80085fe:	e7d2      	b.n	80085a6 <_vfiprintf_r+0xe2>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	1d19      	adds	r1, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	9103      	str	r1, [sp, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bfbb      	ittet	lt
 800860c:	425b      	neglt	r3, r3
 800860e:	f042 0202 	orrlt.w	r2, r2, #2
 8008612:	9307      	strge	r3, [sp, #28]
 8008614:	9307      	strlt	r3, [sp, #28]
 8008616:	bfb8      	it	lt
 8008618:	9204      	strlt	r2, [sp, #16]
 800861a:	7823      	ldrb	r3, [r4, #0]
 800861c:	2b2e      	cmp	r3, #46	; 0x2e
 800861e:	d10c      	bne.n	800863a <_vfiprintf_r+0x176>
 8008620:	7863      	ldrb	r3, [r4, #1]
 8008622:	2b2a      	cmp	r3, #42	; 0x2a
 8008624:	d135      	bne.n	8008692 <_vfiprintf_r+0x1ce>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	9203      	str	r2, [sp, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	f04f 33ff 	movlt.w	r3, #4294967295
 8008636:	3402      	adds	r4, #2
 8008638:	9305      	str	r3, [sp, #20]
 800863a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008720 <_vfiprintf_r+0x25c>
 800863e:	7821      	ldrb	r1, [r4, #0]
 8008640:	2203      	movs	r2, #3
 8008642:	4650      	mov	r0, sl
 8008644:	f7f7 fdfc 	bl	8000240 <memchr>
 8008648:	b140      	cbz	r0, 800865c <_vfiprintf_r+0x198>
 800864a:	2340      	movs	r3, #64	; 0x40
 800864c:	eba0 000a 	sub.w	r0, r0, sl
 8008650:	fa03 f000 	lsl.w	r0, r3, r0
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	4303      	orrs	r3, r0
 8008658:	3401      	adds	r4, #1
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008660:	482c      	ldr	r0, [pc, #176]	; (8008714 <_vfiprintf_r+0x250>)
 8008662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008666:	2206      	movs	r2, #6
 8008668:	f7f7 fdea 	bl	8000240 <memchr>
 800866c:	2800      	cmp	r0, #0
 800866e:	d03f      	beq.n	80086f0 <_vfiprintf_r+0x22c>
 8008670:	4b29      	ldr	r3, [pc, #164]	; (8008718 <_vfiprintf_r+0x254>)
 8008672:	bb1b      	cbnz	r3, 80086bc <_vfiprintf_r+0x1f8>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	3307      	adds	r3, #7
 8008678:	f023 0307 	bic.w	r3, r3, #7
 800867c:	3308      	adds	r3, #8
 800867e:	9303      	str	r3, [sp, #12]
 8008680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008682:	443b      	add	r3, r7
 8008684:	9309      	str	r3, [sp, #36]	; 0x24
 8008686:	e767      	b.n	8008558 <_vfiprintf_r+0x94>
 8008688:	fb0c 3202 	mla	r2, ip, r2, r3
 800868c:	460c      	mov	r4, r1
 800868e:	2001      	movs	r0, #1
 8008690:	e7a5      	b.n	80085de <_vfiprintf_r+0x11a>
 8008692:	2300      	movs	r3, #0
 8008694:	3401      	adds	r4, #1
 8008696:	9305      	str	r3, [sp, #20]
 8008698:	4619      	mov	r1, r3
 800869a:	f04f 0c0a 	mov.w	ip, #10
 800869e:	4620      	mov	r0, r4
 80086a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a4:	3a30      	subs	r2, #48	; 0x30
 80086a6:	2a09      	cmp	r2, #9
 80086a8:	d903      	bls.n	80086b2 <_vfiprintf_r+0x1ee>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0c5      	beq.n	800863a <_vfiprintf_r+0x176>
 80086ae:	9105      	str	r1, [sp, #20]
 80086b0:	e7c3      	b.n	800863a <_vfiprintf_r+0x176>
 80086b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b6:	4604      	mov	r4, r0
 80086b8:	2301      	movs	r3, #1
 80086ba:	e7f0      	b.n	800869e <_vfiprintf_r+0x1da>
 80086bc:	ab03      	add	r3, sp, #12
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	462a      	mov	r2, r5
 80086c2:	4b16      	ldr	r3, [pc, #88]	; (800871c <_vfiprintf_r+0x258>)
 80086c4:	a904      	add	r1, sp, #16
 80086c6:	4630      	mov	r0, r6
 80086c8:	f3af 8000 	nop.w
 80086cc:	4607      	mov	r7, r0
 80086ce:	1c78      	adds	r0, r7, #1
 80086d0:	d1d6      	bne.n	8008680 <_vfiprintf_r+0x1bc>
 80086d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d4:	07d9      	lsls	r1, r3, #31
 80086d6:	d405      	bmi.n	80086e4 <_vfiprintf_r+0x220>
 80086d8:	89ab      	ldrh	r3, [r5, #12]
 80086da:	059a      	lsls	r2, r3, #22
 80086dc:	d402      	bmi.n	80086e4 <_vfiprintf_r+0x220>
 80086de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086e0:	f7ff fe31 	bl	8008346 <__retarget_lock_release_recursive>
 80086e4:	89ab      	ldrh	r3, [r5, #12]
 80086e6:	065b      	lsls	r3, r3, #25
 80086e8:	f53f af12 	bmi.w	8008510 <_vfiprintf_r+0x4c>
 80086ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ee:	e711      	b.n	8008514 <_vfiprintf_r+0x50>
 80086f0:	ab03      	add	r3, sp, #12
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	462a      	mov	r2, r5
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <_vfiprintf_r+0x258>)
 80086f8:	a904      	add	r1, sp, #16
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f880 	bl	8008800 <_printf_i>
 8008700:	e7e4      	b.n	80086cc <_vfiprintf_r+0x208>
 8008702:	bf00      	nop
 8008704:	080090cc 	.word	0x080090cc
 8008708:	080090ec 	.word	0x080090ec
 800870c:	080090ac 	.word	0x080090ac
 8008710:	0800910c 	.word	0x0800910c
 8008714:	08009116 	.word	0x08009116
 8008718:	00000000 	.word	0x00000000
 800871c:	0800849f 	.word	0x0800849f
 8008720:	08009112 	.word	0x08009112

08008724 <_printf_common>:
 8008724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008728:	4616      	mov	r6, r2
 800872a:	4699      	mov	r9, r3
 800872c:	688a      	ldr	r2, [r1, #8]
 800872e:	690b      	ldr	r3, [r1, #16]
 8008730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008734:	4293      	cmp	r3, r2
 8008736:	bfb8      	it	lt
 8008738:	4613      	movlt	r3, r2
 800873a:	6033      	str	r3, [r6, #0]
 800873c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008740:	4607      	mov	r7, r0
 8008742:	460c      	mov	r4, r1
 8008744:	b10a      	cbz	r2, 800874a <_printf_common+0x26>
 8008746:	3301      	adds	r3, #1
 8008748:	6033      	str	r3, [r6, #0]
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	0699      	lsls	r1, r3, #26
 800874e:	bf42      	ittt	mi
 8008750:	6833      	ldrmi	r3, [r6, #0]
 8008752:	3302      	addmi	r3, #2
 8008754:	6033      	strmi	r3, [r6, #0]
 8008756:	6825      	ldr	r5, [r4, #0]
 8008758:	f015 0506 	ands.w	r5, r5, #6
 800875c:	d106      	bne.n	800876c <_printf_common+0x48>
 800875e:	f104 0a19 	add.w	sl, r4, #25
 8008762:	68e3      	ldr	r3, [r4, #12]
 8008764:	6832      	ldr	r2, [r6, #0]
 8008766:	1a9b      	subs	r3, r3, r2
 8008768:	42ab      	cmp	r3, r5
 800876a:	dc26      	bgt.n	80087ba <_printf_common+0x96>
 800876c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008770:	1e13      	subs	r3, r2, #0
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	bf18      	it	ne
 8008776:	2301      	movne	r3, #1
 8008778:	0692      	lsls	r2, r2, #26
 800877a:	d42b      	bmi.n	80087d4 <_printf_common+0xb0>
 800877c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008780:	4649      	mov	r1, r9
 8008782:	4638      	mov	r0, r7
 8008784:	47c0      	blx	r8
 8008786:	3001      	adds	r0, #1
 8008788:	d01e      	beq.n	80087c8 <_printf_common+0xa4>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	68e5      	ldr	r5, [r4, #12]
 800878e:	6832      	ldr	r2, [r6, #0]
 8008790:	f003 0306 	and.w	r3, r3, #6
 8008794:	2b04      	cmp	r3, #4
 8008796:	bf08      	it	eq
 8008798:	1aad      	subeq	r5, r5, r2
 800879a:	68a3      	ldr	r3, [r4, #8]
 800879c:	6922      	ldr	r2, [r4, #16]
 800879e:	bf0c      	ite	eq
 80087a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087a4:	2500      	movne	r5, #0
 80087a6:	4293      	cmp	r3, r2
 80087a8:	bfc4      	itt	gt
 80087aa:	1a9b      	subgt	r3, r3, r2
 80087ac:	18ed      	addgt	r5, r5, r3
 80087ae:	2600      	movs	r6, #0
 80087b0:	341a      	adds	r4, #26
 80087b2:	42b5      	cmp	r5, r6
 80087b4:	d11a      	bne.n	80087ec <_printf_common+0xc8>
 80087b6:	2000      	movs	r0, #0
 80087b8:	e008      	b.n	80087cc <_printf_common+0xa8>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4652      	mov	r2, sl
 80087be:	4649      	mov	r1, r9
 80087c0:	4638      	mov	r0, r7
 80087c2:	47c0      	blx	r8
 80087c4:	3001      	adds	r0, #1
 80087c6:	d103      	bne.n	80087d0 <_printf_common+0xac>
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d0:	3501      	adds	r5, #1
 80087d2:	e7c6      	b.n	8008762 <_printf_common+0x3e>
 80087d4:	18e1      	adds	r1, r4, r3
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	2030      	movs	r0, #48	; 0x30
 80087da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087de:	4422      	add	r2, r4
 80087e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087e8:	3302      	adds	r3, #2
 80087ea:	e7c7      	b.n	800877c <_printf_common+0x58>
 80087ec:	2301      	movs	r3, #1
 80087ee:	4622      	mov	r2, r4
 80087f0:	4649      	mov	r1, r9
 80087f2:	4638      	mov	r0, r7
 80087f4:	47c0      	blx	r8
 80087f6:	3001      	adds	r0, #1
 80087f8:	d0e6      	beq.n	80087c8 <_printf_common+0xa4>
 80087fa:	3601      	adds	r6, #1
 80087fc:	e7d9      	b.n	80087b2 <_printf_common+0x8e>
	...

08008800 <_printf_i>:
 8008800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	7e0f      	ldrb	r7, [r1, #24]
 8008806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008808:	2f78      	cmp	r7, #120	; 0x78
 800880a:	4691      	mov	r9, r2
 800880c:	4680      	mov	r8, r0
 800880e:	460c      	mov	r4, r1
 8008810:	469a      	mov	sl, r3
 8008812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008816:	d807      	bhi.n	8008828 <_printf_i+0x28>
 8008818:	2f62      	cmp	r7, #98	; 0x62
 800881a:	d80a      	bhi.n	8008832 <_printf_i+0x32>
 800881c:	2f00      	cmp	r7, #0
 800881e:	f000 80d8 	beq.w	80089d2 <_printf_i+0x1d2>
 8008822:	2f58      	cmp	r7, #88	; 0x58
 8008824:	f000 80a3 	beq.w	800896e <_printf_i+0x16e>
 8008828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800882c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008830:	e03a      	b.n	80088a8 <_printf_i+0xa8>
 8008832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008836:	2b15      	cmp	r3, #21
 8008838:	d8f6      	bhi.n	8008828 <_printf_i+0x28>
 800883a:	a101      	add	r1, pc, #4	; (adr r1, 8008840 <_printf_i+0x40>)
 800883c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008840:	08008899 	.word	0x08008899
 8008844:	080088ad 	.word	0x080088ad
 8008848:	08008829 	.word	0x08008829
 800884c:	08008829 	.word	0x08008829
 8008850:	08008829 	.word	0x08008829
 8008854:	08008829 	.word	0x08008829
 8008858:	080088ad 	.word	0x080088ad
 800885c:	08008829 	.word	0x08008829
 8008860:	08008829 	.word	0x08008829
 8008864:	08008829 	.word	0x08008829
 8008868:	08008829 	.word	0x08008829
 800886c:	080089b9 	.word	0x080089b9
 8008870:	080088dd 	.word	0x080088dd
 8008874:	0800899b 	.word	0x0800899b
 8008878:	08008829 	.word	0x08008829
 800887c:	08008829 	.word	0x08008829
 8008880:	080089db 	.word	0x080089db
 8008884:	08008829 	.word	0x08008829
 8008888:	080088dd 	.word	0x080088dd
 800888c:	08008829 	.word	0x08008829
 8008890:	08008829 	.word	0x08008829
 8008894:	080089a3 	.word	0x080089a3
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	1d1a      	adds	r2, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	602a      	str	r2, [r5, #0]
 80088a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088a8:	2301      	movs	r3, #1
 80088aa:	e0a3      	b.n	80089f4 <_printf_i+0x1f4>
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	6829      	ldr	r1, [r5, #0]
 80088b0:	0606      	lsls	r6, r0, #24
 80088b2:	f101 0304 	add.w	r3, r1, #4
 80088b6:	d50a      	bpl.n	80088ce <_printf_i+0xce>
 80088b8:	680e      	ldr	r6, [r1, #0]
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	2e00      	cmp	r6, #0
 80088be:	da03      	bge.n	80088c8 <_printf_i+0xc8>
 80088c0:	232d      	movs	r3, #45	; 0x2d
 80088c2:	4276      	negs	r6, r6
 80088c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088c8:	485e      	ldr	r0, [pc, #376]	; (8008a44 <_printf_i+0x244>)
 80088ca:	230a      	movs	r3, #10
 80088cc:	e019      	b.n	8008902 <_printf_i+0x102>
 80088ce:	680e      	ldr	r6, [r1, #0]
 80088d0:	602b      	str	r3, [r5, #0]
 80088d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088d6:	bf18      	it	ne
 80088d8:	b236      	sxthne	r6, r6
 80088da:	e7ef      	b.n	80088bc <_printf_i+0xbc>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	1d19      	adds	r1, r3, #4
 80088e2:	6029      	str	r1, [r5, #0]
 80088e4:	0601      	lsls	r1, r0, #24
 80088e6:	d501      	bpl.n	80088ec <_printf_i+0xec>
 80088e8:	681e      	ldr	r6, [r3, #0]
 80088ea:	e002      	b.n	80088f2 <_printf_i+0xf2>
 80088ec:	0646      	lsls	r6, r0, #25
 80088ee:	d5fb      	bpl.n	80088e8 <_printf_i+0xe8>
 80088f0:	881e      	ldrh	r6, [r3, #0]
 80088f2:	4854      	ldr	r0, [pc, #336]	; (8008a44 <_printf_i+0x244>)
 80088f4:	2f6f      	cmp	r7, #111	; 0x6f
 80088f6:	bf0c      	ite	eq
 80088f8:	2308      	moveq	r3, #8
 80088fa:	230a      	movne	r3, #10
 80088fc:	2100      	movs	r1, #0
 80088fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008902:	6865      	ldr	r5, [r4, #4]
 8008904:	60a5      	str	r5, [r4, #8]
 8008906:	2d00      	cmp	r5, #0
 8008908:	bfa2      	ittt	ge
 800890a:	6821      	ldrge	r1, [r4, #0]
 800890c:	f021 0104 	bicge.w	r1, r1, #4
 8008910:	6021      	strge	r1, [r4, #0]
 8008912:	b90e      	cbnz	r6, 8008918 <_printf_i+0x118>
 8008914:	2d00      	cmp	r5, #0
 8008916:	d04d      	beq.n	80089b4 <_printf_i+0x1b4>
 8008918:	4615      	mov	r5, r2
 800891a:	fbb6 f1f3 	udiv	r1, r6, r3
 800891e:	fb03 6711 	mls	r7, r3, r1, r6
 8008922:	5dc7      	ldrb	r7, [r0, r7]
 8008924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008928:	4637      	mov	r7, r6
 800892a:	42bb      	cmp	r3, r7
 800892c:	460e      	mov	r6, r1
 800892e:	d9f4      	bls.n	800891a <_printf_i+0x11a>
 8008930:	2b08      	cmp	r3, #8
 8008932:	d10b      	bne.n	800894c <_printf_i+0x14c>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	07de      	lsls	r6, r3, #31
 8008938:	d508      	bpl.n	800894c <_printf_i+0x14c>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	6861      	ldr	r1, [r4, #4]
 800893e:	4299      	cmp	r1, r3
 8008940:	bfde      	ittt	le
 8008942:	2330      	movle	r3, #48	; 0x30
 8008944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800894c:	1b52      	subs	r2, r2, r5
 800894e:	6122      	str	r2, [r4, #16]
 8008950:	f8cd a000 	str.w	sl, [sp]
 8008954:	464b      	mov	r3, r9
 8008956:	aa03      	add	r2, sp, #12
 8008958:	4621      	mov	r1, r4
 800895a:	4640      	mov	r0, r8
 800895c:	f7ff fee2 	bl	8008724 <_printf_common>
 8008960:	3001      	adds	r0, #1
 8008962:	d14c      	bne.n	80089fe <_printf_i+0x1fe>
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	b004      	add	sp, #16
 800896a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896e:	4835      	ldr	r0, [pc, #212]	; (8008a44 <_printf_i+0x244>)
 8008970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008974:	6829      	ldr	r1, [r5, #0]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	f851 6b04 	ldr.w	r6, [r1], #4
 800897c:	6029      	str	r1, [r5, #0]
 800897e:	061d      	lsls	r5, r3, #24
 8008980:	d514      	bpl.n	80089ac <_printf_i+0x1ac>
 8008982:	07df      	lsls	r7, r3, #31
 8008984:	bf44      	itt	mi
 8008986:	f043 0320 	orrmi.w	r3, r3, #32
 800898a:	6023      	strmi	r3, [r4, #0]
 800898c:	b91e      	cbnz	r6, 8008996 <_printf_i+0x196>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	f023 0320 	bic.w	r3, r3, #32
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	2310      	movs	r3, #16
 8008998:	e7b0      	b.n	80088fc <_printf_i+0xfc>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	f043 0320 	orr.w	r3, r3, #32
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	2378      	movs	r3, #120	; 0x78
 80089a4:	4828      	ldr	r0, [pc, #160]	; (8008a48 <_printf_i+0x248>)
 80089a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089aa:	e7e3      	b.n	8008974 <_printf_i+0x174>
 80089ac:	0659      	lsls	r1, r3, #25
 80089ae:	bf48      	it	mi
 80089b0:	b2b6      	uxthmi	r6, r6
 80089b2:	e7e6      	b.n	8008982 <_printf_i+0x182>
 80089b4:	4615      	mov	r5, r2
 80089b6:	e7bb      	b.n	8008930 <_printf_i+0x130>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	6826      	ldr	r6, [r4, #0]
 80089bc:	6961      	ldr	r1, [r4, #20]
 80089be:	1d18      	adds	r0, r3, #4
 80089c0:	6028      	str	r0, [r5, #0]
 80089c2:	0635      	lsls	r5, r6, #24
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	d501      	bpl.n	80089cc <_printf_i+0x1cc>
 80089c8:	6019      	str	r1, [r3, #0]
 80089ca:	e002      	b.n	80089d2 <_printf_i+0x1d2>
 80089cc:	0670      	lsls	r0, r6, #25
 80089ce:	d5fb      	bpl.n	80089c8 <_printf_i+0x1c8>
 80089d0:	8019      	strh	r1, [r3, #0]
 80089d2:	2300      	movs	r3, #0
 80089d4:	6123      	str	r3, [r4, #16]
 80089d6:	4615      	mov	r5, r2
 80089d8:	e7ba      	b.n	8008950 <_printf_i+0x150>
 80089da:	682b      	ldr	r3, [r5, #0]
 80089dc:	1d1a      	adds	r2, r3, #4
 80089de:	602a      	str	r2, [r5, #0]
 80089e0:	681d      	ldr	r5, [r3, #0]
 80089e2:	6862      	ldr	r2, [r4, #4]
 80089e4:	2100      	movs	r1, #0
 80089e6:	4628      	mov	r0, r5
 80089e8:	f7f7 fc2a 	bl	8000240 <memchr>
 80089ec:	b108      	cbz	r0, 80089f2 <_printf_i+0x1f2>
 80089ee:	1b40      	subs	r0, r0, r5
 80089f0:	6060      	str	r0, [r4, #4]
 80089f2:	6863      	ldr	r3, [r4, #4]
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	2300      	movs	r3, #0
 80089f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fc:	e7a8      	b.n	8008950 <_printf_i+0x150>
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	462a      	mov	r2, r5
 8008a02:	4649      	mov	r1, r9
 8008a04:	4640      	mov	r0, r8
 8008a06:	47d0      	blx	sl
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d0ab      	beq.n	8008964 <_printf_i+0x164>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	079b      	lsls	r3, r3, #30
 8008a10:	d413      	bmi.n	8008a3a <_printf_i+0x23a>
 8008a12:	68e0      	ldr	r0, [r4, #12]
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	4298      	cmp	r0, r3
 8008a18:	bfb8      	it	lt
 8008a1a:	4618      	movlt	r0, r3
 8008a1c:	e7a4      	b.n	8008968 <_printf_i+0x168>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4632      	mov	r2, r6
 8008a22:	4649      	mov	r1, r9
 8008a24:	4640      	mov	r0, r8
 8008a26:	47d0      	blx	sl
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d09b      	beq.n	8008964 <_printf_i+0x164>
 8008a2c:	3501      	adds	r5, #1
 8008a2e:	68e3      	ldr	r3, [r4, #12]
 8008a30:	9903      	ldr	r1, [sp, #12]
 8008a32:	1a5b      	subs	r3, r3, r1
 8008a34:	42ab      	cmp	r3, r5
 8008a36:	dcf2      	bgt.n	8008a1e <_printf_i+0x21e>
 8008a38:	e7eb      	b.n	8008a12 <_printf_i+0x212>
 8008a3a:	2500      	movs	r5, #0
 8008a3c:	f104 0619 	add.w	r6, r4, #25
 8008a40:	e7f5      	b.n	8008a2e <_printf_i+0x22e>
 8008a42:	bf00      	nop
 8008a44:	0800911d 	.word	0x0800911d
 8008a48:	0800912e 	.word	0x0800912e

08008a4c <_sbrk_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4d06      	ldr	r5, [pc, #24]	; (8008a68 <_sbrk_r+0x1c>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	4604      	mov	r4, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	f7fa f8b8 	bl	8002bcc <_sbrk>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_sbrk_r+0x1a>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_sbrk_r+0x1a>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	2000081c 	.word	0x2000081c

08008a6c <__sread>:
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	460c      	mov	r4, r1
 8008a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a74:	f000 fab2 	bl	8008fdc <_read_r>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	bfab      	itete	ge
 8008a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a80:	181b      	addge	r3, r3, r0
 8008a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a86:	bfac      	ite	ge
 8008a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a8a:	81a3      	strhlt	r3, [r4, #12]
 8008a8c:	bd10      	pop	{r4, pc}

08008a8e <__swrite>:
 8008a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a92:	461f      	mov	r7, r3
 8008a94:	898b      	ldrh	r3, [r1, #12]
 8008a96:	05db      	lsls	r3, r3, #23
 8008a98:	4605      	mov	r5, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	4616      	mov	r6, r2
 8008a9e:	d505      	bpl.n	8008aac <__swrite+0x1e>
 8008aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f000 f9c8 	bl	8008e3c <_lseek_r>
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	4632      	mov	r2, r6
 8008aba:	463b      	mov	r3, r7
 8008abc:	4628      	mov	r0, r5
 8008abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac2:	f000 b869 	b.w	8008b98 <_write_r>

08008ac6 <__sseek>:
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	460c      	mov	r4, r1
 8008aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ace:	f000 f9b5 	bl	8008e3c <_lseek_r>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	bf15      	itete	ne
 8008ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ae2:	81a3      	strheq	r3, [r4, #12]
 8008ae4:	bf18      	it	ne
 8008ae6:	81a3      	strhne	r3, [r4, #12]
 8008ae8:	bd10      	pop	{r4, pc}

08008aea <__sclose>:
 8008aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aee:	f000 b8d3 	b.w	8008c98 <_close_r>
	...

08008af4 <__swbuf_r>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	460e      	mov	r6, r1
 8008af8:	4614      	mov	r4, r2
 8008afa:	4605      	mov	r5, r0
 8008afc:	b118      	cbz	r0, 8008b06 <__swbuf_r+0x12>
 8008afe:	6983      	ldr	r3, [r0, #24]
 8008b00:	b90b      	cbnz	r3, 8008b06 <__swbuf_r+0x12>
 8008b02:	f7ff fb81 	bl	8008208 <__sinit>
 8008b06:	4b21      	ldr	r3, [pc, #132]	; (8008b8c <__swbuf_r+0x98>)
 8008b08:	429c      	cmp	r4, r3
 8008b0a:	d12b      	bne.n	8008b64 <__swbuf_r+0x70>
 8008b0c:	686c      	ldr	r4, [r5, #4]
 8008b0e:	69a3      	ldr	r3, [r4, #24]
 8008b10:	60a3      	str	r3, [r4, #8]
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	071a      	lsls	r2, r3, #28
 8008b16:	d52f      	bpl.n	8008b78 <__swbuf_r+0x84>
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	b36b      	cbz	r3, 8008b78 <__swbuf_r+0x84>
 8008b1c:	6923      	ldr	r3, [r4, #16]
 8008b1e:	6820      	ldr	r0, [r4, #0]
 8008b20:	1ac0      	subs	r0, r0, r3
 8008b22:	6963      	ldr	r3, [r4, #20]
 8008b24:	b2f6      	uxtb	r6, r6
 8008b26:	4283      	cmp	r3, r0
 8008b28:	4637      	mov	r7, r6
 8008b2a:	dc04      	bgt.n	8008b36 <__swbuf_r+0x42>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f000 f948 	bl	8008dc4 <_fflush_r>
 8008b34:	bb30      	cbnz	r0, 8008b84 <__swbuf_r+0x90>
 8008b36:	68a3      	ldr	r3, [r4, #8]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	60a3      	str	r3, [r4, #8]
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	6022      	str	r2, [r4, #0]
 8008b42:	701e      	strb	r6, [r3, #0]
 8008b44:	6963      	ldr	r3, [r4, #20]
 8008b46:	3001      	adds	r0, #1
 8008b48:	4283      	cmp	r3, r0
 8008b4a:	d004      	beq.n	8008b56 <__swbuf_r+0x62>
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	07db      	lsls	r3, r3, #31
 8008b50:	d506      	bpl.n	8008b60 <__swbuf_r+0x6c>
 8008b52:	2e0a      	cmp	r6, #10
 8008b54:	d104      	bne.n	8008b60 <__swbuf_r+0x6c>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f000 f933 	bl	8008dc4 <_fflush_r>
 8008b5e:	b988      	cbnz	r0, 8008b84 <__swbuf_r+0x90>
 8008b60:	4638      	mov	r0, r7
 8008b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b64:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <__swbuf_r+0x9c>)
 8008b66:	429c      	cmp	r4, r3
 8008b68:	d101      	bne.n	8008b6e <__swbuf_r+0x7a>
 8008b6a:	68ac      	ldr	r4, [r5, #8]
 8008b6c:	e7cf      	b.n	8008b0e <__swbuf_r+0x1a>
 8008b6e:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <__swbuf_r+0xa0>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	bf08      	it	eq
 8008b74:	68ec      	ldreq	r4, [r5, #12]
 8008b76:	e7ca      	b.n	8008b0e <__swbuf_r+0x1a>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 f81e 	bl	8008bbc <__swsetup_r>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d0cb      	beq.n	8008b1c <__swbuf_r+0x28>
 8008b84:	f04f 37ff 	mov.w	r7, #4294967295
 8008b88:	e7ea      	b.n	8008b60 <__swbuf_r+0x6c>
 8008b8a:	bf00      	nop
 8008b8c:	080090cc 	.word	0x080090cc
 8008b90:	080090ec 	.word	0x080090ec
 8008b94:	080090ac 	.word	0x080090ac

08008b98 <_write_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d07      	ldr	r5, [pc, #28]	; (8008bb8 <_write_r+0x20>)
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	4608      	mov	r0, r1
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	602a      	str	r2, [r5, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f7f9 ffbf 	bl	8002b2a <_write>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_write_r+0x1e>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_write_r+0x1e>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	2000081c 	.word	0x2000081c

08008bbc <__swsetup_r>:
 8008bbc:	4b32      	ldr	r3, [pc, #200]	; (8008c88 <__swsetup_r+0xcc>)
 8008bbe:	b570      	push	{r4, r5, r6, lr}
 8008bc0:	681d      	ldr	r5, [r3, #0]
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	b125      	cbz	r5, 8008bd2 <__swsetup_r+0x16>
 8008bc8:	69ab      	ldr	r3, [r5, #24]
 8008bca:	b913      	cbnz	r3, 8008bd2 <__swsetup_r+0x16>
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f7ff fb1b 	bl	8008208 <__sinit>
 8008bd2:	4b2e      	ldr	r3, [pc, #184]	; (8008c8c <__swsetup_r+0xd0>)
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	d10f      	bne.n	8008bf8 <__swsetup_r+0x3c>
 8008bd8:	686c      	ldr	r4, [r5, #4]
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008be0:	0719      	lsls	r1, r3, #28
 8008be2:	d42c      	bmi.n	8008c3e <__swsetup_r+0x82>
 8008be4:	06dd      	lsls	r5, r3, #27
 8008be6:	d411      	bmi.n	8008c0c <__swsetup_r+0x50>
 8008be8:	2309      	movs	r3, #9
 8008bea:	6033      	str	r3, [r6, #0]
 8008bec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf6:	e03e      	b.n	8008c76 <__swsetup_r+0xba>
 8008bf8:	4b25      	ldr	r3, [pc, #148]	; (8008c90 <__swsetup_r+0xd4>)
 8008bfa:	429c      	cmp	r4, r3
 8008bfc:	d101      	bne.n	8008c02 <__swsetup_r+0x46>
 8008bfe:	68ac      	ldr	r4, [r5, #8]
 8008c00:	e7eb      	b.n	8008bda <__swsetup_r+0x1e>
 8008c02:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <__swsetup_r+0xd8>)
 8008c04:	429c      	cmp	r4, r3
 8008c06:	bf08      	it	eq
 8008c08:	68ec      	ldreq	r4, [r5, #12]
 8008c0a:	e7e6      	b.n	8008bda <__swsetup_r+0x1e>
 8008c0c:	0758      	lsls	r0, r3, #29
 8008c0e:	d512      	bpl.n	8008c36 <__swsetup_r+0x7a>
 8008c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c12:	b141      	cbz	r1, 8008c26 <__swsetup_r+0x6a>
 8008c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c18:	4299      	cmp	r1, r3
 8008c1a:	d002      	beq.n	8008c22 <__swsetup_r+0x66>
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f000 f991 	bl	8008f44 <_free_r>
 8008c22:	2300      	movs	r3, #0
 8008c24:	6363      	str	r3, [r4, #52]	; 0x34
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c2c:	81a3      	strh	r3, [r4, #12]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6063      	str	r3, [r4, #4]
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	f043 0308 	orr.w	r3, r3, #8
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	b94b      	cbnz	r3, 8008c56 <__swsetup_r+0x9a>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c4c:	d003      	beq.n	8008c56 <__swsetup_r+0x9a>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4630      	mov	r0, r6
 8008c52:	f000 f92b 	bl	8008eac <__smakebuf_r>
 8008c56:	89a0      	ldrh	r0, [r4, #12]
 8008c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c5c:	f010 0301 	ands.w	r3, r0, #1
 8008c60:	d00a      	beq.n	8008c78 <__swsetup_r+0xbc>
 8008c62:	2300      	movs	r3, #0
 8008c64:	60a3      	str	r3, [r4, #8]
 8008c66:	6963      	ldr	r3, [r4, #20]
 8008c68:	425b      	negs	r3, r3
 8008c6a:	61a3      	str	r3, [r4, #24]
 8008c6c:	6923      	ldr	r3, [r4, #16]
 8008c6e:	b943      	cbnz	r3, 8008c82 <__swsetup_r+0xc6>
 8008c70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c74:	d1ba      	bne.n	8008bec <__swsetup_r+0x30>
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	0781      	lsls	r1, r0, #30
 8008c7a:	bf58      	it	pl
 8008c7c:	6963      	ldrpl	r3, [r4, #20]
 8008c7e:	60a3      	str	r3, [r4, #8]
 8008c80:	e7f4      	b.n	8008c6c <__swsetup_r+0xb0>
 8008c82:	2000      	movs	r0, #0
 8008c84:	e7f7      	b.n	8008c76 <__swsetup_r+0xba>
 8008c86:	bf00      	nop
 8008c88:	20000014 	.word	0x20000014
 8008c8c:	080090cc 	.word	0x080090cc
 8008c90:	080090ec 	.word	0x080090ec
 8008c94:	080090ac 	.word	0x080090ac

08008c98 <_close_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d06      	ldr	r5, [pc, #24]	; (8008cb4 <_close_r+0x1c>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f9 ff5d 	bl	8002b62 <_close>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_close_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_close_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	2000081c 	.word	0x2000081c

08008cb8 <__sflush_r>:
 8008cb8:	898a      	ldrh	r2, [r1, #12]
 8008cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	0710      	lsls	r0, r2, #28
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	d458      	bmi.n	8008d78 <__sflush_r+0xc0>
 8008cc6:	684b      	ldr	r3, [r1, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	dc05      	bgt.n	8008cd8 <__sflush_r+0x20>
 8008ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dc02      	bgt.n	8008cd8 <__sflush_r+0x20>
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cda:	2e00      	cmp	r6, #0
 8008cdc:	d0f9      	beq.n	8008cd2 <__sflush_r+0x1a>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ce4:	682f      	ldr	r7, [r5, #0]
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	d032      	beq.n	8008d50 <__sflush_r+0x98>
 8008cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	075a      	lsls	r2, r3, #29
 8008cf0:	d505      	bpl.n	8008cfe <__sflush_r+0x46>
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	1ac0      	subs	r0, r0, r3
 8008cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cf8:	b10b      	cbz	r3, 8008cfe <__sflush_r+0x46>
 8008cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cfc:	1ac0      	subs	r0, r0, r3
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4602      	mov	r2, r0
 8008d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d04:	6a21      	ldr	r1, [r4, #32]
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b0      	blx	r6
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	d106      	bne.n	8008d1e <__sflush_r+0x66>
 8008d10:	6829      	ldr	r1, [r5, #0]
 8008d12:	291d      	cmp	r1, #29
 8008d14:	d82c      	bhi.n	8008d70 <__sflush_r+0xb8>
 8008d16:	4a2a      	ldr	r2, [pc, #168]	; (8008dc0 <__sflush_r+0x108>)
 8008d18:	40ca      	lsrs	r2, r1
 8008d1a:	07d6      	lsls	r6, r2, #31
 8008d1c:	d528      	bpl.n	8008d70 <__sflush_r+0xb8>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6062      	str	r2, [r4, #4]
 8008d22:	04d9      	lsls	r1, r3, #19
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	6022      	str	r2, [r4, #0]
 8008d28:	d504      	bpl.n	8008d34 <__sflush_r+0x7c>
 8008d2a:	1c42      	adds	r2, r0, #1
 8008d2c:	d101      	bne.n	8008d32 <__sflush_r+0x7a>
 8008d2e:	682b      	ldr	r3, [r5, #0]
 8008d30:	b903      	cbnz	r3, 8008d34 <__sflush_r+0x7c>
 8008d32:	6560      	str	r0, [r4, #84]	; 0x54
 8008d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d36:	602f      	str	r7, [r5, #0]
 8008d38:	2900      	cmp	r1, #0
 8008d3a:	d0ca      	beq.n	8008cd2 <__sflush_r+0x1a>
 8008d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d40:	4299      	cmp	r1, r3
 8008d42:	d002      	beq.n	8008d4a <__sflush_r+0x92>
 8008d44:	4628      	mov	r0, r5
 8008d46:	f000 f8fd 	bl	8008f44 <_free_r>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8008d4e:	e7c1      	b.n	8008cd4 <__sflush_r+0x1c>
 8008d50:	6a21      	ldr	r1, [r4, #32]
 8008d52:	2301      	movs	r3, #1
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b0      	blx	r6
 8008d58:	1c41      	adds	r1, r0, #1
 8008d5a:	d1c7      	bne.n	8008cec <__sflush_r+0x34>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0c4      	beq.n	8008cec <__sflush_r+0x34>
 8008d62:	2b1d      	cmp	r3, #29
 8008d64:	d001      	beq.n	8008d6a <__sflush_r+0xb2>
 8008d66:	2b16      	cmp	r3, #22
 8008d68:	d101      	bne.n	8008d6e <__sflush_r+0xb6>
 8008d6a:	602f      	str	r7, [r5, #0]
 8008d6c:	e7b1      	b.n	8008cd2 <__sflush_r+0x1a>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	e7ad      	b.n	8008cd4 <__sflush_r+0x1c>
 8008d78:	690f      	ldr	r7, [r1, #16]
 8008d7a:	2f00      	cmp	r7, #0
 8008d7c:	d0a9      	beq.n	8008cd2 <__sflush_r+0x1a>
 8008d7e:	0793      	lsls	r3, r2, #30
 8008d80:	680e      	ldr	r6, [r1, #0]
 8008d82:	bf08      	it	eq
 8008d84:	694b      	ldreq	r3, [r1, #20]
 8008d86:	600f      	str	r7, [r1, #0]
 8008d88:	bf18      	it	ne
 8008d8a:	2300      	movne	r3, #0
 8008d8c:	eba6 0807 	sub.w	r8, r6, r7
 8008d90:	608b      	str	r3, [r1, #8]
 8008d92:	f1b8 0f00 	cmp.w	r8, #0
 8008d96:	dd9c      	ble.n	8008cd2 <__sflush_r+0x1a>
 8008d98:	6a21      	ldr	r1, [r4, #32]
 8008d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d9c:	4643      	mov	r3, r8
 8008d9e:	463a      	mov	r2, r7
 8008da0:	4628      	mov	r0, r5
 8008da2:	47b0      	blx	r6
 8008da4:	2800      	cmp	r0, #0
 8008da6:	dc06      	bgt.n	8008db6 <__sflush_r+0xfe>
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	e78e      	b.n	8008cd4 <__sflush_r+0x1c>
 8008db6:	4407      	add	r7, r0
 8008db8:	eba8 0800 	sub.w	r8, r8, r0
 8008dbc:	e7e9      	b.n	8008d92 <__sflush_r+0xda>
 8008dbe:	bf00      	nop
 8008dc0:	20400001 	.word	0x20400001

08008dc4 <_fflush_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	690b      	ldr	r3, [r1, #16]
 8008dc8:	4605      	mov	r5, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	b913      	cbnz	r3, 8008dd4 <_fflush_r+0x10>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	b118      	cbz	r0, 8008dde <_fflush_r+0x1a>
 8008dd6:	6983      	ldr	r3, [r0, #24]
 8008dd8:	b90b      	cbnz	r3, 8008dde <_fflush_r+0x1a>
 8008dda:	f7ff fa15 	bl	8008208 <__sinit>
 8008dde:	4b14      	ldr	r3, [pc, #80]	; (8008e30 <_fflush_r+0x6c>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	d11b      	bne.n	8008e1c <_fflush_r+0x58>
 8008de4:	686c      	ldr	r4, [r5, #4]
 8008de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0ef      	beq.n	8008dce <_fflush_r+0xa>
 8008dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008df0:	07d0      	lsls	r0, r2, #31
 8008df2:	d404      	bmi.n	8008dfe <_fflush_r+0x3a>
 8008df4:	0599      	lsls	r1, r3, #22
 8008df6:	d402      	bmi.n	8008dfe <_fflush_r+0x3a>
 8008df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dfa:	f7ff faa3 	bl	8008344 <__retarget_lock_acquire_recursive>
 8008dfe:	4628      	mov	r0, r5
 8008e00:	4621      	mov	r1, r4
 8008e02:	f7ff ff59 	bl	8008cb8 <__sflush_r>
 8008e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e08:	07da      	lsls	r2, r3, #31
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	d4e0      	bmi.n	8008dd0 <_fflush_r+0xc>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	059b      	lsls	r3, r3, #22
 8008e12:	d4dd      	bmi.n	8008dd0 <_fflush_r+0xc>
 8008e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e16:	f7ff fa96 	bl	8008346 <__retarget_lock_release_recursive>
 8008e1a:	e7d9      	b.n	8008dd0 <_fflush_r+0xc>
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <_fflush_r+0x70>)
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	d101      	bne.n	8008e26 <_fflush_r+0x62>
 8008e22:	68ac      	ldr	r4, [r5, #8]
 8008e24:	e7df      	b.n	8008de6 <_fflush_r+0x22>
 8008e26:	4b04      	ldr	r3, [pc, #16]	; (8008e38 <_fflush_r+0x74>)
 8008e28:	429c      	cmp	r4, r3
 8008e2a:	bf08      	it	eq
 8008e2c:	68ec      	ldreq	r4, [r5, #12]
 8008e2e:	e7da      	b.n	8008de6 <_fflush_r+0x22>
 8008e30:	080090cc 	.word	0x080090cc
 8008e34:	080090ec 	.word	0x080090ec
 8008e38:	080090ac 	.word	0x080090ac

08008e3c <_lseek_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d07      	ldr	r5, [pc, #28]	; (8008e5c <_lseek_r+0x20>)
 8008e40:	4604      	mov	r4, r0
 8008e42:	4608      	mov	r0, r1
 8008e44:	4611      	mov	r1, r2
 8008e46:	2200      	movs	r2, #0
 8008e48:	602a      	str	r2, [r5, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f7f9 feb0 	bl	8002bb0 <_lseek>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_lseek_r+0x1e>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_lseek_r+0x1e>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	2000081c 	.word	0x2000081c

08008e60 <__swhatbuf_r>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	460e      	mov	r6, r1
 8008e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	b096      	sub	sp, #88	; 0x58
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	461d      	mov	r5, r3
 8008e70:	da08      	bge.n	8008e84 <__swhatbuf_r+0x24>
 8008e72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	602a      	str	r2, [r5, #0]
 8008e7a:	061a      	lsls	r2, r3, #24
 8008e7c:	d410      	bmi.n	8008ea0 <__swhatbuf_r+0x40>
 8008e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e82:	e00e      	b.n	8008ea2 <__swhatbuf_r+0x42>
 8008e84:	466a      	mov	r2, sp
 8008e86:	f000 f8bb 	bl	8009000 <_fstat_r>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	dbf1      	blt.n	8008e72 <__swhatbuf_r+0x12>
 8008e8e:	9a01      	ldr	r2, [sp, #4]
 8008e90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e98:	425a      	negs	r2, r3
 8008e9a:	415a      	adcs	r2, r3
 8008e9c:	602a      	str	r2, [r5, #0]
 8008e9e:	e7ee      	b.n	8008e7e <__swhatbuf_r+0x1e>
 8008ea0:	2340      	movs	r3, #64	; 0x40
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	b016      	add	sp, #88	; 0x58
 8008ea8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008eac <__smakebuf_r>:
 8008eac:	898b      	ldrh	r3, [r1, #12]
 8008eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008eb0:	079d      	lsls	r5, r3, #30
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	d507      	bpl.n	8008ec8 <__smakebuf_r+0x1c>
 8008eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	6123      	str	r3, [r4, #16]
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	6163      	str	r3, [r4, #20]
 8008ec4:	b002      	add	sp, #8
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}
 8008ec8:	ab01      	add	r3, sp, #4
 8008eca:	466a      	mov	r2, sp
 8008ecc:	f7ff ffc8 	bl	8008e60 <__swhatbuf_r>
 8008ed0:	9900      	ldr	r1, [sp, #0]
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f7ff fa57 	bl	8008388 <_malloc_r>
 8008eda:	b948      	cbnz	r0, 8008ef0 <__smakebuf_r+0x44>
 8008edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ee0:	059a      	lsls	r2, r3, #22
 8008ee2:	d4ef      	bmi.n	8008ec4 <__smakebuf_r+0x18>
 8008ee4:	f023 0303 	bic.w	r3, r3, #3
 8008ee8:	f043 0302 	orr.w	r3, r3, #2
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	e7e3      	b.n	8008eb8 <__smakebuf_r+0xc>
 8008ef0:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <__smakebuf_r+0x7c>)
 8008ef2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	6020      	str	r0, [r4, #0]
 8008ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	9b00      	ldr	r3, [sp, #0]
 8008f00:	6163      	str	r3, [r4, #20]
 8008f02:	9b01      	ldr	r3, [sp, #4]
 8008f04:	6120      	str	r0, [r4, #16]
 8008f06:	b15b      	cbz	r3, 8008f20 <__smakebuf_r+0x74>
 8008f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f000 f889 	bl	8009024 <_isatty_r>
 8008f12:	b128      	cbz	r0, 8008f20 <__smakebuf_r+0x74>
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	f023 0303 	bic.w	r3, r3, #3
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	81a3      	strh	r3, [r4, #12]
 8008f20:	89a0      	ldrh	r0, [r4, #12]
 8008f22:	4305      	orrs	r5, r0
 8008f24:	81a5      	strh	r5, [r4, #12]
 8008f26:	e7cd      	b.n	8008ec4 <__smakebuf_r+0x18>
 8008f28:	080081a1 	.word	0x080081a1

08008f2c <__malloc_lock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	; (8008f34 <__malloc_lock+0x8>)
 8008f2e:	f7ff ba09 	b.w	8008344 <__retarget_lock_acquire_recursive>
 8008f32:	bf00      	nop
 8008f34:	20000810 	.word	0x20000810

08008f38 <__malloc_unlock>:
 8008f38:	4801      	ldr	r0, [pc, #4]	; (8008f40 <__malloc_unlock+0x8>)
 8008f3a:	f7ff ba04 	b.w	8008346 <__retarget_lock_release_recursive>
 8008f3e:	bf00      	nop
 8008f40:	20000810 	.word	0x20000810

08008f44 <_free_r>:
 8008f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f46:	2900      	cmp	r1, #0
 8008f48:	d044      	beq.n	8008fd4 <_free_r+0x90>
 8008f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f4e:	9001      	str	r0, [sp, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f1a1 0404 	sub.w	r4, r1, #4
 8008f56:	bfb8      	it	lt
 8008f58:	18e4      	addlt	r4, r4, r3
 8008f5a:	f7ff ffe7 	bl	8008f2c <__malloc_lock>
 8008f5e:	4a1e      	ldr	r2, [pc, #120]	; (8008fd8 <_free_r+0x94>)
 8008f60:	9801      	ldr	r0, [sp, #4]
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	b933      	cbnz	r3, 8008f74 <_free_r+0x30>
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	6014      	str	r4, [r2, #0]
 8008f6a:	b003      	add	sp, #12
 8008f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f70:	f7ff bfe2 	b.w	8008f38 <__malloc_unlock>
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	d908      	bls.n	8008f8a <_free_r+0x46>
 8008f78:	6825      	ldr	r5, [r4, #0]
 8008f7a:	1961      	adds	r1, r4, r5
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	bf01      	itttt	eq
 8008f80:	6819      	ldreq	r1, [r3, #0]
 8008f82:	685b      	ldreq	r3, [r3, #4]
 8008f84:	1949      	addeq	r1, r1, r5
 8008f86:	6021      	streq	r1, [r4, #0]
 8008f88:	e7ed      	b.n	8008f66 <_free_r+0x22>
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	b10b      	cbz	r3, 8008f94 <_free_r+0x50>
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d9fa      	bls.n	8008f8a <_free_r+0x46>
 8008f94:	6811      	ldr	r1, [r2, #0]
 8008f96:	1855      	adds	r5, r2, r1
 8008f98:	42a5      	cmp	r5, r4
 8008f9a:	d10b      	bne.n	8008fb4 <_free_r+0x70>
 8008f9c:	6824      	ldr	r4, [r4, #0]
 8008f9e:	4421      	add	r1, r4
 8008fa0:	1854      	adds	r4, r2, r1
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	6011      	str	r1, [r2, #0]
 8008fa6:	d1e0      	bne.n	8008f6a <_free_r+0x26>
 8008fa8:	681c      	ldr	r4, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	6053      	str	r3, [r2, #4]
 8008fae:	4421      	add	r1, r4
 8008fb0:	6011      	str	r1, [r2, #0]
 8008fb2:	e7da      	b.n	8008f6a <_free_r+0x26>
 8008fb4:	d902      	bls.n	8008fbc <_free_r+0x78>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	6003      	str	r3, [r0, #0]
 8008fba:	e7d6      	b.n	8008f6a <_free_r+0x26>
 8008fbc:	6825      	ldr	r5, [r4, #0]
 8008fbe:	1961      	adds	r1, r4, r5
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	bf04      	itt	eq
 8008fc4:	6819      	ldreq	r1, [r3, #0]
 8008fc6:	685b      	ldreq	r3, [r3, #4]
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	bf04      	itt	eq
 8008fcc:	1949      	addeq	r1, r1, r5
 8008fce:	6021      	streq	r1, [r4, #0]
 8008fd0:	6054      	str	r4, [r2, #4]
 8008fd2:	e7ca      	b.n	8008f6a <_free_r+0x26>
 8008fd4:	b003      	add	sp, #12
 8008fd6:	bd30      	pop	{r4, r5, pc}
 8008fd8:	20000814 	.word	0x20000814

08008fdc <_read_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	; (8008ffc <_read_r+0x20>)
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	602a      	str	r2, [r5, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	f7f9 fd80 	bl	8002af0 <_read>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_read_r+0x1e>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_read_r+0x1e>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	2000081c 	.word	0x2000081c

08009000 <_fstat_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d07      	ldr	r5, [pc, #28]	; (8009020 <_fstat_r+0x20>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	4611      	mov	r1, r2
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	f7f9 fdb4 	bl	8002b7a <_fstat>
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	d102      	bne.n	800901c <_fstat_r+0x1c>
 8009016:	682b      	ldr	r3, [r5, #0]
 8009018:	b103      	cbz	r3, 800901c <_fstat_r+0x1c>
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	bd38      	pop	{r3, r4, r5, pc}
 800901e:	bf00      	nop
 8009020:	2000081c 	.word	0x2000081c

08009024 <_isatty_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d06      	ldr	r5, [pc, #24]	; (8009040 <_isatty_r+0x1c>)
 8009028:	2300      	movs	r3, #0
 800902a:	4604      	mov	r4, r0
 800902c:	4608      	mov	r0, r1
 800902e:	602b      	str	r3, [r5, #0]
 8009030:	f7f9 fdb3 	bl	8002b9a <_isatty>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_isatty_r+0x1a>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_isatty_r+0x1a>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	2000081c 	.word	0x2000081c

08009044 <_init>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr

08009050 <_fini>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	bf00      	nop
 8009054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009056:	bc08      	pop	{r3}
 8009058:	469e      	mov	lr, r3
 800905a:	4770      	bx	lr
