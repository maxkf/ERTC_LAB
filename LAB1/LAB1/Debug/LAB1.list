
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800b6f8  0800b6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b928  0800b928  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b928  0800b928  0001b928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b930  0800b930  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b934  0800b934  0001b934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005124  20000080  0800b9b8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051a4  0800b9b8  000251a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000237f6  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ed4  00000000  00000000  000438a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  00047778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  000492f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004efa  00000000  00000000  0004ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000208e7  00000000  00000000  0004fbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fea1  00000000  00000000  000704c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008078  00000000  00000000  001803b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b6e0 	.word	0x0800b6e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800b6e0 	.word	0x0800b6e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_GPIO_EXTI_Callback>:
int counter = 0;
int flag=0;
int freq;
int lineData;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af04      	add	r7, sp, #16
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1,&colum, 1, I2C_TIMEOUT);
 80005fe:	23c8      	movs	r3, #200	; 0xc8
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	2301      	movs	r3, #1
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	2227      	movs	r2, #39	; 0x27
 800060e:	217e      	movs	r1, #126	; 0x7e
 8000610:	483d      	ldr	r0, [pc, #244]	; (8000708 <HAL_GPIO_EXTI_Callback+0x114>)
 8000612:	f003 f845 	bl	80036a0 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1,&row, 1, I2C_TIMEOUT);
 8000616:	23c8      	movs	r3, #200	; 0xc8
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	2301      	movs	r3, #1
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2301      	movs	r3, #1
 8000624:	2228      	movs	r2, #40	; 0x28
 8000626:	217e      	movs	r1, #126	; 0x7e
 8000628:	4837      	ldr	r0, [pc, #220]	; (8000708 <HAL_GPIO_EXTI_Callback+0x114>)
 800062a:	f003 f839 	bl	80036a0 <HAL_I2C_Mem_Read>
  printf("Interrupt on pin (%d).\n", GPIO_Pin);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	4619      	mov	r1, r3
 8000632:	4837      	ldr	r0, [pc, #220]	; (8000710 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000634:	f00a f972 	bl	800a91c <iprintf>
  printf("colum.raw (%d)    row.raw (%d).\n", colum, row);
 8000638:	4b32      	ldr	r3, [pc, #200]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a33      	ldr	r2, [pc, #204]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 800063e:	6812      	ldr	r2, [r2, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	4834      	ldr	r0, [pc, #208]	; (8000714 <HAL_GPIO_EXTI_Callback+0x120>)
 8000644:	f00a f96a 	bl	800a91c <iprintf>
  colum = getIndex (colum);
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f875 	bl	800073c <getIndex>
 8000652:	4603      	mov	r3, r0
 8000654:	4a2b      	ldr	r2, [pc, #172]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 8000656:	6013      	str	r3, [r2, #0]
  row = getIndex(row);
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f86d 	bl	800073c <getIndex>
 8000662:	4603      	mov	r3, r0
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 8000666:	6013      	str	r3, [r2, #0]
  printf("colum (%d)    row (%d).\n", colum, row);
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4829      	ldr	r0, [pc, #164]	; (8000718 <HAL_GPIO_EXTI_Callback+0x124>)
 8000674:	f00a f952 	bl	800a91c <iprintf>
  triggeredChar = keypadLayout[row][colum];
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4926      	ldr	r1, [pc, #152]	; (800071c <HAL_GPIO_EXTI_Callback+0x128>)
 8000682:	0092      	lsls	r2, r2, #2
 8000684:	440a      	add	r2, r1
 8000686:	4413      	add	r3, r2
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 800068c:	701a      	strb	r2, [r3, #0]

  if(flag == 1){
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <HAL_GPIO_EXTI_Callback+0x130>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d10c      	bne.n	80006b0 <HAL_GPIO_EXTI_Callback+0xbc>
	  freq = inputUser;
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <HAL_GPIO_EXTI_Callback+0x134>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a24      	ldr	r2, [pc, #144]	; (800072c <HAL_GPIO_EXTI_Callback+0x138>)
 800069c:	6013      	str	r3, [r2, #0]
	  inputUser = 0;
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <HAL_GPIO_EXTI_Callback+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
	  counter = 0;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <HAL_GPIO_EXTI_Callback+0x13c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
	  flag = 0;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <HAL_GPIO_EXTI_Callback+0x130>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
  }
	  if((triggeredChar <= '9') && (triggeredChar >= '0')){
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b39      	cmp	r3, #57	; 0x39
 80006b6:	d81a      	bhi.n	80006ee <HAL_GPIO_EXTI_Callback+0xfa>
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b2f      	cmp	r3, #47	; 0x2f
 80006be:	d916      	bls.n	80006ee <HAL_GPIO_EXTI_Callback+0xfa>
	  	 		  keypadFreq = (int)(triggeredChar - '0');
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3b30      	subs	r3, #48	; 0x30
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <HAL_GPIO_EXTI_Callback+0x140>)
 80006c8:	6013      	str	r3, [r2, #0]
	  	 		  inputUser = inputUser*(10^counter) + keypadFreq;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_GPIO_EXTI_Callback+0x13c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f083 030a 	eor.w	r3, r3, #10
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <HAL_GPIO_EXTI_Callback+0x134>)
 80006d4:	6812      	ldr	r2, [r2, #0]
 80006d6:	fb03 f202 	mul.w	r2, r3, r2
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_GPIO_EXTI_Callback+0x140>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	4a11      	ldr	r2, [pc, #68]	; (8000728 <HAL_GPIO_EXTI_Callback+0x134>)
 80006e2:	6013      	str	r3, [r2, #0]
	  	 		  counter++;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_GPIO_EXTI_Callback+0x13c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <HAL_GPIO_EXTI_Callback+0x13c>)
 80006ec:	6013      	str	r3, [r2, #0]
	  }
  printf("Triggered Char: %c \n\r ", triggeredChar);
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <HAL_GPIO_EXTI_Callback+0x144>)
 80006f6:	f00a f911 	bl	800a91c <iprintf>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000066c 	.word	0x2000066c
 8000708:	200000e4 	.word	0x200000e4
 800070c:	20000670 	.word	0x20000670
 8000710:	0800b730 	.word	0x0800b730
 8000714:	0800b748 	.word	0x0800b748
 8000718:	0800b76c 	.word	0x0800b76c
 800071c:	0800b84c 	.word	0x0800b84c
 8000720:	20000674 	.word	0x20000674
 8000724:	20000680 	.word	0x20000680
 8000728:	20000678 	.word	0x20000678
 800072c:	20000684 	.word	0x20000684
 8000730:	2000067c 	.word	0x2000067c
 8000734:	20000000 	.word	0x20000000
 8000738:	0800b788 	.word	0x0800b788

0800073c <getIndex>:

int getIndex(int value){
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  switch (value){
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3bf7      	subs	r3, #247	; 0xf7
 8000748:	2b07      	cmp	r3, #7
 800074a:	d81b      	bhi.n	8000784 <getIndex+0x48>
 800074c:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <getIndex+0x18>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000775 	.word	0x08000775
 8000758:	08000785 	.word	0x08000785
 800075c:	08000785 	.word	0x08000785
 8000760:	08000785 	.word	0x08000785
 8000764:	08000779 	.word	0x08000779
 8000768:	08000785 	.word	0x08000785
 800076c:	0800077d 	.word	0x0800077d
 8000770:	08000781 	.word	0x08000781
    case 247:
      return 3;
 8000774:	2303      	movs	r3, #3
 8000776:	e006      	b.n	8000786 <getIndex+0x4a>
    case 251:
      return 2;
 8000778:	2302      	movs	r3, #2
 800077a:	e004      	b.n	8000786 <getIndex+0x4a>
    case 253:
      return 1;
 800077c:	2301      	movs	r3, #1
 800077e:	e002      	b.n	8000786 <getIndex+0x4a>
    case 254:
      return 0;
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <getIndex+0x4a>
    default:
    	return 99;
 8000784:	2363      	movs	r3, #99	; 0x63
  }
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	0000      	movs	r0, r0
	...

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f001 ffea 	bl	8002776 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 fa87 	bl	8000cb4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initialise_monitor_handles();
 80007a6:	f009 fe6f 	bl	800a488 <initialise_monitor_handles>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f001 f855 	bl	8001858 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007ae:	f001 f823 	bl	80017f8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80007b2:	f000 faf1 	bl	8000d98 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007b6:	f000 fb41 	bl	8000e3c <MX_I2C1_Init>
  MX_I2C2_Init();
 80007ba:	f000 fb7f 	bl	8000ebc <MX_I2C2_Init>
  MX_SPI1_Init();
 80007be:	f000 fbbd 	bl	8000f3c <MX_SPI1_Init>
  MX_TIM1_Init();
 80007c2:	f000 fbf9 	bl	8000fb8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007c6:	f000 fcc7 	bl	8001158 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007ca:	f000 fd5f 	bl	800128c <MX_TIM3_Init>
  MX_TIM4_Init();
 80007ce:	f000 fdb3 	bl	8001338 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007d2:	f000 fe07 	bl	80013e4 <MX_TIM5_Init>
  MX_TIM8_Init();
 80007d6:	f000 fe7d 	bl	80014d4 <MX_TIM8_Init>
  MX_UART4_Init();
 80007da:	f000 ff4d 	bl	8001678 <MX_UART4_Init>
  MX_UART5_Init();
 80007de:	f000 ff7b 	bl	80016d8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80007e2:	f000 ffa9 	bl	8001738 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007e6:	f000 ffd7 	bl	8001798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	48bb      	ldr	r0, [pc, #748]	; (8000adc <main+0x344>)
 80007f0:	f002 fd66 	bl	80032c0 <HAL_GPIO_WritePin>

  /* Disable EXTI4_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80007f4:	200a      	movs	r0, #10
 80007f6:	f002 fba9 	bl	8002f4c <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80007fa:	2312      	movs	r3, #18
 80007fc:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80007fe:	23c8      	movs	r3, #200	; 0xc8
 8000800:	9302      	str	r3, [sp, #8]
 8000802:	2301      	movs	r3, #1
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	227d      	movs	r2, #125	; 0x7d
 800080e:	217e      	movs	r1, #126	; 0x7e
 8000810:	48b3      	ldr	r0, [pc, #716]	; (8000ae0 <main+0x348>)
 8000812:	f002 fe31 	bl	8003478 <HAL_I2C_Mem_Write>
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d004      	beq.n	800082a <main+0x92>
    printf("I2C communication error (%X).\n", status);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4619      	mov	r1, r3
 8000824:	48af      	ldr	r0, [pc, #700]	; (8000ae4 <main+0x34c>)
 8000826:	f00a f879 	bl	800a91c <iprintf>

  data = 0x34;
 800082a:	2334      	movs	r3, #52	; 0x34
 800082c:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 800082e:	23c8      	movs	r3, #200	; 0xc8
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2301      	movs	r3, #1
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	1dbb      	adds	r3, r7, #6
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2301      	movs	r3, #1
 800083c:	227d      	movs	r2, #125	; 0x7d
 800083e:	217e      	movs	r1, #126	; 0x7e
 8000840:	48a7      	ldr	r0, [pc, #668]	; (8000ae0 <main+0x348>)
 8000842:	f002 fe19 	bl	8003478 <HAL_I2C_Mem_Write>
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d004      	beq.n	800085a <main+0xc2>
    printf("I2C communication error (%X).\n", status);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4619      	mov	r1, r3
 8000854:	48a3      	ldr	r0, [pc, #652]	; (8000ae4 <main+0x34c>)
 8000856:	f00a f861 	bl	800a91c <iprintf>

  HAL_Delay(100);
 800085a:	2064      	movs	r0, #100	; 0x64
 800085c:	f001 ffb8 	bl	80027d0 <HAL_Delay>

  /* Set KeyPad scanning engine */

  /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
  data = 0x40;
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 8000864:	23c8      	movs	r3, #200	; 0xc8
 8000866:	9302      	str	r3, [sp, #8]
 8000868:	2301      	movs	r3, #1
 800086a:	9301      	str	r3, [sp, #4]
 800086c:	1dbb      	adds	r3, r7, #6
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2301      	movs	r3, #1
 8000872:	221e      	movs	r2, #30
 8000874:	217e      	movs	r1, #126	; 0x7e
 8000876:	489a      	ldr	r0, [pc, #616]	; (8000ae0 <main+0x348>)
 8000878:	f002 fdfe 	bl	8003478 <HAL_I2C_Mem_Write>
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d004      	beq.n	8000890 <main+0xf8>
    printf("I2C communication error (%X).\n", status);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4619      	mov	r1, r3
 800088a:	4896      	ldr	r0, [pc, #600]	; (8000ae4 <main+0x34c>)
 800088c:	f00a f846 	bl	800a91c <iprintf>

  /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
  data = 0xF0;
 8000890:	23f0      	movs	r3, #240	; 0xf0
 8000892:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000894:	23c8      	movs	r3, #200	; 0xc8
 8000896:	9302      	str	r3, [sp, #8]
 8000898:	2301      	movs	r3, #1
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	1dbb      	adds	r3, r7, #6
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2301      	movs	r3, #1
 80008a2:	220f      	movs	r2, #15
 80008a4:	217e      	movs	r1, #126	; 0x7e
 80008a6:	488e      	ldr	r0, [pc, #568]	; (8000ae0 <main+0x348>)
 80008a8:	f002 fde6 	bl	8003478 <HAL_I2C_Mem_Write>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d004      	beq.n	80008c0 <main+0x128>
    printf("I2C communication error (%X).\n", status);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4619      	mov	r1, r3
 80008ba:	488a      	ldr	r0, [pc, #552]	; (8000ae4 <main+0x34c>)
 80008bc:	f00a f82e 	bl	800a91c <iprintf>

  /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
  data = 0x0F;
 80008c0:	230f      	movs	r3, #15
 80008c2:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 80008c4:	23c8      	movs	r3, #200	; 0xc8
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	2301      	movs	r3, #1
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	1dbb      	adds	r3, r7, #6
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	220e      	movs	r2, #14
 80008d4:	217e      	movs	r1, #126	; 0x7e
 80008d6:	4882      	ldr	r0, [pc, #520]	; (8000ae0 <main+0x348>)
 80008d8:	f002 fdce 	bl	8003478 <HAL_I2C_Mem_Write>
 80008dc:	4603      	mov	r3, r0
 80008de:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <main+0x158>
    printf("I2C communication error (%X).\n", status);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4619      	mov	r1, r3
 80008ea:	487e      	ldr	r0, [pc, #504]	; (8000ae4 <main+0x34c>)
 80008ec:	f00a f816 	bl	800a91c <iprintf>

  /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
  data = 0x0F;
 80008f0:	230f      	movs	r3, #15
 80008f2:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 80008f4:	23c8      	movs	r3, #200	; 0xc8
 80008f6:	9302      	str	r3, [sp, #8]
 80008f8:	2301      	movs	r3, #1
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	220b      	movs	r2, #11
 8000904:	217e      	movs	r1, #126	; 0x7e
 8000906:	4876      	ldr	r0, [pc, #472]	; (8000ae0 <main+0x348>)
 8000908:	f002 fdb6 	bl	8003478 <HAL_I2C_Mem_Write>
 800090c:	4603      	mov	r3, r0
 800090e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d004      	beq.n	8000920 <main+0x188>
    printf("I2C communication error (%X).\n", status);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4619      	mov	r1, r3
 800091a:	4872      	ldr	r0, [pc, #456]	; (8000ae4 <main+0x34c>)
 800091c:	f009 fffe 	bl	800a91c <iprintf>

  /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
  data = 0x0F;
 8000920:	230f      	movs	r3, #15
 8000922:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 8000924:	23c8      	movs	r3, #200	; 0xc8
 8000926:	9302      	str	r3, [sp, #8]
 8000928:	2301      	movs	r3, #1
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	1dbb      	adds	r3, r7, #6
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	2206      	movs	r2, #6
 8000934:	217e      	movs	r1, #126	; 0x7e
 8000936:	486a      	ldr	r0, [pc, #424]	; (8000ae0 <main+0x348>)
 8000938:	f002 fd9e 	bl	8003478 <HAL_I2C_Mem_Write>
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d004      	beq.n	8000950 <main+0x1b8>
    printf("I2C communication error (%X).\n", status);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	4619      	mov	r1, r3
 800094a:	4866      	ldr	r0, [pc, #408]	; (8000ae4 <main+0x34c>)
 800094c:	f009 ffe6 	bl	800a91c <iprintf>

  /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
  data = 0x0F;
 8000950:	230f      	movs	r3, #15
 8000952:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 8000954:	23c8      	movs	r3, #200	; 0xc8
 8000956:	9302      	str	r3, [sp, #8]
 8000958:	2301      	movs	r3, #1
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	1dbb      	adds	r3, r7, #6
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2301      	movs	r3, #1
 8000962:	2223      	movs	r2, #35	; 0x23
 8000964:	217e      	movs	r1, #126	; 0x7e
 8000966:	485e      	ldr	r0, [pc, #376]	; (8000ae0 <main+0x348>)
 8000968:	f002 fd86 	bl	8003478 <HAL_I2C_Mem_Write>
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d004      	beq.n	8000980 <main+0x1e8>
    printf("I2C communication error (%X).\n", status);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4619      	mov	r1, r3
 800097a:	485a      	ldr	r0, [pc, #360]	; (8000ae4 <main+0x34c>)
 800097c:	f009 ffce 	bl	800a91c <iprintf>

  /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
  data = 0x05;
 8000980:	2305      	movs	r3, #5
 8000982:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8000984:	23c8      	movs	r3, #200	; 0xc8
 8000986:	9302      	str	r3, [sp, #8]
 8000988:	2301      	movs	r3, #1
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	1dbb      	adds	r3, r7, #6
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2301      	movs	r3, #1
 8000992:	2222      	movs	r2, #34	; 0x22
 8000994:	217e      	movs	r1, #126	; 0x7e
 8000996:	4852      	ldr	r0, [pc, #328]	; (8000ae0 <main+0x348>)
 8000998:	f002 fd6e 	bl	8003478 <HAL_I2C_Mem_Write>
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d004      	beq.n	80009b0 <main+0x218>
    printf("I2C communication error (%X).\n", status);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4619      	mov	r1, r3
 80009aa:	484e      	ldr	r0, [pc, #312]	; (8000ae4 <main+0x34c>)
 80009ac:	f009 ffb6 	bl	800a91c <iprintf>

  /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
  data = 0x7D;
 80009b0:	237d      	movs	r3, #125	; 0x7d
 80009b2:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 80009b4:	23c8      	movs	r3, #200	; 0xc8
 80009b6:	9302      	str	r3, [sp, #8]
 80009b8:	2301      	movs	r3, #1
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	1dbb      	adds	r3, r7, #6
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2301      	movs	r3, #1
 80009c2:	2225      	movs	r2, #37	; 0x25
 80009c4:	217e      	movs	r1, #126	; 0x7e
 80009c6:	4846      	ldr	r0, [pc, #280]	; (8000ae0 <main+0x348>)
 80009c8:	f002 fd56 	bl	8003478 <HAL_I2C_Mem_Write>
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <main+0x248>
    printf("I2C communication error (%X).\n", status);
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4619      	mov	r1, r3
 80009da:	4842      	ldr	r0, [pc, #264]	; (8000ae4 <main+0x34c>)
 80009dc:	f009 ff9e 	bl	800a91c <iprintf>

  /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
  data = 0x1B;
 80009e0:	231b      	movs	r3, #27
 80009e2:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 80009e4:	23c8      	movs	r3, #200	; 0xc8
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	2301      	movs	r3, #1
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	1dbb      	adds	r3, r7, #6
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	2226      	movs	r2, #38	; 0x26
 80009f4:	217e      	movs	r1, #126	; 0x7e
 80009f6:	483a      	ldr	r0, [pc, #232]	; (8000ae0 <main+0x348>)
 80009f8:	f002 fd3e 	bl	8003478 <HAL_I2C_Mem_Write>
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d004      	beq.n	8000a10 <main+0x278>
    printf("I2C communication error (%X).\n", status);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4836      	ldr	r0, [pc, #216]	; (8000ae4 <main+0x34c>)
 8000a0c:	f009 ff86 	bl	800a91c <iprintf>

  /* Enable EXTI4_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000a10:	2064      	movs	r0, #100	; 0x64
 8000a12:	f001 fedd 	bl	80027d0 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a16:	200a      	movs	r0, #10
 8000a18:	f002 fa8a 	bl	8002f30 <HAL_NVIC_EnableIRQ>

  /* Disable EXTI2_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000a1c:	2008      	movs	r0, #8
 8000a1e:	f002 fa95 	bl	8002f4c <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 8000a22:	2312      	movs	r3, #18
 8000a24:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000a26:	23c8      	movs	r3, #200	; 0xc8
 8000a28:	9302      	str	r3, [sp, #8]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	1dbb      	adds	r3, r7, #6
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2301      	movs	r3, #1
 8000a34:	227d      	movs	r2, #125	; 0x7d
 8000a36:	217c      	movs	r1, #124	; 0x7c
 8000a38:	4829      	ldr	r0, [pc, #164]	; (8000ae0 <main+0x348>)
 8000a3a:	f002 fd1d 	bl	8003478 <HAL_I2C_Mem_Write>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d004      	beq.n	8000a52 <main+0x2ba>
    printf("I2C communication error (%X).\n", status);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4825      	ldr	r0, [pc, #148]	; (8000ae4 <main+0x34c>)
 8000a4e:	f009 ff65 	bl	800a91c <iprintf>

  data = 0x34;
 8000a52:	2334      	movs	r3, #52	; 0x34
 8000a54:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000a56:	23c8      	movs	r3, #200	; 0xc8
 8000a58:	9302      	str	r3, [sp, #8]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2301      	movs	r3, #1
 8000a64:	227d      	movs	r2, #125	; 0x7d
 8000a66:	217c      	movs	r1, #124	; 0x7c
 8000a68:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <main+0x348>)
 8000a6a:	f002 fd05 	bl	8003478 <HAL_I2C_Mem_Write>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <main+0x2ea>
    printf("I2C communication error (%X).\n", status);
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4819      	ldr	r0, [pc, #100]	; (8000ae4 <main+0x34c>)
 8000a7e:	f009 ff4d 	bl	800a91c <iprintf>

  HAL_Delay(100);
 8000a82:	2064      	movs	r0, #100	; 0x64
 8000a84:	f001 fea4 	bl	80027d0 <HAL_Delay>

  /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000a88:	23ff      	movs	r3, #255	; 0xff
 8000a8a:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000a8c:	23c8      	movs	r3, #200	; 0xc8
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	2301      	movs	r3, #1
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	1dbb      	adds	r3, r7, #6
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	217c      	movs	r1, #124	; 0x7c
 8000a9e:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <main+0x348>)
 8000aa0:	f002 fcea 	bl	8003478 <HAL_I2C_Mem_Write>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d004      	beq.n	8000ab8 <main+0x320>
    printf("I2C communication error (%X).\n", status);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <main+0x34c>)
 8000ab4:	f009 ff32 	bl	800a91c <iprintf>

  /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000ab8:	23ff      	movs	r3, #255	; 0xff
 8000aba:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000abc:	23c8      	movs	r3, #200	; 0xc8
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	1dbb      	adds	r3, r7, #6
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	220e      	movs	r2, #14
 8000acc:	217c      	movs	r1, #124	; 0x7c
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <main+0x348>)
 8000ad0:	f002 fcd2 	bl	8003478 <HAL_I2C_Mem_Write>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	e005      	b.n	8000ae8 <main+0x350>
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	200000e4 	.word	0x200000e4
 8000ae4:	0800b7a0 	.word	0x0800b7a0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d004      	beq.n	8000af6 <main+0x35e>
    printf("I2C communication error (%X).\n", status);
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4619      	mov	r1, r3
 8000af0:	485f      	ldr	r0, [pc, #380]	; (8000c70 <main+0x4d8>)
 8000af2:	f009 ff13 	bl	800a91c <iprintf>

  /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
  data = 0x00;
 8000af6:	2300      	movs	r3, #0
 8000af8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000afa:	23c8      	movs	r3, #200	; 0xc8
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	2301      	movs	r3, #1
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	1dbb      	adds	r3, r7, #6
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	2213      	movs	r2, #19
 8000b0a:	217c      	movs	r1, #124	; 0x7c
 8000b0c:	4859      	ldr	r0, [pc, #356]	; (8000c74 <main+0x4dc>)
 8000b0e:	f002 fcb3 	bl	8003478 <HAL_I2C_Mem_Write>
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d004      	beq.n	8000b26 <main+0x38e>
    printf("I2C communication error (%X).\n", status);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4853      	ldr	r0, [pc, #332]	; (8000c70 <main+0x4d8>)
 8000b22:	f009 fefb 	bl	800a91c <iprintf>

  /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000b26:	23aa      	movs	r3, #170	; 0xaa
 8000b28:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000b2a:	23c8      	movs	r3, #200	; 0xc8
 8000b2c:	9302      	str	r3, [sp, #8]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	1dbb      	adds	r3, r7, #6
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2301      	movs	r3, #1
 8000b38:	2216      	movs	r2, #22
 8000b3a:	217c      	movs	r1, #124	; 0x7c
 8000b3c:	484d      	ldr	r0, [pc, #308]	; (8000c74 <main+0x4dc>)
 8000b3e:	f002 fc9b 	bl	8003478 <HAL_I2C_Mem_Write>
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <main+0x3be>
    printf("I2C communication error (%X).\n", status);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4847      	ldr	r0, [pc, #284]	; (8000c70 <main+0x4d8>)
 8000b52:	f009 fee3 	bl	800a91c <iprintf>

  /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000b56:	23aa      	movs	r3, #170	; 0xaa
 8000b58:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000b5a:	23c8      	movs	r3, #200	; 0xc8
 8000b5c:	9302      	str	r3, [sp, #8]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	1dbb      	adds	r3, r7, #6
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2301      	movs	r3, #1
 8000b68:	2217      	movs	r2, #23
 8000b6a:	217c      	movs	r1, #124	; 0x7c
 8000b6c:	4841      	ldr	r0, [pc, #260]	; (8000c74 <main+0x4dc>)
 8000b6e:	f002 fc83 	bl	8003478 <HAL_I2C_Mem_Write>
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d004      	beq.n	8000b86 <main+0x3ee>
    printf("I2C communication error (%X).\n", status);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	483b      	ldr	r0, [pc, #236]	; (8000c70 <main+0x4d8>)
 8000b82:	f009 fecb 	bl	800a91c <iprintf>

  /* Enable EXTI2_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f001 fe22 	bl	80027d0 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b8c:	2008      	movs	r0, #8
 8000b8e:	f002 f9cf 	bl	8002f30 <HAL_NVIC_EnableIRQ>


  printf("Ready\n");
 8000b92:	4839      	ldr	r0, [pc, #228]	; (8000c78 <main+0x4e0>)
 8000b94:	f009 ff48 	bl	800aa28 <puts>
  //int lineData;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b98:	f006 fc5a 	bl	8007450 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LineSensorTask */
  LineSensorTaskHandle = osThreadNew(StartLineSensorTask, NULL, &LineSensorTask_attributes);
 8000b9c:	4a37      	ldr	r2, [pc, #220]	; (8000c7c <main+0x4e4>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4837      	ldr	r0, [pc, #220]	; (8000c80 <main+0x4e8>)
 8000ba2:	f006 fcbf 	bl	8007524 <osThreadNew>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <main+0x4ec>)
 8000baa:	6013      	str	r3, [r2, #0]

  /* creation of led1Task */
  led1TaskHandle = osThreadNew(StartLED1Task, NULL, &led1Task_attributes);
 8000bac:	4a36      	ldr	r2, [pc, #216]	; (8000c88 <main+0x4f0>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4836      	ldr	r0, [pc, #216]	; (8000c8c <main+0x4f4>)
 8000bb2:	f006 fcb7 	bl	8007524 <osThreadNew>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a35      	ldr	r2, [pc, #212]	; (8000c90 <main+0x4f8>)
 8000bba:	6013      	str	r3, [r2, #0]

  /* creation of led2Task */
  led2TaskHandle = osThreadNew(StartLED2Task, NULL, &led2Task_attributes);
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <main+0x4fc>)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4835      	ldr	r0, [pc, #212]	; (8000c98 <main+0x500>)
 8000bc2:	f006 fcaf 	bl	8007524 <osThreadNew>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a34      	ldr	r2, [pc, #208]	; (8000c9c <main+0x504>)
 8000bca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bcc:	f006 fc74 	bl	80074b8 <osKernelStart>

	  /*HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &lineData, 1, I2C_TIMEOUT);
	  findBinary(lineData);
	  printf("Decimal is: %d \n\r", lineData);
	  HAL_Delay(500);*/
	  if(triggeredChar == '#'){
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <main+0x508>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b23      	cmp	r3, #35	; 0x23
 8000bd6:	d124      	bne.n	8000c22 <main+0x48a>
		  flag = 1;
 8000bd8:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <main+0x50c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8000bde:	2120      	movs	r1, #32
 8000be0:	4831      	ldr	r0, [pc, #196]	; (8000ca8 <main+0x510>)
 8000be2:	f002 fb86 	bl	80032f2 <HAL_GPIO_TogglePin>
		  if(inputUser != 0){
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <main+0x514>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d014      	beq.n	8000c18 <main+0x480>
			  HAL_Delay((1.0/inputUser)*1000);
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <main+0x514>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	ee07 3a90 	vmov	s15, r3
 8000bf6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bfa:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000bfe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c02:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000c68 <main+0x4d0>
 8000c06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c0e:	ee17 0a90 	vmov	r0, s15
 8000c12:	f001 fddd 	bl	80027d0 <HAL_Delay>
 8000c16:	e7db      	b.n	8000bd0 <main+0x438>
		  }
		  else{
			  HAL_Delay(1000);
 8000c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1c:	f001 fdd8 	bl	80027d0 <HAL_Delay>
 8000c20:	e7d6      	b.n	8000bd0 <main+0x438>
		  }
	  }
	  else{
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8000c22:	2120      	movs	r1, #32
 8000c24:	4820      	ldr	r0, [pc, #128]	; (8000ca8 <main+0x510>)
 8000c26:	f002 fb64 	bl	80032f2 <HAL_GPIO_TogglePin>
		  if(freq != 0){
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <main+0x518>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d014      	beq.n	8000c5c <main+0x4c4>
			  HAL_Delay((1.0/freq)*1000);
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <main+0x518>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c3e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000c42:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c46:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000c68 <main+0x4d0>
 8000c4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c52:	ee17 0a90 	vmov	r0, s15
 8000c56:	f001 fdbb 	bl	80027d0 <HAL_Delay>
 8000c5a:	e7b9      	b.n	8000bd0 <main+0x438>
		  }
		  else{
			  HAL_Delay(1000);
 8000c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c60:	f001 fdb6 	bl	80027d0 <HAL_Delay>
	  if(triggeredChar == '#'){
 8000c64:	e7b4      	b.n	8000bd0 <main+0x438>
 8000c66:	bf00      	nop
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	408f4000 	.word	0x408f4000
 8000c70:	0800b7a0 	.word	0x0800b7a0
 8000c74:	200000e4 	.word	0x200000e4
 8000c78:	0800b7c0 	.word	0x0800b7c0
 8000c7c:	0800b7e0 	.word	0x0800b7e0
 8000c80:	08001ae9 	.word	0x08001ae9
 8000c84:	20000660 	.word	0x20000660
 8000c88:	0800b804 	.word	0x0800b804
 8000c8c:	08001b1d 	.word	0x08001b1d
 8000c90:	20000664 	.word	0x20000664
 8000c94:	0800b828 	.word	0x0800b828
 8000c98:	08001b39 	.word	0x08001b39
 8000c9c:	20000668 	.word	0x20000668
 8000ca0:	20000674 	.word	0x20000674
 8000ca4:	20000680 	.word	0x20000680
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	20000678 	.word	0x20000678
 8000cb0:	20000684 	.word	0x20000684

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b094      	sub	sp, #80	; 0x50
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	2234      	movs	r2, #52	; 0x34
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f009 fd8d 	bl	800a7e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cd8:	f003 f92e 	bl	8003f38 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <SystemClock_Config+0xdc>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a2b      	ldr	r2, [pc, #172]	; (8000d90 <SystemClock_Config+0xdc>)
 8000ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <SystemClock_Config+0xdc>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <SystemClock_Config+0xe0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <SystemClock_Config+0xe0>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <SystemClock_Config+0xe0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d28:	2360      	movs	r3, #96	; 0x60
 8000d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d30:	2304      	movs	r3, #4
 8000d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 f95b 	bl	8003ff8 <HAL_RCC_OscConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d48:	f000 ff18 	bl	8001b7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d4c:	f003 f904 	bl	8003f58 <HAL_PWREx_EnableOverDrive>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d56:	f000 ff11 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	2103      	movs	r1, #3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fbec 	bl	8004554 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d82:	f000 fefb 	bl	8001b7c <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3750      	adds	r7, #80	; 0x50
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40007000 	.word	0x40007000

08000d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000dac:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <MX_ADC1_Init+0x9c>)
 8000dae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000db2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000db6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <MX_ADC1_Init+0xa0>)
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000dfa:	f001 fd0d 	bl	8002818 <HAL_ADC_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e04:	f000 feba 	bl	8001b7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_ADC1_Init+0x98>)
 8000e1a:	f001 fd41 	bl	80028a0 <HAL_ADC_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e24:	f000 feaa 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000009c 	.word	0x2000009c
 8000e34:	40012000 	.word	0x40012000
 8000e38:	0f000001 	.word	0x0f000001

08000e3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e42:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <MX_I2C1_Init+0x78>)
 8000e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <MX_I2C1_Init+0x7c>)
 8000e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e78:	f002 fa6e 	bl	8003358 <HAL_I2C_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e82:	f000 fe7b 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e8a:	f002 ffbd 	bl	8003e08 <HAL_I2CEx_ConfigAnalogFilter>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e94:	f000 fe72 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_I2C1_Init+0x74>)
 8000e9c:	f002 ffff 	bl	8003e9e <HAL_I2CEx_ConfigDigitalFilter>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ea6:	f000 fe69 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000e4 	.word	0x200000e4
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	20303e5d 	.word	0x20303e5d

08000ebc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <MX_I2C2_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <MX_I2C2_Init+0x7c>)
 8000eca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ef6:	480e      	ldr	r0, [pc, #56]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000ef8:	f002 fa2e 	bl	8003358 <HAL_I2C_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f02:	f000 fe3b 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000f0a:	f002 ff7d 	bl	8003e08 <HAL_I2CEx_ConfigAnalogFilter>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f14:	f000 fe32 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_I2C2_Init+0x74>)
 8000f1c:	f002 ffbf 	bl	8003e9e <HAL_I2CEx_ConfigDigitalFilter>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 fe29 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000138 	.word	0x20000138
 8000f34:	40005800 	.word	0x40005800
 8000f38:	20303e5d 	.word	0x20303e5d

08000f3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <MX_SPI1_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f56:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f96:	2208      	movs	r2, #8
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_SPI1_Init+0x74>)
 8000f9c:	f004 f95a 	bl	8005254 <HAL_SPI_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fa6:	f000 fde9 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000018c 	.word	0x2000018c
 8000fb4:	40013000 	.word	0x40013000

08000fb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b09a      	sub	sp, #104	; 0x68
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	222c      	movs	r2, #44	; 0x2c
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f009 fbf5 	bl	800a7e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ff8:	4b55      	ldr	r3, [pc, #340]	; (8001150 <MX_TIM1_Init+0x198>)
 8000ffa:	4a56      	ldr	r2, [pc, #344]	; (8001154 <MX_TIM1_Init+0x19c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <MX_TIM1_Init+0x198>)
 8001000:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001004:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b52      	ldr	r3, [pc, #328]	; (8001150 <MX_TIM1_Init+0x198>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 800100c:	4b50      	ldr	r3, [pc, #320]	; (8001150 <MX_TIM1_Init+0x198>)
 800100e:	22c8      	movs	r2, #200	; 0xc8
 8001010:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <MX_TIM1_Init+0x198>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001018:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <MX_TIM1_Init+0x198>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <MX_TIM1_Init+0x198>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001024:	484a      	ldr	r0, [pc, #296]	; (8001150 <MX_TIM1_Init+0x198>)
 8001026:	f004 f9c0 	bl	80053aa <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001030:	f000 fda4 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800103a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800103e:	4619      	mov	r1, r3
 8001040:	4843      	ldr	r0, [pc, #268]	; (8001150 <MX_TIM1_Init+0x198>)
 8001042:	f004 feb9 	bl	8005db8 <HAL_TIM_ConfigClockSource>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800104c:	f000 fd96 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001050:	483f      	ldr	r0, [pc, #252]	; (8001150 <MX_TIM1_Init+0x198>)
 8001052:	f004 fa79 	bl	8005548 <HAL_TIM_PWM_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800105c:	f000 fd8e 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800106c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001070:	4619      	mov	r1, r3
 8001072:	4837      	ldr	r0, [pc, #220]	; (8001150 <MX_TIM1_Init+0x198>)
 8001074:	f005 fc54 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800107e:	f000 fd7d 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001082:	2360      	movs	r3, #96	; 0x60
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108a:	2300      	movs	r3, #0
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	482a      	ldr	r0, [pc, #168]	; (8001150 <MX_TIM1_Init+0x198>)
 80010a8:	f004 fd72 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010b2:	f000 fd63 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ba:	2204      	movs	r2, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4824      	ldr	r0, [pc, #144]	; (8001150 <MX_TIM1_Init+0x198>)
 80010c0:	f004 fd66 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010ca:	f000 fd57 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d2:	2208      	movs	r2, #8
 80010d4:	4619      	mov	r1, r3
 80010d6:	481e      	ldr	r0, [pc, #120]	; (8001150 <MX_TIM1_Init+0x198>)
 80010d8:	f004 fd5a 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80010e2:	f000 fd4b 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ea:	220c      	movs	r2, #12
 80010ec:	4619      	mov	r1, r3
 80010ee:	4818      	ldr	r0, [pc, #96]	; (8001150 <MX_TIM1_Init+0x198>)
 80010f0:	f004 fd4e 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80010fa:	f000 fd3f 	bl	8001b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001116:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_TIM1_Init+0x198>)
 8001134:	f005 fc82 	bl	8006a3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800113e:	f000 fd1d 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_TIM1_Init+0x198>)
 8001144:	f000 ffa4 	bl	8002090 <HAL_TIM_MspPostInit>

}
 8001148:	bf00      	nop
 800114a:	3768      	adds	r7, #104	; 0x68
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200001f0 	.word	0x200001f0
 8001154:	40010000 	.word	0x40010000

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b092      	sub	sp, #72	; 0x48
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001198:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <MX_TIM2_Init+0x130>)
 800119a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011a0:	4b39      	ldr	r3, [pc, #228]	; (8001288 <MX_TIM2_Init+0x130>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <MX_TIM2_Init+0x130>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011ac:	4b36      	ldr	r3, [pc, #216]	; (8001288 <MX_TIM2_Init+0x130>)
 80011ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b34      	ldr	r3, [pc, #208]	; (8001288 <MX_TIM2_Init+0x130>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b33      	ldr	r3, [pc, #204]	; (8001288 <MX_TIM2_Init+0x130>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c0:	4831      	ldr	r0, [pc, #196]	; (8001288 <MX_TIM2_Init+0x130>)
 80011c2:	f004 f8f2 	bl	80053aa <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011cc:	f000 fcd6 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011da:	4619      	mov	r1, r3
 80011dc:	482a      	ldr	r0, [pc, #168]	; (8001288 <MX_TIM2_Init+0x130>)
 80011de:	f004 fdeb 	bl	8005db8 <HAL_TIM_ConfigClockSource>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011e8:	f000 fcc8 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011ec:	4826      	ldr	r0, [pc, #152]	; (8001288 <MX_TIM2_Init+0x130>)
 80011ee:	f004 f9ab 	bl	8005548 <HAL_TIM_PWM_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80011f8:	f000 fcc0 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011fc:	4822      	ldr	r0, [pc, #136]	; (8001288 <MX_TIM2_Init+0x130>)
 80011fe:	f004 fa04 	bl	800560a <HAL_TIM_IC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001208:	f000 fcb8 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001218:	4619      	mov	r1, r3
 800121a:	481b      	ldr	r0, [pc, #108]	; (8001288 <MX_TIM2_Init+0x130>)
 800121c:	f005 fb80 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001226:	f000 fca9 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <MX_TIM2_Init+0x130>)
 8001244:	f004 fca4 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800124e:	f000 fc95 	bl	8001b7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001256:	2301      	movs	r3, #1
 8001258:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2208      	movs	r2, #8
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM2_Init+0x130>)
 800126a:	f004 fbf4 	bl	8005a56 <HAL_TIM_IC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001274:	f000 fc82 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM2_Init+0x130>)
 800127a:	f000 ff09 	bl	8002090 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3748      	adds	r7, #72	; 0x48
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000023c 	.word	0x2000023c

0800128c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2224      	movs	r2, #36	; 0x24
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f009 faa1 	bl	800a7e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <MX_TIM3_Init+0xa8>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012e8:	2301      	movs	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012fc:	f004 f9e6 	bl	80056cc <HAL_TIM_Encoder_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001306:	f000 fc39 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_TIM3_Init+0xa4>)
 8001318:	f005 fb02 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001322:	f000 fc2b 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	; 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000288 	.word	0x20000288
 8001334:	40000400 	.word	0x40000400

08001338 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f009 fa4b 	bl	800a7e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_TIM4_Init+0xa4>)
 8001358:	4a21      	ldr	r2, [pc, #132]	; (80013e0 <MX_TIM4_Init+0xa8>)
 800135a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_TIM4_Init+0xa4>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <MX_TIM4_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_TIM4_Init+0xa4>)
 800136a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_TIM4_Init+0xa4>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_TIM4_Init+0xa4>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800137c:	2301      	movs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001384:	2301      	movs	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001394:	2301      	movs	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_TIM4_Init+0xa4>)
 80013a8:	f004 f990 	bl	80056cc <HAL_TIM_Encoder_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013b2:	f000 fbe3 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_TIM4_Init+0xa4>)
 80013c4:	f005 faac 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80013ce:	f000 fbd5 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3730      	adds	r7, #48	; 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002d4 	.word	0x200002d4
 80013e0:	40000800 	.word	0x40000800

080013e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <MX_TIM5_Init+0xe8>)
 8001418:	4a2d      	ldr	r2, [pc, #180]	; (80014d0 <MX_TIM5_Init+0xec>)
 800141a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <MX_TIM5_Init+0xe8>)
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <MX_TIM5_Init+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_TIM5_Init+0xe8>)
 800142a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800142e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_TIM5_Init+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <MX_TIM5_Init+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800143c:	4823      	ldr	r0, [pc, #140]	; (80014cc <MX_TIM5_Init+0xe8>)
 800143e:	f003 ffb4 	bl	80053aa <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001448:	f000 fb98 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	4619      	mov	r1, r3
 8001458:	481c      	ldr	r0, [pc, #112]	; (80014cc <MX_TIM5_Init+0xe8>)
 800145a:	f004 fcad 	bl	8005db8 <HAL_TIM_ConfigClockSource>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001464:	f000 fb8a 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <MX_TIM5_Init+0xe8>)
 800146a:	f004 f86d 	bl	8005548 <HAL_TIM_PWM_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001474:	f000 fb82 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4811      	ldr	r0, [pc, #68]	; (80014cc <MX_TIM5_Init+0xe8>)
 8001488:	f005 fa4a 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001492:	f000 fb73 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	; 0x60
 8001498:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM5_Init+0xe8>)
 80014ae:	f004 fb6f 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80014b8:	f000 fb60 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM5_Init+0xe8>)
 80014be:	f000 fde7 	bl	8002090 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3738      	adds	r7, #56	; 0x38
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000320 	.word	0x20000320
 80014d0:	40000c00 	.word	0x40000c00

080014d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b09a      	sub	sp, #104	; 0x68
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	222c      	movs	r2, #44	; 0x2c
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f009 f967 	bl	800a7e2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001514:	4b56      	ldr	r3, [pc, #344]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001516:	4a57      	ldr	r2, [pc, #348]	; (8001674 <MX_TIM8_Init+0x1a0>)
 8001518:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 800151a:	4b55      	ldr	r3, [pc, #340]	; (8001670 <MX_TIM8_Init+0x19c>)
 800151c:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001520:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b53      	ldr	r3, [pc, #332]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <MX_TIM8_Init+0x19c>)
 800152a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800152e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001536:	4b4e      	ldr	r3, [pc, #312]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001538:	2200      	movs	r2, #0
 800153a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b4c      	ldr	r3, [pc, #304]	; (8001670 <MX_TIM8_Init+0x19c>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001542:	484b      	ldr	r0, [pc, #300]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001544:	f003 ff31 	bl	80053aa <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800154e:	f000 fb15 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001556:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800155c:	4619      	mov	r1, r3
 800155e:	4844      	ldr	r0, [pc, #272]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001560:	f004 fc2a 	bl	8005db8 <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800156a:	f000 fb07 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800156e:	4840      	ldr	r0, [pc, #256]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001570:	f003 ffea 	bl	8005548 <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800157a:	f000 faff 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800158a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800158e:	4619      	mov	r1, r3
 8001590:	4837      	ldr	r0, [pc, #220]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001592:	f005 f9c5 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800159c:	f000 faee 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a0:	2360      	movs	r3, #96	; 0x60
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c0:	2200      	movs	r2, #0
 80015c2:	4619      	mov	r1, r3
 80015c4:	482a      	ldr	r0, [pc, #168]	; (8001670 <MX_TIM8_Init+0x19c>)
 80015c6:	f004 fae3 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80015d0:	f000 fad4 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d8:	2204      	movs	r2, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4824      	ldr	r0, [pc, #144]	; (8001670 <MX_TIM8_Init+0x19c>)
 80015de:	f004 fad7 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80015e8:	f000 fac8 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f0:	2208      	movs	r2, #8
 80015f2:	4619      	mov	r1, r3
 80015f4:	481e      	ldr	r0, [pc, #120]	; (8001670 <MX_TIM8_Init+0x19c>)
 80015f6:	f004 facb 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001600:	f000 fabc 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001608:	220c      	movs	r2, #12
 800160a:	4619      	mov	r1, r3
 800160c:	4818      	ldr	r0, [pc, #96]	; (8001670 <MX_TIM8_Init+0x19c>)
 800160e:	f004 fabf 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001618:	f000 fab0 	bl	8001b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001634:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800163e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4619      	mov	r1, r3
 8001650:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001652:	f005 f9f3 	bl	8006a3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 800165c:	f000 fa8e 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <MX_TIM8_Init+0x19c>)
 8001662:	f000 fd15 	bl	8002090 <HAL_TIM_MspPostInit>

}
 8001666:	bf00      	nop
 8001668:	3768      	adds	r7, #104	; 0x68
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000036c 	.word	0x2000036c
 8001674:	40010400 	.word	0x40010400

08001678 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_UART4_Init+0x58>)
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <MX_UART4_Init+0x5c>)
 8001680:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_UART4_Init+0x58>)
 8001684:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001688:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_UART4_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_UART4_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_UART4_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_UART4_Init+0x58>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_UART4_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_UART4_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_UART4_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_UART4_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_UART4_Init+0x58>)
 80016bc:	f005 fa5a 	bl	8006b74 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80016c6:	f000 fa59 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200003b8 	.word	0x200003b8
 80016d4:	40004c00 	.word	0x40004c00

080016d8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_UART5_Init+0x58>)
 80016de:	4a15      	ldr	r2, [pc, #84]	; (8001734 <MX_UART5_Init+0x5c>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_UART5_Init+0x58>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_UART5_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_UART5_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_UART5_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_UART5_Init+0x58>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_UART5_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_UART5_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_UART5_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_UART5_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_UART5_Init+0x58>)
 800171c:	f005 fa2a 	bl	8006b74 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001726:	f000 fa29 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000440 	.word	0x20000440
 8001734:	40005000 	.word	0x40005000

08001738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <MX_USART1_UART_Init+0x5c>)
 8001740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800177c:	f005 f9fa 	bl	8006b74 <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001786:	f000 f9f9 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200004c8 	.word	0x200004c8
 8001794:	40011000 	.word	0x40011000

08001798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <MX_USART2_UART_Init+0x5c>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017dc:	f005 f9ca 	bl	8006b74 <HAL_UART_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017e6:	f000 f9c9 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000550 	.word	0x20000550
 80017f4:	40004400 	.word	0x40004400

080017f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_USART3_UART_Init+0x58>)
 80017fe:	4a15      	ldr	r2, [pc, #84]	; (8001854 <MX_USART3_UART_Init+0x5c>)
 8001800:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <MX_USART3_UART_Init+0x58>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_USART3_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_USART3_UART_Init+0x58>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_USART3_UART_Init+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_USART3_UART_Init+0x58>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_USART3_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_USART3_UART_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_USART3_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_USART3_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_USART3_UART_Init+0x58>)
 800183c:	f005 f99a 	bl	8006b74 <HAL_UART_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001846:	f000 f999 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200005d8 	.word	0x200005d8
 8001854:	40004800 	.word	0x40004800

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08e      	sub	sp, #56	; 0x38
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186e:	4b97      	ldr	r3, [pc, #604]	; (8001acc <MX_GPIO_Init+0x274>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a96      	ldr	r2, [pc, #600]	; (8001acc <MX_GPIO_Init+0x274>)
 8001874:	f043 0310 	orr.w	r3, r3, #16
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b94      	ldr	r3, [pc, #592]	; (8001acc <MX_GPIO_Init+0x274>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	4b91      	ldr	r3, [pc, #580]	; (8001acc <MX_GPIO_Init+0x274>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a90      	ldr	r2, [pc, #576]	; (8001acc <MX_GPIO_Init+0x274>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b8e      	ldr	r3, [pc, #568]	; (8001acc <MX_GPIO_Init+0x274>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800189e:	4b8b      	ldr	r3, [pc, #556]	; (8001acc <MX_GPIO_Init+0x274>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a8a      	ldr	r2, [pc, #552]	; (8001acc <MX_GPIO_Init+0x274>)
 80018a4:	f043 0320 	orr.w	r3, r3, #32
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b88      	ldr	r3, [pc, #544]	; (8001acc <MX_GPIO_Init+0x274>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b6:	4b85      	ldr	r3, [pc, #532]	; (8001acc <MX_GPIO_Init+0x274>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a84      	ldr	r2, [pc, #528]	; (8001acc <MX_GPIO_Init+0x274>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b82      	ldr	r3, [pc, #520]	; (8001acc <MX_GPIO_Init+0x274>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b7f      	ldr	r3, [pc, #508]	; (8001acc <MX_GPIO_Init+0x274>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a7e      	ldr	r2, [pc, #504]	; (8001acc <MX_GPIO_Init+0x274>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b7c      	ldr	r3, [pc, #496]	; (8001acc <MX_GPIO_Init+0x274>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b79      	ldr	r3, [pc, #484]	; (8001acc <MX_GPIO_Init+0x274>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a78      	ldr	r2, [pc, #480]	; (8001acc <MX_GPIO_Init+0x274>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b76      	ldr	r3, [pc, #472]	; (8001acc <MX_GPIO_Init+0x274>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <MX_GPIO_Init+0x274>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a72      	ldr	r2, [pc, #456]	; (8001acc <MX_GPIO_Init+0x274>)
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b70      	ldr	r3, [pc, #448]	; (8001acc <MX_GPIO_Init+0x274>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001916:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <MX_GPIO_Init+0x274>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a6c      	ldr	r2, [pc, #432]	; (8001acc <MX_GPIO_Init+0x274>)
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <MX_GPIO_Init+0x274>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2178      	movs	r1, #120	; 0x78
 8001932:	4867      	ldr	r0, [pc, #412]	; (8001ad0 <MX_GPIO_Init+0x278>)
 8001934:	f001 fcc4 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f244 0181 	movw	r1, #16513	; 0x4081
 800193e:	4865      	ldr	r0, [pc, #404]	; (8001ad4 <MX_GPIO_Init+0x27c>)
 8001940:	f001 fcbe 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2140      	movs	r1, #64	; 0x40
 8001948:	4863      	ldr	r0, [pc, #396]	; (8001ad8 <MX_GPIO_Init+0x280>)
 800194a:	f001 fcb9 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6;
 800194e:	2378      	movs	r3, #120	; 0x78
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001962:	4619      	mov	r1, r3
 8001964:	485a      	ldr	r0, [pc, #360]	; (8001ad0 <MX_GPIO_Init+0x278>)
 8001966:	f001 faff 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 800196a:	f643 7308 	movw	r3, #16136	; 0x3f08
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001970:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	4619      	mov	r1, r3
 8001980:	4856      	ldr	r0, [pc, #344]	; (8001adc <MX_GPIO_Init+0x284>)
 8001982:	f001 faf1 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 8001986:	2310      	movs	r3, #16
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800198a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	4850      	ldr	r0, [pc, #320]	; (8001adc <MX_GPIO_Init+0x284>)
 800199c:	f001 fae4 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019a0:	2332      	movs	r3, #50	; 0x32
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019b0:	230b      	movs	r3, #11
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	4619      	mov	r1, r3
 80019ba:	4849      	ldr	r0, [pc, #292]	; (8001ae0 <MX_GPIO_Init+0x288>)
 80019bc:	f001 fad4 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019c0:	2386      	movs	r3, #134	; 0x86
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019d0:	230b      	movs	r3, #11
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	4842      	ldr	r0, [pc, #264]	; (8001ae4 <MX_GPIO_Init+0x28c>)
 80019dc:	f001 fac4 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f6:	4619      	mov	r1, r3
 80019f8:	4836      	ldr	r0, [pc, #216]	; (8001ad4 <MX_GPIO_Init+0x27c>)
 80019fa:	f001 fab5 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a10:	230b      	movs	r3, #11
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	482e      	ldr	r0, [pc, #184]	; (8001ad4 <MX_GPIO_Init+0x27c>)
 8001a1c:	f001 faa4 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a20:	2340      	movs	r3, #64	; 0x40
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a34:	4619      	mov	r1, r3
 8001a36:	4828      	ldr	r0, [pc, #160]	; (8001ad8 <MX_GPIO_Init+0x280>)
 8001a38:	f001 fa96 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4822      	ldr	r0, [pc, #136]	; (8001ad8 <MX_GPIO_Init+0x280>)
 8001a50:	f001 fa8a 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a54:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a66:	230a      	movs	r3, #10
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481c      	ldr	r0, [pc, #112]	; (8001ae4 <MX_GPIO_Init+0x28c>)
 8001a72:	f001 fa79 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4816      	ldr	r0, [pc, #88]	; (8001ae4 <MX_GPIO_Init+0x28c>)
 8001a8c:	f001 fa6c 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa2:	230b      	movs	r3, #11
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <MX_GPIO_Init+0x280>)
 8001aae:	f001 fa5b 	bl	8002f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	200a      	movs	r0, #10
 8001ab8:	f001 fa1e 	bl	8002ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001abc:	200a      	movs	r0, #10
 8001abe:	f001 fa37 	bl	8002f30 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3738      	adds	r7, #56	; 0x38
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40021800 	.word	0x40021800
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <StartLineSensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLineSensorTask */
void StartLineSensorTask(void *argument)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &lineData, 1, I2C_TIMEOUT);
 8001af0:	23c8      	movs	r3, #200	; 0xc8
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	2301      	movs	r3, #1
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <StartLineSensorTask+0x2c>)
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2301      	movs	r3, #1
 8001afe:	2210      	movs	r2, #16
 8001b00:	217c      	movs	r1, #124	; 0x7c
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <StartLineSensorTask+0x30>)
 8001b04:	f001 fdcc 	bl	80036a0 <HAL_I2C_Mem_Read>
	  osDelay(1000);
 8001b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b0c:	f005 fdb0 	bl	8007670 <osDelay>
	  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &lineData, 1, I2C_TIMEOUT);
 8001b10:	e7ee      	b.n	8001af0 <StartLineSensorTask+0x8>
 8001b12:	bf00      	nop
 8001b14:	20000688 	.word	0x20000688
 8001b18:	200000e4 	.word	0x200000e4

08001b1c <StartLED1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED1Task */
void StartLED1Task(void *argument)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED1Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8001b24:	2120      	movs	r1, #32
 8001b26:	4803      	ldr	r0, [pc, #12]	; (8001b34 <StartLED1Task+0x18>)
 8001b28:	f001 fbe3 	bl	80032f2 <HAL_GPIO_TogglePin>
    osDelay((1.0/20)*1000);
 8001b2c:	2032      	movs	r0, #50	; 0x32
 8001b2e:	f005 fd9f 	bl	8007670 <osDelay>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8001b32:	e7f7      	b.n	8001b24 <StartLED1Task+0x8>
 8001b34:	40021000 	.word	0x40021000

08001b38 <StartLED2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED2Task */
void StartLED2Task(void *argument)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED2Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
 8001b40:	2140      	movs	r1, #64	; 0x40
 8001b42:	4804      	ldr	r0, [pc, #16]	; (8001b54 <StartLED2Task+0x1c>)
 8001b44:	f001 fbd5 	bl	80032f2 <HAL_GPIO_TogglePin>
    osDelay((1.0/3)*1000);
 8001b48:	f240 104d 	movw	r0, #333	; 0x14d
 8001b4c:	f005 fd90 	bl	8007670 <osDelay>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
 8001b50:	e7f6      	b.n	8001b40 <StartLED2Task+0x8>
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000

08001b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b6a:	f000 fe11 	bl	8002790 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40001000 	.word	0x40001000

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	f06f 0001 	mvn.w	r0, #1
 8001bc6:	f001 f997 	bl	8002ef8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <HAL_ADC_MspInit+0x74>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d123      	bne.n	8001c42 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <HAL_ADC_MspInit+0x7c>)
 8001c3e:	f001 f993 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40012000 	.word	0x40012000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000

08001c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0b0      	sub	sp, #192	; 0xc0
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	2290      	movs	r2, #144	; 0x90
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f008 fdb2 	bl	800a7e2 <memset>
  if(hi2c->Instance==I2C1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a44      	ldr	r2, [pc, #272]	; (8001d94 <HAL_I2C_MspInit+0x13c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d13e      	bne.n	8001d06 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 feb3 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001ca4:	f7ff ff6a 	bl	8001b7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	4a3a      	ldr	r2, [pc, #232]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb4:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc8:	2312      	movs	r3, #18
 8001cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	482d      	ldr	r0, [pc, #180]	; (8001d9c <HAL_I2C_MspInit+0x144>)
 8001ce8:	f001 f93e 	bl	8002f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a29      	ldr	r2, [pc, #164]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001cf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d04:	e041      	b.n	8001d8a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <HAL_I2C_MspInit+0x148>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d13c      	bne.n	8001d8a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d14:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fe6f 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001d2c:	f7ff ff26 	bl	8001b7c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001d36:	f043 0320 	orr.w	r3, r3, #32
 8001d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4e:	2312      	movs	r3, #18
 8001d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d60:	2304      	movs	r3, #4
 8001d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <HAL_I2C_MspInit+0x14c>)
 8001d6e:	f001 f8fb 	bl	8002f68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_I2C_MspInit+0x140>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	37c0      	adds	r7, #192	; 0xc0
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40005400 	.word	0x40005400
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40005800 	.word	0x40005800
 8001da4:	40021400 	.word	0x40021400

08001da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_SPI_MspInit+0xec>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d160      	bne.n	8001e8c <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dca:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a2c      	ldr	r2, [pc, #176]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_SPI_MspInit+0xf0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	4815      	ldr	r0, [pc, #84]	; (8001e9c <HAL_SPI_MspInit+0xf4>)
 8001e46:	f001 f88f 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <HAL_SPI_MspInit+0xf8>)
 8001e66:	f001 f87f 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e7c:	2305      	movs	r3, #5
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <HAL_SPI_MspInit+0xfc>)
 8001e88:	f001 f86e 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3730      	adds	r7, #48	; 0x30
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40013000 	.word	0x40013000
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40021800 	.word	0x40021800

08001ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	; 0x30
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <HAL_TIM_Base_MspInit+0xe8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eca:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a31      	ldr	r2, [pc, #196]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001ee2:	e051      	b.n	8001f88 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eec:	d129      	bne.n	8001f42 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f30:	2301      	movs	r3, #1
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4817      	ldr	r0, [pc, #92]	; (8001f98 <HAL_TIM_Base_MspInit+0xf0>)
 8001f3c:	f001 f814 	bl	8002f68 <HAL_GPIO_Init>
}
 8001f40:	e022      	b.n	8001f88 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <HAL_TIM_Base_MspInit+0xf4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d10c      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	e010      	b.n	8001f88 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d10b      	bne.n	8001f88 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_TIM_Base_MspInit+0xec>)
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	3730      	adds	r7, #48	; 0x30
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40000c00 	.word	0x40000c00
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2e      	ldr	r2, [pc, #184]	; (800207c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d128      	bne.n	8002018 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001ff6:	2330      	movs	r3, #48	; 0x30
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002006:	2302      	movs	r3, #2
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	481c      	ldr	r0, [pc, #112]	; (8002084 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002012:	f000 ffa9 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002016:	e02d      	b.n	8002074 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_TIM_Encoder_MspInit+0xe4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d128      	bne.n	8002074 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8002052:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002064:	2302      	movs	r3, #2
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4619      	mov	r1, r3
 800206e:	4807      	ldr	r0, [pc, #28]	; (800208c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002070:	f000 ff7a 	bl	8002f68 <HAL_GPIO_Init>
}
 8002074:	bf00      	nop
 8002076:	3730      	adds	r7, #48	; 0x30
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40000400 	.word	0x40000400
 8002080:	40023800 	.word	0x40023800
 8002084:	40020400 	.word	0x40020400
 8002088:	40000800 	.word	0x40000800
 800208c:	40020c00 	.word	0x40020c00

08002090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a45      	ldr	r2, [pc, #276]	; (80021c4 <HAL_TIM_MspPostInit+0x134>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11d      	bne.n	80020ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b2:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a44      	ldr	r2, [pc, #272]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b42      	ldr	r3, [pc, #264]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80020ca:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020dc:	2301      	movs	r3, #1
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	4839      	ldr	r0, [pc, #228]	; (80021cc <HAL_TIM_MspPostInit+0x13c>)
 80020e8:	f000 ff3e 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020ec:	e066      	b.n	80021bc <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f6:	d11d      	bne.n	8002134 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4a32      	ldr	r2, [pc, #200]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6313      	str	r3, [r2, #48]	; 0x30
 8002104:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002122:	2301      	movs	r3, #1
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	4619      	mov	r1, r3
 800212c:	4828      	ldr	r0, [pc, #160]	; (80021d0 <HAL_TIM_MspPostInit+0x140>)
 800212e:	f000 ff1b 	bl	8002f68 <HAL_GPIO_Init>
}
 8002132:	e043      	b.n	80021bc <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a26      	ldr	r2, [pc, #152]	; (80021d4 <HAL_TIM_MspPostInit+0x144>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d11c      	bne.n	8002178 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002156:	2301      	movs	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002166:	2302      	movs	r3, #2
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	4817      	ldr	r0, [pc, #92]	; (80021d0 <HAL_TIM_MspPostInit+0x140>)
 8002172:	f000 fef9 	bl	8002f68 <HAL_GPIO_Init>
}
 8002176:	e021      	b.n	80021bc <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM8)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <HAL_TIM_MspPostInit+0x148>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d11c      	bne.n	80021bc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_TIM_MspPostInit+0x138>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 800219a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021ac:	2303      	movs	r3, #3
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	4619      	mov	r1, r3
 80021b6:	4809      	ldr	r0, [pc, #36]	; (80021dc <HAL_TIM_MspPostInit+0x14c>)
 80021b8:	f000 fed6 	bl	8002f68 <HAL_GPIO_Init>
}
 80021bc:	bf00      	nop
 80021be:	3730      	adds	r7, #48	; 0x30
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40000c00 	.word	0x40000c00
 80021d8:	40010400 	.word	0x40010400
 80021dc:	40020800 	.word	0x40020800

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0b6      	sub	sp, #216	; 0xd8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021fc:	2290      	movs	r2, #144	; 0x90
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f008 faee 	bl	800a7e2 <memset>
  if(huart->Instance==UART4)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4aa0      	ldr	r2, [pc, #640]	; (800248c <HAL_UART_MspInit+0x2ac>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d13e      	bne.n	800228e <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800221c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002220:	4618      	mov	r0, r3
 8002222:	f002 fbef 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800222c:	f7ff fca6 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002230:	4b97      	ldr	r3, [pc, #604]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a96      	ldr	r2, [pc, #600]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 8002236:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
 800223c:	4b94      	ldr	r3, [pc, #592]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002248:	4b91      	ldr	r3, [pc, #580]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4a90      	ldr	r2, [pc, #576]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6313      	str	r3, [r2, #48]	; 0x30
 8002254:	4b8e      	ldr	r3, [pc, #568]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002260:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002264:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800227a:	2308      	movs	r3, #8
 800227c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002284:	4619      	mov	r1, r3
 8002286:	4883      	ldr	r0, [pc, #524]	; (8002494 <HAL_UART_MspInit+0x2b4>)
 8002288:	f000 fe6e 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800228c:	e151      	b.n	8002532 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a81      	ldr	r2, [pc, #516]	; (8002498 <HAL_UART_MspInit+0x2b8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d160      	bne.n	800235a <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a8:	4618      	mov	r0, r3
 80022aa:	f002 fbab 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80022b4:	f7ff fc62 	bl	8001b7c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80022b8:	4b75      	ldr	r3, [pc, #468]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	4a74      	ldr	r2, [pc, #464]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80022be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c2:	6413      	str	r3, [r2, #64]	; 0x40
 80022c4:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d0:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4a6e      	ldr	r2, [pc, #440]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	6313      	str	r3, [r2, #48]	; 0x30
 80022dc:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e8:	4b69      	ldr	r3, [pc, #420]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4a68      	ldr	r2, [pc, #416]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6313      	str	r3, [r2, #48]	; 0x30
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800231a:	2308      	movs	r3, #8
 800231c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002324:	4619      	mov	r1, r3
 8002326:	485d      	ldr	r0, [pc, #372]	; (800249c <HAL_UART_MspInit+0x2bc>)
 8002328:	f000 fe1e 	bl	8002f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800232c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002346:	2308      	movs	r3, #8
 8002348:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002350:	4619      	mov	r1, r3
 8002352:	4850      	ldr	r0, [pc, #320]	; (8002494 <HAL_UART_MspInit+0x2b4>)
 8002354:	f000 fe08 	bl	8002f68 <HAL_GPIO_Init>
}
 8002358:	e0eb      	b.n	8002532 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a50      	ldr	r2, [pc, #320]	; (80024a0 <HAL_UART_MspInit+0x2c0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d151      	bne.n	8002408 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002368:	2300      	movs	r3, #0
 800236a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002370:	4618      	mov	r0, r3
 8002372:	f002 fb47 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 800237c:	f7ff fbfe 	bl	8001b7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002380:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	4a42      	ldr	r2, [pc, #264]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 8002386:	f043 0310 	orr.w	r3, r3, #16
 800238a:	6453      	str	r3, [r2, #68]	; 0x44
 800238c:	4b40      	ldr	r3, [pc, #256]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002398:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4a3c      	ldr	r2, [pc, #240]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80023ca:	2304      	movs	r3, #4
 80023cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4831      	ldr	r0, [pc, #196]	; (800249c <HAL_UART_MspInit+0x2bc>)
 80023d8:	f000 fdc6 	bl	8002f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023dc:	2340      	movs	r3, #64	; 0x40
 80023de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f4:	2307      	movs	r3, #7
 80023f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023fe:	4619      	mov	r1, r3
 8002400:	4826      	ldr	r0, [pc, #152]	; (800249c <HAL_UART_MspInit+0x2bc>)
 8002402:	f000 fdb1 	bl	8002f68 <HAL_GPIO_Init>
}
 8002406:	e094      	b.n	8002532 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <HAL_UART_MspInit+0x2c4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d14c      	bne.n	80024ac <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002416:	2300      	movs	r3, #0
 8002418:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800241e:	4618      	mov	r0, r3
 8002420:	f002 faf0 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800242a:	f7ff fba7 	bl	8001b7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a17      	ldr	r2, [pc, #92]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 8002434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_UART_MspInit+0x2b0>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800245e:	2360      	movs	r3, #96	; 0x60
 8002460:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002476:	2307      	movs	r3, #7
 8002478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002480:	4619      	mov	r1, r3
 8002482:	4809      	ldr	r0, [pc, #36]	; (80024a8 <HAL_UART_MspInit+0x2c8>)
 8002484:	f000 fd70 	bl	8002f68 <HAL_GPIO_Init>
}
 8002488:	e053      	b.n	8002532 <HAL_UART_MspInit+0x352>
 800248a:	bf00      	nop
 800248c:	40004c00 	.word	0x40004c00
 8002490:	40023800 	.word	0x40023800
 8002494:	40020800 	.word	0x40020800
 8002498:	40005000 	.word	0x40005000
 800249c:	40020400 	.word	0x40020400
 80024a0:	40011000 	.word	0x40011000
 80024a4:	40004400 	.word	0x40004400
 80024a8:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_UART_MspInit+0x35c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d13d      	bne.n	8002532 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ba:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fa9c 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 80024d2:	f7ff fb53 	bl	8001b7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <HAL_UART_MspInit+0x360>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_UART_MspInit+0x360>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <HAL_UART_MspInit+0x360>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <HAL_UART_MspInit+0x360>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_UART_MspInit+0x360>)
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_UART_MspInit+0x360>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800250a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002520:	2307      	movs	r3, #7
 8002522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002526:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800252a:	4619      	mov	r1, r3
 800252c:	4805      	ldr	r0, [pc, #20]	; (8002544 <HAL_UART_MspInit+0x364>)
 800252e:	f000 fd1b 	bl	8002f68 <HAL_GPIO_Init>
}
 8002532:	bf00      	nop
 8002534:	37d8      	adds	r7, #216	; 0xd8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40004800 	.word	0x40004800
 8002540:	40023800 	.word	0x40023800
 8002544:	40020c00 	.word	0x40020c00

08002548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08e      	sub	sp, #56	; 0x38
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002558:	4b33      	ldr	r3, [pc, #204]	; (8002628 <HAL_InitTick+0xe0>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	4a32      	ldr	r2, [pc, #200]	; (8002628 <HAL_InitTick+0xe0>)
 800255e:	f043 0310 	orr.w	r3, r3, #16
 8002562:	6413      	str	r3, [r2, #64]	; 0x40
 8002564:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_InitTick+0xe0>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002570:	f107 0210 	add.w	r2, r7, #16
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f002 fa10 	bl	80049a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800258a:	f002 f9e1 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 800258e:	6378      	str	r0, [r7, #52]	; 0x34
 8002590:	e004      	b.n	800259c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002592:	f002 f9dd 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 8002596:	4603      	mov	r3, r0
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_InitTick+0xe4>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	3b01      	subs	r3, #1
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_InitTick+0xe8>)
 80025ac:	4a21      	ldr	r2, [pc, #132]	; (8002634 <HAL_InitTick+0xec>)
 80025ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <HAL_InitTick+0xe8>)
 80025b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <HAL_InitTick+0xe8>)
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_InitTick+0xe8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_InitTick+0xe8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_InitTick+0xe8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80025d0:	4817      	ldr	r0, [pc, #92]	; (8002630 <HAL_InitTick+0xe8>)
 80025d2:	f002 feea 	bl	80053aa <HAL_TIM_Base_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80025dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11b      	bne.n	800261c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80025e4:	4812      	ldr	r0, [pc, #72]	; (8002630 <HAL_InitTick+0xe8>)
 80025e6:	f002 ff37 	bl	8005458 <HAL_TIM_Base_Start_IT>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80025f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d111      	bne.n	800261c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025f8:	2036      	movs	r0, #54	; 0x36
 80025fa:	f000 fc99 	bl	8002f30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d808      	bhi.n	8002616 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002604:	2200      	movs	r2, #0
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	2036      	movs	r0, #54	; 0x36
 800260a:	f000 fc75 	bl	8002ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_InitTick+0xf0>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e002      	b.n	800261c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800261c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002620:	4618      	mov	r0, r3
 8002622:	3738      	adds	r7, #56	; 0x38
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	431bde83 	.word	0x431bde83
 8002630:	2000068c 	.word	0x2000068c
 8002634:	40001000 	.word	0x40001000
 8002638:	20000008 	.word	0x20000008

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <MemManage_Handler+0x4>

0800264e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <BusFault_Handler+0x4>

08002654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <UsageFault_Handler+0x4>

0800265a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 800266c:	2010      	movs	r0, #16
 800266e:	f000 fe5b 	bl	8003328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM6_DAC_IRQHandler+0x10>)
 800267e:	f003 f8cb 	bl	8005818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000068c 	.word	0x2000068c

0800268c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <_sbrk+0x5c>)
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <_sbrk+0x60>)
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <_sbrk+0x64>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <_sbrk+0x68>)
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026bc:	f007 ff60 	bl	800a580 <__errno>
 80026c0:	4603      	mov	r3, r0
 80026c2:	220c      	movs	r2, #12
 80026c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ca:	e009      	b.n	80026e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <_sbrk+0x64>)
 80026dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20080000 	.word	0x20080000
 80026ec:	00000400 	.word	0x00000400
 80026f0:	200006d8 	.word	0x200006d8
 80026f4:	200051a8 	.word	0x200051a8

080026f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <SystemInit+0x28>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <SystemInit+0x28>)
 8002704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <SystemInit+0x28>)
 800270e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002712:	609a      	str	r2, [r3, #8]
#endif
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800275c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002728:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800272a:	e003      	b.n	8002734 <LoopCopyDataInit>

0800272c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800272e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002730:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002732:	3104      	adds	r1, #4

08002734 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002734:	480b      	ldr	r0, [pc, #44]	; (8002764 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002738:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800273a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800273c:	d3f6      	bcc.n	800272c <CopyDataInit>
  ldr  r2, =_sbss
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002740:	e002      	b.n	8002748 <LoopFillZerobss>

08002742 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002742:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002744:	f842 3b04 	str.w	r3, [r2], #4

08002748 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800274a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800274c:	d3f9      	bcc.n	8002742 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800274e:	f7ff ffd3 	bl	80026f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002752:	f008 f811 	bl	800a778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7fe f81f 	bl	8000798 <main>
  bx  lr    
 800275a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800275c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002760:	0800b938 	.word	0x0800b938
  ldr  r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002768:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800276c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002770:	200051a4 	.word	0x200051a4

08002774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC_IRQHandler>

08002776 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277a:	2003      	movs	r0, #3
 800277c:	f000 fbb1 	bl	8002ee2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002780:	200f      	movs	r0, #15
 8002782:	f7ff fee1 	bl	8002548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002786:	f7ff f9ff 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_IncTick+0x20>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x24>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_IncTick+0x24>)
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	2000000c 	.word	0x2000000c
 80027b4:	200006dc 	.word	0x200006dc

080027b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <HAL_GetTick+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	200006dc 	.word	0x200006dc

080027d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff ffee 	bl	80027b8 <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e8:	d005      	beq.n	80027f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_Delay+0x44>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027f6:	bf00      	nop
 80027f8:	f7ff ffde 	bl	80027b8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d8f7      	bhi.n	80027f8 <HAL_Delay+0x28>
  {
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000000c 	.word	0x2000000c

08002818 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e031      	b.n	8002892 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff f9ce 	bl	8001bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d116      	bne.n	8002884 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_ADC_Init+0x84>)
 800285c:	4013      	ands	r3, r2
 800285e:	f043 0202 	orr.w	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f970 	bl	8002b4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
 8002882:	e001      	b.n	8002888 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	ffffeefd 	.word	0xffffeefd

080028a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1c>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e136      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x28a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b09      	cmp	r3, #9
 80028ca:	d93a      	bls.n	8002942 <HAL_ADC_ConfigChannel+0xa2>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028d4:	d035      	beq.n	8002942 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68d9      	ldr	r1, [r3, #12]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	3b1e      	subs	r3, #30
 80028ec:	2207      	movs	r2, #7
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	400a      	ands	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a8d      	ldr	r2, [pc, #564]	; (8002b38 <HAL_ADC_ConfigChannel+0x298>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68d9      	ldr	r1, [r3, #12]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	061a      	lsls	r2, r3, #24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800291a:	e035      	b.n	8002988 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68d9      	ldr	r1, [r3, #12]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	4618      	mov	r0, r3
 800292e:	4603      	mov	r3, r0
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4403      	add	r3, r0
 8002934:	3b1e      	subs	r3, #30
 8002936:	409a      	lsls	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002940:	e022      	b.n	8002988 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6919      	ldr	r1, [r3, #16]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	2207      	movs	r2, #7
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43da      	mvns	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	400a      	ands	r2, r1
 8002964:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6919      	ldr	r1, [r3, #16]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	4603      	mov	r3, r0
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4403      	add	r3, r0
 800297e:	409a      	lsls	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b06      	cmp	r3, #6
 800298e:	d824      	bhi.n	80029da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	3b05      	subs	r3, #5
 80029a2:	221f      	movs	r2, #31
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43da      	mvns	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	400a      	ands	r2, r1
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b05      	subs	r3, #5
 80029cc:	fa00 f203 	lsl.w	r2, r0, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	635a      	str	r2, [r3, #52]	; 0x34
 80029d8:	e04c      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d824      	bhi.n	8002a2c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	3b23      	subs	r3, #35	; 0x23
 80029f4:	221f      	movs	r2, #31
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	400a      	ands	r2, r1
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	4618      	mov	r0, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b23      	subs	r3, #35	; 0x23
 8002a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2a:	e023      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b41      	subs	r3, #65	; 0x41
 8002a3e:	221f      	movs	r2, #31
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43da      	mvns	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	3b41      	subs	r3, #65	; 0x41
 8002a68:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a30      	ldr	r2, [pc, #192]	; (8002b3c <HAL_ADC_ConfigChannel+0x29c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10a      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1f4>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a92:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_ADC_ConfigChannel+0x29c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10f      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x21e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d10b      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ab0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002abc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_ADC_ConfigChannel+0x29c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d12b      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x280>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_ADC_ConfigChannel+0x298>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <HAL_ADC_ConfigChannel+0x23a>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b11      	cmp	r3, #17
 8002ad8:	d122      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ae4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a15      	ldr	r2, [pc, #84]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002af0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_ADC_ConfigChannel+0x298>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d111      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_ADC_ConfigChannel+0x2a4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0c9a      	lsrs	r2, r3, #18
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b12:	e002      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f9      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	10000012 	.word	0x10000012
 8002b3c:	40012000 	.word	0x40012000
 8002b40:	40012300 	.word	0x40012300
 8002b44:	20000004 	.word	0x20000004
 8002b48:	431bde83 	.word	0x431bde83

08002b4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b54:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <ADC_Init+0x1ec>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a77      	ldr	r2, [pc, #476]	; (8002d38 <ADC_Init+0x1ec>)
 8002b5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b5e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b60:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <ADC_Init+0x1ec>)
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4973      	ldr	r1, [pc, #460]	; (8002d38 <ADC_Init+0x1ec>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <ADC_Init+0x1f0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6899      	ldr	r1, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	e00f      	b.n	8002c46 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0202 	bic.w	r2, r2, #2
 8002c54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	005a      	lsls	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01b      	beq.n	8002cac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	035a      	lsls	r2, r3, #13
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	e007      	b.n	8002cbc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	051a      	lsls	r2, r3, #20
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cfe:	025a      	lsls	r2, r3, #9
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	029a      	lsls	r2, r3, #10
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40012300 	.word	0x40012300
 8002d3c:	0f000001 	.word	0x0f000001

08002d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <__NVIC_SetPriorityGrouping+0x40>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x40>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00
 8002d84:	05fa0000 	.word	0x05fa0000

08002d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 0307 	and.w	r3, r3, #7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db0b      	blt.n	8002dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	f003 021f 	and.w	r2, r3, #31
 8002dbc:	4907      	ldr	r1, [pc, #28]	; (8002ddc <__NVIC_EnableIRQ+0x38>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	e000e100 	.word	0xe000e100

08002de0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	db12      	blt.n	8002e18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	490a      	ldr	r1, [pc, #40]	; (8002e24 <__NVIC_DisableIRQ+0x44>)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2001      	movs	r0, #1
 8002e02:	fa00 f202 	lsl.w	r2, r0, r2
 8002e06:	3320      	adds	r3, #32
 8002e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e0c:	f3bf 8f4f 	dsb	sy
}
 8002e10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e12:	f3bf 8f6f 	isb	sy
}
 8002e16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000e100 	.word	0xe000e100

08002e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db0a      	blt.n	8002e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <__NVIC_SetPriority+0x4c>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e50:	e00a      	b.n	8002e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4908      	ldr	r1, [pc, #32]	; (8002e78 <__NVIC_SetPriority+0x50>)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	3b04      	subs	r3, #4
 8002e60:	0112      	lsls	r2, r2, #4
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	440b      	add	r3, r1
 8002e66:	761a      	strb	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000e100 	.word	0xe000e100
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f1c3 0307 	rsb	r3, r3, #7
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	bf28      	it	cs
 8002e9a:	2304      	movcs	r3, #4
 8002e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d902      	bls.n	8002eac <NVIC_EncodePriority+0x30>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3b03      	subs	r3, #3
 8002eaa:	e000      	b.n	8002eae <NVIC_EncodePriority+0x32>
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	43d9      	mvns	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	4313      	orrs	r3, r2
         );
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ff28 	bl	8002d40 <__NVIC_SetPriorityGrouping>
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f0a:	f7ff ff3d 	bl	8002d88 <__NVIC_GetPriorityGrouping>
 8002f0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	6978      	ldr	r0, [r7, #20]
 8002f16:	f7ff ffb1 	bl	8002e7c <NVIC_EncodePriority>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff80 	bl	8002e28 <__NVIC_SetPriority>
}
 8002f28:	bf00      	nop
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff30 	bl	8002da4 <__NVIC_EnableIRQ>
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff40 	bl	8002de0 <__NVIC_DisableIRQ>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e175      	b.n	8003274 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f040 8164 	bne.w	800326e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d005      	beq.n	8002fbe <HAL_GPIO_Init+0x56>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d130      	bne.n	8003020 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	2203      	movs	r2, #3
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 0201 	and.w	r2, r3, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b03      	cmp	r3, #3
 800302a:	d017      	beq.n	800305c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d123      	bne.n	80030b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3208      	adds	r2, #8
 8003070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	220f      	movs	r2, #15
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	69b9      	ldr	r1, [r7, #24]
 80030ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80be 	beq.w	800326e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	4b66      	ldr	r3, [pc, #408]	; (800328c <HAL_GPIO_Init+0x324>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_GPIO_Init+0x324>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_GPIO_Init+0x324>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800310a:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_GPIO_Init+0x328>)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	3302      	adds	r3, #2
 8003112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a58      	ldr	r2, [pc, #352]	; (8003294 <HAL_GPIO_Init+0x32c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d037      	beq.n	80031a6 <HAL_GPIO_Init+0x23e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_GPIO_Init+0x330>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d031      	beq.n	80031a2 <HAL_GPIO_Init+0x23a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a56      	ldr	r2, [pc, #344]	; (800329c <HAL_GPIO_Init+0x334>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02b      	beq.n	800319e <HAL_GPIO_Init+0x236>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a55      	ldr	r2, [pc, #340]	; (80032a0 <HAL_GPIO_Init+0x338>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d025      	beq.n	800319a <HAL_GPIO_Init+0x232>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a54      	ldr	r2, [pc, #336]	; (80032a4 <HAL_GPIO_Init+0x33c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01f      	beq.n	8003196 <HAL_GPIO_Init+0x22e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a53      	ldr	r2, [pc, #332]	; (80032a8 <HAL_GPIO_Init+0x340>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d019      	beq.n	8003192 <HAL_GPIO_Init+0x22a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a52      	ldr	r2, [pc, #328]	; (80032ac <HAL_GPIO_Init+0x344>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_GPIO_Init+0x226>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a51      	ldr	r2, [pc, #324]	; (80032b0 <HAL_GPIO_Init+0x348>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00d      	beq.n	800318a <HAL_GPIO_Init+0x222>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <HAL_GPIO_Init+0x34c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <HAL_GPIO_Init+0x21e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4f      	ldr	r2, [pc, #316]	; (80032b8 <HAL_GPIO_Init+0x350>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <HAL_GPIO_Init+0x21a>
 800317e:	2309      	movs	r3, #9
 8003180:	e012      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003182:	230a      	movs	r3, #10
 8003184:	e010      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003186:	2308      	movs	r3, #8
 8003188:	e00e      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800318a:	2307      	movs	r3, #7
 800318c:	e00c      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800318e:	2306      	movs	r3, #6
 8003190:	e00a      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003192:	2305      	movs	r3, #5
 8003194:	e008      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003196:	2304      	movs	r3, #4
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800319a:	2303      	movs	r3, #3
 800319c:	e004      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800319e:	2302      	movs	r3, #2
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 80031a6:	2300      	movs	r3, #0
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f002 0203 	and.w	r2, r2, #3
 80031ae:	0092      	lsls	r2, r2, #2
 80031b0:	4093      	lsls	r3, r2
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031b8:	4935      	ldr	r1, [pc, #212]	; (8003290 <HAL_GPIO_Init+0x328>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c6:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <HAL_GPIO_Init+0x354>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ea:	4a34      	ldr	r2, [pc, #208]	; (80032bc <HAL_GPIO_Init+0x354>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f0:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_GPIO_Init+0x354>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003214:	4a29      	ldr	r2, [pc, #164]	; (80032bc <HAL_GPIO_Init+0x354>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321a:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_GPIO_Init+0x354>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323e:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_GPIO_Init+0x354>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <HAL_GPIO_Init+0x354>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_GPIO_Init+0x354>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3301      	adds	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b0f      	cmp	r3, #15
 8003278:	f67f ae86 	bls.w	8002f88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40013800 	.word	0x40013800
 8003294:	40020000 	.word	0x40020000
 8003298:	40020400 	.word	0x40020400
 800329c:	40020800 	.word	0x40020800
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40021400 	.word	0x40021400
 80032ac:	40021800 	.word	0x40021800
 80032b0:	40021c00 	.word	0x40021c00
 80032b4:	40022000 	.word	0x40022000
 80032b8:	40022400 	.word	0x40022400
 80032bc:	40013c00 	.word	0x40013c00

080032c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
 80032cc:	4613      	mov	r3, r2
 80032ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d0:	787b      	ldrb	r3, [r7, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032dc:	e003      	b.n	80032e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	041a      	lsls	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003304:	887a      	ldrh	r2, [r7, #2]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	041a      	lsls	r2, r3, #16
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	43d9      	mvns	r1, r3
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	400b      	ands	r3, r1
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	619a      	str	r2, [r3, #24]
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f954 	bl	80005f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40013c00 	.word	0x40013c00

08003358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07f      	b.n	800346a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe fc6a 	bl	8001c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	e006      	b.n	80033e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d104      	bne.n	80033f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_I2C_Init+0x11c>)
 80033fe:	430b      	orrs	r3, r1
 8003400:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003410:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69d9      	ldr	r1, [r3, #28]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	02008000 	.word	0x02008000

08003478 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4603      	mov	r3, r0
 8003488:	817b      	strh	r3, [r7, #10]
 800348a:	460b      	mov	r3, r1
 800348c:	813b      	strh	r3, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	f040 80f9 	bne.w	8003692 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_I2C_Mem_Write+0x34>
 80034a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0ed      	b.n	8003694 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_I2C_Mem_Write+0x4e>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e0e6      	b.n	8003694 <HAL_I2C_Mem_Write+0x21c>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034ce:	f7ff f973 	bl	80027b8 <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2319      	movs	r3, #25
 80034da:	2201      	movs	r2, #1
 80034dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fac3 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0d1      	b.n	8003694 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2221      	movs	r2, #33	; 0x21
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a3a      	ldr	r2, [r7, #32]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003518:	88f8      	ldrh	r0, [r7, #6]
 800351a:	893a      	ldrh	r2, [r7, #8]
 800351c:	8979      	ldrh	r1, [r7, #10]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	4603      	mov	r3, r0
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f9d3 	bl	80038d4 <I2C_RequestMemoryWrite>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0a9      	b.n	8003694 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2bff      	cmp	r3, #255	; 0xff
 8003548:	d90e      	bls.n	8003568 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	22ff      	movs	r2, #255	; 0xff
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	b2da      	uxtb	r2, r3
 8003556:	8979      	ldrh	r1, [r7, #10]
 8003558:	2300      	movs	r3, #0
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fc1f 	bl	8003da4 <I2C_TransferConfig>
 8003566:	e00f      	b.n	8003588 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	b2da      	uxtb	r2, r3
 8003578:	8979      	ldrh	r1, [r7, #10]
 800357a:	2300      	movs	r3, #0
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fc0e 	bl	8003da4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 faad 	bl	8003aec <I2C_WaitOnTXISFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e07b      	b.n	8003694 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d034      	beq.n	8003640 <HAL_I2C_Mem_Write+0x1c8>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d130      	bne.n	8003640 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	2200      	movs	r2, #0
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fa3f 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e04d      	b.n	8003694 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2bff      	cmp	r3, #255	; 0xff
 8003600:	d90e      	bls.n	8003620 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	22ff      	movs	r2, #255	; 0xff
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	b2da      	uxtb	r2, r3
 800360e:	8979      	ldrh	r1, [r7, #10]
 8003610:	2300      	movs	r3, #0
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fbc3 	bl	8003da4 <I2C_TransferConfig>
 800361e:	e00f      	b.n	8003640 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362e:	b2da      	uxtb	r2, r3
 8003630:	8979      	ldrh	r1, [r7, #10]
 8003632:	2300      	movs	r3, #0
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fbb2 	bl	8003da4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d19e      	bne.n	8003588 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa8c 	bl	8003b6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e01a      	b.n	8003694 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2220      	movs	r2, #32
 8003664:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <HAL_I2C_Mem_Write+0x224>)
 8003672:	400b      	ands	r3, r1
 8003674:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
  }
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	fe00e800 	.word	0xfe00e800

080036a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	817b      	strh	r3, [r7, #10]
 80036b2:	460b      	mov	r3, r1
 80036b4:	813b      	strh	r3, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	f040 80fd 	bne.w	80038c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x34>
 80036ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0f1      	b.n	80038c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Mem_Read+0x4e>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0ea      	b.n	80038c4 <HAL_I2C_Mem_Read+0x224>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036f6:	f7ff f85f 	bl	80027b8 <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2319      	movs	r3, #25
 8003702:	2201      	movs	r2, #1
 8003704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f9af 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0d5      	b.n	80038c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2222      	movs	r2, #34	; 0x22
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003740:	88f8      	ldrh	r0, [r7, #6]
 8003742:	893a      	ldrh	r2, [r7, #8]
 8003744:	8979      	ldrh	r1, [r7, #10]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4603      	mov	r3, r0
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f913 	bl	800397c <I2C_RequestMemoryRead>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0ad      	b.n	80038c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2bff      	cmp	r3, #255	; 0xff
 8003770:	d90e      	bls.n	8003790 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	b2da      	uxtb	r2, r3
 800377e:	8979      	ldrh	r1, [r7, #10]
 8003780:	4b52      	ldr	r3, [pc, #328]	; (80038cc <HAL_I2C_Mem_Read+0x22c>)
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fb0b 	bl	8003da4 <I2C_TransferConfig>
 800378e:	e00f      	b.n	80037b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	8979      	ldrh	r1, [r7, #10]
 80037a2:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <HAL_I2C_Mem_Read+0x22c>)
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fafa 	bl	8003da4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	2200      	movs	r2, #0
 80037b8:	2104      	movs	r1, #4
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f956 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07c      	b.n	80038c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d034      	beq.n	8003870 <HAL_I2C_Mem_Read+0x1d0>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	2b00      	cmp	r3, #0
 800380c:	d130      	bne.n	8003870 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	2200      	movs	r2, #0
 8003816:	2180      	movs	r1, #128	; 0x80
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f927 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e04d      	b.n	80038c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2bff      	cmp	r3, #255	; 0xff
 8003830:	d90e      	bls.n	8003850 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	22ff      	movs	r2, #255	; 0xff
 8003836:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	b2da      	uxtb	r2, r3
 800383e:	8979      	ldrh	r1, [r7, #10]
 8003840:	2300      	movs	r3, #0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 faab 	bl	8003da4 <I2C_TransferConfig>
 800384e:	e00f      	b.n	8003870 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	b2da      	uxtb	r2, r3
 8003860:	8979      	ldrh	r1, [r7, #10]
 8003862:	2300      	movs	r3, #0
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fa9a 	bl	8003da4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d19a      	bne.n	80037b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f974 	bl	8003b6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e01a      	b.n	80038c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2220      	movs	r2, #32
 8003894:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_I2C_Mem_Read+0x230>)
 80038a2:	400b      	ands	r3, r1
 80038a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	80002400 	.word	0x80002400
 80038d0:	fe00e800 	.word	0xfe00e800

080038d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	4608      	mov	r0, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	817b      	strh	r3, [r7, #10]
 80038e6:	460b      	mov	r3, r1
 80038e8:	813b      	strh	r3, [r7, #8]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	8979      	ldrh	r1, [r7, #10]
 80038f4:	4b20      	ldr	r3, [pc, #128]	; (8003978 <I2C_RequestMemoryWrite+0xa4>)
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fa51 	bl	8003da4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	69b9      	ldr	r1, [r7, #24]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f8f0 	bl	8003aec <I2C_WaitOnTXISFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e02c      	b.n	8003970 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d105      	bne.n	8003928 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	629a      	str	r2, [r3, #40]	; 0x28
 8003926:	e015      	b.n	8003954 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003928:	893b      	ldrh	r3, [r7, #8]
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	b29b      	uxth	r3, r3
 800392e:	b2da      	uxtb	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	69b9      	ldr	r1, [r7, #24]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f8d6 	bl	8003aec <I2C_WaitOnTXISFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e012      	b.n	8003970 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800394a:	893b      	ldrh	r3, [r7, #8]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2200      	movs	r2, #0
 800395c:	2180      	movs	r1, #128	; 0x80
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f884 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	80002000 	.word	0x80002000

0800397c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	461a      	mov	r2, r3
 800398a:	4603      	mov	r3, r0
 800398c:	817b      	strh	r3, [r7, #10]
 800398e:	460b      	mov	r3, r1
 8003990:	813b      	strh	r3, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	8979      	ldrh	r1, [r7, #10]
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <I2C_RequestMemoryRead+0xa4>)
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2300      	movs	r3, #0
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f9fe 	bl	8003da4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	69b9      	ldr	r1, [r7, #24]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f89d 	bl	8003aec <I2C_WaitOnTXISFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e02c      	b.n	8003a16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d105      	bne.n	80039ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039c2:	893b      	ldrh	r3, [r7, #8]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
 80039cc:	e015      	b.n	80039fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039ce:	893b      	ldrh	r3, [r7, #8]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f883 	bl	8003aec <I2C_WaitOnTXISFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e012      	b.n	8003a16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039f0:	893b      	ldrh	r3, [r7, #8]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2140      	movs	r1, #64	; 0x40
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f831 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	80002000 	.word	0x80002000

08003a24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d103      	bne.n	8003a42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d007      	beq.n	8003a60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	619a      	str	r2, [r3, #24]
  }
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a7c:	e022      	b.n	8003ac4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a84:	d01e      	beq.n	8003ac4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fe fe97 	bl	80027b8 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d113      	bne.n	8003ac4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e00f      	b.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d0cd      	beq.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003af8:	e02c      	b.n	8003b54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f870 	bl	8003be4 <I2C_IsErrorOccurred>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e02a      	b.n	8003b64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b14:	d01e      	beq.n	8003b54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b16:	f7fe fe4f 	bl	80027b8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d302      	bcc.n	8003b2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d113      	bne.n	8003b54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e007      	b.n	8003b64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d1cb      	bne.n	8003afa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b78:	e028      	b.n	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f830 	bl	8003be4 <I2C_IsErrorOccurred>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e026      	b.n	8003bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fe fe13 	bl	80027b8 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d113      	bne.n	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e007      	b.n	8003bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d1cf      	bne.n	8003b7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	; 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d068      	beq.n	8003ce2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2210      	movs	r2, #16
 8003c16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c18:	e049      	b.n	8003cae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c20:	d045      	beq.n	8003cae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fe fdc9 	bl	80027b8 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <I2C_IsErrorOccurred+0x54>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d13a      	bne.n	8003cae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5a:	d121      	bne.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c62:	d01d      	beq.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d01a      	beq.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c7a:	f7fe fd9d 	bl	80027b8 <HAL_GetTick>
 8003c7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c80:	e00e      	b.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c82:	f7fe fd99 	bl	80027b8 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b19      	cmp	r3, #25
 8003c8e:	d907      	bls.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f043 0320 	orr.w	r3, r3, #32
 8003c96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003c9e:	e006      	b.n	8003cae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d1e9      	bne.n	8003c82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d003      	beq.n	8003cc4 <I2C_IsErrorOccurred+0xe0>
 8003cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0aa      	beq.n	8003c1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f043 0308 	orr.w	r3, r3, #8
 8003d1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f043 0302 	orr.w	r3, r3, #2
 8003d3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01c      	beq.n	8003d92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff fe63 	bl	8003a24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <I2C_IsErrorOccurred+0x1bc>)
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3728      	adds	r7, #40	; 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	fe00e800 	.word	0xfe00e800

08003da4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	817b      	strh	r3, [r7, #10]
 8003db2:	4613      	mov	r3, r2
 8003db4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003db6:	897b      	ldrh	r3, [r7, #10]
 8003db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dbc:	7a7b      	ldrb	r3, [r7, #9]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	0d5b      	lsrs	r3, r3, #21
 8003dde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <I2C_TransferConfig+0x60>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	43db      	mvns	r3, r3
 8003de8:	ea02 0103 	and.w	r1, r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	03ff63ff 	.word	0x03ff63ff

08003e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d138      	bne.n	8003e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e032      	b.n	8003e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d139      	bne.n	8003f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e033      	b.n	8003f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2224      	movs	r2, #36	; 0x24
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40007000 	.word	0x40007000

08003f58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a22      	ldr	r2, [pc, #136]	; (8003ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f86:	f7fe fc17 	bl	80027b8 <HAL_GetTick>
 8003f8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f8c:	e009      	b.n	8003fa2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f8e:	f7fe fc13 	bl	80027b8 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f9c:	d901      	bls.n	8003fa2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e022      	b.n	8003fe8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d1ee      	bne.n	8003f8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fbc:	f7fe fbfc 	bl	80027b8 <HAL_GetTick>
 8003fc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fc2:	e009      	b.n	8003fd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fc4:	f7fe fbf8 	bl	80027b8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd2:	d901      	bls.n	8003fd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e007      	b.n	8003fe8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe4:	d1ee      	bne.n	8003fc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40007000 	.word	0x40007000

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e29b      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8087 	beq.w	800412a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800401c:	4b96      	ldr	r3, [pc, #600]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b04      	cmp	r3, #4
 8004026:	d00c      	beq.n	8004042 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004028:	4b93      	ldr	r3, [pc, #588]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d112      	bne.n	800405a <HAL_RCC_OscConfig+0x62>
 8004034:	4b90      	ldr	r3, [pc, #576]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004040:	d10b      	bne.n	800405a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004042:	4b8d      	ldr	r3, [pc, #564]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d06c      	beq.n	8004128 <HAL_RCC_OscConfig+0x130>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d168      	bne.n	8004128 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e275      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004062:	d106      	bne.n	8004072 <HAL_RCC_OscConfig+0x7a>
 8004064:	4b84      	ldr	r3, [pc, #528]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a83      	ldr	r2, [pc, #524]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 800406a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e02e      	b.n	80040d0 <HAL_RCC_OscConfig+0xd8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0x9c>
 800407a:	4b7f      	ldr	r3, [pc, #508]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a7e      	ldr	r2, [pc, #504]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b7c      	ldr	r3, [pc, #496]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7b      	ldr	r2, [pc, #492]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 800408c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e01d      	b.n	80040d0 <HAL_RCC_OscConfig+0xd8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0xc0>
 800409e:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a75      	ldr	r2, [pc, #468]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b73      	ldr	r3, [pc, #460]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a72      	ldr	r2, [pc, #456]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0xd8>
 80040b8:	4b6f      	ldr	r3, [pc, #444]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a6e      	ldr	r2, [pc, #440]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b6c      	ldr	r3, [pc, #432]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6b      	ldr	r2, [pc, #428]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe fb6e 	bl	80027b8 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe fb6a 	bl	80027b8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e229      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	4b61      	ldr	r3, [pc, #388]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0xe8>
 80040fe:	e014      	b.n	800412a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe fb5a 	bl	80027b8 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe fb56 	bl	80027b8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e215      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	4b57      	ldr	r3, [pc, #348]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x110>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d069      	beq.n	800420a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004136:	4b50      	ldr	r3, [pc, #320]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b4d      	ldr	r3, [pc, #308]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b08      	cmp	r3, #8
 800414c:	d11c      	bne.n	8004188 <HAL_RCC_OscConfig+0x190>
 800414e:	4b4a      	ldr	r3, [pc, #296]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d116      	bne.n	8004188 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_RCC_OscConfig+0x17a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d001      	beq.n	8004172 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e1e9      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	493d      	ldr	r1, [pc, #244]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004186:	e040      	b.n	800420a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d023      	beq.n	80041d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004190:	4b39      	ldr	r3, [pc, #228]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a38      	ldr	r2, [pc, #224]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe fb0c 	bl	80027b8 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a4:	f7fe fb08 	bl	80027b8 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e1c7      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b30      	ldr	r3, [pc, #192]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c2:	4b2d      	ldr	r3, [pc, #180]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4929      	ldr	r1, [pc, #164]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
 80041d6:	e018      	b.n	800420a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a26      	ldr	r2, [pc, #152]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fe fae8 	bl	80027b8 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fe fae4 	bl	80027b8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e1a3      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d038      	beq.n	8004288 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d019      	beq.n	8004252 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004222:	4a15      	ldr	r2, [pc, #84]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fe fac5 	bl	80027b8 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004232:	f7fe fac1 	bl	80027b8 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e180      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x23a>
 8004250:	e01a      	b.n	8004288 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004256:	4a08      	ldr	r2, [pc, #32]	; (8004278 <HAL_RCC_OscConfig+0x280>)
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425e:	f7fe faab 	bl	80027b8 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	e00a      	b.n	800427c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004266:	f7fe faa7 	bl	80027b8 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d903      	bls.n	800427c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e166      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
 8004278:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427c:	4b92      	ldr	r3, [pc, #584]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800427e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ee      	bne.n	8004266 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80a4 	beq.w	80043de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004296:	4b8c      	ldr	r3, [pc, #560]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a2:	4b89      	ldr	r3, [pc, #548]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	4a88      	ldr	r2, [pc, #544]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6413      	str	r3, [r2, #64]	; 0x40
 80042ae:	4b86      	ldr	r3, [pc, #536]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042be:	4b83      	ldr	r3, [pc, #524]	; (80044cc <HAL_RCC_OscConfig+0x4d4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d118      	bne.n	80042fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042ca:	4b80      	ldr	r3, [pc, #512]	; (80044cc <HAL_RCC_OscConfig+0x4d4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a7f      	ldr	r2, [pc, #508]	; (80044cc <HAL_RCC_OscConfig+0x4d4>)
 80042d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d6:	f7fe fa6f 	bl	80027b8 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042de:	f7fe fa6b 	bl	80027b8 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b64      	cmp	r3, #100	; 0x64
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e12a      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f0:	4b76      	ldr	r3, [pc, #472]	; (80044cc <HAL_RCC_OscConfig+0x4d4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d106      	bne.n	8004312 <HAL_RCC_OscConfig+0x31a>
 8004304:	4b70      	ldr	r3, [pc, #448]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a6f      	ldr	r2, [pc, #444]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	; 0x70
 8004310:	e02d      	b.n	800436e <HAL_RCC_OscConfig+0x376>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0x33c>
 800431a:	4b6b      	ldr	r3, [pc, #428]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	4a6a      	ldr	r2, [pc, #424]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	6713      	str	r3, [r2, #112]	; 0x70
 8004326:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	4a67      	ldr	r2, [pc, #412]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800432c:	f023 0304 	bic.w	r3, r3, #4
 8004330:	6713      	str	r3, [r2, #112]	; 0x70
 8004332:	e01c      	b.n	800436e <HAL_RCC_OscConfig+0x376>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b05      	cmp	r3, #5
 800433a:	d10c      	bne.n	8004356 <HAL_RCC_OscConfig+0x35e>
 800433c:	4b62      	ldr	r3, [pc, #392]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	4a61      	ldr	r2, [pc, #388]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	6713      	str	r3, [r2, #112]	; 0x70
 8004348:	4b5f      	ldr	r3, [pc, #380]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a5e      	ldr	r2, [pc, #376]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
 8004354:	e00b      	b.n	800436e <HAL_RCC_OscConfig+0x376>
 8004356:	4b5c      	ldr	r3, [pc, #368]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	4a5b      	ldr	r2, [pc, #364]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	6713      	str	r3, [r2, #112]	; 0x70
 8004362:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a58      	ldr	r2, [pc, #352]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004368:	f023 0304 	bic.w	r3, r3, #4
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d015      	beq.n	80043a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fe fa1f 	bl	80027b8 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	e00a      	b.n	8004394 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fe fa1b 	bl	80027b8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0d8      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004394:	4b4c      	ldr	r3, [pc, #304]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ee      	beq.n	800437e <HAL_RCC_OscConfig+0x386>
 80043a0:	e014      	b.n	80043cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a2:	f7fe fa09 	bl	80027b8 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043aa:	f7fe fa05 	bl	80027b8 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0c2      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c0:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ee      	bne.n	80043aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d105      	bne.n	80043de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d2:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a3c      	ldr	r2, [pc, #240]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80ae 	beq.w	8004544 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e8:	4b37      	ldr	r3, [pc, #220]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 030c 	and.w	r3, r3, #12
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d06d      	beq.n	80044d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d14b      	bne.n	8004494 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fc:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe f9d6 	bl	80027b8 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fe f9d2 	bl	80027b8 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e091      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004422:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	019b      	lsls	r3, r3, #6
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	3b01      	subs	r3, #1
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	491b      	ldr	r1, [pc, #108]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004460:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fe f9a4 	bl	80027b8 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004474:	f7fe f9a0 	bl	80027b8 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e05f      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x47c>
 8004492:	e057      	b.n	8004544 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 800449a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fe f98a 	bl	80027b8 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a8:	f7fe f986 	bl	80027b8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e045      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ba:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <HAL_RCC_OscConfig+0x4d0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4b0>
 80044c6:	e03d      	b.n	8004544 <HAL_RCC_OscConfig+0x54c>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044d0:	4b1f      	ldr	r3, [pc, #124]	; (8004550 <HAL_RCC_OscConfig+0x558>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d030      	beq.n	8004540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d129      	bne.n	8004540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d122      	bne.n	8004540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004500:	4013      	ands	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004506:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004508:	4293      	cmp	r3, r2
 800450a:	d119      	bne.n	8004540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	085b      	lsrs	r3, r3, #1
 8004518:	3b01      	subs	r3, #1
 800451a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d10f      	bne.n	8004540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d107      	bne.n	8004540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800

08004554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0d0      	b.n	800470e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b6a      	ldr	r3, [pc, #424]	; (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d910      	bls.n	800459c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b67      	ldr	r3, [pc, #412]	; (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 020f 	bic.w	r2, r3, #15
 8004582:	4965      	ldr	r1, [pc, #404]	; (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b63      	ldr	r3, [pc, #396]	; (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0b8      	b.n	800470e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d020      	beq.n	80045ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b4:	4b59      	ldr	r3, [pc, #356]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a58      	ldr	r2, [pc, #352]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80045ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045cc:	4b53      	ldr	r3, [pc, #332]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4a52      	ldr	r2, [pc, #328]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80045d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d8:	4b50      	ldr	r3, [pc, #320]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	494d      	ldr	r1, [pc, #308]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d040      	beq.n	8004678 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	4b47      	ldr	r3, [pc, #284]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d115      	bne.n	8004636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e07f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d107      	bne.n	8004626 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004616:	4b41      	ldr	r3, [pc, #260]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e073      	b.n	800470e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004626:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e06b      	b.n	800470e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004636:	4b39      	ldr	r3, [pc, #228]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f023 0203 	bic.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4936      	ldr	r1, [pc, #216]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004648:	f7fe f8b6 	bl	80027b8 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	e00a      	b.n	8004666 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004650:	f7fe f8b2 	bl	80027b8 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	; 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e053      	b.n	800470e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	4b2d      	ldr	r3, [pc, #180]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 020c 	and.w	r2, r3, #12
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	429a      	cmp	r2, r3
 8004676:	d1eb      	bne.n	8004650 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004678:	4b27      	ldr	r3, [pc, #156]	; (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d210      	bcs.n	80046a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f023 020f 	bic.w	r2, r3, #15
 800468e:	4922      	ldr	r1, [pc, #136]	; (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	4b20      	ldr	r3, [pc, #128]	; (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e032      	b.n	800470e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b4:	4b19      	ldr	r3, [pc, #100]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4916      	ldr	r1, [pc, #88]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	490e      	ldr	r1, [pc, #56]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046e6:	f000 f821 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80046ea:	4602      	mov	r2, r0
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	490a      	ldr	r1, [pc, #40]	; (8004720 <HAL_RCC_ClockConfig+0x1cc>)
 80046f8:	5ccb      	ldrb	r3, [r1, r3]
 80046fa:	fa22 f303 	lsr.w	r3, r2, r3
 80046fe:	4a09      	ldr	r2, [pc, #36]	; (8004724 <HAL_RCC_ClockConfig+0x1d0>)
 8004700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_ClockConfig+0x1d4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd ff1e 	bl	8002548 <HAL_InitTick>

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023c00 	.word	0x40023c00
 800471c:	40023800 	.word	0x40023800
 8004720:	0800b85c 	.word	0x0800b85c
 8004724:	20000004 	.word	0x20000004
 8004728:	20000008 	.word	0x20000008

0800472c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800472c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004730:	b094      	sub	sp, #80	; 0x50
 8004732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	647b      	str	r3, [r7, #68]	; 0x44
 8004738:	2300      	movs	r3, #0
 800473a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473c:	2300      	movs	r3, #0
 800473e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004744:	4b79      	ldr	r3, [pc, #484]	; (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b08      	cmp	r3, #8
 800474e:	d00d      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x40>
 8004750:	2b08      	cmp	r3, #8
 8004752:	f200 80e1 	bhi.w	8004918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x34>
 800475a:	2b04      	cmp	r3, #4
 800475c:	d003      	beq.n	8004766 <HAL_RCC_GetSysClockFreq+0x3a>
 800475e:	e0db      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004760:	4b73      	ldr	r3, [pc, #460]	; (8004930 <HAL_RCC_GetSysClockFreq+0x204>)
 8004762:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004764:	e0db      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004766:	4b73      	ldr	r3, [pc, #460]	; (8004934 <HAL_RCC_GetSysClockFreq+0x208>)
 8004768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800476a:	e0d8      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800476c:	4b6f      	ldr	r3, [pc, #444]	; (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004774:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004776:	4b6d      	ldr	r3, [pc, #436]	; (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d063      	beq.n	800484a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	099b      	lsrs	r3, r3, #6
 8004788:	2200      	movs	r2, #0
 800478a:	63bb      	str	r3, [r7, #56]	; 0x38
 800478c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
 800479a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800479e:	4622      	mov	r2, r4
 80047a0:	462b      	mov	r3, r5
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f04f 0100 	mov.w	r1, #0
 80047aa:	0159      	lsls	r1, r3, #5
 80047ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b0:	0150      	lsls	r0, r2, #5
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4621      	mov	r1, r4
 80047b8:	1a51      	subs	r1, r2, r1
 80047ba:	6139      	str	r1, [r7, #16]
 80047bc:	4629      	mov	r1, r5
 80047be:	eb63 0301 	sbc.w	r3, r3, r1
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d0:	4659      	mov	r1, fp
 80047d2:	018b      	lsls	r3, r1, #6
 80047d4:	4651      	mov	r1, sl
 80047d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047da:	4651      	mov	r1, sl
 80047dc:	018a      	lsls	r2, r1, #6
 80047de:	4651      	mov	r1, sl
 80047e0:	ebb2 0801 	subs.w	r8, r2, r1
 80047e4:	4659      	mov	r1, fp
 80047e6:	eb63 0901 	sbc.w	r9, r3, r1
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fe:	4690      	mov	r8, r2
 8004800:	4699      	mov	r9, r3
 8004802:	4623      	mov	r3, r4
 8004804:	eb18 0303 	adds.w	r3, r8, r3
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	462b      	mov	r3, r5
 800480c:	eb49 0303 	adc.w	r3, r9, r3
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800481e:	4629      	mov	r1, r5
 8004820:	024b      	lsls	r3, r1, #9
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004828:	4621      	mov	r1, r4
 800482a:	024a      	lsls	r2, r1, #9
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004832:	2200      	movs	r2, #0
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
 8004836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800483c:	f7fb fd58 	bl	80002f0 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004848:	e058      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484a:	4b38      	ldr	r3, [pc, #224]	; (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	099b      	lsrs	r3, r3, #6
 8004850:	2200      	movs	r2, #0
 8004852:	4618      	mov	r0, r3
 8004854:	4611      	mov	r1, r2
 8004856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800485a:	623b      	str	r3, [r7, #32]
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
 8004860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	f04f 0000 	mov.w	r0, #0
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	0159      	lsls	r1, r3, #5
 8004872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004876:	0150      	lsls	r0, r2, #5
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4641      	mov	r1, r8
 800487e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004882:	4649      	mov	r1, r9
 8004884:	eb63 0b01 	sbc.w	fp, r3, r1
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800489c:	ebb2 040a 	subs.w	r4, r2, sl
 80048a0:	eb63 050b 	sbc.w	r5, r3, fp
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	00eb      	lsls	r3, r5, #3
 80048ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b2:	00e2      	lsls	r2, r4, #3
 80048b4:	4614      	mov	r4, r2
 80048b6:	461d      	mov	r5, r3
 80048b8:	4643      	mov	r3, r8
 80048ba:	18e3      	adds	r3, r4, r3
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	464b      	mov	r3, r9
 80048c0:	eb45 0303 	adc.w	r3, r5, r3
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048d2:	4629      	mov	r1, r5
 80048d4:	028b      	lsls	r3, r1, #10
 80048d6:	4621      	mov	r1, r4
 80048d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048dc:	4621      	mov	r1, r4
 80048de:	028a      	lsls	r2, r1, #10
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e6:	2200      	movs	r2, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	61fa      	str	r2, [r7, #28]
 80048ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f0:	f7fb fcfe 	bl	80002f0 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4613      	mov	r3, r2
 80048fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	3301      	adds	r3, #1
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800490c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800490e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004916:	e002      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCC_GetSysClockFreq+0x204>)
 800491a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800491c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800491e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004920:	4618      	mov	r0, r3
 8004922:	3750      	adds	r7, #80	; 0x50
 8004924:	46bd      	mov	sp, r7
 8004926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	00f42400 	.word	0x00f42400
 8004934:	007a1200 	.word	0x007a1200

08004938 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800493c:	4b03      	ldr	r3, [pc, #12]	; (800494c <HAL_RCC_GetHCLKFreq+0x14>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000004 	.word	0x20000004

08004950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004954:	f7ff fff0 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0a9b      	lsrs	r3, r3, #10
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4903      	ldr	r1, [pc, #12]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	0800b86c 	.word	0x0800b86c

08004978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800497c:	f7ff ffdc 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0b5b      	lsrs	r3, r3, #13
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	; (800499c <HAL_RCC_GetPCLK2Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	0800b86c 	.word	0x0800b86c

080049a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	220f      	movs	r2, #15
 80049ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <HAL_RCC_GetClockConfig+0x5c>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0203 	and.w	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <HAL_RCC_GetClockConfig+0x5c>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <HAL_RCC_GetClockConfig+0x5c>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_RCC_GetClockConfig+0x5c>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	08db      	lsrs	r3, r3, #3
 80049da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <HAL_RCC_GetClockConfig+0x60>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 020f 	and.w	r2, r3, #15
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	601a      	str	r2, [r3, #0]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40023c00 	.word	0x40023c00

08004a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d012      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a2c:	4b69      	ldr	r3, [pc, #420]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4a68      	ldr	r2, [pc, #416]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a36:	6093      	str	r3, [r2, #8]
 8004a38:	4b66      	ldr	r3, [pc, #408]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a40:	4964      	ldr	r1, [pc, #400]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d017      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a5e:	4b5d      	ldr	r3, [pc, #372]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	4959      	ldr	r1, [pc, #356]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d017      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a9a:	4b4e      	ldr	r3, [pc, #312]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	494a      	ldr	r1, [pc, #296]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab8:	d101      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004aba:	2301      	movs	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 808b 	beq.w	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ae8:	4b3a      	ldr	r3, [pc, #232]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	4a39      	ldr	r2, [pc, #228]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af2:	6413      	str	r3, [r2, #64]	; 0x40
 8004af4:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b00:	4b35      	ldr	r3, [pc, #212]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0c:	f7fd fe54 	bl	80027b8 <HAL_GetTick>
 8004b10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b14:	f7fd fe50 	bl	80027b8 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e38f      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b26:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b32:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d035      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d02e      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b50:	4b20      	ldr	r3, [pc, #128]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b66:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b72:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b78:	4b16      	ldr	r3, [pc, #88]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d114      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b84:	f7fd fe18 	bl	80027b8 <HAL_GetTick>
 8004b88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b8c:	f7fd fe14 	bl	80027b8 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e351      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0ee      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bba:	d111      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bca:	400b      	ands	r3, r1
 8004bcc:	4901      	ldr	r1, [pc, #4]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
 8004bd2:	e00b      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40007000 	.word	0x40007000
 8004bdc:	0ffffcff 	.word	0x0ffffcff
 8004be0:	4bac      	ldr	r3, [pc, #688]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4aab      	ldr	r2, [pc, #684]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bea:	6093      	str	r3, [r2, #8]
 8004bec:	4ba9      	ldr	r3, [pc, #676]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf8:	49a6      	ldr	r1, [pc, #664]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d010      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c0a:	4ba2      	ldr	r3, [pc, #648]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c10:	4aa0      	ldr	r2, [pc, #640]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c1a:	4b9e      	ldr	r3, [pc, #632]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	499b      	ldr	r1, [pc, #620]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c38:	4b96      	ldr	r3, [pc, #600]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c46:	4993      	ldr	r1, [pc, #588]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c5a:	4b8e      	ldr	r3, [pc, #568]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c68:	498a      	ldr	r1, [pc, #552]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c7c:	4b85      	ldr	r3, [pc, #532]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8a:	4982      	ldr	r1, [pc, #520]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c9e:	4b7d      	ldr	r3, [pc, #500]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4979      	ldr	r1, [pc, #484]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc0:	4b74      	ldr	r3, [pc, #464]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f023 0203 	bic.w	r2, r3, #3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	4971      	ldr	r1, [pc, #452]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce2:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	f023 020c 	bic.w	r2, r3, #12
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	4968      	ldr	r1, [pc, #416]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d04:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d12:	4960      	ldr	r1, [pc, #384]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d26:	4b5b      	ldr	r3, [pc, #364]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	4957      	ldr	r1, [pc, #348]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d48:	4b52      	ldr	r3, [pc, #328]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	494f      	ldr	r1, [pc, #316]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d6a:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	4946      	ldr	r1, [pc, #280]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d8c:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9a:	493e      	ldr	r1, [pc, #248]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbc:	4935      	ldr	r1, [pc, #212]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dd0:	4b30      	ldr	r3, [pc, #192]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dde:	492d      	ldr	r1, [pc, #180]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d011      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004df2:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e00:	4924      	ldr	r1, [pc, #144]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e10:	d101      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e32:	4b18      	ldr	r3, [pc, #96]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e40:	4914      	ldr	r1, [pc, #80]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e64:	490b      	ldr	r1, [pc, #44]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00f      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e88:	4902      	ldr	r1, [pc, #8]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e90:	e002      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ea4:	4b8a      	ldr	r3, [pc, #552]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	4986      	ldr	r1, [pc, #536]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ec8:	4b81      	ldr	r3, [pc, #516]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ece:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed8:	497d      	ldr	r1, [pc, #500]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d006      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80d6 	beq.w	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ef4:	4b76      	ldr	r3, [pc, #472]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a75      	ldr	r2, [pc, #468]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f00:	f7fd fc5a 	bl	80027b8 <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f08:	f7fd fc56 	bl	80027b8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e195      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d021      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11d      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f3a:	4b65      	ldr	r3, [pc, #404]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f48:	4b61      	ldr	r3, [pc, #388]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4e:	0e1b      	lsrs	r3, r3, #24
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	019a      	lsls	r2, r3, #6
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	061b      	lsls	r3, r3, #24
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	071b      	lsls	r3, r3, #28
 8004f6e:	4958      	ldr	r1, [pc, #352]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02e      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa0:	d129      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fa2:	4b4b      	ldr	r3, [pc, #300]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fb0:	4b47      	ldr	r3, [pc, #284]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb6:	0f1b      	lsrs	r3, r3, #28
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	019a      	lsls	r2, r3, #6
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	041b      	lsls	r3, r3, #16
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	071b      	lsls	r3, r3, #28
 8004fd6:	493e      	ldr	r1, [pc, #248]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fde:	4b3c      	ldr	r3, [pc, #240]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe4:	f023 021f 	bic.w	r2, r3, #31
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	3b01      	subs	r3, #1
 8004fee:	4938      	ldr	r1, [pc, #224]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01d      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005002:	4b33      	ldr	r3, [pc, #204]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005010:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	0f1b      	lsrs	r3, r3, #28
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	019a      	lsls	r2, r3, #6
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	431a      	orrs	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	061b      	lsls	r3, r3, #24
 8005030:	431a      	orrs	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	4926      	ldr	r1, [pc, #152]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d011      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	019a      	lsls	r2, r3, #6
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	071b      	lsls	r3, r3, #28
 8005066:	491a      	ldr	r1, [pc, #104]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a17      	ldr	r2, [pc, #92]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507a:	f7fd fb9d 	bl	80027b8 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005082:	f7fd fb99 	bl	80027b8 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b64      	cmp	r3, #100	; 0x64
 800508e:	d901      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e0d8      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	f040 80ce 	bne.w	8005244 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b4:	f7fd fb80 	bl	80027b8 <HAL_GetTick>
 80050b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050ba:	e00b      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050bc:	f7fd fb7c 	bl	80027b8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	; 0x64
 80050c8:	d904      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e0bb      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050d4:	4b5e      	ldr	r3, [pc, #376]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e0:	d0ec      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d02e      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d12a      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800510a:	4b51      	ldr	r3, [pc, #324]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005118:	4b4d      	ldr	r3, [pc, #308]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	0f1b      	lsrs	r3, r3, #28
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	019a      	lsls	r2, r3, #6
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	431a      	orrs	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	071b      	lsls	r3, r3, #28
 800513e:	4944      	ldr	r1, [pc, #272]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005146:	4b42      	ldr	r3, [pc, #264]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	3b01      	subs	r3, #1
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	493d      	ldr	r1, [pc, #244]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d022      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005174:	d11d      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005176:	4b36      	ldr	r3, [pc, #216]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	0e1b      	lsrs	r3, r3, #24
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005184:	4b32      	ldr	r3, [pc, #200]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	0f1b      	lsrs	r3, r3, #28
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	019a      	lsls	r2, r3, #6
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	431a      	orrs	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	431a      	orrs	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	071b      	lsls	r3, r3, #28
 80051aa:	4929      	ldr	r1, [pc, #164]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d028      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051be:	4b24      	ldr	r3, [pc, #144]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	0e1b      	lsrs	r3, r3, #24
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051cc:	4b20      	ldr	r3, [pc, #128]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	019a      	lsls	r2, r3, #6
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	071b      	lsls	r3, r3, #28
 80051f2:	4917      	ldr	r1, [pc, #92]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	4911      	ldr	r1, [pc, #68]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521c:	f7fd facc 	bl	80027b8 <HAL_GetTick>
 8005220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005224:	f7fd fac8 	bl	80027b8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	; 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e007      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005242:	d1ef      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800

08005254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e09d      	b.n	80053a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d108      	bne.n	8005280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005276:	d009      	beq.n	800528c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	61da      	str	r2, [r3, #28]
 800527e:	e005      	b.n	800528c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fc fd7e 	bl	8001da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052cc:	d902      	bls.n	80052d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e002      	b.n	80052da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052e2:	d007      	beq.n	80052f4 <HAL_SPI_Init+0xa0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052ec:	d002      	beq.n	80052f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	ea42 0103 	orr.w	r1, r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	0c1b      	lsrs	r3, r3, #16
 8005350:	f003 0204 	and.w	r2, r3, #4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005370:	ea42 0103 	orr.w	r1, r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005390:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e049      	b.n	8005450 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fc fd69 	bl	8001ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2202      	movs	r2, #2
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4619      	mov	r1, r3
 80053e8:	4610      	mov	r0, r2
 80053ea:	f000 fdd7 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e054      	b.n	800551a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a26      	ldr	r2, [pc, #152]	; (8005528 <HAL_TIM_Base_Start_IT+0xd0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549a:	d01d      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a22      	ldr	r2, [pc, #136]	; (800552c <HAL_TIM_Base_Start_IT+0xd4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a21      	ldr	r2, [pc, #132]	; (8005530 <HAL_TIM_Base_Start_IT+0xd8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1f      	ldr	r2, [pc, #124]	; (8005534 <HAL_TIM_Base_Start_IT+0xdc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <HAL_TIM_Base_Start_IT+0xe0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <HAL_TIM_Base_Start_IT+0xe4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <HAL_TIM_Base_Start_IT+0xe8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d115      	bne.n	8005504 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_TIM_Base_Start_IT+0xec>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b06      	cmp	r3, #6
 80054e8:	d015      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0xbe>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d011      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	e008      	b.n	8005516 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e000      	b.n	8005518 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005516:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40010000 	.word	0x40010000
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800
 8005534:	40000c00 	.word	0x40000c00
 8005538:	40010400 	.word	0x40010400
 800553c:	40014000 	.word	0x40014000
 8005540:	40001800 	.word	0x40001800
 8005544:	00010007 	.word	0x00010007

08005548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e049      	b.n	80055ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f841 	bl	80055f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f000 fd08 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e049      	b.n	80056b0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f841 	bl	80056b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f000 fca7 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e08f      	b.n	8005800 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fc fc55 	bl	8001fa4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6899      	ldr	r1, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b3e      	ldr	r3, [pc, #248]	; (8005808 <HAL_TIM_Encoder_Init+0x13c>)
 800570e:	400b      	ands	r3, r1
 8005710:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f000 fc3d 	bl	8005f9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4b31      	ldr	r3, [pc, #196]	; (800580c <HAL_TIM_Encoder_Init+0x140>)
 8005748:	4013      	ands	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	4313      	orrs	r3, r2
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4b2b      	ldr	r3, [pc, #172]	; (8005810 <HAL_TIM_Encoder_Init+0x144>)
 8005762:	4013      	ands	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <HAL_TIM_Encoder_Init+0x148>)
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	4313      	orrs	r3, r2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	011a      	lsls	r2, r3, #4
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	031b      	lsls	r3, r3, #12
 800578c:	4313      	orrs	r3, r2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	4313      	orrs	r3, r2
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	fffebff8 	.word	0xfffebff8
 800580c:	fffffcfc 	.word	0xfffffcfc
 8005810:	fffff3f3 	.word	0xfffff3f3
 8005814:	ffff0f0f 	.word	0xffff0f0f

08005818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b02      	cmp	r3, #2
 800582c:	d122      	bne.n	8005874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b02      	cmp	r3, #2
 800583a:	d11b      	bne.n	8005874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0202 	mvn.w	r2, #2
 8005844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fb80 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005860:	e005      	b.n	800586e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fb72 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fb83 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b04      	cmp	r3, #4
 8005880:	d122      	bne.n	80058c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d11b      	bne.n	80058c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0204 	mvn.w	r2, #4
 8005898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fb56 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fb48 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fb59 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d122      	bne.n	800591c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d11b      	bne.n	800591c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0208 	mvn.w	r2, #8
 80058ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2204      	movs	r2, #4
 80058f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fb2c 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fb1e 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fb2f 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b10      	cmp	r3, #16
 8005928:	d122      	bne.n	8005970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b10      	cmp	r3, #16
 8005936:	d11b      	bne.n	8005970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0210 	mvn.w	r2, #16
 8005940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2208      	movs	r2, #8
 8005946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fb02 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 faf4 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fb05 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d10e      	bne.n	800599c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d107      	bne.n	800599c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0201 	mvn.w	r2, #1
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc f8de 	bl	8001b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d10e      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	d107      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 f8c2 	bl	8006b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d10e      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d107      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 f8b5 	bl	8006b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d10e      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d107      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fab3 	bl	8005f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d10e      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d107      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f06f 0220 	mvn.w	r2, #32
 8005a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 f875 	bl	8006b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e088      	b.n	8005b86 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d11b      	bne.n	8005aba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6819      	ldr	r1, [r3, #0]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f000 fd81 	bl	8006598 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 020c 	bic.w	r2, r2, #12
 8005aa4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6999      	ldr	r1, [r3, #24]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	619a      	str	r2, [r3, #24]
 8005ab8:	e060      	b.n	8005b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d11c      	bne.n	8005afa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6819      	ldr	r1, [r3, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f000 fe05 	bl	80066de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ae2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6999      	ldr	r1, [r3, #24]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	021a      	lsls	r2, r3, #8
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	619a      	str	r2, [r3, #24]
 8005af8:	e040      	b.n	8005b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d11b      	bne.n	8005b38 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6819      	ldr	r1, [r3, #0]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f000 fe52 	bl	80067b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69da      	ldr	r2, [r3, #28]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 020c 	bic.w	r2, r2, #12
 8005b22:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69d9      	ldr	r1, [r3, #28]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	61da      	str	r2, [r3, #28]
 8005b36:	e021      	b.n	8005b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b0c      	cmp	r3, #12
 8005b3c:	d11c      	bne.n	8005b78 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6819      	ldr	r1, [r3, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f000 fe6f 	bl	8006830 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	61da      	str	r2, [r3, #28]
 8005b76:	e001      	b.n	8005b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e0ff      	b.n	8005dae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b14      	cmp	r3, #20
 8005bba:	f200 80f0 	bhi.w	8005d9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005c19 	.word	0x08005c19
 8005bc8:	08005d9f 	.word	0x08005d9f
 8005bcc:	08005d9f 	.word	0x08005d9f
 8005bd0:	08005d9f 	.word	0x08005d9f
 8005bd4:	08005c59 	.word	0x08005c59
 8005bd8:	08005d9f 	.word	0x08005d9f
 8005bdc:	08005d9f 	.word	0x08005d9f
 8005be0:	08005d9f 	.word	0x08005d9f
 8005be4:	08005c9b 	.word	0x08005c9b
 8005be8:	08005d9f 	.word	0x08005d9f
 8005bec:	08005d9f 	.word	0x08005d9f
 8005bf0:	08005d9f 	.word	0x08005d9f
 8005bf4:	08005cdb 	.word	0x08005cdb
 8005bf8:	08005d9f 	.word	0x08005d9f
 8005bfc:	08005d9f 	.word	0x08005d9f
 8005c00:	08005d9f 	.word	0x08005d9f
 8005c04:	08005d1d 	.word	0x08005d1d
 8005c08:	08005d9f 	.word	0x08005d9f
 8005c0c:	08005d9f 	.word	0x08005d9f
 8005c10:	08005d9f 	.word	0x08005d9f
 8005c14:	08005d5d 	.word	0x08005d5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fa5c 	bl	80060dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0208 	orr.w	r2, r2, #8
 8005c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0204 	bic.w	r2, r2, #4
 8005c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6999      	ldr	r1, [r3, #24]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	619a      	str	r2, [r3, #24]
      break;
 8005c56:	e0a5      	b.n	8005da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 faae 	bl	80061c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6999      	ldr	r1, [r3, #24]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	619a      	str	r2, [r3, #24]
      break;
 8005c98:	e084      	b.n	8005da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fb05 	bl	80062b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0208 	orr.w	r2, r2, #8
 8005cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0204 	bic.w	r2, r2, #4
 8005cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69d9      	ldr	r1, [r3, #28]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	61da      	str	r2, [r3, #28]
      break;
 8005cd8:	e064      	b.n	8005da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fb5b 	bl	800639c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69d9      	ldr	r1, [r3, #28]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	021a      	lsls	r2, r3, #8
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	61da      	str	r2, [r3, #28]
      break;
 8005d1a:	e043      	b.n	8005da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fb92 	bl	800644c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0208 	orr.w	r2, r2, #8
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0204 	bic.w	r2, r2, #4
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d5a:	e023      	b.n	8005da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fbc4 	bl	80064f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	021a      	lsls	r2, r3, #8
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d9c:	e002      	b.n	8005da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	75fb      	strb	r3, [r7, #23]
      break;
 8005da2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop

08005db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0b4      	b.n	8005f3e <HAL_TIM_ConfigClockSource+0x186>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	4b56      	ldr	r3, [pc, #344]	; (8005f48 <HAL_TIM_ConfigClockSource+0x190>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0c:	d03e      	beq.n	8005e8c <HAL_TIM_ConfigClockSource+0xd4>
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e12:	f200 8087 	bhi.w	8005f24 <HAL_TIM_ConfigClockSource+0x16c>
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	f000 8086 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x172>
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e22:	d87f      	bhi.n	8005f24 <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b70      	cmp	r3, #112	; 0x70
 8005e26:	d01a      	beq.n	8005e5e <HAL_TIM_ConfigClockSource+0xa6>
 8005e28:	2b70      	cmp	r3, #112	; 0x70
 8005e2a:	d87b      	bhi.n	8005f24 <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b60      	cmp	r3, #96	; 0x60
 8005e2e:	d050      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8005e30:	2b60      	cmp	r3, #96	; 0x60
 8005e32:	d877      	bhi.n	8005f24 <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b50      	cmp	r3, #80	; 0x50
 8005e36:	d03c      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8005e38:	2b50      	cmp	r3, #80	; 0x50
 8005e3a:	d873      	bhi.n	8005f24 <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b40      	cmp	r3, #64	; 0x40
 8005e3e:	d058      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	d86f      	bhi.n	8005f24 <HAL_TIM_ConfigClockSource+0x16c>
 8005e44:	2b30      	cmp	r3, #48	; 0x30
 8005e46:	d064      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0x15a>
 8005e48:	2b30      	cmp	r3, #48	; 0x30
 8005e4a:	d86b      	bhi.n	8005f24 <HAL_TIM_ConfigClockSource+0x16c>
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d060      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0x15a>
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d867      	bhi.n	8005f24 <HAL_TIM_ConfigClockSource+0x16c>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05c      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0x15a>
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d05a      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0x15a>
 8005e5c:	e062      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6899      	ldr	r1, [r3, #8]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f000 fd37 	bl	80068e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	609a      	str	r2, [r3, #8]
      break;
 8005e8a:	e04f      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	6899      	ldr	r1, [r3, #8]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f000 fd20 	bl	80068e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eae:	609a      	str	r2, [r3, #8]
      break;
 8005eb0:	e03c      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f000 fbde 	bl	8006680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2150      	movs	r1, #80	; 0x50
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fced 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 8005ed0:	e02c      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f000 fc3a 	bl	8006758 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2160      	movs	r1, #96	; 0x60
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fcdd 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 8005ef0:	e01c      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6859      	ldr	r1, [r3, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	461a      	mov	r2, r3
 8005f00:	f000 fbbe 	bl	8006680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2140      	movs	r1, #64	; 0x40
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fccd 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 8005f10:	e00c      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	f000 fcc4 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 8005f22:	e003      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73fb      	strb	r3, [r7, #15]
      break;
 8005f28:	e000      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	fffeff88 	.word	0xfffeff88

08005f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a40      	ldr	r2, [pc, #256]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d00f      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a3d      	ldr	r2, [pc, #244]	; (80060b4 <TIM_Base_SetConfig+0x118>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00b      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a3c      	ldr	r2, [pc, #240]	; (80060b8 <TIM_Base_SetConfig+0x11c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3b      	ldr	r2, [pc, #236]	; (80060bc <TIM_Base_SetConfig+0x120>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3a      	ldr	r2, [pc, #232]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a2f      	ldr	r2, [pc, #188]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d027      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2c      	ldr	r2, [pc, #176]	; (80060b4 <TIM_Base_SetConfig+0x118>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d023      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2b      	ldr	r2, [pc, #172]	; (80060b8 <TIM_Base_SetConfig+0x11c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <TIM_Base_SetConfig+0x120>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d017      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a28      	ldr	r2, [pc, #160]	; (80060c4 <TIM_Base_SetConfig+0x128>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <TIM_Base_SetConfig+0x12c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a26      	ldr	r2, [pc, #152]	; (80060cc <TIM_Base_SetConfig+0x130>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <TIM_Base_SetConfig+0x134>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a24      	ldr	r2, [pc, #144]	; (80060d4 <TIM_Base_SetConfig+0x138>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a23      	ldr	r2, [pc, #140]	; (80060d8 <TIM_Base_SetConfig+0x13c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d108      	bne.n	8006060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_Base_SetConfig+0xf8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	615a      	str	r2, [r3, #20]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40010400 	.word	0x40010400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40014400 	.word	0x40014400
 80060cc:	40014800 	.word	0x40014800
 80060d0:	40001800 	.word	0x40001800
 80060d4:	40001c00 	.word	0x40001c00
 80060d8:	40002000 	.word	0x40002000

080060dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f023 0201 	bic.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4b2b      	ldr	r3, [pc, #172]	; (80061b4 <TIM_OC1_SetConfig+0xd8>)
 8006108:	4013      	ands	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 0302 	bic.w	r3, r3, #2
 8006124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a21      	ldr	r2, [pc, #132]	; (80061b8 <TIM_OC1_SetConfig+0xdc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC1_SetConfig+0x64>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a20      	ldr	r2, [pc, #128]	; (80061bc <TIM_OC1_SetConfig+0xe0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10c      	bne.n	800615a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0308 	bic.w	r3, r3, #8
 8006146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0304 	bic.w	r3, r3, #4
 8006158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <TIM_OC1_SetConfig+0xdc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_OC1_SetConfig+0x8e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <TIM_OC1_SetConfig+0xe0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d111      	bne.n	800618e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	fffeff8f 	.word	0xfffeff8f
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0210 	bic.w	r2, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4b2e      	ldr	r3, [pc, #184]	; (80062a4 <TIM_OC2_SetConfig+0xe4>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0320 	bic.w	r3, r3, #32
 800620a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <TIM_OC2_SetConfig+0xe8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC2_SetConfig+0x68>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a22      	ldr	r2, [pc, #136]	; (80062ac <TIM_OC2_SetConfig+0xec>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d10d      	bne.n	8006244 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <TIM_OC2_SetConfig+0xe8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC2_SetConfig+0x94>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a17      	ldr	r2, [pc, #92]	; (80062ac <TIM_OC2_SetConfig+0xec>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d113      	bne.n	800627c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800625a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	feff8fff 	.word	0xfeff8fff
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40010400 	.word	0x40010400

080062b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <TIM_OC3_SetConfig+0xe0>)
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a22      	ldr	r2, [pc, #136]	; (8006394 <TIM_OC3_SetConfig+0xe4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_OC3_SetConfig+0x66>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a21      	ldr	r2, [pc, #132]	; (8006398 <TIM_OC3_SetConfig+0xe8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10d      	bne.n	8006332 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800631c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <TIM_OC3_SetConfig+0xe4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_OC3_SetConfig+0x92>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a16      	ldr	r2, [pc, #88]	; (8006398 <TIM_OC3_SetConfig+0xe8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d113      	bne.n	800636a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	fffeff8f 	.word	0xfffeff8f
 8006394:	40010000 	.word	0x40010000
 8006398:	40010400 	.word	0x40010400

0800639c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <TIM_OC4_SetConfig+0xa4>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	031b      	lsls	r3, r3, #12
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a13      	ldr	r2, [pc, #76]	; (8006444 <TIM_OC4_SetConfig+0xa8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_OC4_SetConfig+0x68>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a12      	ldr	r2, [pc, #72]	; (8006448 <TIM_OC4_SetConfig+0xac>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d109      	bne.n	8006418 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	019b      	lsls	r3, r3, #6
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	feff8fff 	.word	0xfeff8fff
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400

0800644c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4b1b      	ldr	r3, [pc, #108]	; (80064e4 <TIM_OC5_SetConfig+0x98>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800648c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <TIM_OC5_SetConfig+0x9c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d003      	beq.n	80064aa <TIM_OC5_SetConfig+0x5e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a11      	ldr	r2, [pc, #68]	; (80064ec <TIM_OC5_SetConfig+0xa0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d109      	bne.n	80064be <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	621a      	str	r2, [r3, #32]
}
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	fffeff8f 	.word	0xfffeff8f
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40010400 	.word	0x40010400

080064f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <TIM_OC6_SetConfig+0x9c>)
 800651c:	4013      	ands	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	051b      	lsls	r3, r3, #20
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a13      	ldr	r2, [pc, #76]	; (8006590 <TIM_OC6_SetConfig+0xa0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC6_SetConfig+0x60>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a12      	ldr	r2, [pc, #72]	; (8006594 <TIM_OC6_SetConfig+0xa4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d109      	bne.n	8006564 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006556:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	029b      	lsls	r3, r3, #10
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	feff8fff 	.word	0xfeff8fff
 8006590:	40010000 	.word	0x40010000
 8006594:	40010400 	.word	0x40010400

08006598 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f023 0201 	bic.w	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a28      	ldr	r2, [pc, #160]	; (8006664 <TIM_TI1_SetConfig+0xcc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01b      	beq.n	80065fe <TIM_TI1_SetConfig+0x66>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065cc:	d017      	beq.n	80065fe <TIM_TI1_SetConfig+0x66>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a25      	ldr	r2, [pc, #148]	; (8006668 <TIM_TI1_SetConfig+0xd0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <TIM_TI1_SetConfig+0x66>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a24      	ldr	r2, [pc, #144]	; (800666c <TIM_TI1_SetConfig+0xd4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00f      	beq.n	80065fe <TIM_TI1_SetConfig+0x66>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a23      	ldr	r2, [pc, #140]	; (8006670 <TIM_TI1_SetConfig+0xd8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00b      	beq.n	80065fe <TIM_TI1_SetConfig+0x66>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a22      	ldr	r2, [pc, #136]	; (8006674 <TIM_TI1_SetConfig+0xdc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d007      	beq.n	80065fe <TIM_TI1_SetConfig+0x66>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a21      	ldr	r2, [pc, #132]	; (8006678 <TIM_TI1_SetConfig+0xe0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_TI1_SetConfig+0x66>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4a20      	ldr	r2, [pc, #128]	; (800667c <TIM_TI1_SetConfig+0xe4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d101      	bne.n	8006602 <TIM_TI1_SetConfig+0x6a>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <TIM_TI1_SetConfig+0x6c>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0303 	bic.w	r3, r3, #3
 800660e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	e003      	b.n	8006622 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006628:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	b2db      	uxtb	r3, r3
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f023 030a 	bic.w	r3, r3, #10
 800663c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f003 030a 	and.w	r3, r3, #10
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40010000 	.word	0x40010000
 8006668:	40000400 	.word	0x40000400
 800666c:	40000800 	.word	0x40000800
 8006670:	40000c00 	.word	0x40000c00
 8006674:	40010400 	.word	0x40010400
 8006678:	40014000 	.word	0x40014000
 800667c:	40001800 	.word	0x40001800

08006680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 030a 	bic.w	r3, r3, #10
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	f023 0210 	bic.w	r2, r3, #16
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800671c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	031b      	lsls	r3, r3, #12
 8006722:	b29b      	uxth	r3, r3
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006730:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	621a      	str	r2, [r3, #32]
}
 800674c:	bf00      	nop
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f023 0210 	bic.w	r2, r3, #16
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006782:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	031b      	lsls	r3, r3, #12
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006794:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	621a      	str	r2, [r3, #32]
}
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f023 0303 	bic.w	r3, r3, #3
 80067e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006808:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	621a      	str	r2, [r3, #32]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800686e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	031b      	lsls	r3, r3, #12
 8006874:	b29b      	uxth	r3, r3
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006882:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	031b      	lsls	r3, r3, #12
 8006888:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	621a      	str	r2, [r3, #32]
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f043 0307 	orr.w	r3, r3, #7
 80068cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	609a      	str	r2, [r3, #8]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	021a      	lsls	r2, r3, #8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	431a      	orrs	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4313      	orrs	r3, r2
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	609a      	str	r2, [r3, #8]
}
 8006914:	bf00      	nop
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e06d      	b.n	8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a30      	ldr	r2, [pc, #192]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2f      	ldr	r2, [pc, #188]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d108      	bne.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a20      	ldr	r2, [pc, #128]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d022      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069aa:	d01d      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d018      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d013      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1a      	ldr	r2, [pc, #104]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00e      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d009      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a16      	ldr	r2, [pc, #88]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10c      	bne.n	8006a02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	40010000 	.word	0x40010000
 8006a24:	40010400 	.word	0x40010400
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40000c00 	.word	0x40000c00
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40001800 	.word	0x40001800

08006a3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e065      	b.n	8006b24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a14      	ldr	r2, [pc, #80]	; (8006b34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d115      	bne.n	8006b12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	051b      	lsls	r3, r3, #20
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40010400 	.word	0x40010400

08006b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e040      	b.n	8006c08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fb fb22 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2224      	movs	r2, #36	; 0x24
 8006ba0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f82c 	bl	8006c10 <UART_SetConfig>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e022      	b.n	8006c08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa84 	bl	80070d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fb0b 	bl	800721c <UART_CheckIdleState>
 8006c06:	4603      	mov	r3, r0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4ba6      	ldr	r3, [pc, #664]	; (8006ed4 <UART_SetConfig+0x2c4>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6812      	ldr	r2, [r2, #0]
 8006c42:	6979      	ldr	r1, [r7, #20]
 8006c44:	430b      	orrs	r3, r1
 8006c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a94      	ldr	r2, [pc, #592]	; (8006ed8 <UART_SetConfig+0x2c8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d120      	bne.n	8006cce <UART_SetConfig+0xbe>
 8006c8c:	4b93      	ldr	r3, [pc, #588]	; (8006edc <UART_SetConfig+0x2cc>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d816      	bhi.n	8006cc8 <UART_SetConfig+0xb8>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <UART_SetConfig+0x90>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cbd 	.word	0x08006cbd
 8006ca8:	08006cb7 	.word	0x08006cb7
 8006cac:	08006cc3 	.word	0x08006cc3
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e150      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	77fb      	strb	r3, [r7, #31]
 8006cba:	e14d      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e14a      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e147      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e144      	b.n	8006f58 <UART_SetConfig+0x348>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a83      	ldr	r2, [pc, #524]	; (8006ee0 <UART_SetConfig+0x2d0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d132      	bne.n	8006d3e <UART_SetConfig+0x12e>
 8006cd8:	4b80      	ldr	r3, [pc, #512]	; (8006edc <UART_SetConfig+0x2cc>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cde:	f003 030c 	and.w	r3, r3, #12
 8006ce2:	2b0c      	cmp	r3, #12
 8006ce4:	d828      	bhi.n	8006d38 <UART_SetConfig+0x128>
 8006ce6:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <UART_SetConfig+0xdc>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d21 	.word	0x08006d21
 8006cf0:	08006d39 	.word	0x08006d39
 8006cf4:	08006d39 	.word	0x08006d39
 8006cf8:	08006d39 	.word	0x08006d39
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006d39 	.word	0x08006d39
 8006d04:	08006d39 	.word	0x08006d39
 8006d08:	08006d39 	.word	0x08006d39
 8006d0c:	08006d27 	.word	0x08006d27
 8006d10:	08006d39 	.word	0x08006d39
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006d33 	.word	0x08006d33
 8006d20:	2300      	movs	r3, #0
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e118      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d26:	2302      	movs	r3, #2
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e115      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e112      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d32:	2308      	movs	r3, #8
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e10f      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e10c      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a68      	ldr	r2, [pc, #416]	; (8006ee4 <UART_SetConfig+0x2d4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d120      	bne.n	8006d8a <UART_SetConfig+0x17a>
 8006d48:	4b64      	ldr	r3, [pc, #400]	; (8006edc <UART_SetConfig+0x2cc>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d52:	2b30      	cmp	r3, #48	; 0x30
 8006d54:	d013      	beq.n	8006d7e <UART_SetConfig+0x16e>
 8006d56:	2b30      	cmp	r3, #48	; 0x30
 8006d58:	d814      	bhi.n	8006d84 <UART_SetConfig+0x174>
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d009      	beq.n	8006d72 <UART_SetConfig+0x162>
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d810      	bhi.n	8006d84 <UART_SetConfig+0x174>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <UART_SetConfig+0x15c>
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d006      	beq.n	8006d78 <UART_SetConfig+0x168>
 8006d6a:	e00b      	b.n	8006d84 <UART_SetConfig+0x174>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	77fb      	strb	r3, [r7, #31]
 8006d70:	e0f2      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d72:	2302      	movs	r3, #2
 8006d74:	77fb      	strb	r3, [r7, #31]
 8006d76:	e0ef      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d78:	2304      	movs	r3, #4
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e0ec      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d7e:	2308      	movs	r3, #8
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e0e9      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d84:	2310      	movs	r3, #16
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e0e6      	b.n	8006f58 <UART_SetConfig+0x348>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a56      	ldr	r2, [pc, #344]	; (8006ee8 <UART_SetConfig+0x2d8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d120      	bne.n	8006dd6 <UART_SetConfig+0x1c6>
 8006d94:	4b51      	ldr	r3, [pc, #324]	; (8006edc <UART_SetConfig+0x2cc>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006da0:	d013      	beq.n	8006dca <UART_SetConfig+0x1ba>
 8006da2:	2bc0      	cmp	r3, #192	; 0xc0
 8006da4:	d814      	bhi.n	8006dd0 <UART_SetConfig+0x1c0>
 8006da6:	2b80      	cmp	r3, #128	; 0x80
 8006da8:	d009      	beq.n	8006dbe <UART_SetConfig+0x1ae>
 8006daa:	2b80      	cmp	r3, #128	; 0x80
 8006dac:	d810      	bhi.n	8006dd0 <UART_SetConfig+0x1c0>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <UART_SetConfig+0x1a8>
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d006      	beq.n	8006dc4 <UART_SetConfig+0x1b4>
 8006db6:	e00b      	b.n	8006dd0 <UART_SetConfig+0x1c0>
 8006db8:	2300      	movs	r3, #0
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e0cc      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e0c9      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e0c6      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dca:	2308      	movs	r3, #8
 8006dcc:	77fb      	strb	r3, [r7, #31]
 8006dce:	e0c3      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e0c0      	b.n	8006f58 <UART_SetConfig+0x348>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a44      	ldr	r2, [pc, #272]	; (8006eec <UART_SetConfig+0x2dc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d125      	bne.n	8006e2c <UART_SetConfig+0x21c>
 8006de0:	4b3e      	ldr	r3, [pc, #248]	; (8006edc <UART_SetConfig+0x2cc>)
 8006de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dee:	d017      	beq.n	8006e20 <UART_SetConfig+0x210>
 8006df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df4:	d817      	bhi.n	8006e26 <UART_SetConfig+0x216>
 8006df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dfa:	d00b      	beq.n	8006e14 <UART_SetConfig+0x204>
 8006dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e00:	d811      	bhi.n	8006e26 <UART_SetConfig+0x216>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <UART_SetConfig+0x1fe>
 8006e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0a:	d006      	beq.n	8006e1a <UART_SetConfig+0x20a>
 8006e0c:	e00b      	b.n	8006e26 <UART_SetConfig+0x216>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e0a1      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e14:	2302      	movs	r3, #2
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e09e      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e1a:	2304      	movs	r3, #4
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e09b      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e20:	2308      	movs	r3, #8
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e098      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e26:	2310      	movs	r3, #16
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e095      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2f      	ldr	r2, [pc, #188]	; (8006ef0 <UART_SetConfig+0x2e0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d125      	bne.n	8006e82 <UART_SetConfig+0x272>
 8006e36:	4b29      	ldr	r3, [pc, #164]	; (8006edc <UART_SetConfig+0x2cc>)
 8006e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e44:	d017      	beq.n	8006e76 <UART_SetConfig+0x266>
 8006e46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e4a:	d817      	bhi.n	8006e7c <UART_SetConfig+0x26c>
 8006e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e50:	d00b      	beq.n	8006e6a <UART_SetConfig+0x25a>
 8006e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e56:	d811      	bhi.n	8006e7c <UART_SetConfig+0x26c>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <UART_SetConfig+0x254>
 8006e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e60:	d006      	beq.n	8006e70 <UART_SetConfig+0x260>
 8006e62:	e00b      	b.n	8006e7c <UART_SetConfig+0x26c>
 8006e64:	2301      	movs	r3, #1
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e076      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e073      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e70:	2304      	movs	r3, #4
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e070      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e76:	2308      	movs	r3, #8
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e06d      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e06a      	b.n	8006f58 <UART_SetConfig+0x348>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <UART_SetConfig+0x2e4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d138      	bne.n	8006efe <UART_SetConfig+0x2ee>
 8006e8c:	4b13      	ldr	r3, [pc, #76]	; (8006edc <UART_SetConfig+0x2cc>)
 8006e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e9a:	d017      	beq.n	8006ecc <UART_SetConfig+0x2bc>
 8006e9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ea0:	d82a      	bhi.n	8006ef8 <UART_SetConfig+0x2e8>
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea6:	d00b      	beq.n	8006ec0 <UART_SetConfig+0x2b0>
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eac:	d824      	bhi.n	8006ef8 <UART_SetConfig+0x2e8>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <UART_SetConfig+0x2aa>
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb6:	d006      	beq.n	8006ec6 <UART_SetConfig+0x2b6>
 8006eb8:	e01e      	b.n	8006ef8 <UART_SetConfig+0x2e8>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e04b      	b.n	8006f58 <UART_SetConfig+0x348>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	77fb      	strb	r3, [r7, #31]
 8006ec4:	e048      	b.n	8006f58 <UART_SetConfig+0x348>
 8006ec6:	2304      	movs	r3, #4
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e045      	b.n	8006f58 <UART_SetConfig+0x348>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e042      	b.n	8006f58 <UART_SetConfig+0x348>
 8006ed2:	bf00      	nop
 8006ed4:	efff69f3 	.word	0xefff69f3
 8006ed8:	40011000 	.word	0x40011000
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	40004400 	.word	0x40004400
 8006ee4:	40004800 	.word	0x40004800
 8006ee8:	40004c00 	.word	0x40004c00
 8006eec:	40005000 	.word	0x40005000
 8006ef0:	40011400 	.word	0x40011400
 8006ef4:	40007800 	.word	0x40007800
 8006ef8:	2310      	movs	r3, #16
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e02c      	b.n	8006f58 <UART_SetConfig+0x348>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a72      	ldr	r2, [pc, #456]	; (80070cc <UART_SetConfig+0x4bc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d125      	bne.n	8006f54 <UART_SetConfig+0x344>
 8006f08:	4b71      	ldr	r3, [pc, #452]	; (80070d0 <UART_SetConfig+0x4c0>)
 8006f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f16:	d017      	beq.n	8006f48 <UART_SetConfig+0x338>
 8006f18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f1c:	d817      	bhi.n	8006f4e <UART_SetConfig+0x33e>
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f22:	d00b      	beq.n	8006f3c <UART_SetConfig+0x32c>
 8006f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f28:	d811      	bhi.n	8006f4e <UART_SetConfig+0x33e>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <UART_SetConfig+0x326>
 8006f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f32:	d006      	beq.n	8006f42 <UART_SetConfig+0x332>
 8006f34:	e00b      	b.n	8006f4e <UART_SetConfig+0x33e>
 8006f36:	2300      	movs	r3, #0
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	e00d      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e00a      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f42:	2304      	movs	r3, #4
 8006f44:	77fb      	strb	r3, [r7, #31]
 8006f46:	e007      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e004      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f4e:	2310      	movs	r3, #16
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e001      	b.n	8006f58 <UART_SetConfig+0x348>
 8006f54:	2310      	movs	r3, #16
 8006f56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f60:	d15b      	bne.n	800701a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006f62:	7ffb      	ldrb	r3, [r7, #31]
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d828      	bhi.n	8006fba <UART_SetConfig+0x3aa>
 8006f68:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <UART_SetConfig+0x360>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006f95 	.word	0x08006f95
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006fa5 	.word	0x08006fa5
 8006f7c:	08006fbb 	.word	0x08006fbb
 8006f80:	08006fab 	.word	0x08006fab
 8006f84:	08006fbb 	.word	0x08006fbb
 8006f88:	08006fbb 	.word	0x08006fbb
 8006f8c:	08006fbb 	.word	0x08006fbb
 8006f90:	08006fb3 	.word	0x08006fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f94:	f7fd fcdc 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 8006f98:	61b8      	str	r0, [r7, #24]
        break;
 8006f9a:	e013      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f9c:	f7fd fcec 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 8006fa0:	61b8      	str	r0, [r7, #24]
        break;
 8006fa2:	e00f      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa4:	4b4b      	ldr	r3, [pc, #300]	; (80070d4 <UART_SetConfig+0x4c4>)
 8006fa6:	61bb      	str	r3, [r7, #24]
        break;
 8006fa8:	e00c      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006faa:	f7fd fbbf 	bl	800472c <HAL_RCC_GetSysClockFreq>
 8006fae:	61b8      	str	r0, [r7, #24]
        break;
 8006fb0:	e008      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb6:	61bb      	str	r3, [r7, #24]
        break;
 8006fb8:	e004      	b.n	8006fc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	77bb      	strb	r3, [r7, #30]
        break;
 8006fc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d074      	beq.n	80070b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	005a      	lsls	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	441a      	add	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b0f      	cmp	r3, #15
 8006fe4:	d916      	bls.n	8007014 <UART_SetConfig+0x404>
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fec:	d212      	bcs.n	8007014 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f023 030f 	bic.w	r3, r3, #15
 8006ff6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	b29a      	uxth	r2, r3
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	4313      	orrs	r3, r2
 8007008:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	89fa      	ldrh	r2, [r7, #14]
 8007010:	60da      	str	r2, [r3, #12]
 8007012:	e04f      	b.n	80070b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	77bb      	strb	r3, [r7, #30]
 8007018:	e04c      	b.n	80070b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800701a:	7ffb      	ldrb	r3, [r7, #31]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d828      	bhi.n	8007072 <UART_SetConfig+0x462>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0x418>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	0800704d 	.word	0x0800704d
 800702c:	08007055 	.word	0x08007055
 8007030:	0800705d 	.word	0x0800705d
 8007034:	08007073 	.word	0x08007073
 8007038:	08007063 	.word	0x08007063
 800703c:	08007073 	.word	0x08007073
 8007040:	08007073 	.word	0x08007073
 8007044:	08007073 	.word	0x08007073
 8007048:	0800706b 	.word	0x0800706b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fd fc80 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 8007050:	61b8      	str	r0, [r7, #24]
        break;
 8007052:	e013      	b.n	800707c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007054:	f7fd fc90 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 8007058:	61b8      	str	r0, [r7, #24]
        break;
 800705a:	e00f      	b.n	800707c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800705c:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <UART_SetConfig+0x4c4>)
 800705e:	61bb      	str	r3, [r7, #24]
        break;
 8007060:	e00c      	b.n	800707c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007062:	f7fd fb63 	bl	800472c <HAL_RCC_GetSysClockFreq>
 8007066:	61b8      	str	r0, [r7, #24]
        break;
 8007068:	e008      	b.n	800707c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706e:	61bb      	str	r3, [r7, #24]
        break;
 8007070:	e004      	b.n	800707c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	77bb      	strb	r3, [r7, #30]
        break;
 800707a:	bf00      	nop
    }

    if (pclk != 0U)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d018      	beq.n	80070b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	085a      	lsrs	r2, r3, #1
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	441a      	add	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	fbb2 f3f3 	udiv	r3, r2, r3
 8007094:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b0f      	cmp	r3, #15
 800709a:	d909      	bls.n	80070b0 <UART_SetConfig+0x4a0>
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a2:	d205      	bcs.n	80070b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	e001      	b.n	80070b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80070c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40007c00 	.word	0x40007c00
 80070d0:	40023800 	.word	0x40023800
 80070d4:	00f42400 	.word	0x00f42400

080070d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01a      	beq.n	80071ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d6:	d10a      	bne.n	80071ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800722c:	f7fb fac4 	bl	80027b8 <HAL_GetTick>
 8007230:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b08      	cmp	r3, #8
 800723e:	d10e      	bne.n	800725e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f831 	bl	80072b6 <UART_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e027      	b.n	80072ae <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b04      	cmp	r3, #4
 800726a:	d10e      	bne.n	800728a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800726c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f81b 	bl	80072b6 <UART_WaitOnFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e011      	b.n	80072ae <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b09c      	sub	sp, #112	; 0x70
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	603b      	str	r3, [r7, #0]
 80072c2:	4613      	mov	r3, r2
 80072c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c6:	e0a7      	b.n	8007418 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ce:	f000 80a3 	beq.w	8007418 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d2:	f7fb fa71 	bl	80027b8 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072de:	429a      	cmp	r2, r3
 80072e0:	d302      	bcc.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80072e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d13f      	bne.n	8007368 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072fc:	667b      	str	r3, [r7, #100]	; 0x64
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007308:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800730c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e6      	bne.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	663b      	str	r3, [r7, #96]	; 0x60
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800733a:	64ba      	str	r2, [r7, #72]	; 0x48
 800733c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e068      	b.n	800743a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0304 	and.w	r3, r3, #4
 8007372:	2b00      	cmp	r3, #0
 8007374:	d050      	beq.n	8007418 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007384:	d148      	bne.n	8007418 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800738e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ae:	637b      	str	r3, [r7, #52]	; 0x34
 80073b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e6      	bne.n	8007390 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	613b      	str	r3, [r7, #16]
   return(result);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073e2:	623a      	str	r2, [r7, #32]
 80073e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	69f9      	ldr	r1, [r7, #28]
 80073e8:	6a3a      	ldr	r2, [r7, #32]
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e5      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2220      	movs	r2, #32
 80073fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2220      	movs	r2, #32
 8007400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2220      	movs	r2, #32
 8007408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e010      	b.n	800743a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69da      	ldr	r2, [r3, #28]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4013      	ands	r3, r2
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	429a      	cmp	r2, r3
 8007426:	bf0c      	ite	eq
 8007428:	2301      	moveq	r3, #1
 800742a:	2300      	movne	r3, #0
 800742c:	b2db      	uxtb	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	429a      	cmp	r2, r3
 8007434:	f43f af48 	beq.w	80072c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3770      	adds	r7, #112	; 0x70
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007442:	b480      	push	{r7}
 8007444:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007446:	bf00      	nop
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007456:	f3ef 8305 	mrs	r3, IPSR
 800745a:	60bb      	str	r3, [r7, #8]
  return(result);
 800745c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10f      	bne.n	8007482 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007462:	f3ef 8310 	mrs	r3, PRIMASK
 8007466:	607b      	str	r3, [r7, #4]
  return(result);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d105      	bne.n	800747a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800746e:	f3ef 8311 	mrs	r3, BASEPRI
 8007472:	603b      	str	r3, [r7, #0]
  return(result);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <osKernelInitialize+0x3a>
 800747a:	4b0e      	ldr	r3, [pc, #56]	; (80074b4 <osKernelInitialize+0x64>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d103      	bne.n	800748a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007482:	f06f 0305 	mvn.w	r3, #5
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	e00c      	b.n	80074a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800748a:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <osKernelInitialize+0x64>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007492:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <osKernelInitialize+0x64>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e002      	b.n	80074a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800749e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80074a4:	68fb      	ldr	r3, [r7, #12]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	200006e0 	.word	0x200006e0

080074b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074be:	f3ef 8305 	mrs	r3, IPSR
 80074c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80074c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10f      	bne.n	80074ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ca:	f3ef 8310 	mrs	r3, PRIMASK
 80074ce:	607b      	str	r3, [r7, #4]
  return(result);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d105      	bne.n	80074e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074d6:	f3ef 8311 	mrs	r3, BASEPRI
 80074da:	603b      	str	r3, [r7, #0]
  return(result);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <osKernelStart+0x3a>
 80074e2:	4b0f      	ldr	r3, [pc, #60]	; (8007520 <osKernelStart+0x68>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d103      	bne.n	80074f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80074ea:	f06f 0305 	mvn.w	r3, #5
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e010      	b.n	8007514 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <osKernelStart+0x68>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d109      	bne.n	800750e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074fa:	f7ff ffa2 	bl	8007442 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <osKernelStart+0x68>)
 8007500:	2202      	movs	r2, #2
 8007502:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007504:	f001 f8ca 	bl	800869c <vTaskStartScheduler>
      stat = osOK;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e002      	b.n	8007514 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800750e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007512:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007514:	68fb      	ldr	r3, [r7, #12]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	200006e0 	.word	0x200006e0

08007524 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007524:	b580      	push	{r7, lr}
 8007526:	b090      	sub	sp, #64	; 0x40
 8007528:	af04      	add	r7, sp, #16
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007534:	f3ef 8305 	mrs	r3, IPSR
 8007538:	61fb      	str	r3, [r7, #28]
  return(result);
 800753a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 808f 	bne.w	8007660 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007542:	f3ef 8310 	mrs	r3, PRIMASK
 8007546:	61bb      	str	r3, [r7, #24]
  return(result);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d105      	bne.n	800755a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800754e:	f3ef 8311 	mrs	r3, BASEPRI
 8007552:	617b      	str	r3, [r7, #20]
  return(result);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <osThreadNew+0x3e>
 800755a:	4b44      	ldr	r3, [pc, #272]	; (800766c <osThreadNew+0x148>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d07e      	beq.n	8007660 <osThreadNew+0x13c>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d07b      	beq.n	8007660 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800756c:	2318      	movs	r3, #24
 800756e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007578:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d045      	beq.n	800760c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <osThreadNew+0x6a>
        name = attr->name;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <osThreadNew+0x90>
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	2b38      	cmp	r3, #56	; 0x38
 80075a6:	d805      	bhi.n	80075b4 <osThreadNew+0x90>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <osThreadNew+0x94>
        return (NULL);
 80075b4:	2300      	movs	r3, #0
 80075b6:	e054      	b.n	8007662 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	089b      	lsrs	r3, r3, #2
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00e      	beq.n	80075ee <osThreadNew+0xca>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2bbb      	cmp	r3, #187	; 0xbb
 80075d6:	d90a      	bls.n	80075ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <osThreadNew+0xca>
        mem = 1;
 80075e8:	2301      	movs	r3, #1
 80075ea:	623b      	str	r3, [r7, #32]
 80075ec:	e010      	b.n	8007610 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10c      	bne.n	8007610 <osThreadNew+0xec>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d108      	bne.n	8007610 <osThreadNew+0xec>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d104      	bne.n	8007610 <osThreadNew+0xec>
          mem = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	623b      	str	r3, [r7, #32]
 800760a:	e001      	b.n	8007610 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800760c:	2300      	movs	r3, #0
 800760e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d110      	bne.n	8007638 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800761e:	9202      	str	r2, [sp, #8]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800762a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 fe3f 	bl	80082b0 <xTaskCreateStatic>
 8007632:	4603      	mov	r3, r0
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	e013      	b.n	8007660 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d110      	bne.n	8007660 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	b29a      	uxth	r2, r3
 8007642:	f107 0310 	add.w	r3, r7, #16
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fe90 	bl	8008376 <xTaskCreate>
 8007656:	4603      	mov	r3, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	d001      	beq.n	8007660 <osThreadNew+0x13c>
          hTask = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007660:	693b      	ldr	r3, [r7, #16]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3730      	adds	r7, #48	; 0x30
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	200006e0 	.word	0x200006e0

08007670 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007678:	f3ef 8305 	mrs	r3, IPSR
 800767c:	613b      	str	r3, [r7, #16]
  return(result);
 800767e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10f      	bne.n	80076a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007684:	f3ef 8310 	mrs	r3, PRIMASK
 8007688:	60fb      	str	r3, [r7, #12]
  return(result);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007690:	f3ef 8311 	mrs	r3, BASEPRI
 8007694:	60bb      	str	r3, [r7, #8]
  return(result);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <osDelay+0x3c>
 800769c:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <osDelay+0x58>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d103      	bne.n	80076ac <osDelay+0x3c>
    stat = osErrorISR;
 80076a4:	f06f 0305 	mvn.w	r3, #5
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	e007      	b.n	80076bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 ffba 	bl	8008630 <vTaskDelay>
    }
  }

  return (stat);
 80076bc:	697b      	ldr	r3, [r7, #20]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	200006e0 	.word	0x200006e0

080076cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4a07      	ldr	r2, [pc, #28]	; (80076f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80076dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	4a06      	ldr	r2, [pc, #24]	; (80076fc <vApplicationGetIdleTaskMemory+0x30>)
 80076e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2280      	movs	r2, #128	; 0x80
 80076e8:	601a      	str	r2, [r3, #0]
}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	200006e4 	.word	0x200006e4
 80076fc:	200007a0 	.word	0x200007a0

08007700 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4a07      	ldr	r2, [pc, #28]	; (800772c <vApplicationGetTimerTaskMemory+0x2c>)
 8007710:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4a06      	ldr	r2, [pc, #24]	; (8007730 <vApplicationGetTimerTaskMemory+0x30>)
 8007716:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800771e:	601a      	str	r2, [r3, #0]
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	200009a0 	.word	0x200009a0
 8007730:	20000a5c 	.word	0x20000a5c

08007734 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f103 0208 	add.w	r2, r3, #8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800774c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f103 0208 	add.w	r2, r3, #8
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f103 0208 	add.w	r2, r3, #8
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
}
 80077ca:	bf00      	nop
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ec:	d103      	bne.n	80077f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e00c      	b.n	8007810 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3308      	adds	r3, #8
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	e002      	b.n	8007804 <vListInsert+0x2e>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	429a      	cmp	r2, r3
 800780e:	d2f6      	bcs.n	80077fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	601a      	str	r2, [r3, #0]
}
 800783c:	bf00      	nop
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6892      	ldr	r2, [r2, #8]
 800785e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6852      	ldr	r2, [r2, #4]
 8007868:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d103      	bne.n	800787c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	1e5a      	subs	r2, r3, #1
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10c      	bne.n	80078ca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	b672      	cpsid	i
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	b662      	cpsie	i
 80078c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80078ca:	f002 f8a7 	bl	8009a1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078da:	fb01 f303 	mul.w	r3, r1, r3
 80078de:	441a      	add	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fa:	3b01      	subs	r3, #1
 80078fc:	68f9      	ldr	r1, [r7, #12]
 80078fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007900:	fb01 f303 	mul.w	r3, r1, r3
 8007904:	441a      	add	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	22ff      	movs	r2, #255	; 0xff
 800790e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	22ff      	movs	r2, #255	; 0xff
 8007916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d114      	bne.n	800794a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01a      	beq.n	800795e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3310      	adds	r3, #16
 800792c:	4618      	mov	r0, r3
 800792e:	f001 f95d 	bl	8008bec <xTaskRemoveFromEventList>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d012      	beq.n	800795e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007938:	4b0c      	ldr	r3, [pc, #48]	; (800796c <xQueueGenericReset+0xd0>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	e009      	b.n	800795e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3310      	adds	r3, #16
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff fef0 	bl	8007734 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3324      	adds	r3, #36	; 0x24
 8007958:	4618      	mov	r0, r3
 800795a:	f7ff feeb 	bl	8007734 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800795e:	f002 f891 	bl	8009a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007962:	2301      	movs	r3, #1
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08e      	sub	sp, #56	; 0x38
 8007974:	af02      	add	r7, sp, #8
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10c      	bne.n	800799e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	b672      	cpsid	i
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	b662      	cpsie	i
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10c      	bne.n	80079be <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	b672      	cpsid	i
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	b662      	cpsie	i
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <xQueueGenericCreateStatic+0x5a>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <xQueueGenericCreateStatic+0x5e>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e000      	b.n	80079d0 <xQueueGenericCreateStatic+0x60>
 80079ce:	2300      	movs	r3, #0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10c      	bne.n	80079ee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	b672      	cpsid	i
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	b662      	cpsie	i
 80079e8:	623b      	str	r3, [r7, #32]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <xQueueGenericCreateStatic+0x8a>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <xQueueGenericCreateStatic+0x8e>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e000      	b.n	8007a00 <xQueueGenericCreateStatic+0x90>
 80079fe:	2300      	movs	r3, #0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10c      	bne.n	8007a1e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	b672      	cpsid	i
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	b662      	cpsie	i
 8007a18:	61fb      	str	r3, [r7, #28]
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a1e:	2350      	movs	r3, #80	; 0x50
 8007a20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b50      	cmp	r3, #80	; 0x50
 8007a26:	d00c      	beq.n	8007a42 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	b672      	cpsid	i
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	b662      	cpsie	i
 8007a3c:	61bb      	str	r3, [r7, #24]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00d      	beq.n	8007a6a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f805 	bl	8007a74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3730      	adds	r7, #48	; 0x30
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d103      	bne.n	8007a90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e002      	b.n	8007a96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	69b8      	ldr	r0, [r7, #24]
 8007aa6:	f7ff fef9 	bl	800789c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	78fa      	ldrb	r2, [r7, #3]
 8007aae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ab2:	bf00      	nop
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08e      	sub	sp, #56	; 0x38
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007aca:	2300      	movs	r3, #0
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10c      	bne.n	8007af2 <xQueueGenericSend+0x36>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007adc:	b672      	cpsid	i
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	b662      	cpsie	i
 8007aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d103      	bne.n	8007b00 <xQueueGenericSend+0x44>
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <xQueueGenericSend+0x48>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e000      	b.n	8007b06 <xQueueGenericSend+0x4a>
 8007b04:	2300      	movs	r3, #0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10c      	bne.n	8007b24 <xQueueGenericSend+0x68>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	b672      	cpsid	i
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	b662      	cpsie	i
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d103      	bne.n	8007b32 <xQueueGenericSend+0x76>
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <xQueueGenericSend+0x7a>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e000      	b.n	8007b38 <xQueueGenericSend+0x7c>
 8007b36:	2300      	movs	r3, #0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10c      	bne.n	8007b56 <xQueueGenericSend+0x9a>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	b672      	cpsid	i
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	b662      	cpsie	i
 8007b50:	623b      	str	r3, [r7, #32]
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b56:	f001 fa13 	bl	8008f80 <xTaskGetSchedulerState>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d102      	bne.n	8007b66 <xQueueGenericSend+0xaa>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <xQueueGenericSend+0xae>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <xQueueGenericSend+0xb0>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10c      	bne.n	8007b8a <xQueueGenericSend+0xce>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	b672      	cpsid	i
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	b662      	cpsie	i
 8007b84:	61fb      	str	r3, [r7, #28]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b8a:	f001 ff47 	bl	8009a1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <xQueueGenericSend+0xe4>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d129      	bne.n	8007bf4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba6:	f000 fa15 	bl	8007fd4 <prvCopyDataToQueue>
 8007baa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d010      	beq.n	8007bd6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	3324      	adds	r3, #36	; 0x24
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f817 	bl	8008bec <xTaskRemoveFromEventList>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d013      	beq.n	8007bec <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bc4:	4b3f      	ldr	r3, [pc, #252]	; (8007cc4 <xQueueGenericSend+0x208>)
 8007bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	e00a      	b.n	8007bec <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007bdc:	4b39      	ldr	r3, [pc, #228]	; (8007cc4 <xQueueGenericSend+0x208>)
 8007bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bec:	f001 ff4a 	bl	8009a84 <vPortExitCritical>
				return pdPASS;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e063      	b.n	8007cbc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bfa:	f001 ff43 	bl	8009a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e05c      	b.n	8007cbc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d106      	bne.n	8007c16 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c08:	f107 0314 	add.w	r3, r7, #20
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 f853 	bl	8008cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c16:	f001 ff35 	bl	8009a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c1a:	f000 fdb3 	bl	8008784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c1e:	f001 fefd 	bl	8009a1c <vPortEnterCritical>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c28:	b25b      	sxtb	r3, r3
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c2e:	d103      	bne.n	8007c38 <xQueueGenericSend+0x17c>
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c3e:	b25b      	sxtb	r3, r3
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c44:	d103      	bne.n	8007c4e <xQueueGenericSend+0x192>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c4e:	f001 ff19 	bl	8009a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c52:	1d3a      	adds	r2, r7, #4
 8007c54:	f107 0314 	add.w	r3, r7, #20
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 f842 	bl	8008ce4 <xTaskCheckForTimeOut>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d124      	bne.n	8007cb0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c68:	f000 faac 	bl	80081c4 <prvIsQueueFull>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d018      	beq.n	8007ca4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	3310      	adds	r3, #16
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 ff62 	bl	8008b44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c82:	f000 fa37 	bl	80080f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c86:	f000 fd8b 	bl	80087a0 <xTaskResumeAll>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f af7c 	bne.w	8007b8a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007c92:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <xQueueGenericSend+0x208>)
 8007c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	e772      	b.n	8007b8a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ca6:	f000 fa25 	bl	80080f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007caa:	f000 fd79 	bl	80087a0 <xTaskResumeAll>
 8007cae:	e76c      	b.n	8007b8a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cb2:	f000 fa1f 	bl	80080f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cb6:	f000 fd73 	bl	80087a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3738      	adds	r7, #56	; 0x38
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	e000ed04 	.word	0xe000ed04

08007cc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08e      	sub	sp, #56	; 0x38
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10c      	bne.n	8007cfa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	b672      	cpsid	i
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	b662      	cpsie	i
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <xQueueGenericSendFromISR+0x40>
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <xQueueGenericSendFromISR+0x44>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <xQueueGenericSendFromISR+0x46>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10c      	bne.n	8007d2c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	b672      	cpsid	i
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	b662      	cpsie	i
 8007d26:	623b      	str	r3, [r7, #32]
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d103      	bne.n	8007d3a <xQueueGenericSendFromISR+0x72>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <xQueueGenericSendFromISR+0x76>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueGenericSendFromISR+0x78>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10c      	bne.n	8007d5e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	b672      	cpsid	i
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	b662      	cpsie	i
 8007d58:	61fb      	str	r3, [r7, #28]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d5e:	f001 ff45 	bl	8009bec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d62:	f3ef 8211 	mrs	r2, BASEPRI
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	b672      	cpsid	i
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	b662      	cpsie	i
 8007d7a:	61ba      	str	r2, [r7, #24]
 8007d7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d302      	bcc.n	8007d94 <xQueueGenericSendFromISR+0xcc>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d12c      	bne.n	8007dee <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007da4:	f000 f916 	bl	8007fd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007da8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007db0:	d112      	bne.n	8007dd8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d016      	beq.n	8007de8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	3324      	adds	r3, #36	; 0x24
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 ff14 	bl	8008bec <xTaskRemoveFromEventList>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00e      	beq.n	8007de8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e007      	b.n	8007de8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	b25a      	sxtb	r2, r3
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007de8:	2301      	movs	r3, #1
 8007dea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007dec:	e001      	b.n	8007df2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3738      	adds	r7, #56	; 0x38
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08c      	sub	sp, #48	; 0x30
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <xQueueReceive+0x34>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	b672      	cpsid	i
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	b662      	cpsie	i
 8007e36:	623b      	str	r3, [r7, #32]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d103      	bne.n	8007e4a <xQueueReceive+0x42>
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <xQueueReceive+0x46>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <xQueueReceive+0x48>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10c      	bne.n	8007e6e <xQueueReceive+0x66>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	b672      	cpsid	i
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	b662      	cpsie	i
 8007e68:	61fb      	str	r3, [r7, #28]
}
 8007e6a:	bf00      	nop
 8007e6c:	e7fe      	b.n	8007e6c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e6e:	f001 f887 	bl	8008f80 <xTaskGetSchedulerState>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <xQueueReceive+0x76>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <xQueueReceive+0x7a>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <xQueueReceive+0x7c>
 8007e82:	2300      	movs	r3, #0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10c      	bne.n	8007ea2 <xQueueReceive+0x9a>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	b672      	cpsid	i
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	b662      	cpsie	i
 8007e9c:	61bb      	str	r3, [r7, #24]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ea2:	f001 fdbb 	bl	8009a1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01f      	beq.n	8007ef2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb6:	f000 f8f7 	bl	80080a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	1e5a      	subs	r2, r3, #1
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00f      	beq.n	8007eea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	3310      	adds	r3, #16
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fe8c 	bl	8008bec <xTaskRemoveFromEventList>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007eda:	4b3d      	ldr	r3, [pc, #244]	; (8007fd0 <xQueueReceive+0x1c8>)
 8007edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007eea:	f001 fdcb 	bl	8009a84 <vPortExitCritical>
				return pdPASS;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e069      	b.n	8007fc6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d103      	bne.n	8007f00 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ef8:	f001 fdc4 	bl	8009a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007efc:	2300      	movs	r3, #0
 8007efe:	e062      	b.n	8007fc6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f06:	f107 0310 	add.w	r3, r7, #16
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fed4 	bl	8008cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f10:	2301      	movs	r3, #1
 8007f12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f14:	f001 fdb6 	bl	8009a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f18:	f000 fc34 	bl	8008784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f1c:	f001 fd7e 	bl	8009a1c <vPortEnterCritical>
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f2c:	d103      	bne.n	8007f36 <xQueueReceive+0x12e>
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f3c:	b25b      	sxtb	r3, r3
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f42:	d103      	bne.n	8007f4c <xQueueReceive+0x144>
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f4c:	f001 fd9a 	bl	8009a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f50:	1d3a      	adds	r2, r7, #4
 8007f52:	f107 0310 	add.w	r3, r7, #16
 8007f56:	4611      	mov	r1, r2
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fec3 	bl	8008ce4 <xTaskCheckForTimeOut>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d123      	bne.n	8007fac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f66:	f000 f917 	bl	8008198 <prvIsQueueEmpty>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d017      	beq.n	8007fa0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	3324      	adds	r3, #36	; 0x24
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 fde3 	bl	8008b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f80:	f000 f8b8 	bl	80080f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f84:	f000 fc0c 	bl	80087a0 <xTaskResumeAll>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d189      	bne.n	8007ea2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007f8e:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <xQueueReceive+0x1c8>)
 8007f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	e780      	b.n	8007ea2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa2:	f000 f8a7 	bl	80080f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fa6:	f000 fbfb 	bl	80087a0 <xTaskResumeAll>
 8007faa:	e77a      	b.n	8007ea2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fae:	f000 f8a1 	bl	80080f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fb2:	f000 fbf5 	bl	80087a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb8:	f000 f8ee 	bl	8008198 <prvIsQueueEmpty>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f43f af6f 	beq.w	8007ea2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3730      	adds	r7, #48	; 0x30
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10d      	bne.n	800800e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d14d      	bne.n	8008096 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ffdc 	bl	8008fbc <xTaskPriorityDisinherit>
 8008004:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	609a      	str	r2, [r3, #8]
 800800c:	e043      	b.n	8008096 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d119      	bne.n	8008048 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6858      	ldr	r0, [r3, #4]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	461a      	mov	r2, r3
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	f002 fbd1 	bl	800a7c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	441a      	add	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	429a      	cmp	r2, r3
 800803c:	d32b      	bcc.n	8008096 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e026      	b.n	8008096 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68d8      	ldr	r0, [r3, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	461a      	mov	r2, r3
 8008052:	68b9      	ldr	r1, [r7, #8]
 8008054:	f002 fbb7 	bl	800a7c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008060:	425b      	negs	r3, r3
 8008062:	441a      	add	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d207      	bcs.n	8008084 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	425b      	negs	r3, r3
 800807e:	441a      	add	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b02      	cmp	r3, #2
 8008088:	d105      	bne.n	8008096 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	3b01      	subs	r3, #1
 8008094:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800809e:	697b      	ldr	r3, [r7, #20]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d018      	beq.n	80080ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	441a      	add	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d303      	bcc.n	80080dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68d9      	ldr	r1, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	461a      	mov	r2, r3
 80080e6:	6838      	ldr	r0, [r7, #0]
 80080e8:	f002 fb6d 	bl	800a7c6 <memcpy>
	}
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080fc:	f001 fc8e 	bl	8009a1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008106:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008108:	e011      	b.n	800812e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	d012      	beq.n	8008138 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3324      	adds	r3, #36	; 0x24
 8008116:	4618      	mov	r0, r3
 8008118:	f000 fd68 	bl	8008bec <xTaskRemoveFromEventList>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008122:	f000 fe45 	bl	8008db0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	3b01      	subs	r3, #1
 800812a:	b2db      	uxtb	r3, r3
 800812c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800812e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008132:	2b00      	cmp	r3, #0
 8008134:	dce9      	bgt.n	800810a <prvUnlockQueue+0x16>
 8008136:	e000      	b.n	800813a <prvUnlockQueue+0x46>
					break;
 8008138:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	22ff      	movs	r2, #255	; 0xff
 800813e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008142:	f001 fc9f 	bl	8009a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008146:	f001 fc69 	bl	8009a1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008150:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008152:	e011      	b.n	8008178 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d012      	beq.n	8008182 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3310      	adds	r3, #16
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fd43 	bl	8008bec <xTaskRemoveFromEventList>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800816c:	f000 fe20 	bl	8008db0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	3b01      	subs	r3, #1
 8008174:	b2db      	uxtb	r3, r3
 8008176:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800817c:	2b00      	cmp	r3, #0
 800817e:	dce9      	bgt.n	8008154 <prvUnlockQueue+0x60>
 8008180:	e000      	b.n	8008184 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008182:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	22ff      	movs	r2, #255	; 0xff
 8008188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800818c:	f001 fc7a 	bl	8009a84 <vPortExitCritical>
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081a0:	f001 fc3c 	bl	8009a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
 80081b0:	e001      	b.n	80081b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081b6:	f001 fc65 	bl	8009a84 <vPortExitCritical>

	return xReturn;
 80081ba:	68fb      	ldr	r3, [r7, #12]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081cc:	f001 fc26 	bl	8009a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d8:	429a      	cmp	r2, r3
 80081da:	d102      	bne.n	80081e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	e001      	b.n	80081e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081e6:	f001 fc4d 	bl	8009a84 <vPortExitCritical>

	return xReturn;
 80081ea:	68fb      	ldr	r3, [r7, #12]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	e014      	b.n	800822e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008204:	4a0f      	ldr	r2, [pc, #60]	; (8008244 <vQueueAddToRegistry+0x50>)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10b      	bne.n	8008228 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008210:	490c      	ldr	r1, [pc, #48]	; (8008244 <vQueueAddToRegistry+0x50>)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800821a:	4a0a      	ldr	r2, [pc, #40]	; (8008244 <vQueueAddToRegistry+0x50>)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	4413      	add	r3, r2
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008226:	e006      	b.n	8008236 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3301      	adds	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b07      	cmp	r3, #7
 8008232:	d9e7      	bls.n	8008204 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008234:	bf00      	nop
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20000e5c 	.word	0x20000e5c

08008248 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008258:	f001 fbe0 	bl	8009a1c <vPortEnterCritical>
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008262:	b25b      	sxtb	r3, r3
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008268:	d103      	bne.n	8008272 <vQueueWaitForMessageRestricted+0x2a>
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008278:	b25b      	sxtb	r3, r3
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800827e:	d103      	bne.n	8008288 <vQueueWaitForMessageRestricted+0x40>
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008288:	f001 fbfc 	bl	8009a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	2b00      	cmp	r3, #0
 8008292:	d106      	bne.n	80082a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	3324      	adds	r3, #36	; 0x24
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fc77 	bl	8008b90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082a2:	6978      	ldr	r0, [r7, #20]
 80082a4:	f7ff ff26 	bl	80080f4 <prvUnlockQueue>
	}
 80082a8:	bf00      	nop
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08e      	sub	sp, #56	; 0x38
 80082b4:	af04      	add	r7, sp, #16
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10c      	bne.n	80082de <xTaskCreateStatic+0x2e>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	b672      	cpsid	i
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	b662      	cpsie	i
 80082d8:	623b      	str	r3, [r7, #32]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10c      	bne.n	80082fe <xTaskCreateStatic+0x4e>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	b672      	cpsid	i
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	b662      	cpsie	i
 80082f8:	61fb      	str	r3, [r7, #28]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082fe:	23bc      	movs	r3, #188	; 0xbc
 8008300:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2bbc      	cmp	r3, #188	; 0xbc
 8008306:	d00c      	beq.n	8008322 <xTaskCreateStatic+0x72>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	b672      	cpsid	i
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	b662      	cpsie	i
 800831c:	61bb      	str	r3, [r7, #24]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008322:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	2b00      	cmp	r3, #0
 8008328:	d01e      	beq.n	8008368 <xTaskCreateStatic+0xb8>
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01b      	beq.n	8008368 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008338:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	2202      	movs	r2, #2
 800833e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008342:	2300      	movs	r3, #0
 8008344:	9303      	str	r3, [sp, #12]
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	9302      	str	r3, [sp, #8]
 800834a:	f107 0314 	add.w	r3, r7, #20
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 f850 	bl	8008400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008362:	f000 f8f5 	bl	8008550 <prvAddNewTaskToReadyList>
 8008366:	e001      	b.n	800836c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800836c:	697b      	ldr	r3, [r7, #20]
	}
 800836e:	4618      	mov	r0, r3
 8008370:	3728      	adds	r7, #40	; 0x28
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008376:	b580      	push	{r7, lr}
 8008378:	b08c      	sub	sp, #48	; 0x30
 800837a:	af04      	add	r7, sp, #16
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	603b      	str	r3, [r7, #0]
 8008382:	4613      	mov	r3, r2
 8008384:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008386:	88fb      	ldrh	r3, [r7, #6]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fc72 	bl	8009c74 <pvPortMalloc>
 8008390:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00e      	beq.n	80083b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008398:	20bc      	movs	r0, #188	; 0xbc
 800839a:	f001 fc6b 	bl	8009c74 <pvPortMalloc>
 800839e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	631a      	str	r2, [r3, #48]	; 0x30
 80083ac:	e005      	b.n	80083ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083ae:	6978      	ldr	r0, [r7, #20]
 80083b0:	f001 fd2a 	bl	8009e08 <vPortFree>
 80083b4:	e001      	b.n	80083ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d017      	beq.n	80083f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083c8:	88fa      	ldrh	r2, [r7, #6]
 80083ca:	2300      	movs	r3, #0
 80083cc:	9303      	str	r3, [sp, #12]
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	9302      	str	r3, [sp, #8]
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68b9      	ldr	r1, [r7, #8]
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f80e 	bl	8008400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083e4:	69f8      	ldr	r0, [r7, #28]
 80083e6:	f000 f8b3 	bl	8008550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083ea:	2301      	movs	r3, #1
 80083ec:	61bb      	str	r3, [r7, #24]
 80083ee:	e002      	b.n	80083f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083f6:	69bb      	ldr	r3, [r7, #24]
	}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	461a      	mov	r2, r3
 8008418:	21a5      	movs	r1, #165	; 0xa5
 800841a:	f002 f9e2 	bl	800a7e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008428:	440b      	add	r3, r1
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f023 0307 	bic.w	r3, r3, #7
 8008436:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00c      	beq.n	800845c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	b672      	cpsid	i
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	b662      	cpsie	i
 8008456:	617b      	str	r3, [r7, #20]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d01f      	beq.n	80084a2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
 8008466:	e012      	b.n	800848e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	7819      	ldrb	r1, [r3, #0]
 8008470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	4413      	add	r3, r2
 8008476:	3334      	adds	r3, #52	; 0x34
 8008478:	460a      	mov	r2, r1
 800847a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4413      	add	r3, r2
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d006      	beq.n	8008496 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	3301      	adds	r3, #1
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	2b0f      	cmp	r3, #15
 8008492:	d9e9      	bls.n	8008468 <prvInitialiseNewTask+0x68>
 8008494:	e000      	b.n	8008498 <prvInitialiseNewTask+0x98>
			{
				break;
 8008496:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084a0:	e003      	b.n	80084aa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	2b37      	cmp	r3, #55	; 0x37
 80084ae:	d901      	bls.n	80084b4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084b0:	2337      	movs	r3, #55	; 0x37
 80084b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	2200      	movs	r2, #0
 80084c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	3304      	adds	r3, #4
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff f952 	bl	8007774 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	3318      	adds	r3, #24
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7ff f94d 	bl	8007774 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	3354      	adds	r3, #84	; 0x54
 8008504:	2260      	movs	r2, #96	; 0x60
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f002 f96a 	bl	800a7e2 <memset>
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	4a0c      	ldr	r2, [pc, #48]	; (8008544 <prvInitialiseNewTask+0x144>)
 8008512:	659a      	str	r2, [r3, #88]	; 0x58
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	4a0c      	ldr	r2, [pc, #48]	; (8008548 <prvInitialiseNewTask+0x148>)
 8008518:	65da      	str	r2, [r3, #92]	; 0x5c
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	4a0b      	ldr	r2, [pc, #44]	; (800854c <prvInitialiseNewTask+0x14c>)
 800851e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	69b8      	ldr	r0, [r7, #24]
 8008526:	f001 f96b 	bl	8009800 <pxPortInitialiseStack>
 800852a:	4602      	mov	r2, r0
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800853c:	bf00      	nop
 800853e:	3720      	adds	r7, #32
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	0800b8b0 	.word	0x0800b8b0
 8008548:	0800b8d0 	.word	0x0800b8d0
 800854c:	0800b890 	.word	0x0800b890

08008550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008558:	f001 fa60 	bl	8009a1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800855c:	4b2d      	ldr	r3, [pc, #180]	; (8008614 <prvAddNewTaskToReadyList+0xc4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	4a2c      	ldr	r2, [pc, #176]	; (8008614 <prvAddNewTaskToReadyList+0xc4>)
 8008564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008566:	4b2c      	ldr	r3, [pc, #176]	; (8008618 <prvAddNewTaskToReadyList+0xc8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d109      	bne.n	8008582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800856e:	4a2a      	ldr	r2, [pc, #168]	; (8008618 <prvAddNewTaskToReadyList+0xc8>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008574:	4b27      	ldr	r3, [pc, #156]	; (8008614 <prvAddNewTaskToReadyList+0xc4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d110      	bne.n	800859e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800857c:	f000 fc3c 	bl	8008df8 <prvInitialiseTaskLists>
 8008580:	e00d      	b.n	800859e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008582:	4b26      	ldr	r3, [pc, #152]	; (800861c <prvAddNewTaskToReadyList+0xcc>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800858a:	4b23      	ldr	r3, [pc, #140]	; (8008618 <prvAddNewTaskToReadyList+0xc8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	429a      	cmp	r2, r3
 8008596:	d802      	bhi.n	800859e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008598:	4a1f      	ldr	r2, [pc, #124]	; (8008618 <prvAddNewTaskToReadyList+0xc8>)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800859e:	4b20      	ldr	r3, [pc, #128]	; (8008620 <prvAddNewTaskToReadyList+0xd0>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	4a1e      	ldr	r2, [pc, #120]	; (8008620 <prvAddNewTaskToReadyList+0xd0>)
 80085a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085a8:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <prvAddNewTaskToReadyList+0xd0>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b4:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <prvAddNewTaskToReadyList+0xd4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d903      	bls.n	80085c4 <prvAddNewTaskToReadyList+0x74>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	4a18      	ldr	r2, [pc, #96]	; (8008624 <prvAddNewTaskToReadyList+0xd4>)
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c8:	4613      	mov	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4a15      	ldr	r2, [pc, #84]	; (8008628 <prvAddNewTaskToReadyList+0xd8>)
 80085d2:	441a      	add	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3304      	adds	r3, #4
 80085d8:	4619      	mov	r1, r3
 80085da:	4610      	mov	r0, r2
 80085dc:	f7ff f8d7 	bl	800778e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085e0:	f001 fa50 	bl	8009a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085e4:	4b0d      	ldr	r3, [pc, #52]	; (800861c <prvAddNewTaskToReadyList+0xcc>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00e      	beq.n	800860a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085ec:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <prvAddNewTaskToReadyList+0xc8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d207      	bcs.n	800860a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085fa:	4b0c      	ldr	r3, [pc, #48]	; (800862c <prvAddNewTaskToReadyList+0xdc>)
 80085fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20001370 	.word	0x20001370
 8008618:	20000e9c 	.word	0x20000e9c
 800861c:	2000137c 	.word	0x2000137c
 8008620:	2000138c 	.word	0x2000138c
 8008624:	20001378 	.word	0x20001378
 8008628:	20000ea0 	.word	0x20000ea0
 800862c:	e000ed04 	.word	0xe000ed04

08008630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d019      	beq.n	8008676 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008642:	4b14      	ldr	r3, [pc, #80]	; (8008694 <vTaskDelay+0x64>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00c      	beq.n	8008664 <vTaskDelay+0x34>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	b672      	cpsid	i
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	b662      	cpsie	i
 800865e:	60bb      	str	r3, [r7, #8]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008664:	f000 f88e 	bl	8008784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008668:	2100      	movs	r1, #0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fd18 	bl	80090a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008670:	f000 f896 	bl	80087a0 <xTaskResumeAll>
 8008674:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d107      	bne.n	800868c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <vTaskDelay+0x68>)
 800867e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20001398 	.word	0x20001398
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08a      	sub	sp, #40	; 0x28
 80086a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086aa:	463a      	mov	r2, r7
 80086ac:	1d39      	adds	r1, r7, #4
 80086ae:	f107 0308 	add.w	r3, r7, #8
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff f80a 	bl	80076cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	9202      	str	r2, [sp, #8]
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	2300      	movs	r3, #0
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	2300      	movs	r3, #0
 80086c8:	460a      	mov	r2, r1
 80086ca:	4926      	ldr	r1, [pc, #152]	; (8008764 <vTaskStartScheduler+0xc8>)
 80086cc:	4826      	ldr	r0, [pc, #152]	; (8008768 <vTaskStartScheduler+0xcc>)
 80086ce:	f7ff fdef 	bl	80082b0 <xTaskCreateStatic>
 80086d2:	4603      	mov	r3, r0
 80086d4:	4a25      	ldr	r2, [pc, #148]	; (800876c <vTaskStartScheduler+0xd0>)
 80086d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086d8:	4b24      	ldr	r3, [pc, #144]	; (800876c <vTaskStartScheduler+0xd0>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086e0:	2301      	movs	r3, #1
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e001      	b.n	80086ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086e6:	2300      	movs	r3, #0
 80086e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d102      	bne.n	80086f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086f0:	f000 fd2a 	bl	8009148 <xTimerCreateTimerTask>
 80086f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d11d      	bne.n	8008738 <vTaskStartScheduler+0x9c>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	b672      	cpsid	i
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	b662      	cpsie	i
 8008710:	613b      	str	r3, [r7, #16]
}
 8008712:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008714:	4b16      	ldr	r3, [pc, #88]	; (8008770 <vTaskStartScheduler+0xd4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3354      	adds	r3, #84	; 0x54
 800871a:	4a16      	ldr	r2, [pc, #88]	; (8008774 <vTaskStartScheduler+0xd8>)
 800871c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800871e:	4b16      	ldr	r3, [pc, #88]	; (8008778 <vTaskStartScheduler+0xdc>)
 8008720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008724:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008726:	4b15      	ldr	r3, [pc, #84]	; (800877c <vTaskStartScheduler+0xe0>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800872c:	4b14      	ldr	r3, [pc, #80]	; (8008780 <vTaskStartScheduler+0xe4>)
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008732:	f001 f8f5 	bl	8009920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008736:	e010      	b.n	800875a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800873e:	d10c      	bne.n	800875a <vTaskStartScheduler+0xbe>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	b672      	cpsid	i
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	b662      	cpsie	i
 8008754:	60fb      	str	r3, [r7, #12]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <vTaskStartScheduler+0xbc>
}
 800875a:	bf00      	nop
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	0800b7c8 	.word	0x0800b7c8
 8008768:	08008dc9 	.word	0x08008dc9
 800876c:	20001394 	.word	0x20001394
 8008770:	20000e9c 	.word	0x20000e9c
 8008774:	2000001c 	.word	0x2000001c
 8008778:	20001390 	.word	0x20001390
 800877c:	2000137c 	.word	0x2000137c
 8008780:	20001374 	.word	0x20001374

08008784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008788:	4b04      	ldr	r3, [pc, #16]	; (800879c <vTaskSuspendAll+0x18>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3301      	adds	r3, #1
 800878e:	4a03      	ldr	r2, [pc, #12]	; (800879c <vTaskSuspendAll+0x18>)
 8008790:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008792:	bf00      	nop
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	20001398 	.word	0x20001398

080087a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087ae:	4b43      	ldr	r3, [pc, #268]	; (80088bc <xTaskResumeAll+0x11c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10c      	bne.n	80087d0 <xTaskResumeAll+0x30>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	b672      	cpsid	i
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	b662      	cpsie	i
 80087ca:	603b      	str	r3, [r7, #0]
}
 80087cc:	bf00      	nop
 80087ce:	e7fe      	b.n	80087ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087d0:	f001 f924 	bl	8009a1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087d4:	4b39      	ldr	r3, [pc, #228]	; (80088bc <xTaskResumeAll+0x11c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3b01      	subs	r3, #1
 80087da:	4a38      	ldr	r2, [pc, #224]	; (80088bc <xTaskResumeAll+0x11c>)
 80087dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087de:	4b37      	ldr	r3, [pc, #220]	; (80088bc <xTaskResumeAll+0x11c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d162      	bne.n	80088ac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087e6:	4b36      	ldr	r3, [pc, #216]	; (80088c0 <xTaskResumeAll+0x120>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d05e      	beq.n	80088ac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087ee:	e02f      	b.n	8008850 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f0:	4b34      	ldr	r3, [pc, #208]	; (80088c4 <xTaskResumeAll+0x124>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3318      	adds	r3, #24
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff f823 	bl	8007848 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3304      	adds	r3, #4
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff f81e 	bl	8007848 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008810:	4b2d      	ldr	r3, [pc, #180]	; (80088c8 <xTaskResumeAll+0x128>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d903      	bls.n	8008820 <xTaskResumeAll+0x80>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	4a2a      	ldr	r2, [pc, #168]	; (80088c8 <xTaskResumeAll+0x128>)
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4a27      	ldr	r2, [pc, #156]	; (80088cc <xTaskResumeAll+0x12c>)
 800882e:	441a      	add	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3304      	adds	r3, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4610      	mov	r0, r2
 8008838:	f7fe ffa9 	bl	800778e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008840:	4b23      	ldr	r3, [pc, #140]	; (80088d0 <xTaskResumeAll+0x130>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008846:	429a      	cmp	r2, r3
 8008848:	d302      	bcc.n	8008850 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800884a:	4b22      	ldr	r3, [pc, #136]	; (80088d4 <xTaskResumeAll+0x134>)
 800884c:	2201      	movs	r2, #1
 800884e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008850:	4b1c      	ldr	r3, [pc, #112]	; (80088c4 <xTaskResumeAll+0x124>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1cb      	bne.n	80087f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800885e:	f000 fb6f 	bl	8008f40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008862:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <xTaskResumeAll+0x138>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d010      	beq.n	8008890 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800886e:	f000 f847 	bl	8008900 <xTaskIncrementTick>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008878:	4b16      	ldr	r3, [pc, #88]	; (80088d4 <xTaskResumeAll+0x134>)
 800887a:	2201      	movs	r2, #1
 800887c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3b01      	subs	r3, #1
 8008882:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f1      	bne.n	800886e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800888a:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <xTaskResumeAll+0x138>)
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008890:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <xTaskResumeAll+0x134>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d009      	beq.n	80088ac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008898:	2301      	movs	r3, #1
 800889a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <xTaskResumeAll+0x13c>)
 800889e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088ac:	f001 f8ea 	bl	8009a84 <vPortExitCritical>

	return xAlreadyYielded;
 80088b0:	68bb      	ldr	r3, [r7, #8]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20001398 	.word	0x20001398
 80088c0:	20001370 	.word	0x20001370
 80088c4:	20001330 	.word	0x20001330
 80088c8:	20001378 	.word	0x20001378
 80088cc:	20000ea0 	.word	0x20000ea0
 80088d0:	20000e9c 	.word	0x20000e9c
 80088d4:	20001384 	.word	0x20001384
 80088d8:	20001380 	.word	0x20001380
 80088dc:	e000ed04 	.word	0xe000ed04

080088e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088e6:	4b05      	ldr	r3, [pc, #20]	; (80088fc <xTaskGetTickCount+0x1c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088ec:	687b      	ldr	r3, [r7, #4]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	20001374 	.word	0x20001374

08008900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800890a:	4b50      	ldr	r3, [pc, #320]	; (8008a4c <xTaskIncrementTick+0x14c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f040 808b 	bne.w	8008a2a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008914:	4b4e      	ldr	r3, [pc, #312]	; (8008a50 <xTaskIncrementTick+0x150>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800891c:	4a4c      	ldr	r2, [pc, #304]	; (8008a50 <xTaskIncrementTick+0x150>)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d122      	bne.n	800896e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008928:	4b4a      	ldr	r3, [pc, #296]	; (8008a54 <xTaskIncrementTick+0x154>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00c      	beq.n	800894c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	b672      	cpsid	i
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	b662      	cpsie	i
 8008946:	603b      	str	r3, [r7, #0]
}
 8008948:	bf00      	nop
 800894a:	e7fe      	b.n	800894a <xTaskIncrementTick+0x4a>
 800894c:	4b41      	ldr	r3, [pc, #260]	; (8008a54 <xTaskIncrementTick+0x154>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	4b41      	ldr	r3, [pc, #260]	; (8008a58 <xTaskIncrementTick+0x158>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a3f      	ldr	r2, [pc, #252]	; (8008a54 <xTaskIncrementTick+0x154>)
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	4a3f      	ldr	r2, [pc, #252]	; (8008a58 <xTaskIncrementTick+0x158>)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	4b3e      	ldr	r3, [pc, #248]	; (8008a5c <xTaskIncrementTick+0x15c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	4a3d      	ldr	r2, [pc, #244]	; (8008a5c <xTaskIncrementTick+0x15c>)
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	f000 fae9 	bl	8008f40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800896e:	4b3c      	ldr	r3, [pc, #240]	; (8008a60 <xTaskIncrementTick+0x160>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	429a      	cmp	r2, r3
 8008976:	d349      	bcc.n	8008a0c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008978:	4b36      	ldr	r3, [pc, #216]	; (8008a54 <xTaskIncrementTick+0x154>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d104      	bne.n	800898c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008982:	4b37      	ldr	r3, [pc, #220]	; (8008a60 <xTaskIncrementTick+0x160>)
 8008984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008988:	601a      	str	r2, [r3, #0]
					break;
 800898a:	e03f      	b.n	8008a0c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800898c:	4b31      	ldr	r3, [pc, #196]	; (8008a54 <xTaskIncrementTick+0x154>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d203      	bcs.n	80089ac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089a4:	4a2e      	ldr	r2, [pc, #184]	; (8008a60 <xTaskIncrementTick+0x160>)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089aa:	e02f      	b.n	8008a0c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	3304      	adds	r3, #4
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe ff49 	bl	8007848 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d004      	beq.n	80089c8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	3318      	adds	r3, #24
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe ff40 	bl	8007848 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4b25      	ldr	r3, [pc, #148]	; (8008a64 <xTaskIncrementTick+0x164>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d903      	bls.n	80089dc <xTaskIncrementTick+0xdc>
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	4a22      	ldr	r2, [pc, #136]	; (8008a64 <xTaskIncrementTick+0x164>)
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4a1f      	ldr	r2, [pc, #124]	; (8008a68 <xTaskIncrementTick+0x168>)
 80089ea:	441a      	add	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	3304      	adds	r3, #4
 80089f0:	4619      	mov	r1, r3
 80089f2:	4610      	mov	r0, r2
 80089f4:	f7fe fecb 	bl	800778e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fc:	4b1b      	ldr	r3, [pc, #108]	; (8008a6c <xTaskIncrementTick+0x16c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d3b8      	bcc.n	8008978 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008a06:	2301      	movs	r3, #1
 8008a08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a0a:	e7b5      	b.n	8008978 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a0c:	4b17      	ldr	r3, [pc, #92]	; (8008a6c <xTaskIncrementTick+0x16c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a12:	4915      	ldr	r1, [pc, #84]	; (8008a68 <xTaskIncrementTick+0x168>)
 8008a14:	4613      	mov	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d907      	bls.n	8008a34 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e004      	b.n	8008a34 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a2a:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <xTaskIncrementTick+0x170>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	4a0f      	ldr	r2, [pc, #60]	; (8008a70 <xTaskIncrementTick+0x170>)
 8008a32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a34:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <xTaskIncrementTick+0x174>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a40:	697b      	ldr	r3, [r7, #20]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20001398 	.word	0x20001398
 8008a50:	20001374 	.word	0x20001374
 8008a54:	20001328 	.word	0x20001328
 8008a58:	2000132c 	.word	0x2000132c
 8008a5c:	20001388 	.word	0x20001388
 8008a60:	20001390 	.word	0x20001390
 8008a64:	20001378 	.word	0x20001378
 8008a68:	20000ea0 	.word	0x20000ea0
 8008a6c:	20000e9c 	.word	0x20000e9c
 8008a70:	20001380 	.word	0x20001380
 8008a74:	20001384 	.word	0x20001384

08008a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a7e:	4b2b      	ldr	r3, [pc, #172]	; (8008b2c <vTaskSwitchContext+0xb4>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a86:	4b2a      	ldr	r3, [pc, #168]	; (8008b30 <vTaskSwitchContext+0xb8>)
 8008a88:	2201      	movs	r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a8c:	e048      	b.n	8008b20 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008a8e:	4b28      	ldr	r3, [pc, #160]	; (8008b30 <vTaskSwitchContext+0xb8>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a94:	4b27      	ldr	r3, [pc, #156]	; (8008b34 <vTaskSwitchContext+0xbc>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	e012      	b.n	8008ac2 <vTaskSwitchContext+0x4a>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10c      	bne.n	8008abc <vTaskSwitchContext+0x44>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	b672      	cpsid	i
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	b662      	cpsie	i
 8008ab6:	607b      	str	r3, [r7, #4]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <vTaskSwitchContext+0x42>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	491d      	ldr	r1, [pc, #116]	; (8008b38 <vTaskSwitchContext+0xc0>)
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0e2      	beq.n	8008a9c <vTaskSwitchContext+0x24>
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4a15      	ldr	r2, [pc, #84]	; (8008b38 <vTaskSwitchContext+0xc0>)
 8008ae2:	4413      	add	r3, r2
 8008ae4:	60bb      	str	r3, [r7, #8]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	605a      	str	r2, [r3, #4]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	3308      	adds	r3, #8
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d104      	bne.n	8008b06 <vTaskSwitchContext+0x8e>
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	605a      	str	r2, [r3, #4]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	4a0b      	ldr	r2, [pc, #44]	; (8008b3c <vTaskSwitchContext+0xc4>)
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	4a08      	ldr	r2, [pc, #32]	; (8008b34 <vTaskSwitchContext+0xbc>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b16:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <vTaskSwitchContext+0xc4>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3354      	adds	r3, #84	; 0x54
 8008b1c:	4a08      	ldr	r2, [pc, #32]	; (8008b40 <vTaskSwitchContext+0xc8>)
 8008b1e:	6013      	str	r3, [r2, #0]
}
 8008b20:	bf00      	nop
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20001398 	.word	0x20001398
 8008b30:	20001384 	.word	0x20001384
 8008b34:	20001378 	.word	0x20001378
 8008b38:	20000ea0 	.word	0x20000ea0
 8008b3c:	20000e9c 	.word	0x20000e9c
 8008b40:	2000001c 	.word	0x2000001c

08008b44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10c      	bne.n	8008b6e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	b672      	cpsid	i
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	b662      	cpsie	i
 8008b68:	60fb      	str	r3, [r7, #12]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b6e:	4b07      	ldr	r3, [pc, #28]	; (8008b8c <vTaskPlaceOnEventList+0x48>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3318      	adds	r3, #24
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7fe fe2d 	bl	80077d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	6838      	ldr	r0, [r7, #0]
 8008b80:	f000 fa8e 	bl	80090a0 <prvAddCurrentTaskToDelayedList>
}
 8008b84:	bf00      	nop
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20000e9c 	.word	0x20000e9c

08008b90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10c      	bne.n	8008bbc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	b672      	cpsid	i
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	b662      	cpsie	i
 8008bb6:	617b      	str	r3, [r7, #20]
}
 8008bb8:	bf00      	nop
 8008bba:	e7fe      	b.n	8008bba <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <vTaskPlaceOnEventListRestricted+0x58>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3318      	adds	r3, #24
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7fe fde2 	bl	800778e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	68b8      	ldr	r0, [r7, #8]
 8008bda:	f000 fa61 	bl	80090a0 <prvAddCurrentTaskToDelayedList>
	}
 8008bde:	bf00      	nop
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20000e9c 	.word	0x20000e9c

08008bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10c      	bne.n	8008c1c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	b672      	cpsid	i
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	b662      	cpsie	i
 8008c16:	60fb      	str	r3, [r7, #12]
}
 8008c18:	bf00      	nop
 8008c1a:	e7fe      	b.n	8008c1a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	3318      	adds	r3, #24
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe fe11 	bl	8007848 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c26:	4b1e      	ldr	r3, [pc, #120]	; (8008ca0 <xTaskRemoveFromEventList+0xb4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d11d      	bne.n	8008c6a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fe08 	bl	8007848 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3c:	4b19      	ldr	r3, [pc, #100]	; (8008ca4 <xTaskRemoveFromEventList+0xb8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d903      	bls.n	8008c4c <xTaskRemoveFromEventList+0x60>
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	4a16      	ldr	r2, [pc, #88]	; (8008ca4 <xTaskRemoveFromEventList+0xb8>)
 8008c4a:	6013      	str	r3, [r2, #0]
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <xTaskRemoveFromEventList+0xbc>)
 8008c5a:	441a      	add	r2, r3
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f7fe fd93 	bl	800778e <vListInsertEnd>
 8008c68:	e005      	b.n	8008c76 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	4619      	mov	r1, r3
 8008c70:	480e      	ldr	r0, [pc, #56]	; (8008cac <xTaskRemoveFromEventList+0xc0>)
 8008c72:	f7fe fd8c 	bl	800778e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	; (8008cb0 <xTaskRemoveFromEventList+0xc4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d905      	bls.n	8008c90 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c88:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <xTaskRemoveFromEventList+0xc8>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	e001      	b.n	8008c94 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c94:	697b      	ldr	r3, [r7, #20]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20001398 	.word	0x20001398
 8008ca4:	20001378 	.word	0x20001378
 8008ca8:	20000ea0 	.word	0x20000ea0
 8008cac:	20001330 	.word	0x20001330
 8008cb0:	20000e9c 	.word	0x20000e9c
 8008cb4:	20001384 	.word	0x20001384

08008cb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <vTaskInternalSetTimeOutState+0x24>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <vTaskInternalSetTimeOutState+0x28>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	605a      	str	r2, [r3, #4]
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	20001388 	.word	0x20001388
 8008ce0:	20001374 	.word	0x20001374

08008ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10c      	bne.n	8008d0e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	b672      	cpsid	i
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	b662      	cpsie	i
 8008d08:	613b      	str	r3, [r7, #16]
}
 8008d0a:	bf00      	nop
 8008d0c:	e7fe      	b.n	8008d0c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10c      	bne.n	8008d2e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	b672      	cpsid	i
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	b662      	cpsie	i
 8008d28:	60fb      	str	r3, [r7, #12]
}
 8008d2a:	bf00      	nop
 8008d2c:	e7fe      	b.n	8008d2c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008d2e:	f000 fe75 	bl	8009a1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d32:	4b1d      	ldr	r3, [pc, #116]	; (8008da8 <xTaskCheckForTimeOut+0xc4>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d4a:	d102      	bne.n	8008d52 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61fb      	str	r3, [r7, #28]
 8008d50:	e023      	b.n	8008d9a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	4b15      	ldr	r3, [pc, #84]	; (8008dac <xTaskCheckForTimeOut+0xc8>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d007      	beq.n	8008d6e <xTaskCheckForTimeOut+0x8a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d302      	bcc.n	8008d6e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	61fb      	str	r3, [r7, #28]
 8008d6c:	e015      	b.n	8008d9a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d20b      	bcs.n	8008d90 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	1ad2      	subs	r2, r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff ff97 	bl	8008cb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	61fb      	str	r3, [r7, #28]
 8008d8e:	e004      	b.n	8008d9a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d96:	2301      	movs	r3, #1
 8008d98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d9a:	f000 fe73 	bl	8009a84 <vPortExitCritical>

	return xReturn;
 8008d9e:	69fb      	ldr	r3, [r7, #28]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3720      	adds	r7, #32
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	20001374 	.word	0x20001374
 8008dac:	20001388 	.word	0x20001388

08008db0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008db4:	4b03      	ldr	r3, [pc, #12]	; (8008dc4 <vTaskMissedYield+0x14>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	601a      	str	r2, [r3, #0]
}
 8008dba:	bf00      	nop
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	20001384 	.word	0x20001384

08008dc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dd0:	f000 f852 	bl	8008e78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <prvIdleTask+0x28>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d9f9      	bls.n	8008dd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <prvIdleTask+0x2c>)
 8008dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008dec:	e7f0      	b.n	8008dd0 <prvIdleTask+0x8>
 8008dee:	bf00      	nop
 8008df0:	20000ea0 	.word	0x20000ea0
 8008df4:	e000ed04 	.word	0xe000ed04

08008df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dfe:	2300      	movs	r3, #0
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	e00c      	b.n	8008e1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4a12      	ldr	r2, [pc, #72]	; (8008e58 <prvInitialiseTaskLists+0x60>)
 8008e10:	4413      	add	r3, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fc8e 	bl	8007734 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	607b      	str	r3, [r7, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b37      	cmp	r3, #55	; 0x37
 8008e22:	d9ef      	bls.n	8008e04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e24:	480d      	ldr	r0, [pc, #52]	; (8008e5c <prvInitialiseTaskLists+0x64>)
 8008e26:	f7fe fc85 	bl	8007734 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e2a:	480d      	ldr	r0, [pc, #52]	; (8008e60 <prvInitialiseTaskLists+0x68>)
 8008e2c:	f7fe fc82 	bl	8007734 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e30:	480c      	ldr	r0, [pc, #48]	; (8008e64 <prvInitialiseTaskLists+0x6c>)
 8008e32:	f7fe fc7f 	bl	8007734 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e36:	480c      	ldr	r0, [pc, #48]	; (8008e68 <prvInitialiseTaskLists+0x70>)
 8008e38:	f7fe fc7c 	bl	8007734 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e3c:	480b      	ldr	r0, [pc, #44]	; (8008e6c <prvInitialiseTaskLists+0x74>)
 8008e3e:	f7fe fc79 	bl	8007734 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e42:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <prvInitialiseTaskLists+0x78>)
 8008e44:	4a05      	ldr	r2, [pc, #20]	; (8008e5c <prvInitialiseTaskLists+0x64>)
 8008e46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e48:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <prvInitialiseTaskLists+0x7c>)
 8008e4a:	4a05      	ldr	r2, [pc, #20]	; (8008e60 <prvInitialiseTaskLists+0x68>)
 8008e4c:	601a      	str	r2, [r3, #0]
}
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000ea0 	.word	0x20000ea0
 8008e5c:	20001300 	.word	0x20001300
 8008e60:	20001314 	.word	0x20001314
 8008e64:	20001330 	.word	0x20001330
 8008e68:	20001344 	.word	0x20001344
 8008e6c:	2000135c 	.word	0x2000135c
 8008e70:	20001328 	.word	0x20001328
 8008e74:	2000132c 	.word	0x2000132c

08008e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e7e:	e019      	b.n	8008eb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e80:	f000 fdcc 	bl	8009a1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e84:	4b10      	ldr	r3, [pc, #64]	; (8008ec8 <prvCheckTasksWaitingTermination+0x50>)
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fcd9 	bl	8007848 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e96:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <prvCheckTasksWaitingTermination+0x54>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	4a0b      	ldr	r2, [pc, #44]	; (8008ecc <prvCheckTasksWaitingTermination+0x54>)
 8008e9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <prvCheckTasksWaitingTermination+0x58>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	4a0a      	ldr	r2, [pc, #40]	; (8008ed0 <prvCheckTasksWaitingTermination+0x58>)
 8008ea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008eaa:	f000 fdeb 	bl	8009a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f810 	bl	8008ed4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eb4:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <prvCheckTasksWaitingTermination+0x58>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e1      	bne.n	8008e80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ebc:	bf00      	nop
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20001344 	.word	0x20001344
 8008ecc:	20001370 	.word	0x20001370
 8008ed0:	20001358 	.word	0x20001358

08008ed4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3354      	adds	r3, #84	; 0x54
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 fdb7 	bl	800aa54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d108      	bne.n	8008f02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 ff87 	bl	8009e08 <vPortFree>
				vPortFree( pxTCB );
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 ff84 	bl	8009e08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f00:	e01a      	b.n	8008f38 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d103      	bne.n	8008f14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 ff7b 	bl	8009e08 <vPortFree>
	}
 8008f12:	e011      	b.n	8008f38 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d00c      	beq.n	8008f38 <prvDeleteTCB+0x64>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	b672      	cpsid	i
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	b662      	cpsie	i
 8008f32:	60fb      	str	r3, [r7, #12]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <prvDeleteTCB+0x62>
	}
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f46:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <prvResetNextTaskUnblockTime+0x38>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d104      	bne.n	8008f5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f50:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <prvResetNextTaskUnblockTime+0x3c>)
 8008f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f58:	e008      	b.n	8008f6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f5a:	4b07      	ldr	r3, [pc, #28]	; (8008f78 <prvResetNextTaskUnblockTime+0x38>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a04      	ldr	r2, [pc, #16]	; (8008f7c <prvResetNextTaskUnblockTime+0x3c>)
 8008f6a:	6013      	str	r3, [r2, #0]
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	20001328 	.word	0x20001328
 8008f7c:	20001390 	.word	0x20001390

08008f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f86:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <xTaskGetSchedulerState+0x34>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d102      	bne.n	8008f94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	607b      	str	r3, [r7, #4]
 8008f92:	e008      	b.n	8008fa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f94:	4b08      	ldr	r3, [pc, #32]	; (8008fb8 <xTaskGetSchedulerState+0x38>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d102      	bne.n	8008fa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	607b      	str	r3, [r7, #4]
 8008fa0:	e001      	b.n	8008fa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fa6:	687b      	ldr	r3, [r7, #4]
	}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	2000137c 	.word	0x2000137c
 8008fb8:	20001398 	.word	0x20001398

08008fbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d05a      	beq.n	8009088 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008fd2:	4b30      	ldr	r3, [pc, #192]	; (8009094 <xTaskPriorityDisinherit+0xd8>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d00c      	beq.n	8008ff6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	b672      	cpsid	i
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	b662      	cpsie	i
 8008ff0:	60fb      	str	r3, [r7, #12]
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10c      	bne.n	8009018 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	b672      	cpsid	i
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	b662      	cpsie	i
 8009012:	60bb      	str	r3, [r7, #8]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901c:	1e5a      	subs	r2, r3, #1
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902a:	429a      	cmp	r2, r3
 800902c:	d02c      	beq.n	8009088 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009032:	2b00      	cmp	r3, #0
 8009034:	d128      	bne.n	8009088 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	3304      	adds	r3, #4
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fc04 	bl	8007848 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009058:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <xTaskPriorityDisinherit+0xdc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	429a      	cmp	r2, r3
 800905e:	d903      	bls.n	8009068 <xTaskPriorityDisinherit+0xac>
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	4a0c      	ldr	r2, [pc, #48]	; (8009098 <xTaskPriorityDisinherit+0xdc>)
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4a09      	ldr	r2, [pc, #36]	; (800909c <xTaskPriorityDisinherit+0xe0>)
 8009076:	441a      	add	r2, r3
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	3304      	adds	r3, #4
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fe fb85 	bl	800778e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009084:	2301      	movs	r3, #1
 8009086:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009088:	697b      	ldr	r3, [r7, #20]
	}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20000e9c 	.word	0x20000e9c
 8009098:	20001378 	.word	0x20001378
 800909c:	20000ea0 	.word	0x20000ea0

080090a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090aa:	4b21      	ldr	r3, [pc, #132]	; (8009130 <prvAddCurrentTaskToDelayedList+0x90>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090b0:	4b20      	ldr	r3, [pc, #128]	; (8009134 <prvAddCurrentTaskToDelayedList+0x94>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3304      	adds	r3, #4
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe fbc6 	bl	8007848 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c2:	d10a      	bne.n	80090da <prvAddCurrentTaskToDelayedList+0x3a>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d007      	beq.n	80090da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ca:	4b1a      	ldr	r3, [pc, #104]	; (8009134 <prvAddCurrentTaskToDelayedList+0x94>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3304      	adds	r3, #4
 80090d0:	4619      	mov	r1, r3
 80090d2:	4819      	ldr	r0, [pc, #100]	; (8009138 <prvAddCurrentTaskToDelayedList+0x98>)
 80090d4:	f7fe fb5b 	bl	800778e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090d8:	e026      	b.n	8009128 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4413      	add	r3, r2
 80090e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090e2:	4b14      	ldr	r3, [pc, #80]	; (8009134 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d209      	bcs.n	8009106 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090f2:	4b12      	ldr	r3, [pc, #72]	; (800913c <prvAddCurrentTaskToDelayedList+0x9c>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <prvAddCurrentTaskToDelayedList+0x94>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7fe fb69 	bl	80077d6 <vListInsert>
}
 8009104:	e010      	b.n	8009128 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009106:	4b0e      	ldr	r3, [pc, #56]	; (8009140 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <prvAddCurrentTaskToDelayedList+0x94>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3304      	adds	r3, #4
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f7fe fb5f 	bl	80077d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <prvAddCurrentTaskToDelayedList+0xa4>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	429a      	cmp	r2, r3
 8009120:	d202      	bcs.n	8009128 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009122:	4a08      	ldr	r2, [pc, #32]	; (8009144 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	6013      	str	r3, [r2, #0]
}
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	20001374 	.word	0x20001374
 8009134:	20000e9c 	.word	0x20000e9c
 8009138:	2000135c 	.word	0x2000135c
 800913c:	2000132c 	.word	0x2000132c
 8009140:	20001328 	.word	0x20001328
 8009144:	20001390 	.word	0x20001390

08009148 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08a      	sub	sp, #40	; 0x28
 800914c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800914e:	2300      	movs	r3, #0
 8009150:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009152:	f000 fb15 	bl	8009780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009156:	4b1d      	ldr	r3, [pc, #116]	; (80091cc <xTimerCreateTimerTask+0x84>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d021      	beq.n	80091a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009162:	2300      	movs	r3, #0
 8009164:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009166:	1d3a      	adds	r2, r7, #4
 8009168:	f107 0108 	add.w	r1, r7, #8
 800916c:	f107 030c 	add.w	r3, r7, #12
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe fac5 	bl	8007700 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	9202      	str	r2, [sp, #8]
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	2302      	movs	r3, #2
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	2300      	movs	r3, #0
 8009186:	460a      	mov	r2, r1
 8009188:	4911      	ldr	r1, [pc, #68]	; (80091d0 <xTimerCreateTimerTask+0x88>)
 800918a:	4812      	ldr	r0, [pc, #72]	; (80091d4 <xTimerCreateTimerTask+0x8c>)
 800918c:	f7ff f890 	bl	80082b0 <xTaskCreateStatic>
 8009190:	4603      	mov	r3, r0
 8009192:	4a11      	ldr	r2, [pc, #68]	; (80091d8 <xTimerCreateTimerTask+0x90>)
 8009194:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009196:	4b10      	ldr	r3, [pc, #64]	; (80091d8 <xTimerCreateTimerTask+0x90>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800919e:	2301      	movs	r3, #1
 80091a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10c      	bne.n	80091c2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	b672      	cpsid	i
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	b662      	cpsie	i
 80091bc:	613b      	str	r3, [r7, #16]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80091c2:	697b      	ldr	r3, [r7, #20]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	200013cc 	.word	0x200013cc
 80091d0:	0800b7d0 	.word	0x0800b7d0
 80091d4:	08009319 	.word	0x08009319
 80091d8:	200013d0 	.word	0x200013d0

080091dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08a      	sub	sp, #40	; 0x28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10c      	bne.n	800920e <xTimerGenericCommand+0x32>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	b672      	cpsid	i
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	b662      	cpsie	i
 8009208:	623b      	str	r3, [r7, #32]
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800920e:	4b1a      	ldr	r3, [pc, #104]	; (8009278 <xTimerGenericCommand+0x9c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d02a      	beq.n	800926c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b05      	cmp	r3, #5
 8009226:	dc18      	bgt.n	800925a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009228:	f7ff feaa 	bl	8008f80 <xTaskGetSchedulerState>
 800922c:	4603      	mov	r3, r0
 800922e:	2b02      	cmp	r3, #2
 8009230:	d109      	bne.n	8009246 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009232:	4b11      	ldr	r3, [pc, #68]	; (8009278 <xTimerGenericCommand+0x9c>)
 8009234:	6818      	ldr	r0, [r3, #0]
 8009236:	f107 0110 	add.w	r1, r7, #16
 800923a:	2300      	movs	r3, #0
 800923c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800923e:	f7fe fc3d 	bl	8007abc <xQueueGenericSend>
 8009242:	6278      	str	r0, [r7, #36]	; 0x24
 8009244:	e012      	b.n	800926c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009246:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <xTimerGenericCommand+0x9c>)
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f107 0110 	add.w	r1, r7, #16
 800924e:	2300      	movs	r3, #0
 8009250:	2200      	movs	r2, #0
 8009252:	f7fe fc33 	bl	8007abc <xQueueGenericSend>
 8009256:	6278      	str	r0, [r7, #36]	; 0x24
 8009258:	e008      	b.n	800926c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800925a:	4b07      	ldr	r3, [pc, #28]	; (8009278 <xTimerGenericCommand+0x9c>)
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	f107 0110 	add.w	r1, r7, #16
 8009262:	2300      	movs	r3, #0
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	f7fe fd2f 	bl	8007cc8 <xQueueGenericSendFromISR>
 800926a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800926e:	4618      	mov	r0, r3
 8009270:	3728      	adds	r7, #40	; 0x28
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	200013cc 	.word	0x200013cc

0800927c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af02      	add	r7, sp, #8
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009286:	4b23      	ldr	r3, [pc, #140]	; (8009314 <prvProcessExpiredTimer+0x98>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	3304      	adds	r3, #4
 8009294:	4618      	mov	r0, r3
 8009296:	f7fe fad7 	bl	8007848 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d024      	beq.n	80092f2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	699a      	ldr	r2, [r3, #24]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	18d1      	adds	r1, r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	6978      	ldr	r0, [r7, #20]
 80092b6:	f000 f8d3 	bl	8009460 <prvInsertTimerInActiveList>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d021      	beq.n	8009304 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092c0:	2300      	movs	r3, #0
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	2300      	movs	r3, #0
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	2100      	movs	r1, #0
 80092ca:	6978      	ldr	r0, [r7, #20]
 80092cc:	f7ff ff86 	bl	80091dc <xTimerGenericCommand>
 80092d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d115      	bne.n	8009304 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	b672      	cpsid	i
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	b662      	cpsie	i
 80092ec:	60fb      	str	r3, [r7, #12]
}
 80092ee:	bf00      	nop
 80092f0:	e7fe      	b.n	80092f0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f8:	f023 0301 	bic.w	r3, r3, #1
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	6978      	ldr	r0, [r7, #20]
 800930a:	4798      	blx	r3
}
 800930c:	bf00      	nop
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	200013c4 	.word	0x200013c4

08009318 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009320:	f107 0308 	add.w	r3, r7, #8
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f857 	bl	80093d8 <prvGetNextExpireTime>
 800932a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	4619      	mov	r1, r3
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 f803 	bl	800933c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009336:	f000 f8d5 	bl	80094e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800933a:	e7f1      	b.n	8009320 <prvTimerTask+0x8>

0800933c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009346:	f7ff fa1d 	bl	8008784 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800934a:	f107 0308 	add.w	r3, r7, #8
 800934e:	4618      	mov	r0, r3
 8009350:	f000 f866 	bl	8009420 <prvSampleTimeNow>
 8009354:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d130      	bne.n	80093be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10a      	bne.n	8009378 <prvProcessTimerOrBlockTask+0x3c>
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	429a      	cmp	r2, r3
 8009368:	d806      	bhi.n	8009378 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800936a:	f7ff fa19 	bl	80087a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800936e:	68f9      	ldr	r1, [r7, #12]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7ff ff83 	bl	800927c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009376:	e024      	b.n	80093c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d008      	beq.n	8009390 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800937e:	4b13      	ldr	r3, [pc, #76]	; (80093cc <prvProcessTimerOrBlockTask+0x90>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <prvProcessTimerOrBlockTask+0x50>
 8009388:	2301      	movs	r3, #1
 800938a:	e000      	b.n	800938e <prvProcessTimerOrBlockTask+0x52>
 800938c:	2300      	movs	r3, #0
 800938e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009390:	4b0f      	ldr	r3, [pc, #60]	; (80093d0 <prvProcessTimerOrBlockTask+0x94>)
 8009392:	6818      	ldr	r0, [r3, #0]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	4619      	mov	r1, r3
 800939e:	f7fe ff53 	bl	8008248 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093a2:	f7ff f9fd 	bl	80087a0 <xTaskResumeAll>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093ac:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <prvProcessTimerOrBlockTask+0x98>)
 80093ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	f3bf 8f6f 	isb	sy
}
 80093bc:	e001      	b.n	80093c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093be:	f7ff f9ef 	bl	80087a0 <xTaskResumeAll>
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	200013c8 	.word	0x200013c8
 80093d0:	200013cc 	.word	0x200013cc
 80093d4:	e000ed04 	.word	0xe000ed04

080093d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093e0:	4b0e      	ldr	r3, [pc, #56]	; (800941c <prvGetNextExpireTime+0x44>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <prvGetNextExpireTime+0x16>
 80093ea:	2201      	movs	r2, #1
 80093ec:	e000      	b.n	80093f0 <prvGetNextExpireTime+0x18>
 80093ee:	2200      	movs	r2, #0
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d105      	bne.n	8009408 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093fc:	4b07      	ldr	r3, [pc, #28]	; (800941c <prvGetNextExpireTime+0x44>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60fb      	str	r3, [r7, #12]
 8009406:	e001      	b.n	800940c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800940c:	68fb      	ldr	r3, [r7, #12]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	200013c4 	.word	0x200013c4

08009420 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009428:	f7ff fa5a 	bl	80088e0 <xTaskGetTickCount>
 800942c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800942e:	4b0b      	ldr	r3, [pc, #44]	; (800945c <prvSampleTimeNow+0x3c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	429a      	cmp	r2, r3
 8009436:	d205      	bcs.n	8009444 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009438:	f000 f93c 	bl	80096b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	e002      	b.n	800944a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800944a:	4a04      	ldr	r2, [pc, #16]	; (800945c <prvSampleTimeNow+0x3c>)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009450:	68fb      	ldr	r3, [r7, #12]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	200013d4 	.word	0x200013d4

08009460 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800946e:	2300      	movs	r3, #0
 8009470:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	429a      	cmp	r2, r3
 8009484:	d812      	bhi.n	80094ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	1ad2      	subs	r2, r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	429a      	cmp	r2, r3
 8009492:	d302      	bcc.n	800949a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009494:	2301      	movs	r3, #1
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	e01b      	b.n	80094d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800949a:	4b10      	ldr	r3, [pc, #64]	; (80094dc <prvInsertTimerInActiveList+0x7c>)
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3304      	adds	r3, #4
 80094a2:	4619      	mov	r1, r3
 80094a4:	4610      	mov	r0, r2
 80094a6:	f7fe f996 	bl	80077d6 <vListInsert>
 80094aa:	e012      	b.n	80094d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d206      	bcs.n	80094c2 <prvInsertTimerInActiveList+0x62>
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d302      	bcc.n	80094c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094bc:	2301      	movs	r3, #1
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	e007      	b.n	80094d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094c2:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <prvInsertTimerInActiveList+0x80>)
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3304      	adds	r3, #4
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7fe f982 	bl	80077d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094d2:	697b      	ldr	r3, [r7, #20]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	200013c8 	.word	0x200013c8
 80094e0:	200013c4 	.word	0x200013c4

080094e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08e      	sub	sp, #56	; 0x38
 80094e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094ea:	e0d0      	b.n	800968e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	da1a      	bge.n	8009528 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094f2:	1d3b      	adds	r3, r7, #4
 80094f4:	3304      	adds	r3, #4
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80094f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10c      	bne.n	8009518 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	b672      	cpsid	i
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	b662      	cpsie	i
 8009512:	61fb      	str	r3, [r7, #28]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800951e:	6850      	ldr	r0, [r2, #4]
 8009520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009522:	6892      	ldr	r2, [r2, #8]
 8009524:	4611      	mov	r1, r2
 8009526:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f2c0 80ae 	blt.w	800968c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d004      	beq.n	8009546 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	3304      	adds	r3, #4
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe f981 	bl	8007848 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009546:	463b      	mov	r3, r7
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff ff69 	bl	8009420 <prvSampleTimeNow>
 800954e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b09      	cmp	r3, #9
 8009554:	f200 809b 	bhi.w	800968e <prvProcessReceivedCommands+0x1aa>
 8009558:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <prvProcessReceivedCommands+0x7c>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009589 	.word	0x08009589
 8009564:	08009589 	.word	0x08009589
 8009568:	08009589 	.word	0x08009589
 800956c:	08009601 	.word	0x08009601
 8009570:	08009615 	.word	0x08009615
 8009574:	08009663 	.word	0x08009663
 8009578:	08009589 	.word	0x08009589
 800957c:	08009589 	.word	0x08009589
 8009580:	08009601 	.word	0x08009601
 8009584:	08009615 	.word	0x08009615
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800958e:	f043 0301 	orr.w	r3, r3, #1
 8009592:	b2da      	uxtb	r2, r3
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	18d1      	adds	r1, r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a8:	f7ff ff5a 	bl	8009460 <prvInsertTimerInActiveList>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d06d      	beq.n	800968e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d062      	beq.n	800968e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	441a      	add	r2, r3
 80095d0:	2300      	movs	r3, #0
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	2300      	movs	r3, #0
 80095d6:	2100      	movs	r1, #0
 80095d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095da:	f7ff fdff 	bl	80091dc <xTimerGenericCommand>
 80095de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d153      	bne.n	800968e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	b672      	cpsid	i
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	b662      	cpsie	i
 80095fa:	61bb      	str	r3, [r7, #24]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009606:	f023 0301 	bic.w	r3, r3, #1
 800960a:	b2da      	uxtb	r2, r3
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009612:	e03c      	b.n	800968e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800961a:	f043 0301 	orr.w	r3, r3, #1
 800961e:	b2da      	uxtb	r2, r3
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10c      	bne.n	800964e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009638:	b672      	cpsid	i
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	b662      	cpsie	i
 8009648:	617b      	str	r3, [r7, #20]
}
 800964a:	bf00      	nop
 800964c:	e7fe      	b.n	800964c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	699a      	ldr	r2, [r3, #24]
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	18d1      	adds	r1, r2, r3
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965c:	f7ff ff00 	bl	8009460 <prvInsertTimerInActiveList>
					break;
 8009660:	e015      	b.n	800968e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009668:	f003 0302 	and.w	r3, r3, #2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d103      	bne.n	8009678 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009672:	f000 fbc9 	bl	8009e08 <vPortFree>
 8009676:	e00a      	b.n	800968e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800967e:	f023 0301 	bic.w	r3, r3, #1
 8009682:	b2da      	uxtb	r2, r3
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800968a:	e000      	b.n	800968e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800968c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800968e:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <prvProcessReceivedCommands+0x1cc>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	1d39      	adds	r1, r7, #4
 8009694:	2200      	movs	r2, #0
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fbb6 	bl	8007e08 <xQueueReceive>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f47f af24 	bne.w	80094ec <prvProcessReceivedCommands+0x8>
	}
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	3730      	adds	r7, #48	; 0x30
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	200013cc 	.word	0x200013cc

080096b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096ba:	e04a      	b.n	8009752 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096bc:	4b2e      	ldr	r3, [pc, #184]	; (8009778 <prvSwitchTimerLists+0xc4>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096c6:	4b2c      	ldr	r3, [pc, #176]	; (8009778 <prvSwitchTimerLists+0xc4>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fe f8b7 	bl	8007848 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e8:	f003 0304 	and.w	r3, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d030      	beq.n	8009752 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	4413      	add	r3, r2
 80096f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d90e      	bls.n	8009720 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800970e:	4b1a      	ldr	r3, [pc, #104]	; (8009778 <prvSwitchTimerLists+0xc4>)
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3304      	adds	r3, #4
 8009716:	4619      	mov	r1, r3
 8009718:	4610      	mov	r0, r2
 800971a:	f7fe f85c 	bl	80077d6 <vListInsert>
 800971e:	e018      	b.n	8009752 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009720:	2300      	movs	r3, #0
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2300      	movs	r3, #0
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	2100      	movs	r1, #0
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7ff fd56 	bl	80091dc <xTimerGenericCommand>
 8009730:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10c      	bne.n	8009752 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	b672      	cpsid	i
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	b662      	cpsie	i
 800974c:	603b      	str	r3, [r7, #0]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <prvSwitchTimerLists+0xc4>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1af      	bne.n	80096bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <prvSwitchTimerLists+0xc4>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009762:	4b06      	ldr	r3, [pc, #24]	; (800977c <prvSwitchTimerLists+0xc8>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a04      	ldr	r2, [pc, #16]	; (8009778 <prvSwitchTimerLists+0xc4>)
 8009768:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800976a:	4a04      	ldr	r2, [pc, #16]	; (800977c <prvSwitchTimerLists+0xc8>)
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	6013      	str	r3, [r2, #0]
}
 8009770:	bf00      	nop
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	200013c4 	.word	0x200013c4
 800977c:	200013c8 	.word	0x200013c8

08009780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009786:	f000 f949 	bl	8009a1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800978a:	4b15      	ldr	r3, [pc, #84]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d120      	bne.n	80097d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009792:	4814      	ldr	r0, [pc, #80]	; (80097e4 <prvCheckForValidListAndQueue+0x64>)
 8009794:	f7fd ffce 	bl	8007734 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009798:	4813      	ldr	r0, [pc, #76]	; (80097e8 <prvCheckForValidListAndQueue+0x68>)
 800979a:	f7fd ffcb 	bl	8007734 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800979e:	4b13      	ldr	r3, [pc, #76]	; (80097ec <prvCheckForValidListAndQueue+0x6c>)
 80097a0:	4a10      	ldr	r2, [pc, #64]	; (80097e4 <prvCheckForValidListAndQueue+0x64>)
 80097a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097a4:	4b12      	ldr	r3, [pc, #72]	; (80097f0 <prvCheckForValidListAndQueue+0x70>)
 80097a6:	4a10      	ldr	r2, [pc, #64]	; (80097e8 <prvCheckForValidListAndQueue+0x68>)
 80097a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097aa:	2300      	movs	r3, #0
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <prvCheckForValidListAndQueue+0x74>)
 80097b0:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <prvCheckForValidListAndQueue+0x78>)
 80097b2:	2110      	movs	r1, #16
 80097b4:	200a      	movs	r0, #10
 80097b6:	f7fe f8db 	bl	8007970 <xQueueGenericCreateStatic>
 80097ba:	4603      	mov	r3, r0
 80097bc:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 80097be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097c0:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	490b      	ldr	r1, [pc, #44]	; (80097fc <prvCheckForValidListAndQueue+0x7c>)
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fd10 	bl	80081f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097d4:	f000 f956 	bl	8009a84 <vPortExitCritical>
}
 80097d8:	bf00      	nop
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200013cc 	.word	0x200013cc
 80097e4:	2000139c 	.word	0x2000139c
 80097e8:	200013b0 	.word	0x200013b0
 80097ec:	200013c4 	.word	0x200013c4
 80097f0:	200013c8 	.word	0x200013c8
 80097f4:	20001478 	.word	0x20001478
 80097f8:	200013d8 	.word	0x200013d8
 80097fc:	0800b7d8 	.word	0x0800b7d8

08009800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3b04      	subs	r3, #4
 8009810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3b04      	subs	r3, #4
 800981e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f023 0201 	bic.w	r2, r3, #1
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b04      	subs	r3, #4
 800982e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009830:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <pxPortInitialiseStack+0x64>)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3b14      	subs	r3, #20
 800983a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3b04      	subs	r3, #4
 8009846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f06f 0202 	mvn.w	r2, #2
 800984e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3b20      	subs	r3, #32
 8009854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009856:	68fb      	ldr	r3, [r7, #12]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	08009869 	.word	0x08009869

08009868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009872:	4b14      	ldr	r3, [pc, #80]	; (80098c4 <prvTaskExitError+0x5c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800987a:	d00c      	beq.n	8009896 <prvTaskExitError+0x2e>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	b672      	cpsid	i
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	b662      	cpsie	i
 8009890:	60fb      	str	r3, [r7, #12]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <prvTaskExitError+0x2c>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	b672      	cpsid	i
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	b662      	cpsie	i
 80098aa:	60bb      	str	r3, [r7, #8]
}
 80098ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098ae:	bf00      	nop
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0fc      	beq.n	80098b0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098b6:	bf00      	nop
 80098b8:	bf00      	nop
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	20000010 	.word	0x20000010
	...

080098d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <pxCurrentTCBConst2>)
 80098d2:	6819      	ldr	r1, [r3, #0]
 80098d4:	6808      	ldr	r0, [r1, #0]
 80098d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098da:	f380 8809 	msr	PSP, r0
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f04f 0000 	mov.w	r0, #0
 80098e6:	f380 8811 	msr	BASEPRI, r0
 80098ea:	4770      	bx	lr
 80098ec:	f3af 8000 	nop.w

080098f0 <pxCurrentTCBConst2>:
 80098f0:	20000e9c 	.word	0x20000e9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop

080098f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098f8:	4808      	ldr	r0, [pc, #32]	; (800991c <prvPortStartFirstTask+0x24>)
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	6800      	ldr	r0, [r0, #0]
 80098fe:	f380 8808 	msr	MSP, r0
 8009902:	f04f 0000 	mov.w	r0, #0
 8009906:	f380 8814 	msr	CONTROL, r0
 800990a:	b662      	cpsie	i
 800990c:	b661      	cpsie	f
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	df00      	svc	0
 8009918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800991a:	bf00      	nop
 800991c:	e000ed08 	.word	0xe000ed08

08009920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009926:	4b37      	ldr	r3, [pc, #220]	; (8009a04 <xPortStartScheduler+0xe4>)
 8009928:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	22ff      	movs	r2, #255	; 0xff
 8009936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009948:	b2da      	uxtb	r2, r3
 800994a:	4b2f      	ldr	r3, [pc, #188]	; (8009a08 <xPortStartScheduler+0xe8>)
 800994c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800994e:	4b2f      	ldr	r3, [pc, #188]	; (8009a0c <xPortStartScheduler+0xec>)
 8009950:	2207      	movs	r2, #7
 8009952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009954:	e009      	b.n	800996a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009956:	4b2d      	ldr	r3, [pc, #180]	; (8009a0c <xPortStartScheduler+0xec>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3b01      	subs	r3, #1
 800995c:	4a2b      	ldr	r2, [pc, #172]	; (8009a0c <xPortStartScheduler+0xec>)
 800995e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	b2db      	uxtb	r3, r3
 8009968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009972:	2b80      	cmp	r3, #128	; 0x80
 8009974:	d0ef      	beq.n	8009956 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009976:	4b25      	ldr	r3, [pc, #148]	; (8009a0c <xPortStartScheduler+0xec>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1c3 0307 	rsb	r3, r3, #7
 800997e:	2b04      	cmp	r3, #4
 8009980:	d00c      	beq.n	800999c <xPortStartScheduler+0x7c>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	b672      	cpsid	i
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	b662      	cpsie	i
 8009996:	60bb      	str	r3, [r7, #8]
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800999c:	4b1b      	ldr	r3, [pc, #108]	; (8009a0c <xPortStartScheduler+0xec>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	021b      	lsls	r3, r3, #8
 80099a2:	4a1a      	ldr	r2, [pc, #104]	; (8009a0c <xPortStartScheduler+0xec>)
 80099a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099a6:	4b19      	ldr	r3, [pc, #100]	; (8009a0c <xPortStartScheduler+0xec>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099ae:	4a17      	ldr	r2, [pc, #92]	; (8009a0c <xPortStartScheduler+0xec>)
 80099b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <xPortStartScheduler+0xf0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a14      	ldr	r2, [pc, #80]	; (8009a10 <xPortStartScheduler+0xf0>)
 80099c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <xPortStartScheduler+0xf0>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a11      	ldr	r2, [pc, #68]	; (8009a10 <xPortStartScheduler+0xf0>)
 80099cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099d2:	f000 f8dd 	bl	8009b90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099d6:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <xPortStartScheduler+0xf4>)
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099dc:	f000 f8fc 	bl	8009bd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099e0:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <xPortStartScheduler+0xf8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a0c      	ldr	r2, [pc, #48]	; (8009a18 <xPortStartScheduler+0xf8>)
 80099e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099ec:	f7ff ff84 	bl	80098f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099f0:	f7ff f842 	bl	8008a78 <vTaskSwitchContext>
	prvTaskExitError();
 80099f4:	f7ff ff38 	bl	8009868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	e000e400 	.word	0xe000e400
 8009a08:	200014c8 	.word	0x200014c8
 8009a0c:	200014cc 	.word	0x200014cc
 8009a10:	e000ed20 	.word	0xe000ed20
 8009a14:	20000010 	.word	0x20000010
 8009a18:	e000ef34 	.word	0xe000ef34

08009a1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	b672      	cpsid	i
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	b662      	cpsie	i
 8009a36:	607b      	str	r3, [r7, #4]
}
 8009a38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a3a:	4b10      	ldr	r3, [pc, #64]	; (8009a7c <vPortEnterCritical+0x60>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	4a0e      	ldr	r2, [pc, #56]	; (8009a7c <vPortEnterCritical+0x60>)
 8009a42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a44:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <vPortEnterCritical+0x60>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d111      	bne.n	8009a70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <vPortEnterCritical+0x64>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00c      	beq.n	8009a70 <vPortEnterCritical+0x54>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	b672      	cpsid	i
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	b662      	cpsie	i
 8009a6a:	603b      	str	r3, [r7, #0]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <vPortEnterCritical+0x52>
	}
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	20000010 	.word	0x20000010
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a8a:	4b13      	ldr	r3, [pc, #76]	; (8009ad8 <vPortExitCritical+0x54>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10c      	bne.n	8009aac <vPortExitCritical+0x28>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	b672      	cpsid	i
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	b662      	cpsie	i
 8009aa6:	607b      	str	r3, [r7, #4]
}
 8009aa8:	bf00      	nop
 8009aaa:	e7fe      	b.n	8009aaa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <vPortExitCritical+0x54>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <vPortExitCritical+0x54>)
 8009ab4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ab6:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <vPortExitCritical+0x54>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d105      	bne.n	8009aca <vPortExitCritical+0x46>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	f383 8811 	msr	BASEPRI, r3
}
 8009ac8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	20000010 	.word	0x20000010
 8009adc:	00000000 	.word	0x00000000

08009ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ae0:	f3ef 8009 	mrs	r0, PSP
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <pxCurrentTCBConst>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	f01e 0f10 	tst.w	lr, #16
 8009af0:	bf08      	it	eq
 8009af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	6010      	str	r0, [r2, #0]
 8009afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b04:	b672      	cpsid	i
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	b662      	cpsie	i
 8009b14:	f7fe ffb0 	bl	8008a78 <vTaskSwitchContext>
 8009b18:	f04f 0000 	mov.w	r0, #0
 8009b1c:	f380 8811 	msr	BASEPRI, r0
 8009b20:	bc09      	pop	{r0, r3}
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	6808      	ldr	r0, [r1, #0]
 8009b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2a:	f01e 0f10 	tst.w	lr, #16
 8009b2e:	bf08      	it	eq
 8009b30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b34:	f380 8809 	msr	PSP, r0
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop

08009b40 <pxCurrentTCBConst>:
 8009b40:	20000e9c 	.word	0x20000e9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop

08009b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	b672      	cpsid	i
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	b662      	cpsie	i
 8009b62:	607b      	str	r3, [r7, #4]
}
 8009b64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b66:	f7fe fecb 	bl	8008900 <xTaskIncrementTick>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <SysTick_Handler+0x44>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f383 8811 	msr	BASEPRI, r3
}
 8009b82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b90:	b480      	push	{r7}
 8009b92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b94:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <vPortSetupTimerInterrupt+0x34>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b9a:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <vPortSetupTimerInterrupt+0x38>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <vPortSetupTimerInterrupt+0x3c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a0a      	ldr	r2, [pc, #40]	; (8009bd0 <vPortSetupTimerInterrupt+0x40>)
 8009ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8009baa:	099b      	lsrs	r3, r3, #6
 8009bac:	4a09      	ldr	r2, [pc, #36]	; (8009bd4 <vPortSetupTimerInterrupt+0x44>)
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bb2:	4b04      	ldr	r3, [pc, #16]	; (8009bc4 <vPortSetupTimerInterrupt+0x34>)
 8009bb4:	2207      	movs	r2, #7
 8009bb6:	601a      	str	r2, [r3, #0]
}
 8009bb8:	bf00      	nop
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	e000e010 	.word	0xe000e010
 8009bc8:	e000e018 	.word	0xe000e018
 8009bcc:	20000004 	.word	0x20000004
 8009bd0:	10624dd3 	.word	0x10624dd3
 8009bd4:	e000e014 	.word	0xe000e014

08009bd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009be8 <vPortEnableVFP+0x10>
 8009bdc:	6801      	ldr	r1, [r0, #0]
 8009bde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009be2:	6001      	str	r1, [r0, #0]
 8009be4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009be6:	bf00      	nop
 8009be8:	e000ed88 	.word	0xe000ed88

08009bec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bf2:	f3ef 8305 	mrs	r3, IPSR
 8009bf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b0f      	cmp	r3, #15
 8009bfc:	d916      	bls.n	8009c2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bfe:	4a19      	ldr	r2, [pc, #100]	; (8009c64 <vPortValidateInterruptPriority+0x78>)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c08:	4b17      	ldr	r3, [pc, #92]	; (8009c68 <vPortValidateInterruptPriority+0x7c>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	7afa      	ldrb	r2, [r7, #11]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d20c      	bcs.n	8009c2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	b672      	cpsid	i
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	b662      	cpsie	i
 8009c26:	607b      	str	r3, [r7, #4]
}
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <vPortValidateInterruptPriority+0x80>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <vPortValidateInterruptPriority+0x84>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d90c      	bls.n	8009c56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	b672      	cpsid	i
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	b662      	cpsie	i
 8009c50:	603b      	str	r3, [r7, #0]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <vPortValidateInterruptPriority+0x68>
	}
 8009c56:	bf00      	nop
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	e000e3f0 	.word	0xe000e3f0
 8009c68:	200014c8 	.word	0x200014c8
 8009c6c:	e000ed0c 	.word	0xe000ed0c
 8009c70:	200014cc 	.word	0x200014cc

08009c74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08a      	sub	sp, #40	; 0x28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c80:	f7fe fd80 	bl	8008784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c84:	4b5b      	ldr	r3, [pc, #364]	; (8009df4 <pvPortMalloc+0x180>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c8c:	f000 f91a 	bl	8009ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c90:	4b59      	ldr	r3, [pc, #356]	; (8009df8 <pvPortMalloc+0x184>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4013      	ands	r3, r2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f040 8092 	bne.w	8009dc2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d01f      	beq.n	8009ce4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009ca4:	2208      	movs	r2, #8
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d016      	beq.n	8009ce4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f023 0307 	bic.w	r3, r3, #7
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00c      	beq.n	8009ce4 <pvPortMalloc+0x70>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	b672      	cpsid	i
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	b662      	cpsie	i
 8009cde:	617b      	str	r3, [r7, #20]
}
 8009ce0:	bf00      	nop
 8009ce2:	e7fe      	b.n	8009ce2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d06b      	beq.n	8009dc2 <pvPortMalloc+0x14e>
 8009cea:	4b44      	ldr	r3, [pc, #272]	; (8009dfc <pvPortMalloc+0x188>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d866      	bhi.n	8009dc2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cf4:	4b42      	ldr	r3, [pc, #264]	; (8009e00 <pvPortMalloc+0x18c>)
 8009cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cf8:	4b41      	ldr	r3, [pc, #260]	; (8009e00 <pvPortMalloc+0x18c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cfe:	e004      	b.n	8009d0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d903      	bls.n	8009d1c <pvPortMalloc+0xa8>
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1f1      	bne.n	8009d00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d1c:	4b35      	ldr	r3, [pc, #212]	; (8009df4 <pvPortMalloc+0x180>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d04d      	beq.n	8009dc2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2208      	movs	r2, #8
 8009d2c:	4413      	add	r3, r2
 8009d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	2308      	movs	r3, #8
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d921      	bls.n	8009d8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00c      	beq.n	8009d74 <pvPortMalloc+0x100>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	b672      	cpsid	i
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	b662      	cpsie	i
 8009d6e:	613b      	str	r3, [r7, #16]
}
 8009d70:	bf00      	nop
 8009d72:	e7fe      	b.n	8009d72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	1ad2      	subs	r2, r2, r3
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d86:	69b8      	ldr	r0, [r7, #24]
 8009d88:	f000 f8fe 	bl	8009f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d8c:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <pvPortMalloc+0x188>)
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	4a19      	ldr	r2, [pc, #100]	; (8009dfc <pvPortMalloc+0x188>)
 8009d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d9a:	4b18      	ldr	r3, [pc, #96]	; (8009dfc <pvPortMalloc+0x188>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	4b19      	ldr	r3, [pc, #100]	; (8009e04 <pvPortMalloc+0x190>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d203      	bcs.n	8009dae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009da6:	4b15      	ldr	r3, [pc, #84]	; (8009dfc <pvPortMalloc+0x188>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a16      	ldr	r2, [pc, #88]	; (8009e04 <pvPortMalloc+0x190>)
 8009dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	4b11      	ldr	r3, [pc, #68]	; (8009df8 <pvPortMalloc+0x184>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009dc2:	f7fe fced 	bl	80087a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	f003 0307 	and.w	r3, r3, #7
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00c      	beq.n	8009dea <pvPortMalloc+0x176>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	b672      	cpsid	i
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	b662      	cpsie	i
 8009de4:	60fb      	str	r3, [r7, #12]
}
 8009de6:	bf00      	nop
 8009de8:	e7fe      	b.n	8009de8 <pvPortMalloc+0x174>
	return pvReturn;
 8009dea:	69fb      	ldr	r3, [r7, #28]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3728      	adds	r7, #40	; 0x28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	200050d8 	.word	0x200050d8
 8009df8:	200050e4 	.word	0x200050e4
 8009dfc:	200050dc 	.word	0x200050dc
 8009e00:	200050d0 	.word	0x200050d0
 8009e04:	200050e0 	.word	0x200050e0

08009e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d04c      	beq.n	8009eb4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e1a:	2308      	movs	r3, #8
 8009e1c:	425b      	negs	r3, r3
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	4413      	add	r3, r2
 8009e22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	4b23      	ldr	r3, [pc, #140]	; (8009ebc <vPortFree+0xb4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4013      	ands	r3, r2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10c      	bne.n	8009e50 <vPortFree+0x48>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	b672      	cpsid	i
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	b662      	cpsie	i
 8009e4a:	60fb      	str	r3, [r7, #12]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00c      	beq.n	8009e72 <vPortFree+0x6a>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	b672      	cpsid	i
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	b662      	cpsie	i
 8009e6c:	60bb      	str	r3, [r7, #8]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	685a      	ldr	r2, [r3, #4]
 8009e76:	4b11      	ldr	r3, [pc, #68]	; (8009ebc <vPortFree+0xb4>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d019      	beq.n	8009eb4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d115      	bne.n	8009eb4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <vPortFree+0xb4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	43db      	mvns	r3, r3
 8009e92:	401a      	ands	r2, r3
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e98:	f7fe fc74 	bl	8008784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <vPortFree+0xb8>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	4a06      	ldr	r2, [pc, #24]	; (8009ec0 <vPortFree+0xb8>)
 8009ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eaa:	6938      	ldr	r0, [r7, #16]
 8009eac:	f000 f86c 	bl	8009f88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009eb0:	f7fe fc76 	bl	80087a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009eb4:	bf00      	nop
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	200050e4 	.word	0x200050e4
 8009ec0:	200050dc 	.word	0x200050dc

08009ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ed0:	4b27      	ldr	r3, [pc, #156]	; (8009f70 <prvHeapInit+0xac>)
 8009ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f003 0307 	and.w	r3, r3, #7
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00c      	beq.n	8009ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3307      	adds	r3, #7
 8009ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	4a1f      	ldr	r2, [pc, #124]	; (8009f70 <prvHeapInit+0xac>)
 8009ef4:	4413      	add	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009efc:	4a1d      	ldr	r2, [pc, #116]	; (8009f74 <prvHeapInit+0xb0>)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f02:	4b1c      	ldr	r3, [pc, #112]	; (8009f74 <prvHeapInit+0xb0>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f10:	2208      	movs	r2, #8
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	1a9b      	subs	r3, r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0307 	bic.w	r3, r3, #7
 8009f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4a15      	ldr	r2, [pc, #84]	; (8009f78 <prvHeapInit+0xb4>)
 8009f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f26:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <prvHeapInit+0xb4>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f2e:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <prvHeapInit+0xb4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	1ad2      	subs	r2, r2, r3
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f44:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <prvHeapInit+0xb4>)
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <prvHeapInit+0xb8>)
 8009f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4a09      	ldr	r2, [pc, #36]	; (8009f80 <prvHeapInit+0xbc>)
 8009f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f5c:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <prvHeapInit+0xc0>)
 8009f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f62:	601a      	str	r2, [r3, #0]
}
 8009f64:	bf00      	nop
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	200014d0 	.word	0x200014d0
 8009f74:	200050d0 	.word	0x200050d0
 8009f78:	200050d8 	.word	0x200050d8
 8009f7c:	200050e0 	.word	0x200050e0
 8009f80:	200050dc 	.word	0x200050dc
 8009f84:	200050e4 	.word	0x200050e4

08009f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f90:	4b28      	ldr	r3, [pc, #160]	; (800a034 <prvInsertBlockIntoFreeList+0xac>)
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	e002      	b.n	8009f9c <prvInsertBlockIntoFreeList+0x14>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d8f7      	bhi.n	8009f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d108      	bne.n	8009fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	441a      	add	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	441a      	add	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d118      	bne.n	800a010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <prvInsertBlockIntoFreeList+0xb0>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d00d      	beq.n	800a006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	441a      	add	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	e008      	b.n	800a018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a006:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <prvInsertBlockIntoFreeList+0xb0>)
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	e003      	b.n	800a018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d002      	beq.n	800a026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a026:	bf00      	nop
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	200050d0 	.word	0x200050d0
 800a038:	200050d8 	.word	0x200050d8

0800a03c <findslot>:
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <findslot+0x2c>)
 800a03e:	b510      	push	{r4, lr}
 800a040:	4604      	mov	r4, r0
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	b118      	cbz	r0, 800a04e <findslot+0x12>
 800a046:	6983      	ldr	r3, [r0, #24]
 800a048:	b90b      	cbnz	r3, 800a04e <findslot+0x12>
 800a04a:	f000 faf7 	bl	800a63c <__sinit>
 800a04e:	2c13      	cmp	r4, #19
 800a050:	d807      	bhi.n	800a062 <findslot+0x26>
 800a052:	4806      	ldr	r0, [pc, #24]	; (800a06c <findslot+0x30>)
 800a054:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800a058:	3201      	adds	r2, #1
 800a05a:	d002      	beq.n	800a062 <findslot+0x26>
 800a05c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800a060:	bd10      	pop	{r4, pc}
 800a062:	2000      	movs	r0, #0
 800a064:	e7fc      	b.n	800a060 <findslot+0x24>
 800a066:	bf00      	nop
 800a068:	2000001c 	.word	0x2000001c
 800a06c:	200050f4 	.word	0x200050f4

0800a070 <error>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	4604      	mov	r4, r0
 800a074:	f000 fa84 	bl	800a580 <__errno>
 800a078:	2613      	movs	r6, #19
 800a07a:	4605      	mov	r5, r0
 800a07c:	2700      	movs	r7, #0
 800a07e:	4630      	mov	r0, r6
 800a080:	4639      	mov	r1, r7
 800a082:	beab      	bkpt	0x00ab
 800a084:	4606      	mov	r6, r0
 800a086:	602e      	str	r6, [r5, #0]
 800a088:	4620      	mov	r0, r4
 800a08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a08c <checkerror>:
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d101      	bne.n	800a094 <checkerror+0x8>
 800a090:	f7ff bfee 	b.w	800a070 <error>
 800a094:	4770      	bx	lr

0800a096 <_swiread>:
 800a096:	b530      	push	{r4, r5, lr}
 800a098:	b085      	sub	sp, #20
 800a09a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a09e:	9203      	str	r2, [sp, #12]
 800a0a0:	2406      	movs	r4, #6
 800a0a2:	ad01      	add	r5, sp, #4
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	beab      	bkpt	0x00ab
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f7ff ffed 	bl	800a08c <checkerror>
 800a0b2:	b005      	add	sp, #20
 800a0b4:	bd30      	pop	{r4, r5, pc}

0800a0b6 <_read>:
 800a0b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b8:	4615      	mov	r5, r2
 800a0ba:	9101      	str	r1, [sp, #4]
 800a0bc:	f7ff ffbe 	bl	800a03c <findslot>
 800a0c0:	9901      	ldr	r1, [sp, #4]
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	b938      	cbnz	r0, 800a0d6 <_read+0x20>
 800a0c6:	f000 fa5b 	bl	800a580 <__errno>
 800a0ca:	2309      	movs	r3, #9
 800a0cc:	6003      	str	r3, [r0, #0]
 800a0ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d2:	b003      	add	sp, #12
 800a0d4:	bd30      	pop	{r4, r5, pc}
 800a0d6:	6800      	ldr	r0, [r0, #0]
 800a0d8:	462a      	mov	r2, r5
 800a0da:	f7ff ffdc 	bl	800a096 <_swiread>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	d0f7      	beq.n	800a0d2 <_read+0x1c>
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	1a2a      	subs	r2, r5, r0
 800a0e6:	4413      	add	r3, r2
 800a0e8:	6063      	str	r3, [r4, #4]
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	e7f1      	b.n	800a0d2 <_read+0x1c>

0800a0ee <_swilseek>:
 800a0ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	4616      	mov	r6, r2
 800a0f4:	f7ff ffa2 	bl	800a03c <findslot>
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	b940      	cbnz	r0, 800a10e <_swilseek+0x20>
 800a0fc:	f000 fa40 	bl	800a580 <__errno>
 800a100:	2309      	movs	r3, #9
 800a102:	6003      	str	r3, [r0, #0]
 800a104:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a108:	4620      	mov	r0, r4
 800a10a:	b003      	add	sp, #12
 800a10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a10e:	2e02      	cmp	r6, #2
 800a110:	d903      	bls.n	800a11a <_swilseek+0x2c>
 800a112:	f000 fa35 	bl	800a580 <__errno>
 800a116:	2316      	movs	r3, #22
 800a118:	e7f3      	b.n	800a102 <_swilseek+0x14>
 800a11a:	2e01      	cmp	r6, #1
 800a11c:	d112      	bne.n	800a144 <_swilseek+0x56>
 800a11e:	6843      	ldr	r3, [r0, #4]
 800a120:	18e4      	adds	r4, r4, r3
 800a122:	d4f6      	bmi.n	800a112 <_swilseek+0x24>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	260a      	movs	r6, #10
 800a128:	e9cd 3400 	strd	r3, r4, [sp]
 800a12c:	466f      	mov	r7, sp
 800a12e:	4630      	mov	r0, r6
 800a130:	4639      	mov	r1, r7
 800a132:	beab      	bkpt	0x00ab
 800a134:	4606      	mov	r6, r0
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ffa8 	bl	800a08c <checkerror>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	dbe1      	blt.n	800a104 <_swilseek+0x16>
 800a140:	606c      	str	r4, [r5, #4]
 800a142:	e7e1      	b.n	800a108 <_swilseek+0x1a>
 800a144:	2e02      	cmp	r6, #2
 800a146:	d1ed      	bne.n	800a124 <_swilseek+0x36>
 800a148:	6803      	ldr	r3, [r0, #0]
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	260c      	movs	r6, #12
 800a14e:	466f      	mov	r7, sp
 800a150:	4630      	mov	r0, r6
 800a152:	4639      	mov	r1, r7
 800a154:	beab      	bkpt	0x00ab
 800a156:	4606      	mov	r6, r0
 800a158:	4630      	mov	r0, r6
 800a15a:	f7ff ff97 	bl	800a08c <checkerror>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	d0d0      	beq.n	800a104 <_swilseek+0x16>
 800a162:	4404      	add	r4, r0
 800a164:	e7de      	b.n	800a124 <_swilseek+0x36>

0800a166 <_lseek>:
 800a166:	f7ff bfc2 	b.w	800a0ee <_swilseek>

0800a16a <_swiwrite>:
 800a16a:	b530      	push	{r4, r5, lr}
 800a16c:	b085      	sub	sp, #20
 800a16e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a172:	9203      	str	r2, [sp, #12]
 800a174:	2405      	movs	r4, #5
 800a176:	ad01      	add	r5, sp, #4
 800a178:	4620      	mov	r0, r4
 800a17a:	4629      	mov	r1, r5
 800a17c:	beab      	bkpt	0x00ab
 800a17e:	4604      	mov	r4, r0
 800a180:	4620      	mov	r0, r4
 800a182:	f7ff ff83 	bl	800a08c <checkerror>
 800a186:	b005      	add	sp, #20
 800a188:	bd30      	pop	{r4, r5, pc}

0800a18a <_write>:
 800a18a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a18c:	4615      	mov	r5, r2
 800a18e:	9101      	str	r1, [sp, #4]
 800a190:	f7ff ff54 	bl	800a03c <findslot>
 800a194:	9901      	ldr	r1, [sp, #4]
 800a196:	4604      	mov	r4, r0
 800a198:	b930      	cbnz	r0, 800a1a8 <_write+0x1e>
 800a19a:	f000 f9f1 	bl	800a580 <__errno>
 800a19e:	2309      	movs	r3, #9
 800a1a0:	6003      	str	r3, [r0, #0]
 800a1a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1a6:	e012      	b.n	800a1ce <_write+0x44>
 800a1a8:	6800      	ldr	r0, [r0, #0]
 800a1aa:	462a      	mov	r2, r5
 800a1ac:	f7ff ffdd 	bl	800a16a <_swiwrite>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	dbf6      	blt.n	800a1a2 <_write+0x18>
 800a1b4:	6862      	ldr	r2, [r4, #4]
 800a1b6:	1a2b      	subs	r3, r5, r0
 800a1b8:	441a      	add	r2, r3
 800a1ba:	42a8      	cmp	r0, r5
 800a1bc:	6062      	str	r2, [r4, #4]
 800a1be:	d105      	bne.n	800a1cc <_write+0x42>
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	b003      	add	sp, #12
 800a1c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1c8:	f7ff bf52 	b.w	800a070 <error>
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	b003      	add	sp, #12
 800a1d0:	bd30      	pop	{r4, r5, pc}

0800a1d2 <_swiclose>:
 800a1d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1d4:	2402      	movs	r4, #2
 800a1d6:	9001      	str	r0, [sp, #4]
 800a1d8:	ad01      	add	r5, sp, #4
 800a1da:	4620      	mov	r0, r4
 800a1dc:	4629      	mov	r1, r5
 800a1de:	beab      	bkpt	0x00ab
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f7ff ff52 	bl	800a08c <checkerror>
 800a1e8:	b003      	add	sp, #12
 800a1ea:	bd30      	pop	{r4, r5, pc}

0800a1ec <_close>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	f7ff ff24 	bl	800a03c <findslot>
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	b930      	cbnz	r0, 800a206 <_close+0x1a>
 800a1f8:	f000 f9c2 	bl	800a580 <__errno>
 800a1fc:	2309      	movs	r3, #9
 800a1fe:	6003      	str	r3, [r0, #0]
 800a200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a204:	bd38      	pop	{r3, r4, r5, pc}
 800a206:	3d01      	subs	r5, #1
 800a208:	2d01      	cmp	r5, #1
 800a20a:	d809      	bhi.n	800a220 <_close+0x34>
 800a20c:	4b09      	ldr	r3, [pc, #36]	; (800a234 <_close+0x48>)
 800a20e:	689a      	ldr	r2, [r3, #8]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	429a      	cmp	r2, r3
 800a214:	d104      	bne.n	800a220 <_close+0x34>
 800a216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a21a:	6003      	str	r3, [r0, #0]
 800a21c:	2000      	movs	r0, #0
 800a21e:	e7f1      	b.n	800a204 <_close+0x18>
 800a220:	6820      	ldr	r0, [r4, #0]
 800a222:	f7ff ffd6 	bl	800a1d2 <_swiclose>
 800a226:	2800      	cmp	r0, #0
 800a228:	d1ec      	bne.n	800a204 <_close+0x18>
 800a22a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	e7e8      	b.n	800a204 <_close+0x18>
 800a232:	bf00      	nop
 800a234:	200050f4 	.word	0x200050f4

0800a238 <_swistat>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	460c      	mov	r4, r1
 800a23c:	f7ff fefe 	bl	800a03c <findslot>
 800a240:	4605      	mov	r5, r0
 800a242:	b930      	cbnz	r0, 800a252 <_swistat+0x1a>
 800a244:	f000 f99c 	bl	800a580 <__errno>
 800a248:	2309      	movs	r3, #9
 800a24a:	6003      	str	r3, [r0, #0]
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a250:	bd70      	pop	{r4, r5, r6, pc}
 800a252:	6863      	ldr	r3, [r4, #4]
 800a254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a25e:	64a3      	str	r3, [r4, #72]	; 0x48
 800a260:	260c      	movs	r6, #12
 800a262:	4630      	mov	r0, r6
 800a264:	4629      	mov	r1, r5
 800a266:	beab      	bkpt	0x00ab
 800a268:	4605      	mov	r5, r0
 800a26a:	4628      	mov	r0, r5
 800a26c:	f7ff ff0e 	bl	800a08c <checkerror>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	bf1c      	itt	ne
 800a274:	6120      	strne	r0, [r4, #16]
 800a276:	2000      	movne	r0, #0
 800a278:	e7ea      	b.n	800a250 <_swistat+0x18>

0800a27a <_fstat>:
 800a27a:	460b      	mov	r3, r1
 800a27c:	b510      	push	{r4, lr}
 800a27e:	2100      	movs	r1, #0
 800a280:	4604      	mov	r4, r0
 800a282:	2258      	movs	r2, #88	; 0x58
 800a284:	4618      	mov	r0, r3
 800a286:	f000 faac 	bl	800a7e2 <memset>
 800a28a:	4601      	mov	r1, r0
 800a28c:	4620      	mov	r0, r4
 800a28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a292:	f7ff bfd1 	b.w	800a238 <_swistat>

0800a296 <_stat>:
 800a296:	b538      	push	{r3, r4, r5, lr}
 800a298:	460d      	mov	r5, r1
 800a29a:	4604      	mov	r4, r0
 800a29c:	2258      	movs	r2, #88	; 0x58
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f000 fa9e 	bl	800a7e2 <memset>
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	f000 f811 	bl	800a2d0 <_swiopen>
 800a2ae:	1c43      	adds	r3, r0, #1
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	d00b      	beq.n	800a2cc <_stat+0x36>
 800a2b4:	686b      	ldr	r3, [r5, #4]
 800a2b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a2ba:	606b      	str	r3, [r5, #4]
 800a2bc:	4629      	mov	r1, r5
 800a2be:	f7ff ffbb 	bl	800a238 <_swistat>
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f7ff ff91 	bl	800a1ec <_close>
 800a2ca:	462c      	mov	r4, r5
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}

0800a2d0 <_swiopen>:
 800a2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2d4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800a380 <_swiopen+0xb0>
 800a2d8:	b097      	sub	sp, #92	; 0x5c
 800a2da:	4607      	mov	r7, r0
 800a2dc:	460e      	mov	r6, r1
 800a2de:	2500      	movs	r5, #0
 800a2e0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800a2e4:	1c61      	adds	r1, r4, #1
 800a2e6:	d037      	beq.n	800a358 <_swiopen+0x88>
 800a2e8:	3501      	adds	r5, #1
 800a2ea:	2d14      	cmp	r5, #20
 800a2ec:	d1f8      	bne.n	800a2e0 <_swiopen+0x10>
 800a2ee:	f000 f947 	bl	800a580 <__errno>
 800a2f2:	2318      	movs	r3, #24
 800a2f4:	6003      	str	r3, [r0, #0]
 800a2f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a2fa:	e03d      	b.n	800a378 <_swiopen+0xa8>
 800a2fc:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800a300:	f240 6301 	movw	r3, #1537	; 0x601
 800a304:	07b2      	lsls	r2, r6, #30
 800a306:	bf48      	it	mi
 800a308:	f044 0402 	orrmi.w	r4, r4, #2
 800a30c:	421e      	tst	r6, r3
 800a30e:	bf18      	it	ne
 800a310:	f044 0404 	orrne.w	r4, r4, #4
 800a314:	0733      	lsls	r3, r6, #28
 800a316:	bf48      	it	mi
 800a318:	f024 0404 	bicmi.w	r4, r4, #4
 800a31c:	4638      	mov	r0, r7
 800a31e:	bf48      	it	mi
 800a320:	f044 0408 	orrmi.w	r4, r4, #8
 800a324:	9700      	str	r7, [sp, #0]
 800a326:	f7f5 ff8b 	bl	8000240 <strlen>
 800a32a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800a32e:	2401      	movs	r4, #1
 800a330:	4620      	mov	r0, r4
 800a332:	4649      	mov	r1, r9
 800a334:	beab      	bkpt	0x00ab
 800a336:	4604      	mov	r4, r0
 800a338:	2c00      	cmp	r4, #0
 800a33a:	db08      	blt.n	800a34e <_swiopen+0x7e>
 800a33c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800a340:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800a344:	2300      	movs	r3, #0
 800a346:	f8c8 3004 	str.w	r3, [r8, #4]
 800a34a:	462c      	mov	r4, r5
 800a34c:	e014      	b.n	800a378 <_swiopen+0xa8>
 800a34e:	4620      	mov	r0, r4
 800a350:	f7ff fe8e 	bl	800a070 <error>
 800a354:	4604      	mov	r4, r0
 800a356:	e00f      	b.n	800a378 <_swiopen+0xa8>
 800a358:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800a35c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a360:	46e9      	mov	r9, sp
 800a362:	d1cb      	bne.n	800a2fc <_swiopen+0x2c>
 800a364:	4649      	mov	r1, r9
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff ff95 	bl	800a296 <_stat>
 800a36c:	3001      	adds	r0, #1
 800a36e:	d0c5      	beq.n	800a2fc <_swiopen+0x2c>
 800a370:	f000 f906 	bl	800a580 <__errno>
 800a374:	2311      	movs	r3, #17
 800a376:	6003      	str	r3, [r0, #0]
 800a378:	4620      	mov	r0, r4
 800a37a:	b017      	add	sp, #92	; 0x5c
 800a37c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a380:	200050f4 	.word	0x200050f4

0800a384 <_get_semihosting_exts>:
 800a384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a388:	4606      	mov	r6, r0
 800a38a:	460f      	mov	r7, r1
 800a38c:	482a      	ldr	r0, [pc, #168]	; (800a438 <_get_semihosting_exts+0xb4>)
 800a38e:	2100      	movs	r1, #0
 800a390:	4615      	mov	r5, r2
 800a392:	f7ff ff9d 	bl	800a2d0 <_swiopen>
 800a396:	462a      	mov	r2, r5
 800a398:	4604      	mov	r4, r0
 800a39a:	2100      	movs	r1, #0
 800a39c:	4630      	mov	r0, r6
 800a39e:	f000 fa20 	bl	800a7e2 <memset>
 800a3a2:	1c63      	adds	r3, r4, #1
 800a3a4:	d016      	beq.n	800a3d4 <_get_semihosting_exts+0x50>
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f7ff fe48 	bl	800a03c <findslot>
 800a3ac:	f04f 090c 	mov.w	r9, #12
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	4648      	mov	r0, r9
 800a3b4:	4641      	mov	r1, r8
 800a3b6:	beab      	bkpt	0x00ab
 800a3b8:	4680      	mov	r8, r0
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f7ff fe66 	bl	800a08c <checkerror>
 800a3c0:	2803      	cmp	r0, #3
 800a3c2:	dd02      	ble.n	800a3ca <_get_semihosting_exts+0x46>
 800a3c4:	1ec3      	subs	r3, r0, #3
 800a3c6:	42ab      	cmp	r3, r5
 800a3c8:	dc08      	bgt.n	800a3dc <_get_semihosting_exts+0x58>
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7ff ff0e 	bl	800a1ec <_close>
 800a3d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	b003      	add	sp, #12
 800a3d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3dc:	2204      	movs	r2, #4
 800a3de:	eb0d 0102 	add.w	r1, sp, r2
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f7ff fe67 	bl	800a0b6 <_read>
 800a3e8:	2803      	cmp	r0, #3
 800a3ea:	ddee      	ble.n	800a3ca <_get_semihosting_exts+0x46>
 800a3ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a3f0:	2b53      	cmp	r3, #83	; 0x53
 800a3f2:	d1ea      	bne.n	800a3ca <_get_semihosting_exts+0x46>
 800a3f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a3f8:	2b48      	cmp	r3, #72	; 0x48
 800a3fa:	d1e6      	bne.n	800a3ca <_get_semihosting_exts+0x46>
 800a3fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a400:	2b46      	cmp	r3, #70	; 0x46
 800a402:	d1e2      	bne.n	800a3ca <_get_semihosting_exts+0x46>
 800a404:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a408:	2b42      	cmp	r3, #66	; 0x42
 800a40a:	d1de      	bne.n	800a3ca <_get_semihosting_exts+0x46>
 800a40c:	2201      	movs	r2, #1
 800a40e:	4639      	mov	r1, r7
 800a410:	4620      	mov	r0, r4
 800a412:	f7ff fe6c 	bl	800a0ee <_swilseek>
 800a416:	2800      	cmp	r0, #0
 800a418:	dbd7      	blt.n	800a3ca <_get_semihosting_exts+0x46>
 800a41a:	462a      	mov	r2, r5
 800a41c:	4631      	mov	r1, r6
 800a41e:	4620      	mov	r0, r4
 800a420:	f7ff fe49 	bl	800a0b6 <_read>
 800a424:	4605      	mov	r5, r0
 800a426:	4620      	mov	r0, r4
 800a428:	f7ff fee0 	bl	800a1ec <_close>
 800a42c:	4628      	mov	r0, r5
 800a42e:	f7ff fe2d 	bl	800a08c <checkerror>
 800a432:	4604      	mov	r4, r0
 800a434:	e7ce      	b.n	800a3d4 <_get_semihosting_exts+0x50>
 800a436:	bf00      	nop
 800a438:	0800b874 	.word	0x0800b874

0800a43c <initialise_semihosting_exts>:
 800a43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a43e:	4d0a      	ldr	r5, [pc, #40]	; (800a468 <initialise_semihosting_exts+0x2c>)
 800a440:	4c0a      	ldr	r4, [pc, #40]	; (800a46c <initialise_semihosting_exts+0x30>)
 800a442:	2100      	movs	r1, #0
 800a444:	2201      	movs	r2, #1
 800a446:	a801      	add	r0, sp, #4
 800a448:	6029      	str	r1, [r5, #0]
 800a44a:	6022      	str	r2, [r4, #0]
 800a44c:	f7ff ff9a 	bl	800a384 <_get_semihosting_exts>
 800a450:	2800      	cmp	r0, #0
 800a452:	dd07      	ble.n	800a464 <initialise_semihosting_exts+0x28>
 800a454:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a458:	f003 0201 	and.w	r2, r3, #1
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	602a      	str	r2, [r5, #0]
 800a462:	6023      	str	r3, [r4, #0]
 800a464:	b003      	add	sp, #12
 800a466:	bd30      	pop	{r4, r5, pc}
 800a468:	20000014 	.word	0x20000014
 800a46c:	20000018 	.word	0x20000018

0800a470 <_has_ext_stdout_stderr>:
 800a470:	b510      	push	{r4, lr}
 800a472:	4c04      	ldr	r4, [pc, #16]	; (800a484 <_has_ext_stdout_stderr+0x14>)
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	da01      	bge.n	800a47e <_has_ext_stdout_stderr+0xe>
 800a47a:	f7ff ffdf 	bl	800a43c <initialise_semihosting_exts>
 800a47e:	6820      	ldr	r0, [r4, #0]
 800a480:	bd10      	pop	{r4, pc}
 800a482:	bf00      	nop
 800a484:	20000018 	.word	0x20000018

0800a488 <initialise_monitor_handles>:
 800a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	b085      	sub	sp, #20
 800a48e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a540 <initialise_monitor_handles+0xb8>
 800a492:	f8cd 9004 	str.w	r9, [sp, #4]
 800a496:	2303      	movs	r3, #3
 800a498:	2400      	movs	r4, #0
 800a49a:	9303      	str	r3, [sp, #12]
 800a49c:	af01      	add	r7, sp, #4
 800a49e:	9402      	str	r4, [sp, #8]
 800a4a0:	2501      	movs	r5, #1
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	4639      	mov	r1, r7
 800a4a6:	beab      	bkpt	0x00ab
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800a544 <initialise_monitor_handles+0xbc>
 800a4ae:	4623      	mov	r3, r4
 800a4b0:	4c20      	ldr	r4, [pc, #128]	; (800a534 <initialise_monitor_handles+0xac>)
 800a4b2:	f8c8 5000 	str.w	r5, [r8]
 800a4b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4ba:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	2b14      	cmp	r3, #20
 800a4c2:	d1fa      	bne.n	800a4ba <initialise_monitor_handles+0x32>
 800a4c4:	f7ff ffd4 	bl	800a470 <_has_ext_stdout_stderr>
 800a4c8:	4d1b      	ldr	r5, [pc, #108]	; (800a538 <initialise_monitor_handles+0xb0>)
 800a4ca:	b1d0      	cbz	r0, 800a502 <initialise_monitor_handles+0x7a>
 800a4cc:	f04f 0a03 	mov.w	sl, #3
 800a4d0:	2304      	movs	r3, #4
 800a4d2:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4d6:	2601      	movs	r6, #1
 800a4d8:	f8cd a00c 	str.w	sl, [sp, #12]
 800a4dc:	9302      	str	r3, [sp, #8]
 800a4de:	4630      	mov	r0, r6
 800a4e0:	4639      	mov	r1, r7
 800a4e2:	beab      	bkpt	0x00ab
 800a4e4:	4683      	mov	fp, r0
 800a4e6:	4b15      	ldr	r3, [pc, #84]	; (800a53c <initialise_monitor_handles+0xb4>)
 800a4e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4ec:	f8c3 b000 	str.w	fp, [r3]
 800a4f0:	2308      	movs	r3, #8
 800a4f2:	f8cd a00c 	str.w	sl, [sp, #12]
 800a4f6:	9302      	str	r3, [sp, #8]
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	beab      	bkpt	0x00ab
 800a4fe:	4606      	mov	r6, r0
 800a500:	602e      	str	r6, [r5, #0]
 800a502:	682b      	ldr	r3, [r5, #0]
 800a504:	3301      	adds	r3, #1
 800a506:	bf02      	ittt	eq
 800a508:	4b0c      	ldreq	r3, [pc, #48]	; (800a53c <initialise_monitor_handles+0xb4>)
 800a50a:	681b      	ldreq	r3, [r3, #0]
 800a50c:	602b      	streq	r3, [r5, #0]
 800a50e:	2600      	movs	r6, #0
 800a510:	f8d8 3000 	ldr.w	r3, [r8]
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	6066      	str	r6, [r4, #4]
 800a518:	f7ff ffaa 	bl	800a470 <_has_ext_stdout_stderr>
 800a51c:	b130      	cbz	r0, 800a52c <initialise_monitor_handles+0xa4>
 800a51e:	4b07      	ldr	r3, [pc, #28]	; (800a53c <initialise_monitor_handles+0xb4>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800a526:	682b      	ldr	r3, [r5, #0]
 800a528:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800a52c:	b005      	add	sp, #20
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	bf00      	nop
 800a534:	200050f4 	.word	0x200050f4
 800a538:	200050e8 	.word	0x200050e8
 800a53c:	200050f0 	.word	0x200050f0
 800a540:	0800b88a 	.word	0x0800b88a
 800a544:	200050ec 	.word	0x200050ec

0800a548 <_isatty>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	f7ff fd77 	bl	800a03c <findslot>
 800a54e:	2509      	movs	r5, #9
 800a550:	4604      	mov	r4, r0
 800a552:	b920      	cbnz	r0, 800a55e <_isatty+0x16>
 800a554:	f000 f814 	bl	800a580 <__errno>
 800a558:	6005      	str	r5, [r0, #0]
 800a55a:	4620      	mov	r0, r4
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	4628      	mov	r0, r5
 800a560:	4621      	mov	r1, r4
 800a562:	beab      	bkpt	0x00ab
 800a564:	4604      	mov	r4, r0
 800a566:	2c01      	cmp	r4, #1
 800a568:	d0f7      	beq.n	800a55a <_isatty+0x12>
 800a56a:	f000 f809 	bl	800a580 <__errno>
 800a56e:	2400      	movs	r4, #0
 800a570:	4605      	mov	r5, r0
 800a572:	2613      	movs	r6, #19
 800a574:	4630      	mov	r0, r6
 800a576:	4621      	mov	r1, r4
 800a578:	beab      	bkpt	0x00ab
 800a57a:	4606      	mov	r6, r0
 800a57c:	602e      	str	r6, [r5, #0]
 800a57e:	e7ec      	b.n	800a55a <_isatty+0x12>

0800a580 <__errno>:
 800a580:	4b01      	ldr	r3, [pc, #4]	; (800a588 <__errno+0x8>)
 800a582:	6818      	ldr	r0, [r3, #0]
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	2000001c 	.word	0x2000001c

0800a58c <std>:
 800a58c:	2300      	movs	r3, #0
 800a58e:	b510      	push	{r4, lr}
 800a590:	4604      	mov	r4, r0
 800a592:	e9c0 3300 	strd	r3, r3, [r0]
 800a596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a59a:	6083      	str	r3, [r0, #8]
 800a59c:	8181      	strh	r1, [r0, #12]
 800a59e:	6643      	str	r3, [r0, #100]	; 0x64
 800a5a0:	81c2      	strh	r2, [r0, #14]
 800a5a2:	6183      	str	r3, [r0, #24]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	2208      	movs	r2, #8
 800a5a8:	305c      	adds	r0, #92	; 0x5c
 800a5aa:	f000 f91a 	bl	800a7e2 <memset>
 800a5ae:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <std+0x38>)
 800a5b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5b2:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <std+0x3c>)
 800a5b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5b6:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <std+0x40>)
 800a5b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5ba:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <std+0x44>)
 800a5bc:	6224      	str	r4, [r4, #32]
 800a5be:	6323      	str	r3, [r4, #48]	; 0x30
 800a5c0:	bd10      	pop	{r4, pc}
 800a5c2:	bf00      	nop
 800a5c4:	0800ab2d 	.word	0x0800ab2d
 800a5c8:	0800ab4f 	.word	0x0800ab4f
 800a5cc:	0800ab87 	.word	0x0800ab87
 800a5d0:	0800abab 	.word	0x0800abab

0800a5d4 <_cleanup_r>:
 800a5d4:	4901      	ldr	r1, [pc, #4]	; (800a5dc <_cleanup_r+0x8>)
 800a5d6:	f000 b8af 	b.w	800a738 <_fwalk_reent>
 800a5da:	bf00      	nop
 800a5dc:	0800ae85 	.word	0x0800ae85

0800a5e0 <__sfmoreglue>:
 800a5e0:	b570      	push	{r4, r5, r6, lr}
 800a5e2:	2268      	movs	r2, #104	; 0x68
 800a5e4:	1e4d      	subs	r5, r1, #1
 800a5e6:	4355      	muls	r5, r2
 800a5e8:	460e      	mov	r6, r1
 800a5ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5ee:	f000 f921 	bl	800a834 <_malloc_r>
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	b140      	cbz	r0, 800a608 <__sfmoreglue+0x28>
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	e9c0 1600 	strd	r1, r6, [r0]
 800a5fc:	300c      	adds	r0, #12
 800a5fe:	60a0      	str	r0, [r4, #8]
 800a600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a604:	f000 f8ed 	bl	800a7e2 <memset>
 800a608:	4620      	mov	r0, r4
 800a60a:	bd70      	pop	{r4, r5, r6, pc}

0800a60c <__sfp_lock_acquire>:
 800a60c:	4801      	ldr	r0, [pc, #4]	; (800a614 <__sfp_lock_acquire+0x8>)
 800a60e:	f000 b8d8 	b.w	800a7c2 <__retarget_lock_acquire_recursive>
 800a612:	bf00      	nop
 800a614:	20005195 	.word	0x20005195

0800a618 <__sfp_lock_release>:
 800a618:	4801      	ldr	r0, [pc, #4]	; (800a620 <__sfp_lock_release+0x8>)
 800a61a:	f000 b8d3 	b.w	800a7c4 <__retarget_lock_release_recursive>
 800a61e:	bf00      	nop
 800a620:	20005195 	.word	0x20005195

0800a624 <__sinit_lock_acquire>:
 800a624:	4801      	ldr	r0, [pc, #4]	; (800a62c <__sinit_lock_acquire+0x8>)
 800a626:	f000 b8cc 	b.w	800a7c2 <__retarget_lock_acquire_recursive>
 800a62a:	bf00      	nop
 800a62c:	20005196 	.word	0x20005196

0800a630 <__sinit_lock_release>:
 800a630:	4801      	ldr	r0, [pc, #4]	; (800a638 <__sinit_lock_release+0x8>)
 800a632:	f000 b8c7 	b.w	800a7c4 <__retarget_lock_release_recursive>
 800a636:	bf00      	nop
 800a638:	20005196 	.word	0x20005196

0800a63c <__sinit>:
 800a63c:	b510      	push	{r4, lr}
 800a63e:	4604      	mov	r4, r0
 800a640:	f7ff fff0 	bl	800a624 <__sinit_lock_acquire>
 800a644:	69a3      	ldr	r3, [r4, #24]
 800a646:	b11b      	cbz	r3, 800a650 <__sinit+0x14>
 800a648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a64c:	f7ff bff0 	b.w	800a630 <__sinit_lock_release>
 800a650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a654:	6523      	str	r3, [r4, #80]	; 0x50
 800a656:	4b13      	ldr	r3, [pc, #76]	; (800a6a4 <__sinit+0x68>)
 800a658:	4a13      	ldr	r2, [pc, #76]	; (800a6a8 <__sinit+0x6c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a65e:	42a3      	cmp	r3, r4
 800a660:	bf04      	itt	eq
 800a662:	2301      	moveq	r3, #1
 800a664:	61a3      	streq	r3, [r4, #24]
 800a666:	4620      	mov	r0, r4
 800a668:	f000 f820 	bl	800a6ac <__sfp>
 800a66c:	6060      	str	r0, [r4, #4]
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 f81c 	bl	800a6ac <__sfp>
 800a674:	60a0      	str	r0, [r4, #8]
 800a676:	4620      	mov	r0, r4
 800a678:	f000 f818 	bl	800a6ac <__sfp>
 800a67c:	2200      	movs	r2, #0
 800a67e:	60e0      	str	r0, [r4, #12]
 800a680:	2104      	movs	r1, #4
 800a682:	6860      	ldr	r0, [r4, #4]
 800a684:	f7ff ff82 	bl	800a58c <std>
 800a688:	68a0      	ldr	r0, [r4, #8]
 800a68a:	2201      	movs	r2, #1
 800a68c:	2109      	movs	r1, #9
 800a68e:	f7ff ff7d 	bl	800a58c <std>
 800a692:	68e0      	ldr	r0, [r4, #12]
 800a694:	2202      	movs	r2, #2
 800a696:	2112      	movs	r1, #18
 800a698:	f7ff ff78 	bl	800a58c <std>
 800a69c:	2301      	movs	r3, #1
 800a69e:	61a3      	str	r3, [r4, #24]
 800a6a0:	e7d2      	b.n	800a648 <__sinit+0xc>
 800a6a2:	bf00      	nop
 800a6a4:	0800b8f0 	.word	0x0800b8f0
 800a6a8:	0800a5d5 	.word	0x0800a5d5

0800a6ac <__sfp>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	4607      	mov	r7, r0
 800a6b0:	f7ff ffac 	bl	800a60c <__sfp_lock_acquire>
 800a6b4:	4b1e      	ldr	r3, [pc, #120]	; (800a730 <__sfp+0x84>)
 800a6b6:	681e      	ldr	r6, [r3, #0]
 800a6b8:	69b3      	ldr	r3, [r6, #24]
 800a6ba:	b913      	cbnz	r3, 800a6c2 <__sfp+0x16>
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7ff ffbd 	bl	800a63c <__sinit>
 800a6c2:	3648      	adds	r6, #72	; 0x48
 800a6c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	d503      	bpl.n	800a6d4 <__sfp+0x28>
 800a6cc:	6833      	ldr	r3, [r6, #0]
 800a6ce:	b30b      	cbz	r3, 800a714 <__sfp+0x68>
 800a6d0:	6836      	ldr	r6, [r6, #0]
 800a6d2:	e7f7      	b.n	800a6c4 <__sfp+0x18>
 800a6d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6d8:	b9d5      	cbnz	r5, 800a710 <__sfp+0x64>
 800a6da:	4b16      	ldr	r3, [pc, #88]	; (800a734 <__sfp+0x88>)
 800a6dc:	60e3      	str	r3, [r4, #12]
 800a6de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6e2:	6665      	str	r5, [r4, #100]	; 0x64
 800a6e4:	f000 f86c 	bl	800a7c0 <__retarget_lock_init_recursive>
 800a6e8:	f7ff ff96 	bl	800a618 <__sfp_lock_release>
 800a6ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6f4:	6025      	str	r5, [r4, #0]
 800a6f6:	61a5      	str	r5, [r4, #24]
 800a6f8:	2208      	movs	r2, #8
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a700:	f000 f86f 	bl	800a7e2 <memset>
 800a704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a70c:	4620      	mov	r0, r4
 800a70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a710:	3468      	adds	r4, #104	; 0x68
 800a712:	e7d9      	b.n	800a6c8 <__sfp+0x1c>
 800a714:	2104      	movs	r1, #4
 800a716:	4638      	mov	r0, r7
 800a718:	f7ff ff62 	bl	800a5e0 <__sfmoreglue>
 800a71c:	4604      	mov	r4, r0
 800a71e:	6030      	str	r0, [r6, #0]
 800a720:	2800      	cmp	r0, #0
 800a722:	d1d5      	bne.n	800a6d0 <__sfp+0x24>
 800a724:	f7ff ff78 	bl	800a618 <__sfp_lock_release>
 800a728:	230c      	movs	r3, #12
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	e7ee      	b.n	800a70c <__sfp+0x60>
 800a72e:	bf00      	nop
 800a730:	0800b8f0 	.word	0x0800b8f0
 800a734:	ffff0001 	.word	0xffff0001

0800a738 <_fwalk_reent>:
 800a738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a73c:	4606      	mov	r6, r0
 800a73e:	4688      	mov	r8, r1
 800a740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a744:	2700      	movs	r7, #0
 800a746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a74a:	f1b9 0901 	subs.w	r9, r9, #1
 800a74e:	d505      	bpl.n	800a75c <_fwalk_reent+0x24>
 800a750:	6824      	ldr	r4, [r4, #0]
 800a752:	2c00      	cmp	r4, #0
 800a754:	d1f7      	bne.n	800a746 <_fwalk_reent+0xe>
 800a756:	4638      	mov	r0, r7
 800a758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a75c:	89ab      	ldrh	r3, [r5, #12]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d907      	bls.n	800a772 <_fwalk_reent+0x3a>
 800a762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a766:	3301      	adds	r3, #1
 800a768:	d003      	beq.n	800a772 <_fwalk_reent+0x3a>
 800a76a:	4629      	mov	r1, r5
 800a76c:	4630      	mov	r0, r6
 800a76e:	47c0      	blx	r8
 800a770:	4307      	orrs	r7, r0
 800a772:	3568      	adds	r5, #104	; 0x68
 800a774:	e7e9      	b.n	800a74a <_fwalk_reent+0x12>
	...

0800a778 <__libc_init_array>:
 800a778:	b570      	push	{r4, r5, r6, lr}
 800a77a:	4d0d      	ldr	r5, [pc, #52]	; (800a7b0 <__libc_init_array+0x38>)
 800a77c:	4c0d      	ldr	r4, [pc, #52]	; (800a7b4 <__libc_init_array+0x3c>)
 800a77e:	1b64      	subs	r4, r4, r5
 800a780:	10a4      	asrs	r4, r4, #2
 800a782:	2600      	movs	r6, #0
 800a784:	42a6      	cmp	r6, r4
 800a786:	d109      	bne.n	800a79c <__libc_init_array+0x24>
 800a788:	4d0b      	ldr	r5, [pc, #44]	; (800a7b8 <__libc_init_array+0x40>)
 800a78a:	4c0c      	ldr	r4, [pc, #48]	; (800a7bc <__libc_init_array+0x44>)
 800a78c:	f000 ffa8 	bl	800b6e0 <_init>
 800a790:	1b64      	subs	r4, r4, r5
 800a792:	10a4      	asrs	r4, r4, #2
 800a794:	2600      	movs	r6, #0
 800a796:	42a6      	cmp	r6, r4
 800a798:	d105      	bne.n	800a7a6 <__libc_init_array+0x2e>
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a0:	4798      	blx	r3
 800a7a2:	3601      	adds	r6, #1
 800a7a4:	e7ee      	b.n	800a784 <__libc_init_array+0xc>
 800a7a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7aa:	4798      	blx	r3
 800a7ac:	3601      	adds	r6, #1
 800a7ae:	e7f2      	b.n	800a796 <__libc_init_array+0x1e>
 800a7b0:	0800b930 	.word	0x0800b930
 800a7b4:	0800b930 	.word	0x0800b930
 800a7b8:	0800b930 	.word	0x0800b930
 800a7bc:	0800b934 	.word	0x0800b934

0800a7c0 <__retarget_lock_init_recursive>:
 800a7c0:	4770      	bx	lr

0800a7c2 <__retarget_lock_acquire_recursive>:
 800a7c2:	4770      	bx	lr

0800a7c4 <__retarget_lock_release_recursive>:
 800a7c4:	4770      	bx	lr

0800a7c6 <memcpy>:
 800a7c6:	440a      	add	r2, r1
 800a7c8:	4291      	cmp	r1, r2
 800a7ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a7ce:	d100      	bne.n	800a7d2 <memcpy+0xc>
 800a7d0:	4770      	bx	lr
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7dc:	4291      	cmp	r1, r2
 800a7de:	d1f9      	bne.n	800a7d4 <memcpy+0xe>
 800a7e0:	bd10      	pop	{r4, pc}

0800a7e2 <memset>:
 800a7e2:	4402      	add	r2, r0
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d100      	bne.n	800a7ec <memset+0xa>
 800a7ea:	4770      	bx	lr
 800a7ec:	f803 1b01 	strb.w	r1, [r3], #1
 800a7f0:	e7f9      	b.n	800a7e6 <memset+0x4>
	...

0800a7f4 <sbrk_aligned>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	4e0e      	ldr	r6, [pc, #56]	; (800a830 <sbrk_aligned+0x3c>)
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	6831      	ldr	r1, [r6, #0]
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	b911      	cbnz	r1, 800a806 <sbrk_aligned+0x12>
 800a800:	f000 f984 	bl	800ab0c <_sbrk_r>
 800a804:	6030      	str	r0, [r6, #0]
 800a806:	4621      	mov	r1, r4
 800a808:	4628      	mov	r0, r5
 800a80a:	f000 f97f 	bl	800ab0c <_sbrk_r>
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	d00a      	beq.n	800a828 <sbrk_aligned+0x34>
 800a812:	1cc4      	adds	r4, r0, #3
 800a814:	f024 0403 	bic.w	r4, r4, #3
 800a818:	42a0      	cmp	r0, r4
 800a81a:	d007      	beq.n	800a82c <sbrk_aligned+0x38>
 800a81c:	1a21      	subs	r1, r4, r0
 800a81e:	4628      	mov	r0, r5
 800a820:	f000 f974 	bl	800ab0c <_sbrk_r>
 800a824:	3001      	adds	r0, #1
 800a826:	d101      	bne.n	800a82c <sbrk_aligned+0x38>
 800a828:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a82c:	4620      	mov	r0, r4
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	2000519c 	.word	0x2000519c

0800a834 <_malloc_r>:
 800a834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a838:	1ccd      	adds	r5, r1, #3
 800a83a:	f025 0503 	bic.w	r5, r5, #3
 800a83e:	3508      	adds	r5, #8
 800a840:	2d0c      	cmp	r5, #12
 800a842:	bf38      	it	cc
 800a844:	250c      	movcc	r5, #12
 800a846:	2d00      	cmp	r5, #0
 800a848:	4607      	mov	r7, r0
 800a84a:	db01      	blt.n	800a850 <_malloc_r+0x1c>
 800a84c:	42a9      	cmp	r1, r5
 800a84e:	d905      	bls.n	800a85c <_malloc_r+0x28>
 800a850:	230c      	movs	r3, #12
 800a852:	603b      	str	r3, [r7, #0]
 800a854:	2600      	movs	r6, #0
 800a856:	4630      	mov	r0, r6
 800a858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a85c:	4e2e      	ldr	r6, [pc, #184]	; (800a918 <_malloc_r+0xe4>)
 800a85e:	f000 fbc5 	bl	800afec <__malloc_lock>
 800a862:	6833      	ldr	r3, [r6, #0]
 800a864:	461c      	mov	r4, r3
 800a866:	bb34      	cbnz	r4, 800a8b6 <_malloc_r+0x82>
 800a868:	4629      	mov	r1, r5
 800a86a:	4638      	mov	r0, r7
 800a86c:	f7ff ffc2 	bl	800a7f4 <sbrk_aligned>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	4604      	mov	r4, r0
 800a874:	d14d      	bne.n	800a912 <_malloc_r+0xde>
 800a876:	6834      	ldr	r4, [r6, #0]
 800a878:	4626      	mov	r6, r4
 800a87a:	2e00      	cmp	r6, #0
 800a87c:	d140      	bne.n	800a900 <_malloc_r+0xcc>
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	4631      	mov	r1, r6
 800a882:	4638      	mov	r0, r7
 800a884:	eb04 0803 	add.w	r8, r4, r3
 800a888:	f000 f940 	bl	800ab0c <_sbrk_r>
 800a88c:	4580      	cmp	r8, r0
 800a88e:	d13a      	bne.n	800a906 <_malloc_r+0xd2>
 800a890:	6821      	ldr	r1, [r4, #0]
 800a892:	3503      	adds	r5, #3
 800a894:	1a6d      	subs	r5, r5, r1
 800a896:	f025 0503 	bic.w	r5, r5, #3
 800a89a:	3508      	adds	r5, #8
 800a89c:	2d0c      	cmp	r5, #12
 800a89e:	bf38      	it	cc
 800a8a0:	250c      	movcc	r5, #12
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	f7ff ffa5 	bl	800a7f4 <sbrk_aligned>
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d02b      	beq.n	800a906 <_malloc_r+0xd2>
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	442b      	add	r3, r5
 800a8b2:	6023      	str	r3, [r4, #0]
 800a8b4:	e00e      	b.n	800a8d4 <_malloc_r+0xa0>
 800a8b6:	6822      	ldr	r2, [r4, #0]
 800a8b8:	1b52      	subs	r2, r2, r5
 800a8ba:	d41e      	bmi.n	800a8fa <_malloc_r+0xc6>
 800a8bc:	2a0b      	cmp	r2, #11
 800a8be:	d916      	bls.n	800a8ee <_malloc_r+0xba>
 800a8c0:	1961      	adds	r1, r4, r5
 800a8c2:	42a3      	cmp	r3, r4
 800a8c4:	6025      	str	r5, [r4, #0]
 800a8c6:	bf18      	it	ne
 800a8c8:	6059      	strne	r1, [r3, #4]
 800a8ca:	6863      	ldr	r3, [r4, #4]
 800a8cc:	bf08      	it	eq
 800a8ce:	6031      	streq	r1, [r6, #0]
 800a8d0:	5162      	str	r2, [r4, r5]
 800a8d2:	604b      	str	r3, [r1, #4]
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f104 060b 	add.w	r6, r4, #11
 800a8da:	f000 fb8d 	bl	800aff8 <__malloc_unlock>
 800a8de:	f026 0607 	bic.w	r6, r6, #7
 800a8e2:	1d23      	adds	r3, r4, #4
 800a8e4:	1af2      	subs	r2, r6, r3
 800a8e6:	d0b6      	beq.n	800a856 <_malloc_r+0x22>
 800a8e8:	1b9b      	subs	r3, r3, r6
 800a8ea:	50a3      	str	r3, [r4, r2]
 800a8ec:	e7b3      	b.n	800a856 <_malloc_r+0x22>
 800a8ee:	6862      	ldr	r2, [r4, #4]
 800a8f0:	42a3      	cmp	r3, r4
 800a8f2:	bf0c      	ite	eq
 800a8f4:	6032      	streq	r2, [r6, #0]
 800a8f6:	605a      	strne	r2, [r3, #4]
 800a8f8:	e7ec      	b.n	800a8d4 <_malloc_r+0xa0>
 800a8fa:	4623      	mov	r3, r4
 800a8fc:	6864      	ldr	r4, [r4, #4]
 800a8fe:	e7b2      	b.n	800a866 <_malloc_r+0x32>
 800a900:	4634      	mov	r4, r6
 800a902:	6876      	ldr	r6, [r6, #4]
 800a904:	e7b9      	b.n	800a87a <_malloc_r+0x46>
 800a906:	230c      	movs	r3, #12
 800a908:	603b      	str	r3, [r7, #0]
 800a90a:	4638      	mov	r0, r7
 800a90c:	f000 fb74 	bl	800aff8 <__malloc_unlock>
 800a910:	e7a1      	b.n	800a856 <_malloc_r+0x22>
 800a912:	6025      	str	r5, [r4, #0]
 800a914:	e7de      	b.n	800a8d4 <_malloc_r+0xa0>
 800a916:	bf00      	nop
 800a918:	20005198 	.word	0x20005198

0800a91c <iprintf>:
 800a91c:	b40f      	push	{r0, r1, r2, r3}
 800a91e:	4b0a      	ldr	r3, [pc, #40]	; (800a948 <iprintf+0x2c>)
 800a920:	b513      	push	{r0, r1, r4, lr}
 800a922:	681c      	ldr	r4, [r3, #0]
 800a924:	b124      	cbz	r4, 800a930 <iprintf+0x14>
 800a926:	69a3      	ldr	r3, [r4, #24]
 800a928:	b913      	cbnz	r3, 800a930 <iprintf+0x14>
 800a92a:	4620      	mov	r0, r4
 800a92c:	f7ff fe86 	bl	800a63c <__sinit>
 800a930:	ab05      	add	r3, sp, #20
 800a932:	9a04      	ldr	r2, [sp, #16]
 800a934:	68a1      	ldr	r1, [r4, #8]
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 fbd9 	bl	800b0f0 <_vfiprintf_r>
 800a93e:	b002      	add	sp, #8
 800a940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a944:	b004      	add	sp, #16
 800a946:	4770      	bx	lr
 800a948:	2000001c 	.word	0x2000001c

0800a94c <_puts_r>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	460e      	mov	r6, r1
 800a950:	4605      	mov	r5, r0
 800a952:	b118      	cbz	r0, 800a95c <_puts_r+0x10>
 800a954:	6983      	ldr	r3, [r0, #24]
 800a956:	b90b      	cbnz	r3, 800a95c <_puts_r+0x10>
 800a958:	f7ff fe70 	bl	800a63c <__sinit>
 800a95c:	69ab      	ldr	r3, [r5, #24]
 800a95e:	68ac      	ldr	r4, [r5, #8]
 800a960:	b913      	cbnz	r3, 800a968 <_puts_r+0x1c>
 800a962:	4628      	mov	r0, r5
 800a964:	f7ff fe6a 	bl	800a63c <__sinit>
 800a968:	4b2c      	ldr	r3, [pc, #176]	; (800aa1c <_puts_r+0xd0>)
 800a96a:	429c      	cmp	r4, r3
 800a96c:	d120      	bne.n	800a9b0 <_puts_r+0x64>
 800a96e:	686c      	ldr	r4, [r5, #4]
 800a970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a972:	07db      	lsls	r3, r3, #31
 800a974:	d405      	bmi.n	800a982 <_puts_r+0x36>
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	0598      	lsls	r0, r3, #22
 800a97a:	d402      	bmi.n	800a982 <_puts_r+0x36>
 800a97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a97e:	f7ff ff20 	bl	800a7c2 <__retarget_lock_acquire_recursive>
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	0719      	lsls	r1, r3, #28
 800a986:	d51d      	bpl.n	800a9c4 <_puts_r+0x78>
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	b1db      	cbz	r3, 800a9c4 <_puts_r+0x78>
 800a98c:	3e01      	subs	r6, #1
 800a98e:	68a3      	ldr	r3, [r4, #8]
 800a990:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a994:	3b01      	subs	r3, #1
 800a996:	60a3      	str	r3, [r4, #8]
 800a998:	bb39      	cbnz	r1, 800a9ea <_puts_r+0x9e>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	da38      	bge.n	800aa10 <_puts_r+0xc4>
 800a99e:	4622      	mov	r2, r4
 800a9a0:	210a      	movs	r1, #10
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f000 f906 	bl	800abb4 <__swbuf_r>
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d011      	beq.n	800a9d0 <_puts_r+0x84>
 800a9ac:	250a      	movs	r5, #10
 800a9ae:	e011      	b.n	800a9d4 <_puts_r+0x88>
 800a9b0:	4b1b      	ldr	r3, [pc, #108]	; (800aa20 <_puts_r+0xd4>)
 800a9b2:	429c      	cmp	r4, r3
 800a9b4:	d101      	bne.n	800a9ba <_puts_r+0x6e>
 800a9b6:	68ac      	ldr	r4, [r5, #8]
 800a9b8:	e7da      	b.n	800a970 <_puts_r+0x24>
 800a9ba:	4b1a      	ldr	r3, [pc, #104]	; (800aa24 <_puts_r+0xd8>)
 800a9bc:	429c      	cmp	r4, r3
 800a9be:	bf08      	it	eq
 800a9c0:	68ec      	ldreq	r4, [r5, #12]
 800a9c2:	e7d5      	b.n	800a970 <_puts_r+0x24>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f000 f958 	bl	800ac7c <__swsetup_r>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d0dd      	beq.n	800a98c <_puts_r+0x40>
 800a9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a9d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9d6:	07da      	lsls	r2, r3, #31
 800a9d8:	d405      	bmi.n	800a9e6 <_puts_r+0x9a>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	059b      	lsls	r3, r3, #22
 800a9de:	d402      	bmi.n	800a9e6 <_puts_r+0x9a>
 800a9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9e2:	f7ff feef 	bl	800a7c4 <__retarget_lock_release_recursive>
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	da04      	bge.n	800a9f8 <_puts_r+0xac>
 800a9ee:	69a2      	ldr	r2, [r4, #24]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	dc06      	bgt.n	800aa02 <_puts_r+0xb6>
 800a9f4:	290a      	cmp	r1, #10
 800a9f6:	d004      	beq.n	800aa02 <_puts_r+0xb6>
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	6022      	str	r2, [r4, #0]
 800a9fe:	7019      	strb	r1, [r3, #0]
 800aa00:	e7c5      	b.n	800a98e <_puts_r+0x42>
 800aa02:	4622      	mov	r2, r4
 800aa04:	4628      	mov	r0, r5
 800aa06:	f000 f8d5 	bl	800abb4 <__swbuf_r>
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d1bf      	bne.n	800a98e <_puts_r+0x42>
 800aa0e:	e7df      	b.n	800a9d0 <_puts_r+0x84>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	250a      	movs	r5, #10
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	6022      	str	r2, [r4, #0]
 800aa18:	701d      	strb	r5, [r3, #0]
 800aa1a:	e7db      	b.n	800a9d4 <_puts_r+0x88>
 800aa1c:	0800b8b0 	.word	0x0800b8b0
 800aa20:	0800b8d0 	.word	0x0800b8d0
 800aa24:	0800b890 	.word	0x0800b890

0800aa28 <puts>:
 800aa28:	4b02      	ldr	r3, [pc, #8]	; (800aa34 <puts+0xc>)
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	f7ff bf8d 	b.w	800a94c <_puts_r>
 800aa32:	bf00      	nop
 800aa34:	2000001c 	.word	0x2000001c

0800aa38 <cleanup_glue>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	6809      	ldr	r1, [r1, #0]
 800aa3e:	4605      	mov	r5, r0
 800aa40:	b109      	cbz	r1, 800aa46 <cleanup_glue+0xe>
 800aa42:	f7ff fff9 	bl	800aa38 <cleanup_glue>
 800aa46:	4621      	mov	r1, r4
 800aa48:	4628      	mov	r0, r5
 800aa4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa4e:	f000 bad9 	b.w	800b004 <_free_r>
	...

0800aa54 <_reclaim_reent>:
 800aa54:	4b2c      	ldr	r3, [pc, #176]	; (800ab08 <_reclaim_reent+0xb4>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4283      	cmp	r3, r0
 800aa5a:	b570      	push	{r4, r5, r6, lr}
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	d051      	beq.n	800ab04 <_reclaim_reent+0xb0>
 800aa60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa62:	b143      	cbz	r3, 800aa76 <_reclaim_reent+0x22>
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d14a      	bne.n	800ab00 <_reclaim_reent+0xac>
 800aa6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6c:	6819      	ldr	r1, [r3, #0]
 800aa6e:	b111      	cbz	r1, 800aa76 <_reclaim_reent+0x22>
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fac7 	bl	800b004 <_free_r>
 800aa76:	6961      	ldr	r1, [r4, #20]
 800aa78:	b111      	cbz	r1, 800aa80 <_reclaim_reent+0x2c>
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fac2 	bl	800b004 <_free_r>
 800aa80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aa82:	b111      	cbz	r1, 800aa8a <_reclaim_reent+0x36>
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 fabd 	bl	800b004 <_free_r>
 800aa8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa8c:	b111      	cbz	r1, 800aa94 <_reclaim_reent+0x40>
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 fab8 	bl	800b004 <_free_r>
 800aa94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aa96:	b111      	cbz	r1, 800aa9e <_reclaim_reent+0x4a>
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f000 fab3 	bl	800b004 <_free_r>
 800aa9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800aaa0:	b111      	cbz	r1, 800aaa8 <_reclaim_reent+0x54>
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 faae 	bl	800b004 <_free_r>
 800aaa8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800aaaa:	b111      	cbz	r1, 800aab2 <_reclaim_reent+0x5e>
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 faa9 	bl	800b004 <_free_r>
 800aab2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aab4:	b111      	cbz	r1, 800aabc <_reclaim_reent+0x68>
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 faa4 	bl	800b004 <_free_r>
 800aabc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aabe:	b111      	cbz	r1, 800aac6 <_reclaim_reent+0x72>
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 fa9f 	bl	800b004 <_free_r>
 800aac6:	69a3      	ldr	r3, [r4, #24]
 800aac8:	b1e3      	cbz	r3, 800ab04 <_reclaim_reent+0xb0>
 800aaca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aacc:	4620      	mov	r0, r4
 800aace:	4798      	blx	r3
 800aad0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aad2:	b1b9      	cbz	r1, 800ab04 <_reclaim_reent+0xb0>
 800aad4:	4620      	mov	r0, r4
 800aad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aada:	f7ff bfad 	b.w	800aa38 <cleanup_glue>
 800aade:	5949      	ldr	r1, [r1, r5]
 800aae0:	b941      	cbnz	r1, 800aaf4 <_reclaim_reent+0xa0>
 800aae2:	3504      	adds	r5, #4
 800aae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aae6:	2d80      	cmp	r5, #128	; 0x80
 800aae8:	68d9      	ldr	r1, [r3, #12]
 800aaea:	d1f8      	bne.n	800aade <_reclaim_reent+0x8a>
 800aaec:	4620      	mov	r0, r4
 800aaee:	f000 fa89 	bl	800b004 <_free_r>
 800aaf2:	e7ba      	b.n	800aa6a <_reclaim_reent+0x16>
 800aaf4:	680e      	ldr	r6, [r1, #0]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f000 fa84 	bl	800b004 <_free_r>
 800aafc:	4631      	mov	r1, r6
 800aafe:	e7ef      	b.n	800aae0 <_reclaim_reent+0x8c>
 800ab00:	2500      	movs	r5, #0
 800ab02:	e7ef      	b.n	800aae4 <_reclaim_reent+0x90>
 800ab04:	bd70      	pop	{r4, r5, r6, pc}
 800ab06:	bf00      	nop
 800ab08:	2000001c 	.word	0x2000001c

0800ab0c <_sbrk_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4d06      	ldr	r5, [pc, #24]	; (800ab28 <_sbrk_r+0x1c>)
 800ab10:	2300      	movs	r3, #0
 800ab12:	4604      	mov	r4, r0
 800ab14:	4608      	mov	r0, r1
 800ab16:	602b      	str	r3, [r5, #0]
 800ab18:	f7f7 fdb8 	bl	800268c <_sbrk>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_sbrk_r+0x1a>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_sbrk_r+0x1a>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	200051a0 	.word	0x200051a0

0800ab2c <__sread>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	460c      	mov	r4, r1
 800ab30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab34:	f000 fda0 	bl	800b678 <_read_r>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	bfab      	itete	ge
 800ab3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab3e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab40:	181b      	addge	r3, r3, r0
 800ab42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab46:	bfac      	ite	ge
 800ab48:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab4a:	81a3      	strhlt	r3, [r4, #12]
 800ab4c:	bd10      	pop	{r4, pc}

0800ab4e <__swrite>:
 800ab4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab52:	461f      	mov	r7, r3
 800ab54:	898b      	ldrh	r3, [r1, #12]
 800ab56:	05db      	lsls	r3, r3, #23
 800ab58:	4605      	mov	r5, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	4616      	mov	r6, r2
 800ab5e:	d505      	bpl.n	800ab6c <__swrite+0x1e>
 800ab60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab64:	2302      	movs	r3, #2
 800ab66:	2200      	movs	r2, #0
 800ab68:	f000 f9c8 	bl	800aefc <_lseek_r>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab76:	81a3      	strh	r3, [r4, #12]
 800ab78:	4632      	mov	r2, r6
 800ab7a:	463b      	mov	r3, r7
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab82:	f000 b869 	b.w	800ac58 <_write_r>

0800ab86 <__sseek>:
 800ab86:	b510      	push	{r4, lr}
 800ab88:	460c      	mov	r4, r1
 800ab8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab8e:	f000 f9b5 	bl	800aefc <_lseek_r>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	bf15      	itete	ne
 800ab98:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aba2:	81a3      	strheq	r3, [r4, #12]
 800aba4:	bf18      	it	ne
 800aba6:	81a3      	strhne	r3, [r4, #12]
 800aba8:	bd10      	pop	{r4, pc}

0800abaa <__sclose>:
 800abaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abae:	f000 b8d3 	b.w	800ad58 <_close_r>
	...

0800abb4 <__swbuf_r>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	460e      	mov	r6, r1
 800abb8:	4614      	mov	r4, r2
 800abba:	4605      	mov	r5, r0
 800abbc:	b118      	cbz	r0, 800abc6 <__swbuf_r+0x12>
 800abbe:	6983      	ldr	r3, [r0, #24]
 800abc0:	b90b      	cbnz	r3, 800abc6 <__swbuf_r+0x12>
 800abc2:	f7ff fd3b 	bl	800a63c <__sinit>
 800abc6:	4b21      	ldr	r3, [pc, #132]	; (800ac4c <__swbuf_r+0x98>)
 800abc8:	429c      	cmp	r4, r3
 800abca:	d12b      	bne.n	800ac24 <__swbuf_r+0x70>
 800abcc:	686c      	ldr	r4, [r5, #4]
 800abce:	69a3      	ldr	r3, [r4, #24]
 800abd0:	60a3      	str	r3, [r4, #8]
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	071a      	lsls	r2, r3, #28
 800abd6:	d52f      	bpl.n	800ac38 <__swbuf_r+0x84>
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	b36b      	cbz	r3, 800ac38 <__swbuf_r+0x84>
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	6820      	ldr	r0, [r4, #0]
 800abe0:	1ac0      	subs	r0, r0, r3
 800abe2:	6963      	ldr	r3, [r4, #20]
 800abe4:	b2f6      	uxtb	r6, r6
 800abe6:	4283      	cmp	r3, r0
 800abe8:	4637      	mov	r7, r6
 800abea:	dc04      	bgt.n	800abf6 <__swbuf_r+0x42>
 800abec:	4621      	mov	r1, r4
 800abee:	4628      	mov	r0, r5
 800abf0:	f000 f948 	bl	800ae84 <_fflush_r>
 800abf4:	bb30      	cbnz	r0, 800ac44 <__swbuf_r+0x90>
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	60a3      	str	r3, [r4, #8]
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	6022      	str	r2, [r4, #0]
 800ac02:	701e      	strb	r6, [r3, #0]
 800ac04:	6963      	ldr	r3, [r4, #20]
 800ac06:	3001      	adds	r0, #1
 800ac08:	4283      	cmp	r3, r0
 800ac0a:	d004      	beq.n	800ac16 <__swbuf_r+0x62>
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	07db      	lsls	r3, r3, #31
 800ac10:	d506      	bpl.n	800ac20 <__swbuf_r+0x6c>
 800ac12:	2e0a      	cmp	r6, #10
 800ac14:	d104      	bne.n	800ac20 <__swbuf_r+0x6c>
 800ac16:	4621      	mov	r1, r4
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f000 f933 	bl	800ae84 <_fflush_r>
 800ac1e:	b988      	cbnz	r0, 800ac44 <__swbuf_r+0x90>
 800ac20:	4638      	mov	r0, r7
 800ac22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac24:	4b0a      	ldr	r3, [pc, #40]	; (800ac50 <__swbuf_r+0x9c>)
 800ac26:	429c      	cmp	r4, r3
 800ac28:	d101      	bne.n	800ac2e <__swbuf_r+0x7a>
 800ac2a:	68ac      	ldr	r4, [r5, #8]
 800ac2c:	e7cf      	b.n	800abce <__swbuf_r+0x1a>
 800ac2e:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <__swbuf_r+0xa0>)
 800ac30:	429c      	cmp	r4, r3
 800ac32:	bf08      	it	eq
 800ac34:	68ec      	ldreq	r4, [r5, #12]
 800ac36:	e7ca      	b.n	800abce <__swbuf_r+0x1a>
 800ac38:	4621      	mov	r1, r4
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f000 f81e 	bl	800ac7c <__swsetup_r>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d0cb      	beq.n	800abdc <__swbuf_r+0x28>
 800ac44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac48:	e7ea      	b.n	800ac20 <__swbuf_r+0x6c>
 800ac4a:	bf00      	nop
 800ac4c:	0800b8b0 	.word	0x0800b8b0
 800ac50:	0800b8d0 	.word	0x0800b8d0
 800ac54:	0800b890 	.word	0x0800b890

0800ac58 <_write_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4d07      	ldr	r5, [pc, #28]	; (800ac78 <_write_r+0x20>)
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	4608      	mov	r0, r1
 800ac60:	4611      	mov	r1, r2
 800ac62:	2200      	movs	r2, #0
 800ac64:	602a      	str	r2, [r5, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	f7ff fa8f 	bl	800a18a <_write>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_write_r+0x1e>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_write_r+0x1e>
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	200051a0 	.word	0x200051a0

0800ac7c <__swsetup_r>:
 800ac7c:	4b32      	ldr	r3, [pc, #200]	; (800ad48 <__swsetup_r+0xcc>)
 800ac7e:	b570      	push	{r4, r5, r6, lr}
 800ac80:	681d      	ldr	r5, [r3, #0]
 800ac82:	4606      	mov	r6, r0
 800ac84:	460c      	mov	r4, r1
 800ac86:	b125      	cbz	r5, 800ac92 <__swsetup_r+0x16>
 800ac88:	69ab      	ldr	r3, [r5, #24]
 800ac8a:	b913      	cbnz	r3, 800ac92 <__swsetup_r+0x16>
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f7ff fcd5 	bl	800a63c <__sinit>
 800ac92:	4b2e      	ldr	r3, [pc, #184]	; (800ad4c <__swsetup_r+0xd0>)
 800ac94:	429c      	cmp	r4, r3
 800ac96:	d10f      	bne.n	800acb8 <__swsetup_r+0x3c>
 800ac98:	686c      	ldr	r4, [r5, #4]
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aca0:	0719      	lsls	r1, r3, #28
 800aca2:	d42c      	bmi.n	800acfe <__swsetup_r+0x82>
 800aca4:	06dd      	lsls	r5, r3, #27
 800aca6:	d411      	bmi.n	800accc <__swsetup_r+0x50>
 800aca8:	2309      	movs	r3, #9
 800acaa:	6033      	str	r3, [r6, #0]
 800acac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acb0:	81a3      	strh	r3, [r4, #12]
 800acb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acb6:	e03e      	b.n	800ad36 <__swsetup_r+0xba>
 800acb8:	4b25      	ldr	r3, [pc, #148]	; (800ad50 <__swsetup_r+0xd4>)
 800acba:	429c      	cmp	r4, r3
 800acbc:	d101      	bne.n	800acc2 <__swsetup_r+0x46>
 800acbe:	68ac      	ldr	r4, [r5, #8]
 800acc0:	e7eb      	b.n	800ac9a <__swsetup_r+0x1e>
 800acc2:	4b24      	ldr	r3, [pc, #144]	; (800ad54 <__swsetup_r+0xd8>)
 800acc4:	429c      	cmp	r4, r3
 800acc6:	bf08      	it	eq
 800acc8:	68ec      	ldreq	r4, [r5, #12]
 800acca:	e7e6      	b.n	800ac9a <__swsetup_r+0x1e>
 800accc:	0758      	lsls	r0, r3, #29
 800acce:	d512      	bpl.n	800acf6 <__swsetup_r+0x7a>
 800acd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acd2:	b141      	cbz	r1, 800ace6 <__swsetup_r+0x6a>
 800acd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acd8:	4299      	cmp	r1, r3
 800acda:	d002      	beq.n	800ace2 <__swsetup_r+0x66>
 800acdc:	4630      	mov	r0, r6
 800acde:	f000 f991 	bl	800b004 <_free_r>
 800ace2:	2300      	movs	r3, #0
 800ace4:	6363      	str	r3, [r4, #52]	; 0x34
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acec:	81a3      	strh	r3, [r4, #12]
 800acee:	2300      	movs	r3, #0
 800acf0:	6063      	str	r3, [r4, #4]
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	f043 0308 	orr.w	r3, r3, #8
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	b94b      	cbnz	r3, 800ad16 <__swsetup_r+0x9a>
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad0c:	d003      	beq.n	800ad16 <__swsetup_r+0x9a>
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4630      	mov	r0, r6
 800ad12:	f000 f92b 	bl	800af6c <__smakebuf_r>
 800ad16:	89a0      	ldrh	r0, [r4, #12]
 800ad18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad1c:	f010 0301 	ands.w	r3, r0, #1
 800ad20:	d00a      	beq.n	800ad38 <__swsetup_r+0xbc>
 800ad22:	2300      	movs	r3, #0
 800ad24:	60a3      	str	r3, [r4, #8]
 800ad26:	6963      	ldr	r3, [r4, #20]
 800ad28:	425b      	negs	r3, r3
 800ad2a:	61a3      	str	r3, [r4, #24]
 800ad2c:	6923      	ldr	r3, [r4, #16]
 800ad2e:	b943      	cbnz	r3, 800ad42 <__swsetup_r+0xc6>
 800ad30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad34:	d1ba      	bne.n	800acac <__swsetup_r+0x30>
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	0781      	lsls	r1, r0, #30
 800ad3a:	bf58      	it	pl
 800ad3c:	6963      	ldrpl	r3, [r4, #20]
 800ad3e:	60a3      	str	r3, [r4, #8]
 800ad40:	e7f4      	b.n	800ad2c <__swsetup_r+0xb0>
 800ad42:	2000      	movs	r0, #0
 800ad44:	e7f7      	b.n	800ad36 <__swsetup_r+0xba>
 800ad46:	bf00      	nop
 800ad48:	2000001c 	.word	0x2000001c
 800ad4c:	0800b8b0 	.word	0x0800b8b0
 800ad50:	0800b8d0 	.word	0x0800b8d0
 800ad54:	0800b890 	.word	0x0800b890

0800ad58 <_close_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d06      	ldr	r5, [pc, #24]	; (800ad74 <_close_r+0x1c>)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	f7ff fa42 	bl	800a1ec <_close>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_close_r+0x1a>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_close_r+0x1a>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	200051a0 	.word	0x200051a0

0800ad78 <__sflush_r>:
 800ad78:	898a      	ldrh	r2, [r1, #12]
 800ad7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7e:	4605      	mov	r5, r0
 800ad80:	0710      	lsls	r0, r2, #28
 800ad82:	460c      	mov	r4, r1
 800ad84:	d458      	bmi.n	800ae38 <__sflush_r+0xc0>
 800ad86:	684b      	ldr	r3, [r1, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dc05      	bgt.n	800ad98 <__sflush_r+0x20>
 800ad8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dc02      	bgt.n	800ad98 <__sflush_r+0x20>
 800ad92:	2000      	movs	r0, #0
 800ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad9a:	2e00      	cmp	r6, #0
 800ad9c:	d0f9      	beq.n	800ad92 <__sflush_r+0x1a>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ada4:	682f      	ldr	r7, [r5, #0]
 800ada6:	602b      	str	r3, [r5, #0]
 800ada8:	d032      	beq.n	800ae10 <__sflush_r+0x98>
 800adaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	075a      	lsls	r2, r3, #29
 800adb0:	d505      	bpl.n	800adbe <__sflush_r+0x46>
 800adb2:	6863      	ldr	r3, [r4, #4]
 800adb4:	1ac0      	subs	r0, r0, r3
 800adb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adb8:	b10b      	cbz	r3, 800adbe <__sflush_r+0x46>
 800adba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adbc:	1ac0      	subs	r0, r0, r3
 800adbe:	2300      	movs	r3, #0
 800adc0:	4602      	mov	r2, r0
 800adc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adc4:	6a21      	ldr	r1, [r4, #32]
 800adc6:	4628      	mov	r0, r5
 800adc8:	47b0      	blx	r6
 800adca:	1c43      	adds	r3, r0, #1
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	d106      	bne.n	800adde <__sflush_r+0x66>
 800add0:	6829      	ldr	r1, [r5, #0]
 800add2:	291d      	cmp	r1, #29
 800add4:	d82c      	bhi.n	800ae30 <__sflush_r+0xb8>
 800add6:	4a2a      	ldr	r2, [pc, #168]	; (800ae80 <__sflush_r+0x108>)
 800add8:	40ca      	lsrs	r2, r1
 800adda:	07d6      	lsls	r6, r2, #31
 800addc:	d528      	bpl.n	800ae30 <__sflush_r+0xb8>
 800adde:	2200      	movs	r2, #0
 800ade0:	6062      	str	r2, [r4, #4]
 800ade2:	04d9      	lsls	r1, r3, #19
 800ade4:	6922      	ldr	r2, [r4, #16]
 800ade6:	6022      	str	r2, [r4, #0]
 800ade8:	d504      	bpl.n	800adf4 <__sflush_r+0x7c>
 800adea:	1c42      	adds	r2, r0, #1
 800adec:	d101      	bne.n	800adf2 <__sflush_r+0x7a>
 800adee:	682b      	ldr	r3, [r5, #0]
 800adf0:	b903      	cbnz	r3, 800adf4 <__sflush_r+0x7c>
 800adf2:	6560      	str	r0, [r4, #84]	; 0x54
 800adf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adf6:	602f      	str	r7, [r5, #0]
 800adf8:	2900      	cmp	r1, #0
 800adfa:	d0ca      	beq.n	800ad92 <__sflush_r+0x1a>
 800adfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae00:	4299      	cmp	r1, r3
 800ae02:	d002      	beq.n	800ae0a <__sflush_r+0x92>
 800ae04:	4628      	mov	r0, r5
 800ae06:	f000 f8fd 	bl	800b004 <_free_r>
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	6360      	str	r0, [r4, #52]	; 0x34
 800ae0e:	e7c1      	b.n	800ad94 <__sflush_r+0x1c>
 800ae10:	6a21      	ldr	r1, [r4, #32]
 800ae12:	2301      	movs	r3, #1
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b0      	blx	r6
 800ae18:	1c41      	adds	r1, r0, #1
 800ae1a:	d1c7      	bne.n	800adac <__sflush_r+0x34>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d0c4      	beq.n	800adac <__sflush_r+0x34>
 800ae22:	2b1d      	cmp	r3, #29
 800ae24:	d001      	beq.n	800ae2a <__sflush_r+0xb2>
 800ae26:	2b16      	cmp	r3, #22
 800ae28:	d101      	bne.n	800ae2e <__sflush_r+0xb6>
 800ae2a:	602f      	str	r7, [r5, #0]
 800ae2c:	e7b1      	b.n	800ad92 <__sflush_r+0x1a>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae34:	81a3      	strh	r3, [r4, #12]
 800ae36:	e7ad      	b.n	800ad94 <__sflush_r+0x1c>
 800ae38:	690f      	ldr	r7, [r1, #16]
 800ae3a:	2f00      	cmp	r7, #0
 800ae3c:	d0a9      	beq.n	800ad92 <__sflush_r+0x1a>
 800ae3e:	0793      	lsls	r3, r2, #30
 800ae40:	680e      	ldr	r6, [r1, #0]
 800ae42:	bf08      	it	eq
 800ae44:	694b      	ldreq	r3, [r1, #20]
 800ae46:	600f      	str	r7, [r1, #0]
 800ae48:	bf18      	it	ne
 800ae4a:	2300      	movne	r3, #0
 800ae4c:	eba6 0807 	sub.w	r8, r6, r7
 800ae50:	608b      	str	r3, [r1, #8]
 800ae52:	f1b8 0f00 	cmp.w	r8, #0
 800ae56:	dd9c      	ble.n	800ad92 <__sflush_r+0x1a>
 800ae58:	6a21      	ldr	r1, [r4, #32]
 800ae5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae5c:	4643      	mov	r3, r8
 800ae5e:	463a      	mov	r2, r7
 800ae60:	4628      	mov	r0, r5
 800ae62:	47b0      	blx	r6
 800ae64:	2800      	cmp	r0, #0
 800ae66:	dc06      	bgt.n	800ae76 <__sflush_r+0xfe>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae6e:	81a3      	strh	r3, [r4, #12]
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae74:	e78e      	b.n	800ad94 <__sflush_r+0x1c>
 800ae76:	4407      	add	r7, r0
 800ae78:	eba8 0800 	sub.w	r8, r8, r0
 800ae7c:	e7e9      	b.n	800ae52 <__sflush_r+0xda>
 800ae7e:	bf00      	nop
 800ae80:	20400001 	.word	0x20400001

0800ae84 <_fflush_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	690b      	ldr	r3, [r1, #16]
 800ae88:	4605      	mov	r5, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	b913      	cbnz	r3, 800ae94 <_fflush_r+0x10>
 800ae8e:	2500      	movs	r5, #0
 800ae90:	4628      	mov	r0, r5
 800ae92:	bd38      	pop	{r3, r4, r5, pc}
 800ae94:	b118      	cbz	r0, 800ae9e <_fflush_r+0x1a>
 800ae96:	6983      	ldr	r3, [r0, #24]
 800ae98:	b90b      	cbnz	r3, 800ae9e <_fflush_r+0x1a>
 800ae9a:	f7ff fbcf 	bl	800a63c <__sinit>
 800ae9e:	4b14      	ldr	r3, [pc, #80]	; (800aef0 <_fflush_r+0x6c>)
 800aea0:	429c      	cmp	r4, r3
 800aea2:	d11b      	bne.n	800aedc <_fflush_r+0x58>
 800aea4:	686c      	ldr	r4, [r5, #4]
 800aea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0ef      	beq.n	800ae8e <_fflush_r+0xa>
 800aeae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeb0:	07d0      	lsls	r0, r2, #31
 800aeb2:	d404      	bmi.n	800aebe <_fflush_r+0x3a>
 800aeb4:	0599      	lsls	r1, r3, #22
 800aeb6:	d402      	bmi.n	800aebe <_fflush_r+0x3a>
 800aeb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeba:	f7ff fc82 	bl	800a7c2 <__retarget_lock_acquire_recursive>
 800aebe:	4628      	mov	r0, r5
 800aec0:	4621      	mov	r1, r4
 800aec2:	f7ff ff59 	bl	800ad78 <__sflush_r>
 800aec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aec8:	07da      	lsls	r2, r3, #31
 800aeca:	4605      	mov	r5, r0
 800aecc:	d4e0      	bmi.n	800ae90 <_fflush_r+0xc>
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	059b      	lsls	r3, r3, #22
 800aed2:	d4dd      	bmi.n	800ae90 <_fflush_r+0xc>
 800aed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aed6:	f7ff fc75 	bl	800a7c4 <__retarget_lock_release_recursive>
 800aeda:	e7d9      	b.n	800ae90 <_fflush_r+0xc>
 800aedc:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <_fflush_r+0x70>)
 800aede:	429c      	cmp	r4, r3
 800aee0:	d101      	bne.n	800aee6 <_fflush_r+0x62>
 800aee2:	68ac      	ldr	r4, [r5, #8]
 800aee4:	e7df      	b.n	800aea6 <_fflush_r+0x22>
 800aee6:	4b04      	ldr	r3, [pc, #16]	; (800aef8 <_fflush_r+0x74>)
 800aee8:	429c      	cmp	r4, r3
 800aeea:	bf08      	it	eq
 800aeec:	68ec      	ldreq	r4, [r5, #12]
 800aeee:	e7da      	b.n	800aea6 <_fflush_r+0x22>
 800aef0:	0800b8b0 	.word	0x0800b8b0
 800aef4:	0800b8d0 	.word	0x0800b8d0
 800aef8:	0800b890 	.word	0x0800b890

0800aefc <_lseek_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4d07      	ldr	r5, [pc, #28]	; (800af1c <_lseek_r+0x20>)
 800af00:	4604      	mov	r4, r0
 800af02:	4608      	mov	r0, r1
 800af04:	4611      	mov	r1, r2
 800af06:	2200      	movs	r2, #0
 800af08:	602a      	str	r2, [r5, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	f7ff f92b 	bl	800a166 <_lseek>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_lseek_r+0x1e>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_lseek_r+0x1e>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	200051a0 	.word	0x200051a0

0800af20 <__swhatbuf_r>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	460e      	mov	r6, r1
 800af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af28:	2900      	cmp	r1, #0
 800af2a:	b096      	sub	sp, #88	; 0x58
 800af2c:	4614      	mov	r4, r2
 800af2e:	461d      	mov	r5, r3
 800af30:	da08      	bge.n	800af44 <__swhatbuf_r+0x24>
 800af32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	602a      	str	r2, [r5, #0]
 800af3a:	061a      	lsls	r2, r3, #24
 800af3c:	d410      	bmi.n	800af60 <__swhatbuf_r+0x40>
 800af3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af42:	e00e      	b.n	800af62 <__swhatbuf_r+0x42>
 800af44:	466a      	mov	r2, sp
 800af46:	f000 fba9 	bl	800b69c <_fstat_r>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	dbf1      	blt.n	800af32 <__swhatbuf_r+0x12>
 800af4e:	9a01      	ldr	r2, [sp, #4]
 800af50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af58:	425a      	negs	r2, r3
 800af5a:	415a      	adcs	r2, r3
 800af5c:	602a      	str	r2, [r5, #0]
 800af5e:	e7ee      	b.n	800af3e <__swhatbuf_r+0x1e>
 800af60:	2340      	movs	r3, #64	; 0x40
 800af62:	2000      	movs	r0, #0
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	b016      	add	sp, #88	; 0x58
 800af68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af6c <__smakebuf_r>:
 800af6c:	898b      	ldrh	r3, [r1, #12]
 800af6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af70:	079d      	lsls	r5, r3, #30
 800af72:	4606      	mov	r6, r0
 800af74:	460c      	mov	r4, r1
 800af76:	d507      	bpl.n	800af88 <__smakebuf_r+0x1c>
 800af78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	2301      	movs	r3, #1
 800af82:	6163      	str	r3, [r4, #20]
 800af84:	b002      	add	sp, #8
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	ab01      	add	r3, sp, #4
 800af8a:	466a      	mov	r2, sp
 800af8c:	f7ff ffc8 	bl	800af20 <__swhatbuf_r>
 800af90:	9900      	ldr	r1, [sp, #0]
 800af92:	4605      	mov	r5, r0
 800af94:	4630      	mov	r0, r6
 800af96:	f7ff fc4d 	bl	800a834 <_malloc_r>
 800af9a:	b948      	cbnz	r0, 800afb0 <__smakebuf_r+0x44>
 800af9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa0:	059a      	lsls	r2, r3, #22
 800afa2:	d4ef      	bmi.n	800af84 <__smakebuf_r+0x18>
 800afa4:	f023 0303 	bic.w	r3, r3, #3
 800afa8:	f043 0302 	orr.w	r3, r3, #2
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	e7e3      	b.n	800af78 <__smakebuf_r+0xc>
 800afb0:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <__smakebuf_r+0x7c>)
 800afb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	6020      	str	r0, [r4, #0]
 800afb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afbc:	81a3      	strh	r3, [r4, #12]
 800afbe:	9b00      	ldr	r3, [sp, #0]
 800afc0:	6163      	str	r3, [r4, #20]
 800afc2:	9b01      	ldr	r3, [sp, #4]
 800afc4:	6120      	str	r0, [r4, #16]
 800afc6:	b15b      	cbz	r3, 800afe0 <__smakebuf_r+0x74>
 800afc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afcc:	4630      	mov	r0, r6
 800afce:	f000 fb77 	bl	800b6c0 <_isatty_r>
 800afd2:	b128      	cbz	r0, 800afe0 <__smakebuf_r+0x74>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f023 0303 	bic.w	r3, r3, #3
 800afda:	f043 0301 	orr.w	r3, r3, #1
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	89a0      	ldrh	r0, [r4, #12]
 800afe2:	4305      	orrs	r5, r0
 800afe4:	81a5      	strh	r5, [r4, #12]
 800afe6:	e7cd      	b.n	800af84 <__smakebuf_r+0x18>
 800afe8:	0800a5d5 	.word	0x0800a5d5

0800afec <__malloc_lock>:
 800afec:	4801      	ldr	r0, [pc, #4]	; (800aff4 <__malloc_lock+0x8>)
 800afee:	f7ff bbe8 	b.w	800a7c2 <__retarget_lock_acquire_recursive>
 800aff2:	bf00      	nop
 800aff4:	20005194 	.word	0x20005194

0800aff8 <__malloc_unlock>:
 800aff8:	4801      	ldr	r0, [pc, #4]	; (800b000 <__malloc_unlock+0x8>)
 800affa:	f7ff bbe3 	b.w	800a7c4 <__retarget_lock_release_recursive>
 800affe:	bf00      	nop
 800b000:	20005194 	.word	0x20005194

0800b004 <_free_r>:
 800b004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b006:	2900      	cmp	r1, #0
 800b008:	d044      	beq.n	800b094 <_free_r+0x90>
 800b00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b00e:	9001      	str	r0, [sp, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	f1a1 0404 	sub.w	r4, r1, #4
 800b016:	bfb8      	it	lt
 800b018:	18e4      	addlt	r4, r4, r3
 800b01a:	f7ff ffe7 	bl	800afec <__malloc_lock>
 800b01e:	4a1e      	ldr	r2, [pc, #120]	; (800b098 <_free_r+0x94>)
 800b020:	9801      	ldr	r0, [sp, #4]
 800b022:	6813      	ldr	r3, [r2, #0]
 800b024:	b933      	cbnz	r3, 800b034 <_free_r+0x30>
 800b026:	6063      	str	r3, [r4, #4]
 800b028:	6014      	str	r4, [r2, #0]
 800b02a:	b003      	add	sp, #12
 800b02c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b030:	f7ff bfe2 	b.w	800aff8 <__malloc_unlock>
 800b034:	42a3      	cmp	r3, r4
 800b036:	d908      	bls.n	800b04a <_free_r+0x46>
 800b038:	6825      	ldr	r5, [r4, #0]
 800b03a:	1961      	adds	r1, r4, r5
 800b03c:	428b      	cmp	r3, r1
 800b03e:	bf01      	itttt	eq
 800b040:	6819      	ldreq	r1, [r3, #0]
 800b042:	685b      	ldreq	r3, [r3, #4]
 800b044:	1949      	addeq	r1, r1, r5
 800b046:	6021      	streq	r1, [r4, #0]
 800b048:	e7ed      	b.n	800b026 <_free_r+0x22>
 800b04a:	461a      	mov	r2, r3
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	b10b      	cbz	r3, 800b054 <_free_r+0x50>
 800b050:	42a3      	cmp	r3, r4
 800b052:	d9fa      	bls.n	800b04a <_free_r+0x46>
 800b054:	6811      	ldr	r1, [r2, #0]
 800b056:	1855      	adds	r5, r2, r1
 800b058:	42a5      	cmp	r5, r4
 800b05a:	d10b      	bne.n	800b074 <_free_r+0x70>
 800b05c:	6824      	ldr	r4, [r4, #0]
 800b05e:	4421      	add	r1, r4
 800b060:	1854      	adds	r4, r2, r1
 800b062:	42a3      	cmp	r3, r4
 800b064:	6011      	str	r1, [r2, #0]
 800b066:	d1e0      	bne.n	800b02a <_free_r+0x26>
 800b068:	681c      	ldr	r4, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	6053      	str	r3, [r2, #4]
 800b06e:	4421      	add	r1, r4
 800b070:	6011      	str	r1, [r2, #0]
 800b072:	e7da      	b.n	800b02a <_free_r+0x26>
 800b074:	d902      	bls.n	800b07c <_free_r+0x78>
 800b076:	230c      	movs	r3, #12
 800b078:	6003      	str	r3, [r0, #0]
 800b07a:	e7d6      	b.n	800b02a <_free_r+0x26>
 800b07c:	6825      	ldr	r5, [r4, #0]
 800b07e:	1961      	adds	r1, r4, r5
 800b080:	428b      	cmp	r3, r1
 800b082:	bf04      	itt	eq
 800b084:	6819      	ldreq	r1, [r3, #0]
 800b086:	685b      	ldreq	r3, [r3, #4]
 800b088:	6063      	str	r3, [r4, #4]
 800b08a:	bf04      	itt	eq
 800b08c:	1949      	addeq	r1, r1, r5
 800b08e:	6021      	streq	r1, [r4, #0]
 800b090:	6054      	str	r4, [r2, #4]
 800b092:	e7ca      	b.n	800b02a <_free_r+0x26>
 800b094:	b003      	add	sp, #12
 800b096:	bd30      	pop	{r4, r5, pc}
 800b098:	20005198 	.word	0x20005198

0800b09c <__sfputc_r>:
 800b09c:	6893      	ldr	r3, [r2, #8]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	b410      	push	{r4}
 800b0a4:	6093      	str	r3, [r2, #8]
 800b0a6:	da08      	bge.n	800b0ba <__sfputc_r+0x1e>
 800b0a8:	6994      	ldr	r4, [r2, #24]
 800b0aa:	42a3      	cmp	r3, r4
 800b0ac:	db01      	blt.n	800b0b2 <__sfputc_r+0x16>
 800b0ae:	290a      	cmp	r1, #10
 800b0b0:	d103      	bne.n	800b0ba <__sfputc_r+0x1e>
 800b0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b6:	f7ff bd7d 	b.w	800abb4 <__swbuf_r>
 800b0ba:	6813      	ldr	r3, [r2, #0]
 800b0bc:	1c58      	adds	r0, r3, #1
 800b0be:	6010      	str	r0, [r2, #0]
 800b0c0:	7019      	strb	r1, [r3, #0]
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <__sfputs_r>:
 800b0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	460f      	mov	r7, r1
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	18d5      	adds	r5, r2, r3
 800b0d4:	42ac      	cmp	r4, r5
 800b0d6:	d101      	bne.n	800b0dc <__sfputs_r+0x12>
 800b0d8:	2000      	movs	r0, #0
 800b0da:	e007      	b.n	800b0ec <__sfputs_r+0x22>
 800b0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e0:	463a      	mov	r2, r7
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ffda 	bl	800b09c <__sfputc_r>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d1f3      	bne.n	800b0d4 <__sfputs_r+0xa>
 800b0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0f0 <_vfiprintf_r>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	b09d      	sub	sp, #116	; 0x74
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	4698      	mov	r8, r3
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	b118      	cbz	r0, 800b108 <_vfiprintf_r+0x18>
 800b100:	6983      	ldr	r3, [r0, #24]
 800b102:	b90b      	cbnz	r3, 800b108 <_vfiprintf_r+0x18>
 800b104:	f7ff fa9a 	bl	800a63c <__sinit>
 800b108:	4b89      	ldr	r3, [pc, #548]	; (800b330 <_vfiprintf_r+0x240>)
 800b10a:	429d      	cmp	r5, r3
 800b10c:	d11b      	bne.n	800b146 <_vfiprintf_r+0x56>
 800b10e:	6875      	ldr	r5, [r6, #4]
 800b110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b112:	07d9      	lsls	r1, r3, #31
 800b114:	d405      	bmi.n	800b122 <_vfiprintf_r+0x32>
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	059a      	lsls	r2, r3, #22
 800b11a:	d402      	bmi.n	800b122 <_vfiprintf_r+0x32>
 800b11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b11e:	f7ff fb50 	bl	800a7c2 <__retarget_lock_acquire_recursive>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	071b      	lsls	r3, r3, #28
 800b126:	d501      	bpl.n	800b12c <_vfiprintf_r+0x3c>
 800b128:	692b      	ldr	r3, [r5, #16]
 800b12a:	b9eb      	cbnz	r3, 800b168 <_vfiprintf_r+0x78>
 800b12c:	4629      	mov	r1, r5
 800b12e:	4630      	mov	r0, r6
 800b130:	f7ff fda4 	bl	800ac7c <__swsetup_r>
 800b134:	b1c0      	cbz	r0, 800b168 <_vfiprintf_r+0x78>
 800b136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b138:	07dc      	lsls	r4, r3, #31
 800b13a:	d50e      	bpl.n	800b15a <_vfiprintf_r+0x6a>
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b140:	b01d      	add	sp, #116	; 0x74
 800b142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	4b7b      	ldr	r3, [pc, #492]	; (800b334 <_vfiprintf_r+0x244>)
 800b148:	429d      	cmp	r5, r3
 800b14a:	d101      	bne.n	800b150 <_vfiprintf_r+0x60>
 800b14c:	68b5      	ldr	r5, [r6, #8]
 800b14e:	e7df      	b.n	800b110 <_vfiprintf_r+0x20>
 800b150:	4b79      	ldr	r3, [pc, #484]	; (800b338 <_vfiprintf_r+0x248>)
 800b152:	429d      	cmp	r5, r3
 800b154:	bf08      	it	eq
 800b156:	68f5      	ldreq	r5, [r6, #12]
 800b158:	e7da      	b.n	800b110 <_vfiprintf_r+0x20>
 800b15a:	89ab      	ldrh	r3, [r5, #12]
 800b15c:	0598      	lsls	r0, r3, #22
 800b15e:	d4ed      	bmi.n	800b13c <_vfiprintf_r+0x4c>
 800b160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b162:	f7ff fb2f 	bl	800a7c4 <__retarget_lock_release_recursive>
 800b166:	e7e9      	b.n	800b13c <_vfiprintf_r+0x4c>
 800b168:	2300      	movs	r3, #0
 800b16a:	9309      	str	r3, [sp, #36]	; 0x24
 800b16c:	2320      	movs	r3, #32
 800b16e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b172:	f8cd 800c 	str.w	r8, [sp, #12]
 800b176:	2330      	movs	r3, #48	; 0x30
 800b178:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b33c <_vfiprintf_r+0x24c>
 800b17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b180:	f04f 0901 	mov.w	r9, #1
 800b184:	4623      	mov	r3, r4
 800b186:	469a      	mov	sl, r3
 800b188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b18c:	b10a      	cbz	r2, 800b192 <_vfiprintf_r+0xa2>
 800b18e:	2a25      	cmp	r2, #37	; 0x25
 800b190:	d1f9      	bne.n	800b186 <_vfiprintf_r+0x96>
 800b192:	ebba 0b04 	subs.w	fp, sl, r4
 800b196:	d00b      	beq.n	800b1b0 <_vfiprintf_r+0xc0>
 800b198:	465b      	mov	r3, fp
 800b19a:	4622      	mov	r2, r4
 800b19c:	4629      	mov	r1, r5
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff ff93 	bl	800b0ca <__sfputs_r>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	f000 80aa 	beq.w	800b2fe <_vfiprintf_r+0x20e>
 800b1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ac:	445a      	add	r2, fp
 800b1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 80a2 	beq.w	800b2fe <_vfiprintf_r+0x20e>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1c4:	f10a 0a01 	add.w	sl, sl, #1
 800b1c8:	9304      	str	r3, [sp, #16]
 800b1ca:	9307      	str	r3, [sp, #28]
 800b1cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b1d2:	4654      	mov	r4, sl
 800b1d4:	2205      	movs	r2, #5
 800b1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1da:	4858      	ldr	r0, [pc, #352]	; (800b33c <_vfiprintf_r+0x24c>)
 800b1dc:	f7f5 f838 	bl	8000250 <memchr>
 800b1e0:	9a04      	ldr	r2, [sp, #16]
 800b1e2:	b9d8      	cbnz	r0, 800b21c <_vfiprintf_r+0x12c>
 800b1e4:	06d1      	lsls	r1, r2, #27
 800b1e6:	bf44      	itt	mi
 800b1e8:	2320      	movmi	r3, #32
 800b1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1ee:	0713      	lsls	r3, r2, #28
 800b1f0:	bf44      	itt	mi
 800b1f2:	232b      	movmi	r3, #43	; 0x2b
 800b1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1fe:	d015      	beq.n	800b22c <_vfiprintf_r+0x13c>
 800b200:	9a07      	ldr	r2, [sp, #28]
 800b202:	4654      	mov	r4, sl
 800b204:	2000      	movs	r0, #0
 800b206:	f04f 0c0a 	mov.w	ip, #10
 800b20a:	4621      	mov	r1, r4
 800b20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b210:	3b30      	subs	r3, #48	; 0x30
 800b212:	2b09      	cmp	r3, #9
 800b214:	d94e      	bls.n	800b2b4 <_vfiprintf_r+0x1c4>
 800b216:	b1b0      	cbz	r0, 800b246 <_vfiprintf_r+0x156>
 800b218:	9207      	str	r2, [sp, #28]
 800b21a:	e014      	b.n	800b246 <_vfiprintf_r+0x156>
 800b21c:	eba0 0308 	sub.w	r3, r0, r8
 800b220:	fa09 f303 	lsl.w	r3, r9, r3
 800b224:	4313      	orrs	r3, r2
 800b226:	9304      	str	r3, [sp, #16]
 800b228:	46a2      	mov	sl, r4
 800b22a:	e7d2      	b.n	800b1d2 <_vfiprintf_r+0xe2>
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	1d19      	adds	r1, r3, #4
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	9103      	str	r1, [sp, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	bfbb      	ittet	lt
 800b238:	425b      	neglt	r3, r3
 800b23a:	f042 0202 	orrlt.w	r2, r2, #2
 800b23e:	9307      	strge	r3, [sp, #28]
 800b240:	9307      	strlt	r3, [sp, #28]
 800b242:	bfb8      	it	lt
 800b244:	9204      	strlt	r2, [sp, #16]
 800b246:	7823      	ldrb	r3, [r4, #0]
 800b248:	2b2e      	cmp	r3, #46	; 0x2e
 800b24a:	d10c      	bne.n	800b266 <_vfiprintf_r+0x176>
 800b24c:	7863      	ldrb	r3, [r4, #1]
 800b24e:	2b2a      	cmp	r3, #42	; 0x2a
 800b250:	d135      	bne.n	800b2be <_vfiprintf_r+0x1ce>
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	1d1a      	adds	r2, r3, #4
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	9203      	str	r2, [sp, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	bfb8      	it	lt
 800b25e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b262:	3402      	adds	r4, #2
 800b264:	9305      	str	r3, [sp, #20]
 800b266:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b34c <_vfiprintf_r+0x25c>
 800b26a:	7821      	ldrb	r1, [r4, #0]
 800b26c:	2203      	movs	r2, #3
 800b26e:	4650      	mov	r0, sl
 800b270:	f7f4 ffee 	bl	8000250 <memchr>
 800b274:	b140      	cbz	r0, 800b288 <_vfiprintf_r+0x198>
 800b276:	2340      	movs	r3, #64	; 0x40
 800b278:	eba0 000a 	sub.w	r0, r0, sl
 800b27c:	fa03 f000 	lsl.w	r0, r3, r0
 800b280:	9b04      	ldr	r3, [sp, #16]
 800b282:	4303      	orrs	r3, r0
 800b284:	3401      	adds	r4, #1
 800b286:	9304      	str	r3, [sp, #16]
 800b288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b28c:	482c      	ldr	r0, [pc, #176]	; (800b340 <_vfiprintf_r+0x250>)
 800b28e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b292:	2206      	movs	r2, #6
 800b294:	f7f4 ffdc 	bl	8000250 <memchr>
 800b298:	2800      	cmp	r0, #0
 800b29a:	d03f      	beq.n	800b31c <_vfiprintf_r+0x22c>
 800b29c:	4b29      	ldr	r3, [pc, #164]	; (800b344 <_vfiprintf_r+0x254>)
 800b29e:	bb1b      	cbnz	r3, 800b2e8 <_vfiprintf_r+0x1f8>
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	3307      	adds	r3, #7
 800b2a4:	f023 0307 	bic.w	r3, r3, #7
 800b2a8:	3308      	adds	r3, #8
 800b2aa:	9303      	str	r3, [sp, #12]
 800b2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ae:	443b      	add	r3, r7
 800b2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b2:	e767      	b.n	800b184 <_vfiprintf_r+0x94>
 800b2b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	2001      	movs	r0, #1
 800b2bc:	e7a5      	b.n	800b20a <_vfiprintf_r+0x11a>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	3401      	adds	r4, #1
 800b2c2:	9305      	str	r3, [sp, #20]
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	f04f 0c0a 	mov.w	ip, #10
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d0:	3a30      	subs	r2, #48	; 0x30
 800b2d2:	2a09      	cmp	r2, #9
 800b2d4:	d903      	bls.n	800b2de <_vfiprintf_r+0x1ee>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0c5      	beq.n	800b266 <_vfiprintf_r+0x176>
 800b2da:	9105      	str	r1, [sp, #20]
 800b2dc:	e7c3      	b.n	800b266 <_vfiprintf_r+0x176>
 800b2de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e7f0      	b.n	800b2ca <_vfiprintf_r+0x1da>
 800b2e8:	ab03      	add	r3, sp, #12
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	462a      	mov	r2, r5
 800b2ee:	4b16      	ldr	r3, [pc, #88]	; (800b348 <_vfiprintf_r+0x258>)
 800b2f0:	a904      	add	r1, sp, #16
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f3af 8000 	nop.w
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	1c78      	adds	r0, r7, #1
 800b2fc:	d1d6      	bne.n	800b2ac <_vfiprintf_r+0x1bc>
 800b2fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b300:	07d9      	lsls	r1, r3, #31
 800b302:	d405      	bmi.n	800b310 <_vfiprintf_r+0x220>
 800b304:	89ab      	ldrh	r3, [r5, #12]
 800b306:	059a      	lsls	r2, r3, #22
 800b308:	d402      	bmi.n	800b310 <_vfiprintf_r+0x220>
 800b30a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b30c:	f7ff fa5a 	bl	800a7c4 <__retarget_lock_release_recursive>
 800b310:	89ab      	ldrh	r3, [r5, #12]
 800b312:	065b      	lsls	r3, r3, #25
 800b314:	f53f af12 	bmi.w	800b13c <_vfiprintf_r+0x4c>
 800b318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b31a:	e711      	b.n	800b140 <_vfiprintf_r+0x50>
 800b31c:	ab03      	add	r3, sp, #12
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	462a      	mov	r2, r5
 800b322:	4b09      	ldr	r3, [pc, #36]	; (800b348 <_vfiprintf_r+0x258>)
 800b324:	a904      	add	r1, sp, #16
 800b326:	4630      	mov	r0, r6
 800b328:	f000 f880 	bl	800b42c <_printf_i>
 800b32c:	e7e4      	b.n	800b2f8 <_vfiprintf_r+0x208>
 800b32e:	bf00      	nop
 800b330:	0800b8b0 	.word	0x0800b8b0
 800b334:	0800b8d0 	.word	0x0800b8d0
 800b338:	0800b890 	.word	0x0800b890
 800b33c:	0800b8f4 	.word	0x0800b8f4
 800b340:	0800b8fe 	.word	0x0800b8fe
 800b344:	00000000 	.word	0x00000000
 800b348:	0800b0cb 	.word	0x0800b0cb
 800b34c:	0800b8fa 	.word	0x0800b8fa

0800b350 <_printf_common>:
 800b350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b354:	4616      	mov	r6, r2
 800b356:	4699      	mov	r9, r3
 800b358:	688a      	ldr	r2, [r1, #8]
 800b35a:	690b      	ldr	r3, [r1, #16]
 800b35c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b360:	4293      	cmp	r3, r2
 800b362:	bfb8      	it	lt
 800b364:	4613      	movlt	r3, r2
 800b366:	6033      	str	r3, [r6, #0]
 800b368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b36c:	4607      	mov	r7, r0
 800b36e:	460c      	mov	r4, r1
 800b370:	b10a      	cbz	r2, 800b376 <_printf_common+0x26>
 800b372:	3301      	adds	r3, #1
 800b374:	6033      	str	r3, [r6, #0]
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	0699      	lsls	r1, r3, #26
 800b37a:	bf42      	ittt	mi
 800b37c:	6833      	ldrmi	r3, [r6, #0]
 800b37e:	3302      	addmi	r3, #2
 800b380:	6033      	strmi	r3, [r6, #0]
 800b382:	6825      	ldr	r5, [r4, #0]
 800b384:	f015 0506 	ands.w	r5, r5, #6
 800b388:	d106      	bne.n	800b398 <_printf_common+0x48>
 800b38a:	f104 0a19 	add.w	sl, r4, #25
 800b38e:	68e3      	ldr	r3, [r4, #12]
 800b390:	6832      	ldr	r2, [r6, #0]
 800b392:	1a9b      	subs	r3, r3, r2
 800b394:	42ab      	cmp	r3, r5
 800b396:	dc26      	bgt.n	800b3e6 <_printf_common+0x96>
 800b398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b39c:	1e13      	subs	r3, r2, #0
 800b39e:	6822      	ldr	r2, [r4, #0]
 800b3a0:	bf18      	it	ne
 800b3a2:	2301      	movne	r3, #1
 800b3a4:	0692      	lsls	r2, r2, #26
 800b3a6:	d42b      	bmi.n	800b400 <_printf_common+0xb0>
 800b3a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	4638      	mov	r0, r7
 800b3b0:	47c0      	blx	r8
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	d01e      	beq.n	800b3f4 <_printf_common+0xa4>
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	68e5      	ldr	r5, [r4, #12]
 800b3ba:	6832      	ldr	r2, [r6, #0]
 800b3bc:	f003 0306 	and.w	r3, r3, #6
 800b3c0:	2b04      	cmp	r3, #4
 800b3c2:	bf08      	it	eq
 800b3c4:	1aad      	subeq	r5, r5, r2
 800b3c6:	68a3      	ldr	r3, [r4, #8]
 800b3c8:	6922      	ldr	r2, [r4, #16]
 800b3ca:	bf0c      	ite	eq
 800b3cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3d0:	2500      	movne	r5, #0
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	bfc4      	itt	gt
 800b3d6:	1a9b      	subgt	r3, r3, r2
 800b3d8:	18ed      	addgt	r5, r5, r3
 800b3da:	2600      	movs	r6, #0
 800b3dc:	341a      	adds	r4, #26
 800b3de:	42b5      	cmp	r5, r6
 800b3e0:	d11a      	bne.n	800b418 <_printf_common+0xc8>
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	e008      	b.n	800b3f8 <_printf_common+0xa8>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	4652      	mov	r2, sl
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	47c0      	blx	r8
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	d103      	bne.n	800b3fc <_printf_common+0xac>
 800b3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	e7c6      	b.n	800b38e <_printf_common+0x3e>
 800b400:	18e1      	adds	r1, r4, r3
 800b402:	1c5a      	adds	r2, r3, #1
 800b404:	2030      	movs	r0, #48	; 0x30
 800b406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b40a:	4422      	add	r2, r4
 800b40c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b414:	3302      	adds	r3, #2
 800b416:	e7c7      	b.n	800b3a8 <_printf_common+0x58>
 800b418:	2301      	movs	r3, #1
 800b41a:	4622      	mov	r2, r4
 800b41c:	4649      	mov	r1, r9
 800b41e:	4638      	mov	r0, r7
 800b420:	47c0      	blx	r8
 800b422:	3001      	adds	r0, #1
 800b424:	d0e6      	beq.n	800b3f4 <_printf_common+0xa4>
 800b426:	3601      	adds	r6, #1
 800b428:	e7d9      	b.n	800b3de <_printf_common+0x8e>
	...

0800b42c <_printf_i>:
 800b42c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b430:	7e0f      	ldrb	r7, [r1, #24]
 800b432:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b434:	2f78      	cmp	r7, #120	; 0x78
 800b436:	4691      	mov	r9, r2
 800b438:	4680      	mov	r8, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	469a      	mov	sl, r3
 800b43e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b442:	d807      	bhi.n	800b454 <_printf_i+0x28>
 800b444:	2f62      	cmp	r7, #98	; 0x62
 800b446:	d80a      	bhi.n	800b45e <_printf_i+0x32>
 800b448:	2f00      	cmp	r7, #0
 800b44a:	f000 80d8 	beq.w	800b5fe <_printf_i+0x1d2>
 800b44e:	2f58      	cmp	r7, #88	; 0x58
 800b450:	f000 80a3 	beq.w	800b59a <_printf_i+0x16e>
 800b454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b45c:	e03a      	b.n	800b4d4 <_printf_i+0xa8>
 800b45e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b462:	2b15      	cmp	r3, #21
 800b464:	d8f6      	bhi.n	800b454 <_printf_i+0x28>
 800b466:	a101      	add	r1, pc, #4	; (adr r1, 800b46c <_printf_i+0x40>)
 800b468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b46c:	0800b4c5 	.word	0x0800b4c5
 800b470:	0800b4d9 	.word	0x0800b4d9
 800b474:	0800b455 	.word	0x0800b455
 800b478:	0800b455 	.word	0x0800b455
 800b47c:	0800b455 	.word	0x0800b455
 800b480:	0800b455 	.word	0x0800b455
 800b484:	0800b4d9 	.word	0x0800b4d9
 800b488:	0800b455 	.word	0x0800b455
 800b48c:	0800b455 	.word	0x0800b455
 800b490:	0800b455 	.word	0x0800b455
 800b494:	0800b455 	.word	0x0800b455
 800b498:	0800b5e5 	.word	0x0800b5e5
 800b49c:	0800b509 	.word	0x0800b509
 800b4a0:	0800b5c7 	.word	0x0800b5c7
 800b4a4:	0800b455 	.word	0x0800b455
 800b4a8:	0800b455 	.word	0x0800b455
 800b4ac:	0800b607 	.word	0x0800b607
 800b4b0:	0800b455 	.word	0x0800b455
 800b4b4:	0800b509 	.word	0x0800b509
 800b4b8:	0800b455 	.word	0x0800b455
 800b4bc:	0800b455 	.word	0x0800b455
 800b4c0:	0800b5cf 	.word	0x0800b5cf
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	1d1a      	adds	r2, r3, #4
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	602a      	str	r2, [r5, #0]
 800b4cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e0a3      	b.n	800b620 <_printf_i+0x1f4>
 800b4d8:	6820      	ldr	r0, [r4, #0]
 800b4da:	6829      	ldr	r1, [r5, #0]
 800b4dc:	0606      	lsls	r6, r0, #24
 800b4de:	f101 0304 	add.w	r3, r1, #4
 800b4e2:	d50a      	bpl.n	800b4fa <_printf_i+0xce>
 800b4e4:	680e      	ldr	r6, [r1, #0]
 800b4e6:	602b      	str	r3, [r5, #0]
 800b4e8:	2e00      	cmp	r6, #0
 800b4ea:	da03      	bge.n	800b4f4 <_printf_i+0xc8>
 800b4ec:	232d      	movs	r3, #45	; 0x2d
 800b4ee:	4276      	negs	r6, r6
 800b4f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4f4:	485e      	ldr	r0, [pc, #376]	; (800b670 <_printf_i+0x244>)
 800b4f6:	230a      	movs	r3, #10
 800b4f8:	e019      	b.n	800b52e <_printf_i+0x102>
 800b4fa:	680e      	ldr	r6, [r1, #0]
 800b4fc:	602b      	str	r3, [r5, #0]
 800b4fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b502:	bf18      	it	ne
 800b504:	b236      	sxthne	r6, r6
 800b506:	e7ef      	b.n	800b4e8 <_printf_i+0xbc>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	6820      	ldr	r0, [r4, #0]
 800b50c:	1d19      	adds	r1, r3, #4
 800b50e:	6029      	str	r1, [r5, #0]
 800b510:	0601      	lsls	r1, r0, #24
 800b512:	d501      	bpl.n	800b518 <_printf_i+0xec>
 800b514:	681e      	ldr	r6, [r3, #0]
 800b516:	e002      	b.n	800b51e <_printf_i+0xf2>
 800b518:	0646      	lsls	r6, r0, #25
 800b51a:	d5fb      	bpl.n	800b514 <_printf_i+0xe8>
 800b51c:	881e      	ldrh	r6, [r3, #0]
 800b51e:	4854      	ldr	r0, [pc, #336]	; (800b670 <_printf_i+0x244>)
 800b520:	2f6f      	cmp	r7, #111	; 0x6f
 800b522:	bf0c      	ite	eq
 800b524:	2308      	moveq	r3, #8
 800b526:	230a      	movne	r3, #10
 800b528:	2100      	movs	r1, #0
 800b52a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b52e:	6865      	ldr	r5, [r4, #4]
 800b530:	60a5      	str	r5, [r4, #8]
 800b532:	2d00      	cmp	r5, #0
 800b534:	bfa2      	ittt	ge
 800b536:	6821      	ldrge	r1, [r4, #0]
 800b538:	f021 0104 	bicge.w	r1, r1, #4
 800b53c:	6021      	strge	r1, [r4, #0]
 800b53e:	b90e      	cbnz	r6, 800b544 <_printf_i+0x118>
 800b540:	2d00      	cmp	r5, #0
 800b542:	d04d      	beq.n	800b5e0 <_printf_i+0x1b4>
 800b544:	4615      	mov	r5, r2
 800b546:	fbb6 f1f3 	udiv	r1, r6, r3
 800b54a:	fb03 6711 	mls	r7, r3, r1, r6
 800b54e:	5dc7      	ldrb	r7, [r0, r7]
 800b550:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b554:	4637      	mov	r7, r6
 800b556:	42bb      	cmp	r3, r7
 800b558:	460e      	mov	r6, r1
 800b55a:	d9f4      	bls.n	800b546 <_printf_i+0x11a>
 800b55c:	2b08      	cmp	r3, #8
 800b55e:	d10b      	bne.n	800b578 <_printf_i+0x14c>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	07de      	lsls	r6, r3, #31
 800b564:	d508      	bpl.n	800b578 <_printf_i+0x14c>
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	6861      	ldr	r1, [r4, #4]
 800b56a:	4299      	cmp	r1, r3
 800b56c:	bfde      	ittt	le
 800b56e:	2330      	movle	r3, #48	; 0x30
 800b570:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b574:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b578:	1b52      	subs	r2, r2, r5
 800b57a:	6122      	str	r2, [r4, #16]
 800b57c:	f8cd a000 	str.w	sl, [sp]
 800b580:	464b      	mov	r3, r9
 800b582:	aa03      	add	r2, sp, #12
 800b584:	4621      	mov	r1, r4
 800b586:	4640      	mov	r0, r8
 800b588:	f7ff fee2 	bl	800b350 <_printf_common>
 800b58c:	3001      	adds	r0, #1
 800b58e:	d14c      	bne.n	800b62a <_printf_i+0x1fe>
 800b590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b594:	b004      	add	sp, #16
 800b596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59a:	4835      	ldr	r0, [pc, #212]	; (800b670 <_printf_i+0x244>)
 800b59c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b5a0:	6829      	ldr	r1, [r5, #0]
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5a8:	6029      	str	r1, [r5, #0]
 800b5aa:	061d      	lsls	r5, r3, #24
 800b5ac:	d514      	bpl.n	800b5d8 <_printf_i+0x1ac>
 800b5ae:	07df      	lsls	r7, r3, #31
 800b5b0:	bf44      	itt	mi
 800b5b2:	f043 0320 	orrmi.w	r3, r3, #32
 800b5b6:	6023      	strmi	r3, [r4, #0]
 800b5b8:	b91e      	cbnz	r6, 800b5c2 <_printf_i+0x196>
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	f023 0320 	bic.w	r3, r3, #32
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	2310      	movs	r3, #16
 800b5c4:	e7b0      	b.n	800b528 <_printf_i+0xfc>
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	f043 0320 	orr.w	r3, r3, #32
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	2378      	movs	r3, #120	; 0x78
 800b5d0:	4828      	ldr	r0, [pc, #160]	; (800b674 <_printf_i+0x248>)
 800b5d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5d6:	e7e3      	b.n	800b5a0 <_printf_i+0x174>
 800b5d8:	0659      	lsls	r1, r3, #25
 800b5da:	bf48      	it	mi
 800b5dc:	b2b6      	uxthmi	r6, r6
 800b5de:	e7e6      	b.n	800b5ae <_printf_i+0x182>
 800b5e0:	4615      	mov	r5, r2
 800b5e2:	e7bb      	b.n	800b55c <_printf_i+0x130>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	6826      	ldr	r6, [r4, #0]
 800b5e8:	6961      	ldr	r1, [r4, #20]
 800b5ea:	1d18      	adds	r0, r3, #4
 800b5ec:	6028      	str	r0, [r5, #0]
 800b5ee:	0635      	lsls	r5, r6, #24
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	d501      	bpl.n	800b5f8 <_printf_i+0x1cc>
 800b5f4:	6019      	str	r1, [r3, #0]
 800b5f6:	e002      	b.n	800b5fe <_printf_i+0x1d2>
 800b5f8:	0670      	lsls	r0, r6, #25
 800b5fa:	d5fb      	bpl.n	800b5f4 <_printf_i+0x1c8>
 800b5fc:	8019      	strh	r1, [r3, #0]
 800b5fe:	2300      	movs	r3, #0
 800b600:	6123      	str	r3, [r4, #16]
 800b602:	4615      	mov	r5, r2
 800b604:	e7ba      	b.n	800b57c <_printf_i+0x150>
 800b606:	682b      	ldr	r3, [r5, #0]
 800b608:	1d1a      	adds	r2, r3, #4
 800b60a:	602a      	str	r2, [r5, #0]
 800b60c:	681d      	ldr	r5, [r3, #0]
 800b60e:	6862      	ldr	r2, [r4, #4]
 800b610:	2100      	movs	r1, #0
 800b612:	4628      	mov	r0, r5
 800b614:	f7f4 fe1c 	bl	8000250 <memchr>
 800b618:	b108      	cbz	r0, 800b61e <_printf_i+0x1f2>
 800b61a:	1b40      	subs	r0, r0, r5
 800b61c:	6060      	str	r0, [r4, #4]
 800b61e:	6863      	ldr	r3, [r4, #4]
 800b620:	6123      	str	r3, [r4, #16]
 800b622:	2300      	movs	r3, #0
 800b624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b628:	e7a8      	b.n	800b57c <_printf_i+0x150>
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	462a      	mov	r2, r5
 800b62e:	4649      	mov	r1, r9
 800b630:	4640      	mov	r0, r8
 800b632:	47d0      	blx	sl
 800b634:	3001      	adds	r0, #1
 800b636:	d0ab      	beq.n	800b590 <_printf_i+0x164>
 800b638:	6823      	ldr	r3, [r4, #0]
 800b63a:	079b      	lsls	r3, r3, #30
 800b63c:	d413      	bmi.n	800b666 <_printf_i+0x23a>
 800b63e:	68e0      	ldr	r0, [r4, #12]
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	4298      	cmp	r0, r3
 800b644:	bfb8      	it	lt
 800b646:	4618      	movlt	r0, r3
 800b648:	e7a4      	b.n	800b594 <_printf_i+0x168>
 800b64a:	2301      	movs	r3, #1
 800b64c:	4632      	mov	r2, r6
 800b64e:	4649      	mov	r1, r9
 800b650:	4640      	mov	r0, r8
 800b652:	47d0      	blx	sl
 800b654:	3001      	adds	r0, #1
 800b656:	d09b      	beq.n	800b590 <_printf_i+0x164>
 800b658:	3501      	adds	r5, #1
 800b65a:	68e3      	ldr	r3, [r4, #12]
 800b65c:	9903      	ldr	r1, [sp, #12]
 800b65e:	1a5b      	subs	r3, r3, r1
 800b660:	42ab      	cmp	r3, r5
 800b662:	dcf2      	bgt.n	800b64a <_printf_i+0x21e>
 800b664:	e7eb      	b.n	800b63e <_printf_i+0x212>
 800b666:	2500      	movs	r5, #0
 800b668:	f104 0619 	add.w	r6, r4, #25
 800b66c:	e7f5      	b.n	800b65a <_printf_i+0x22e>
 800b66e:	bf00      	nop
 800b670:	0800b905 	.word	0x0800b905
 800b674:	0800b916 	.word	0x0800b916

0800b678 <_read_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	; (800b698 <_read_r+0x20>)
 800b67c:	4604      	mov	r4, r0
 800b67e:	4608      	mov	r0, r1
 800b680:	4611      	mov	r1, r2
 800b682:	2200      	movs	r2, #0
 800b684:	602a      	str	r2, [r5, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	f7fe fd15 	bl	800a0b6 <_read>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_read_r+0x1e>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_read_r+0x1e>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	200051a0 	.word	0x200051a0

0800b69c <_fstat_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d07      	ldr	r5, [pc, #28]	; (800b6bc <_fstat_r+0x20>)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	602b      	str	r3, [r5, #0]
 800b6aa:	f7fe fde6 	bl	800a27a <_fstat>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d102      	bne.n	800b6b8 <_fstat_r+0x1c>
 800b6b2:	682b      	ldr	r3, [r5, #0]
 800b6b4:	b103      	cbz	r3, 800b6b8 <_fstat_r+0x1c>
 800b6b6:	6023      	str	r3, [r4, #0]
 800b6b8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ba:	bf00      	nop
 800b6bc:	200051a0 	.word	0x200051a0

0800b6c0 <_isatty_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d06      	ldr	r5, [pc, #24]	; (800b6dc <_isatty_r+0x1c>)
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	602b      	str	r3, [r5, #0]
 800b6cc:	f7fe ff3c 	bl	800a548 <_isatty>
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	d102      	bne.n	800b6da <_isatty_r+0x1a>
 800b6d4:	682b      	ldr	r3, [r5, #0]
 800b6d6:	b103      	cbz	r3, 800b6da <_isatty_r+0x1a>
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	200051a0 	.word	0x200051a0

0800b6e0 <_init>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	bf00      	nop
 800b6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e6:	bc08      	pop	{r3}
 800b6e8:	469e      	mov	lr, r3
 800b6ea:	4770      	bx	lr

0800b6ec <_fini>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	bf00      	nop
 800b6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6f2:	bc08      	pop	{r3}
 800b6f4:	469e      	mov	lr, r3
 800b6f6:	4770      	bx	lr
