
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008508  08008508  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008510  08008510  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  20000078  08008590  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08008590  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016aed  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d3  00000000  00000000  00036b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00039268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b8d  00000000  00000000  0003b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ab3  00000000  00000000  0006548d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105902  00000000  00000000  0007ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006050  00000000  00000000  00184894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	080083c4 	.word	0x080083c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	080083c4 	.word	0x080083c4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af04      	add	r7, sp, #16
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1,&store1 , 1, I2C_TIMEOUT);
 80005fe:	23c8      	movs	r3, #200	; 0xc8
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	2301      	movs	r3, #1
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <HAL_GPIO_EXTI_Callback+0x60>)
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	2227      	movs	r2, #39	; 0x27
 800060e:	217e      	movs	r1, #126	; 0x7e
 8000610:	4811      	ldr	r0, [pc, #68]	; (8000658 <HAL_GPIO_EXTI_Callback+0x64>)
 8000612:	f002 ff45 	bl	80034a0 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1,&store2, 1, I2C_TIMEOUT);
 8000616:	23c8      	movs	r3, #200	; 0xc8
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	2301      	movs	r3, #1
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_GPIO_EXTI_Callback+0x68>)
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2301      	movs	r3, #1
 8000624:	2228      	movs	r2, #40	; 0x28
 8000626:	217e      	movs	r1, #126	; 0x7e
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <HAL_GPIO_EXTI_Callback+0x64>)
 800062a:	f002 ff39 	bl	80034a0 <HAL_I2C_Mem_Read>
  printf("Interrupt on pin (%d).\n", GPIO_Pin);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	4619      	mov	r1, r3
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000634:	f007 f84e 	bl	80076d4 <iprintf>
  printf("Store1 (%d)    Store2 (%d).\n", store1, store2);
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_GPIO_EXTI_Callback+0x60>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_GPIO_EXTI_Callback+0x68>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <HAL_GPIO_EXTI_Callback+0x70>)
 8000646:	f007 f845 	bl	80076d4 <iprintf>
  /* your code here */
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200006a4 	.word	0x200006a4
 8000658:	200000dc 	.word	0x200000dc
 800065c:	200006a5 	.word	0x200006a5
 8000660:	080083dc 	.word	0x080083dc
 8000664:	080083f4 	.word	0x080083f4

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f001 ff3c 	bl	80024ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 fa03 	bl	8000a7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initialise_monitor_handles();
 8000676:	f006 fdf1 	bl	800725c <initialise_monitor_handles>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f001 f821 	bl	80016c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800067e:	f000 ffef 	bl	8001660 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000682:	f000 fa6d 	bl	8000b60 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000686:	f000 fabd 	bl	8000c04 <MX_I2C1_Init>
  MX_I2C2_Init();
 800068a:	f000 fafb 	bl	8000c84 <MX_I2C2_Init>
  MX_SPI1_Init();
 800068e:	f000 fb39 	bl	8000d04 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000692:	f000 fb75 	bl	8000d80 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000696:	f000 fc43 	bl	8000f20 <MX_TIM2_Init>
  MX_TIM3_Init();
 800069a:	f000 fcdb 	bl	8001054 <MX_TIM3_Init>
  MX_TIM4_Init();
 800069e:	f000 fd2f 	bl	8001100 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a2:	f000 fd83 	bl	80011ac <MX_TIM5_Init>
  MX_TIM8_Init();
 80006a6:	f000 fdf9 	bl	800129c <MX_TIM8_Init>
  MX_UART4_Init();
 80006aa:	f000 ff19 	bl	80014e0 <MX_UART4_Init>
  MX_UART5_Init();
 80006ae:	f000 ff47 	bl	8001540 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80006b2:	f000 ff75 	bl	80015a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006b6:	f000 ffa3 	bl	8001600 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 80006ba:	f000 fec1 	bl	8001440 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2110      	movs	r1, #16
 80006c2:	48bc      	ldr	r0, [pc, #752]	; (80009b4 <main+0x34c>)
 80006c4:	f002 fd16 	bl	80030f4 <HAL_GPIO_WritePin>

  /* Disable EXTI4_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f002 fb4c 	bl	8002d66 <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80006ce:	2312      	movs	r3, #18
 80006d0:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80006d2:	23c8      	movs	r3, #200	; 0xc8
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2301      	movs	r3, #1
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	1dbb      	adds	r3, r7, #6
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	227d      	movs	r2, #125	; 0x7d
 80006e2:	217e      	movs	r1, #126	; 0x7e
 80006e4:	48b4      	ldr	r0, [pc, #720]	; (80009b8 <main+0x350>)
 80006e6:	f002 fdc7 	bl	8003278 <HAL_I2C_Mem_Write>
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <main+0x96>
    printf("I2C communication error (%X).\n", status);
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	4619      	mov	r1, r3
 80006f8:	48b0      	ldr	r0, [pc, #704]	; (80009bc <main+0x354>)
 80006fa:	f006 ffeb 	bl	80076d4 <iprintf>

  data = 0x34;
 80006fe:	2334      	movs	r3, #52	; 0x34
 8000700:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000702:	23c8      	movs	r3, #200	; 0xc8
 8000704:	9302      	str	r3, [sp, #8]
 8000706:	2301      	movs	r3, #1
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	1dbb      	adds	r3, r7, #6
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	227d      	movs	r2, #125	; 0x7d
 8000712:	217e      	movs	r1, #126	; 0x7e
 8000714:	48a8      	ldr	r0, [pc, #672]	; (80009b8 <main+0x350>)
 8000716:	f002 fdaf 	bl	8003278 <HAL_I2C_Mem_Write>
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d004      	beq.n	800072e <main+0xc6>
    printf("I2C communication error (%X).\n", status);
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	4619      	mov	r1, r3
 8000728:	48a4      	ldr	r0, [pc, #656]	; (80009bc <main+0x354>)
 800072a:	f006 ffd3 	bl	80076d4 <iprintf>

  HAL_Delay(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f001 ff38 	bl	80025a4 <HAL_Delay>

  /* Set KeyPad scanning engine */

  /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
  data = 0x40;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 8000738:	23c8      	movs	r3, #200	; 0xc8
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	1dbb      	adds	r3, r7, #6
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	221e      	movs	r2, #30
 8000748:	217e      	movs	r1, #126	; 0x7e
 800074a:	489b      	ldr	r0, [pc, #620]	; (80009b8 <main+0x350>)
 800074c:	f002 fd94 	bl	8003278 <HAL_I2C_Mem_Write>
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d004      	beq.n	8000764 <main+0xfc>
    printf("I2C communication error (%X).\n", status);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4619      	mov	r1, r3
 800075e:	4897      	ldr	r0, [pc, #604]	; (80009bc <main+0x354>)
 8000760:	f006 ffb8 	bl	80076d4 <iprintf>

  /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
  data = 0xF0;
 8000764:	23f0      	movs	r3, #240	; 0xf0
 8000766:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000768:	23c8      	movs	r3, #200	; 0xc8
 800076a:	9302      	str	r3, [sp, #8]
 800076c:	2301      	movs	r3, #1
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	1dbb      	adds	r3, r7, #6
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2301      	movs	r3, #1
 8000776:	220f      	movs	r2, #15
 8000778:	217e      	movs	r1, #126	; 0x7e
 800077a:	488f      	ldr	r0, [pc, #572]	; (80009b8 <main+0x350>)
 800077c:	f002 fd7c 	bl	8003278 <HAL_I2C_Mem_Write>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d004      	beq.n	8000794 <main+0x12c>
    printf("I2C communication error (%X).\n", status);
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4619      	mov	r1, r3
 800078e:	488b      	ldr	r0, [pc, #556]	; (80009bc <main+0x354>)
 8000790:	f006 ffa0 	bl	80076d4 <iprintf>

  /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
  data = 0x0F;
 8000794:	230f      	movs	r3, #15
 8000796:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000798:	23c8      	movs	r3, #200	; 0xc8
 800079a:	9302      	str	r3, [sp, #8]
 800079c:	2301      	movs	r3, #1
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2301      	movs	r3, #1
 80007a6:	220e      	movs	r2, #14
 80007a8:	217e      	movs	r1, #126	; 0x7e
 80007aa:	4883      	ldr	r0, [pc, #524]	; (80009b8 <main+0x350>)
 80007ac:	f002 fd64 	bl	8003278 <HAL_I2C_Mem_Write>
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d004      	beq.n	80007c4 <main+0x15c>
    printf("I2C communication error (%X).\n", status);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4619      	mov	r1, r3
 80007be:	487f      	ldr	r0, [pc, #508]	; (80009bc <main+0x354>)
 80007c0:	f006 ff88 	bl	80076d4 <iprintf>

  /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
  data = 0x0F;
 80007c4:	230f      	movs	r3, #15
 80007c6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 80007c8:	23c8      	movs	r3, #200	; 0xc8
 80007ca:	9302      	str	r3, [sp, #8]
 80007cc:	2301      	movs	r3, #1
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	1dbb      	adds	r3, r7, #6
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2301      	movs	r3, #1
 80007d6:	220b      	movs	r2, #11
 80007d8:	217e      	movs	r1, #126	; 0x7e
 80007da:	4877      	ldr	r0, [pc, #476]	; (80009b8 <main+0x350>)
 80007dc:	f002 fd4c 	bl	8003278 <HAL_I2C_Mem_Write>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d004      	beq.n	80007f4 <main+0x18c>
    printf("I2C communication error (%X).\n", status);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4873      	ldr	r0, [pc, #460]	; (80009bc <main+0x354>)
 80007f0:	f006 ff70 	bl	80076d4 <iprintf>

  /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
  data = 0x0F;
 80007f4:	230f      	movs	r3, #15
 80007f6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 80007f8:	23c8      	movs	r3, #200	; 0xc8
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	1dbb      	adds	r3, r7, #6
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2301      	movs	r3, #1
 8000806:	2206      	movs	r2, #6
 8000808:	217e      	movs	r1, #126	; 0x7e
 800080a:	486b      	ldr	r0, [pc, #428]	; (80009b8 <main+0x350>)
 800080c:	f002 fd34 	bl	8003278 <HAL_I2C_Mem_Write>
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <main+0x1bc>
    printf("I2C communication error (%X).\n", status);
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4619      	mov	r1, r3
 800081e:	4867      	ldr	r0, [pc, #412]	; (80009bc <main+0x354>)
 8000820:	f006 ff58 	bl	80076d4 <iprintf>

  /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
  data = 0x0F;
 8000824:	230f      	movs	r3, #15
 8000826:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 8000828:	23c8      	movs	r3, #200	; 0xc8
 800082a:	9302      	str	r3, [sp, #8]
 800082c:	2301      	movs	r3, #1
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	1dbb      	adds	r3, r7, #6
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	2223      	movs	r2, #35	; 0x23
 8000838:	217e      	movs	r1, #126	; 0x7e
 800083a:	485f      	ldr	r0, [pc, #380]	; (80009b8 <main+0x350>)
 800083c:	f002 fd1c 	bl	8003278 <HAL_I2C_Mem_Write>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d004      	beq.n	8000854 <main+0x1ec>
    printf("I2C communication error (%X).\n", status);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4619      	mov	r1, r3
 800084e:	485b      	ldr	r0, [pc, #364]	; (80009bc <main+0x354>)
 8000850:	f006 ff40 	bl	80076d4 <iprintf>

  /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
  data = 0x05;
 8000854:	2305      	movs	r3, #5
 8000856:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8000858:	23c8      	movs	r3, #200	; 0xc8
 800085a:	9302      	str	r3, [sp, #8]
 800085c:	2301      	movs	r3, #1
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	1dbb      	adds	r3, r7, #6
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	2222      	movs	r2, #34	; 0x22
 8000868:	217e      	movs	r1, #126	; 0x7e
 800086a:	4853      	ldr	r0, [pc, #332]	; (80009b8 <main+0x350>)
 800086c:	f002 fd04 	bl	8003278 <HAL_I2C_Mem_Write>
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d004      	beq.n	8000884 <main+0x21c>
    printf("I2C communication error (%X).\n", status);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4619      	mov	r1, r3
 800087e:	484f      	ldr	r0, [pc, #316]	; (80009bc <main+0x354>)
 8000880:	f006 ff28 	bl	80076d4 <iprintf>

  /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
  data = 0x7D;
 8000884:	237d      	movs	r3, #125	; 0x7d
 8000886:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 8000888:	23c8      	movs	r3, #200	; 0xc8
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	2301      	movs	r3, #1
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	1dbb      	adds	r3, r7, #6
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2301      	movs	r3, #1
 8000896:	2225      	movs	r2, #37	; 0x25
 8000898:	217e      	movs	r1, #126	; 0x7e
 800089a:	4847      	ldr	r0, [pc, #284]	; (80009b8 <main+0x350>)
 800089c:	f002 fcec 	bl	8003278 <HAL_I2C_Mem_Write>
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <main+0x24c>
    printf("I2C communication error (%X).\n", status);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4619      	mov	r1, r3
 80008ae:	4843      	ldr	r0, [pc, #268]	; (80009bc <main+0x354>)
 80008b0:	f006 ff10 	bl	80076d4 <iprintf>

  /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
  data = 0x1B;
 80008b4:	231b      	movs	r3, #27
 80008b6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 80008b8:	23c8      	movs	r3, #200	; 0xc8
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	2301      	movs	r3, #1
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2301      	movs	r3, #1
 80008c6:	2226      	movs	r2, #38	; 0x26
 80008c8:	217e      	movs	r1, #126	; 0x7e
 80008ca:	483b      	ldr	r0, [pc, #236]	; (80009b8 <main+0x350>)
 80008cc:	f002 fcd4 	bl	8003278 <HAL_I2C_Mem_Write>
 80008d0:	4603      	mov	r3, r0
 80008d2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d004      	beq.n	80008e4 <main+0x27c>
    printf("I2C communication error (%X).\n", status);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4619      	mov	r1, r3
 80008de:	4837      	ldr	r0, [pc, #220]	; (80009bc <main+0x354>)
 80008e0:	f006 fef8 	bl	80076d4 <iprintf>

  /* Enable EXTI4_IRQ after SX1509 initialization */
  HAL_Delay(100);
 80008e4:	2064      	movs	r0, #100	; 0x64
 80008e6:	f001 fe5d 	bl	80025a4 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008ea:	200a      	movs	r0, #10
 80008ec:	f002 fa2d 	bl	8002d4a <HAL_NVIC_EnableIRQ>

  /* Disable EXTI2_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80008f0:	2008      	movs	r0, #8
 80008f2:	f002 fa38 	bl	8002d66 <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80008f6:	2312      	movs	r3, #18
 80008f8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80008fa:	23c8      	movs	r3, #200	; 0xc8
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2301      	movs	r3, #1
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	1dbb      	adds	r3, r7, #6
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	227d      	movs	r2, #125	; 0x7d
 800090a:	217c      	movs	r1, #124	; 0x7c
 800090c:	482a      	ldr	r0, [pc, #168]	; (80009b8 <main+0x350>)
 800090e:	f002 fcb3 	bl	8003278 <HAL_I2C_Mem_Write>
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d004      	beq.n	8000926 <main+0x2be>
    printf("I2C communication error (%X).\n", status);
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4619      	mov	r1, r3
 8000920:	4826      	ldr	r0, [pc, #152]	; (80009bc <main+0x354>)
 8000922:	f006 fed7 	bl	80076d4 <iprintf>

  data = 0x34;
 8000926:	2334      	movs	r3, #52	; 0x34
 8000928:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 800092a:	23c8      	movs	r3, #200	; 0xc8
 800092c:	9302      	str	r3, [sp, #8]
 800092e:	2301      	movs	r3, #1
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	1dbb      	adds	r3, r7, #6
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2301      	movs	r3, #1
 8000938:	227d      	movs	r2, #125	; 0x7d
 800093a:	217c      	movs	r1, #124	; 0x7c
 800093c:	481e      	ldr	r0, [pc, #120]	; (80009b8 <main+0x350>)
 800093e:	f002 fc9b 	bl	8003278 <HAL_I2C_Mem_Write>
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d004      	beq.n	8000956 <main+0x2ee>
    printf("I2C communication error (%X).\n", status);
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	4619      	mov	r1, r3
 8000950:	481a      	ldr	r0, [pc, #104]	; (80009bc <main+0x354>)
 8000952:	f006 febf 	bl	80076d4 <iprintf>

  HAL_Delay(100);
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f001 fe24 	bl	80025a4 <HAL_Delay>

  /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 800095c:	23ff      	movs	r3, #255	; 0xff
 800095e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000960:	23c8      	movs	r3, #200	; 0xc8
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	2301      	movs	r3, #1
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	1dbb      	adds	r3, r7, #6
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2301      	movs	r3, #1
 800096e:	220f      	movs	r2, #15
 8000970:	217c      	movs	r1, #124	; 0x7c
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <main+0x350>)
 8000974:	f002 fc80 	bl	8003278 <HAL_I2C_Mem_Write>
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d004      	beq.n	800098c <main+0x324>
    printf("I2C communication error (%X).\n", status);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4619      	mov	r1, r3
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <main+0x354>)
 8000988:	f006 fea4 	bl	80076d4 <iprintf>

  /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 800098c:	23ff      	movs	r3, #255	; 0xff
 800098e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000990:	23c8      	movs	r3, #200	; 0xc8
 8000992:	9302      	str	r3, [sp, #8]
 8000994:	2301      	movs	r3, #1
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	1dbb      	adds	r3, r7, #6
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2301      	movs	r3, #1
 800099e:	220e      	movs	r2, #14
 80009a0:	217c      	movs	r1, #124	; 0x7c
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <main+0x350>)
 80009a4:	f002 fc68 	bl	8003278 <HAL_I2C_Mem_Write>
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	e006      	b.n	80009c0 <main+0x358>
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	200000dc 	.word	0x200000dc
 80009bc:	08008414 	.word	0x08008414
 80009c0:	d004      	beq.n	80009cc <main+0x364>
    printf("I2C communication error (%X).\n", status);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4619      	mov	r1, r3
 80009c6:	482a      	ldr	r0, [pc, #168]	; (8000a70 <main+0x408>)
 80009c8:	f006 fe84 	bl	80076d4 <iprintf>

  /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
  data = 0x00;
 80009cc:	2300      	movs	r3, #0
 80009ce:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 80009d0:	23c8      	movs	r3, #200	; 0xc8
 80009d2:	9302      	str	r3, [sp, #8]
 80009d4:	2301      	movs	r3, #1
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2301      	movs	r3, #1
 80009de:	2213      	movs	r2, #19
 80009e0:	217c      	movs	r1, #124	; 0x7c
 80009e2:	4824      	ldr	r0, [pc, #144]	; (8000a74 <main+0x40c>)
 80009e4:	f002 fc48 	bl	8003278 <HAL_I2C_Mem_Write>
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d004      	beq.n	80009fc <main+0x394>
    printf("I2C communication error (%X).\n", status);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4619      	mov	r1, r3
 80009f6:	481e      	ldr	r0, [pc, #120]	; (8000a70 <main+0x408>)
 80009f8:	f006 fe6c 	bl	80076d4 <iprintf>

  /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 80009fc:	23aa      	movs	r3, #170	; 0xaa
 80009fe:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000a00:	23c8      	movs	r3, #200	; 0xc8
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	1dbb      	adds	r3, r7, #6
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	2216      	movs	r2, #22
 8000a10:	217c      	movs	r1, #124	; 0x7c
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <main+0x40c>)
 8000a14:	f002 fc30 	bl	8003278 <HAL_I2C_Mem_Write>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d004      	beq.n	8000a2c <main+0x3c4>
    printf("I2C communication error (%X).\n", status);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4812      	ldr	r0, [pc, #72]	; (8000a70 <main+0x408>)
 8000a28:	f006 fe54 	bl	80076d4 <iprintf>

  /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000a2c:	23aa      	movs	r3, #170	; 0xaa
 8000a2e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000a30:	23c8      	movs	r3, #200	; 0xc8
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	2301      	movs	r3, #1
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	1dbb      	adds	r3, r7, #6
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	2217      	movs	r2, #23
 8000a40:	217c      	movs	r1, #124	; 0x7c
 8000a42:	480c      	ldr	r0, [pc, #48]	; (8000a74 <main+0x40c>)
 8000a44:	f002 fc18 	bl	8003278 <HAL_I2C_Mem_Write>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <main+0x3f4>
    printf("I2C communication error (%X).\n", status);
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <main+0x408>)
 8000a58:	f006 fe3c 	bl	80076d4 <iprintf>

  /* Enable EXTI2_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f001 fda1 	bl	80025a4 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a62:	2008      	movs	r0, #8
 8000a64:	f002 f971 	bl	8002d4a <HAL_NVIC_EnableIRQ>


  printf("Ready\n");
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <main+0x410>)
 8000a6a:	f006 feb9 	bl	80077e0 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <main+0x406>
 8000a70:	08008414 	.word	0x08008414
 8000a74:	200000dc 	.word	0x200000dc
 8000a78:	08008434 	.word	0x08008434

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2234      	movs	r2, #52	; 0x34
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f006 fd85 	bl	800759a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa0:	f003 f94a 	bl	8003d38 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <SystemClock_Config+0xdc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a2b      	ldr	r2, [pc, #172]	; (8000b58 <SystemClock_Config+0xdc>)
 8000aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <SystemClock_Config+0xdc>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <SystemClock_Config+0xe0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac4:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <SystemClock_Config+0xe0>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <SystemClock_Config+0xe0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000adc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ae0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000af0:	2360      	movs	r3, #96	; 0x60
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af8:	2304      	movs	r3, #4
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 f977 	bl	8003df8 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b10:	f000 ff1e 	bl	8001950 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b14:	f003 f920 	bl	8003d58 <HAL_PWREx_EnableOverDrive>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b1e:	f000 ff17 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fc08 	bl	8004354 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b4a:	f000 ff01 	bl	8001950 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <MX_ADC1_Init+0x9c>)
 8000b76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba2:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <MX_ADC1_Init+0xa0>)
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bc2:	f001 fd13 	bl	80025ec <HAL_ADC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 fec0 	bl	8001950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000be2:	f001 fd47 	bl	8002674 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bec:	f000 feb0 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000094 	.word	0x20000094
 8000bfc:	40012000 	.word	0x40012000
 8000c00:	0f000001 	.word	0x0f000001

08000c04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_I2C1_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <MX_I2C1_Init+0x7c>)
 8000c12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c40:	f002 fa8a 	bl	8003158 <HAL_I2C_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c4a:	f000 fe81 	bl	8001950 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c52:	f002 ffd9 	bl	8003c08 <HAL_I2CEx_ConfigAnalogFilter>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c5c:	f000 fe78 	bl	8001950 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c64:	f003 f81b 	bl	8003c9e <HAL_I2CEx_ConfigDigitalFilter>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 fe6f 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000dc 	.word	0x200000dc
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	20303e5d 	.word	0x20303e5d

08000c84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <MX_I2C2_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <MX_I2C2_Init+0x7c>)
 8000c92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cbe:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cc0:	f002 fa4a 	bl	8003158 <HAL_I2C_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cca:	f000 fe41 	bl	8001950 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000cd2:	f002 ff99 	bl	8003c08 <HAL_I2CEx_ConfigAnalogFilter>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f000 fe38 	bl	8001950 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_I2C2_Init+0x74>)
 8000ce4:	f002 ffdb 	bl	8003c9e <HAL_I2CEx_ConfigDigitalFilter>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f000 fe2f 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000130 	.word	0x20000130
 8000cfc:	40005800 	.word	0x40005800
 8000d00:	20303e5d 	.word	0x20303e5d

08000d04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <MX_SPI1_Init+0x78>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d52:	2207      	movs	r2, #7
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d5e:	2208      	movs	r2, #8
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_SPI1_Init+0x74>)
 8000d64:	f004 f944 	bl	8004ff0 <HAL_SPI_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d6e:	f000 fdef 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000184 	.word	0x20000184
 8000d7c:	40013000 	.word	0x40013000

08000d80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09a      	sub	sp, #104	; 0x68
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	222c      	movs	r2, #44	; 0x2c
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 fbed 	bl	800759a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc0:	4b55      	ldr	r3, [pc, #340]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000dc2:	4a56      	ldr	r2, [pc, #344]	; (8000f1c <MX_TIM1_Init+0x19c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000dc6:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000dc8:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000dcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b52      	ldr	r3, [pc, #328]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000dd4:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000dd6:	22c8      	movs	r2, #200	; 0xc8
 8000dd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b4f      	ldr	r3, [pc, #316]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de0:	4b4d      	ldr	r3, [pc, #308]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dec:	484a      	ldr	r0, [pc, #296]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000dee:	f004 f9aa 	bl	8005146 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000df8:	f000 fdaa 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e06:	4619      	mov	r1, r3
 8000e08:	4843      	ldr	r0, [pc, #268]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000e0a:	f004 fd01 	bl	8005810 <HAL_TIM_ConfigClockSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e14:	f000 fd9c 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e18:	483f      	ldr	r0, [pc, #252]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000e1a:	f004 f9eb 	bl	80051f4 <HAL_TIM_PWM_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e24:	f000 fd94 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4837      	ldr	r0, [pc, #220]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000e3c:	f005 fa74 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e46:	f000 fd83 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4a:	2360      	movs	r3, #96	; 0x60
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	482a      	ldr	r0, [pc, #168]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000e70:	f004 fbba 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e7a:	f000 fd69 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e82:	2204      	movs	r2, #4
 8000e84:	4619      	mov	r1, r3
 8000e86:	4824      	ldr	r0, [pc, #144]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000e88:	f004 fbae 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e92:	f000 fd5d 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481e      	ldr	r0, [pc, #120]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000ea0:	f004 fba2 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000eaa:	f000 fd51 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4818      	ldr	r0, [pc, #96]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000eb8:	f004 fb96 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000ec2:	f000 fd45 	bl	8001950 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4807      	ldr	r0, [pc, #28]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000efc:	f005 faa2 	bl	8006444 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000f06:	f000 fd23 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <MX_TIM1_Init+0x198>)
 8000f0c:	f000 ffc6 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 8000f10:	bf00      	nop
 8000f12:	3768      	adds	r7, #104	; 0x68
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200001e8 	.word	0x200001e8
 8000f1c:	40010000 	.word	0x40010000

08000f20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b092      	sub	sp, #72	; 0x48
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f60:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <MX_TIM2_Init+0x130>)
 8000f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f68:	4b39      	ldr	r3, [pc, #228]	; (8001050 <MX_TIM2_Init+0x130>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <MX_TIM2_Init+0x130>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <MX_TIM2_Init+0x130>)
 8000f76:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b34      	ldr	r3, [pc, #208]	; (8001050 <MX_TIM2_Init+0x130>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <MX_TIM2_Init+0x130>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f88:	4831      	ldr	r0, [pc, #196]	; (8001050 <MX_TIM2_Init+0x130>)
 8000f8a:	f004 f8dc 	bl	8005146 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f94:	f000 fcdc 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	482a      	ldr	r0, [pc, #168]	; (8001050 <MX_TIM2_Init+0x130>)
 8000fa6:	f004 fc33 	bl	8005810 <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000fb0:	f000 fcce 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fb4:	4826      	ldr	r0, [pc, #152]	; (8001050 <MX_TIM2_Init+0x130>)
 8000fb6:	f004 f91d 	bl	80051f4 <HAL_TIM_PWM_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000fc0:	f000 fcc6 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fc4:	4822      	ldr	r0, [pc, #136]	; (8001050 <MX_TIM2_Init+0x130>)
 8000fc6:	f004 f96c 	bl	80052a2 <HAL_TIM_IC_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000fd0:	f000 fcbe 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481b      	ldr	r0, [pc, #108]	; (8001050 <MX_TIM2_Init+0x130>)
 8000fe4:	f005 f9a0 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000fee:	f000 fcaf 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff2:	2360      	movs	r3, #96	; 0x60
 8000ff4:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4811      	ldr	r0, [pc, #68]	; (8001050 <MX_TIM2_Init+0x130>)
 800100c:	f004 faec 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001016:	f000 fc9b 	bl	8001950 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800101e:	2301      	movs	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	2208      	movs	r2, #8
 800102e:	4619      	mov	r1, r3
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <MX_TIM2_Init+0x130>)
 8001032:	f004 fa3d 	bl	80054b0 <HAL_TIM_IC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800103c:	f000 fc88 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <MX_TIM2_Init+0x130>)
 8001042:	f000 ff2b 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 8001046:	bf00      	nop
 8001048:	3748      	adds	r7, #72	; 0x48
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000234 	.word	0x20000234

08001054 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f006 fa99 	bl	800759a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_TIM3_Init+0xa4>)
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <MX_TIM3_Init+0xa8>)
 8001076:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_TIM3_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_TIM3_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_TIM3_Init+0xa4>)
 8001086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_TIM3_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_TIM3_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001098:	2301      	movs	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_TIM3_Init+0xa4>)
 80010c4:	f004 f94e 	bl	8005364 <HAL_TIM_Encoder_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010ce:	f000 fc3f 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_TIM3_Init+0xa4>)
 80010e0:	f005 f922 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80010ea:	f000 fc31 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3730      	adds	r7, #48	; 0x30
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000280 	.word	0x20000280
 80010fc:	40000400 	.word	0x40000400

08001100 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f006 fa43 	bl	800759a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_TIM4_Init+0xa4>)
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <MX_TIM4_Init+0xa8>)
 8001122:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_TIM4_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_TIM4_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM4_Init+0xa4>)
 8001132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001136:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM4_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM4_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001144:	2301      	movs	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM4_Init+0xa4>)
 8001170:	f004 f8f8 	bl	8005364 <HAL_TIM_Encoder_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800117a:	f000 fbe9 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM4_Init+0xa4>)
 800118c:	f005 f8cc 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001196:	f000 fbdb 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	; 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002cc 	.word	0x200002cc
 80011a8:	40000800 	.word	0x40000800

080011ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <MX_TIM5_Init+0xe8>)
 80011e0:	4a2d      	ldr	r2, [pc, #180]	; (8001298 <MX_TIM5_Init+0xec>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <MX_TIM5_Init+0xe8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <MX_TIM5_Init+0xe8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <MX_TIM5_Init+0xe8>)
 80011f2:	f04f 32ff 	mov.w	r2, #4294967295
 80011f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <MX_TIM5_Init+0xe8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <MX_TIM5_Init+0xe8>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001204:	4823      	ldr	r0, [pc, #140]	; (8001294 <MX_TIM5_Init+0xe8>)
 8001206:	f003 ff9e 	bl	8005146 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001210:	f000 fb9e 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	4619      	mov	r1, r3
 8001220:	481c      	ldr	r0, [pc, #112]	; (8001294 <MX_TIM5_Init+0xe8>)
 8001222:	f004 faf5 	bl	8005810 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800122c:	f000 fb90 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001230:	4818      	ldr	r0, [pc, #96]	; (8001294 <MX_TIM5_Init+0xe8>)
 8001232:	f003 ffdf 	bl	80051f4 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800123c:	f000 fb88 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4811      	ldr	r0, [pc, #68]	; (8001294 <MX_TIM5_Init+0xe8>)
 8001250:	f005 f86a 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800125a:	f000 fb79 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	; 0x60
 8001260:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <MX_TIM5_Init+0xe8>)
 8001276:	f004 f9b7 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001280:	f000 fb66 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <MX_TIM5_Init+0xe8>)
 8001286:	f000 fe09 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 800128a:	bf00      	nop
 800128c:	3738      	adds	r7, #56	; 0x38
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000318 	.word	0x20000318
 8001298:	40000c00 	.word	0x40000c00

0800129c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b09a      	sub	sp, #104	; 0x68
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	222c      	movs	r2, #44	; 0x2c
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f006 f95f 	bl	800759a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012dc:	4b56      	ldr	r3, [pc, #344]	; (8001438 <MX_TIM8_Init+0x19c>)
 80012de:	4a57      	ldr	r2, [pc, #348]	; (800143c <MX_TIM8_Init+0x1a0>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80012e2:	4b55      	ldr	r3, [pc, #340]	; (8001438 <MX_TIM8_Init+0x19c>)
 80012e4:	f240 32bf 	movw	r2, #959	; 0x3bf
 80012e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <MX_TIM8_Init+0x19c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <MX_TIM8_Init+0x19c>)
 80012f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <MX_TIM8_Init+0x19c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012fe:	4b4e      	ldr	r3, [pc, #312]	; (8001438 <MX_TIM8_Init+0x19c>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <MX_TIM8_Init+0x19c>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800130a:	484b      	ldr	r0, [pc, #300]	; (8001438 <MX_TIM8_Init+0x19c>)
 800130c:	f003 ff1b 	bl	8005146 <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001316:	f000 fb1b 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001320:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001324:	4619      	mov	r1, r3
 8001326:	4844      	ldr	r0, [pc, #272]	; (8001438 <MX_TIM8_Init+0x19c>)
 8001328:	f004 fa72 	bl	8005810 <HAL_TIM_ConfigClockSource>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001332:	f000 fb0d 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001336:	4840      	ldr	r0, [pc, #256]	; (8001438 <MX_TIM8_Init+0x19c>)
 8001338:	f003 ff5c 	bl	80051f4 <HAL_TIM_PWM_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001342:	f000 fb05 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001352:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001356:	4619      	mov	r1, r3
 8001358:	4837      	ldr	r0, [pc, #220]	; (8001438 <MX_TIM8_Init+0x19c>)
 800135a:	f004 ffe5 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001364:	f000 faf4 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001368:	2360      	movs	r3, #96	; 0x60
 800136a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001370:	2300      	movs	r3, #0
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001384:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	482a      	ldr	r0, [pc, #168]	; (8001438 <MX_TIM8_Init+0x19c>)
 800138e:	f004 f92b 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001398:	f000 fada 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013a0:	2204      	movs	r2, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4824      	ldr	r0, [pc, #144]	; (8001438 <MX_TIM8_Init+0x19c>)
 80013a6:	f004 f91f 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80013b0:	f000 face 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b8:	2208      	movs	r2, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	481e      	ldr	r0, [pc, #120]	; (8001438 <MX_TIM8_Init+0x19c>)
 80013be:	f004 f913 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80013c8:	f000 fac2 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013d0:	220c      	movs	r2, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	4818      	ldr	r0, [pc, #96]	; (8001438 <MX_TIM8_Init+0x19c>)
 80013d6:	f004 f907 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80013e0:	f000 fab6 	bl	8001950 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM8_Init+0x19c>)
 800141a:	f005 f813 	bl	8006444 <HAL_TIMEx_ConfigBreakDeadTime>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001424:	f000 fa94 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM8_Init+0x19c>)
 800142a:	f000 fd37 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 800142e:	bf00      	nop
 8001430:	3768      	adds	r7, #104	; 0x68
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000364 	.word	0x20000364
 800143c:	40010400 	.word	0x40010400

08001440 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_TIM9_Init+0x98>)
 800145a:	4a20      	ldr	r2, [pc, #128]	; (80014dc <MX_TIM9_Init+0x9c>)
 800145c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <MX_TIM9_Init+0x98>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_TIM9_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_TIM9_Init+0x98>)
 800146c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001470:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_TIM9_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_TIM9_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800147e:	4816      	ldr	r0, [pc, #88]	; (80014d8 <MX_TIM9_Init+0x98>)
 8001480:	f003 feb8 	bl	80051f4 <HAL_TIM_PWM_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800148a:	f000 fa61 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148e:	2360      	movs	r3, #96	; 0x60
 8001490:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_TIM9_Init+0x98>)
 80014a6:	f004 f89f 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80014b0:	f000 fa4e 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2204      	movs	r2, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM9_Init+0x98>)
 80014bc:	f004 f894 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80014c6:	f000 fa43 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM9_Init+0x98>)
 80014cc:	f000 fce6 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200003b0 	.word	0x200003b0
 80014dc:	40014000 	.word	0x40014000

080014e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_UART4_Init+0x58>)
 80014e6:	4a15      	ldr	r2, [pc, #84]	; (800153c <MX_UART4_Init+0x5c>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_UART4_Init+0x58>)
 80014ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_UART4_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_UART4_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_UART4_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_UART4_Init+0x58>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_UART4_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_UART4_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_UART4_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_UART4_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_UART4_Init+0x58>)
 8001524:	f005 f80c 	bl	8006540 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800152e:	f000 fa0f 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200003fc 	.word	0x200003fc
 800153c:	40004c00 	.word	0x40004c00

08001540 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_UART5_Init+0x58>)
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <MX_UART5_Init+0x5c>)
 8001548:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <MX_UART5_Init+0x58>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_UART5_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_UART5_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_UART5_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_UART5_Init+0x58>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_UART5_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_UART5_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_UART5_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_UART5_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_UART5_Init+0x58>)
 8001584:	f004 ffdc 	bl	8006540 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800158e:	f000 f9df 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000484 	.word	0x20000484
 800159c:	40005000 	.word	0x40005000

080015a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015a6:	4a15      	ldr	r2, [pc, #84]	; (80015fc <MX_USART1_UART_Init+0x5c>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_USART1_UART_Init+0x58>)
 80015e4:	f004 ffac 	bl	8006540 <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015ee:	f000 f9af 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000050c 	.word	0x2000050c
 80015fc:	40011000 	.word	0x40011000

08001600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_USART2_UART_Init+0x58>)
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <MX_USART2_UART_Init+0x5c>)
 8001608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_USART2_UART_Init+0x58>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_USART2_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_USART2_UART_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_USART2_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_USART2_UART_Init+0x58>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <MX_USART2_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_USART2_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <MX_USART2_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_USART2_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_USART2_UART_Init+0x58>)
 8001644:	f004 ff7c 	bl	8006540 <HAL_UART_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800164e:	f000 f97f 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000594 	.word	0x20000594
 800165c:	40004400 	.word	0x40004400

08001660 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <MX_USART3_UART_Init+0x5c>)
 8001668:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART3_UART_Init+0x58>)
 80016a4:	f004 ff4c 	bl	8006540 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016ae:	f000 f94f 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000061c 	.word	0x2000061c
 80016bc:	40004800 	.word	0x40004800

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08e      	sub	sp, #56	; 0x38
 80016c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d6:	4b97      	ldr	r3, [pc, #604]	; (8001934 <MX_GPIO_Init+0x274>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a96      	ldr	r2, [pc, #600]	; (8001934 <MX_GPIO_Init+0x274>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b94      	ldr	r3, [pc, #592]	; (8001934 <MX_GPIO_Init+0x274>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	623b      	str	r3, [r7, #32]
 80016ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b91      	ldr	r3, [pc, #580]	; (8001934 <MX_GPIO_Init+0x274>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a90      	ldr	r2, [pc, #576]	; (8001934 <MX_GPIO_Init+0x274>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b8e      	ldr	r3, [pc, #568]	; (8001934 <MX_GPIO_Init+0x274>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001706:	4b8b      	ldr	r3, [pc, #556]	; (8001934 <MX_GPIO_Init+0x274>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a8a      	ldr	r2, [pc, #552]	; (8001934 <MX_GPIO_Init+0x274>)
 800170c:	f043 0320 	orr.w	r3, r3, #32
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b88      	ldr	r3, [pc, #544]	; (8001934 <MX_GPIO_Init+0x274>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171e:	4b85      	ldr	r3, [pc, #532]	; (8001934 <MX_GPIO_Init+0x274>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a84      	ldr	r2, [pc, #528]	; (8001934 <MX_GPIO_Init+0x274>)
 8001724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b82      	ldr	r3, [pc, #520]	; (8001934 <MX_GPIO_Init+0x274>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b7f      	ldr	r3, [pc, #508]	; (8001934 <MX_GPIO_Init+0x274>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a7e      	ldr	r2, [pc, #504]	; (8001934 <MX_GPIO_Init+0x274>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b7c      	ldr	r3, [pc, #496]	; (8001934 <MX_GPIO_Init+0x274>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b79      	ldr	r3, [pc, #484]	; (8001934 <MX_GPIO_Init+0x274>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a78      	ldr	r2, [pc, #480]	; (8001934 <MX_GPIO_Init+0x274>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b76      	ldr	r3, [pc, #472]	; (8001934 <MX_GPIO_Init+0x274>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001766:	4b73      	ldr	r3, [pc, #460]	; (8001934 <MX_GPIO_Init+0x274>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a72      	ldr	r2, [pc, #456]	; (8001934 <MX_GPIO_Init+0x274>)
 800176c:	f043 0308 	orr.w	r3, r3, #8
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b70      	ldr	r3, [pc, #448]	; (8001934 <MX_GPIO_Init+0x274>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800177e:	4b6d      	ldr	r3, [pc, #436]	; (8001934 <MX_GPIO_Init+0x274>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a6c      	ldr	r2, [pc, #432]	; (8001934 <MX_GPIO_Init+0x274>)
 8001784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <MX_GPIO_Init+0x274>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2118      	movs	r1, #24
 800179a:	4867      	ldr	r0, [pc, #412]	; (8001938 <MX_GPIO_Init+0x278>)
 800179c:	f001 fcaa 	bl	80030f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f244 0181 	movw	r1, #16513	; 0x4081
 80017a6:	4865      	ldr	r0, [pc, #404]	; (800193c <MX_GPIO_Init+0x27c>)
 80017a8:	f001 fca4 	bl	80030f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2140      	movs	r1, #64	; 0x40
 80017b0:	4863      	ldr	r0, [pc, #396]	; (8001940 <MX_GPIO_Init+0x280>)
 80017b2:	f001 fc9f 	bl	80030f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 80017b6:	2318      	movs	r3, #24
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	485a      	ldr	r0, [pc, #360]	; (8001938 <MX_GPIO_Init+0x278>)
 80017ce:	f001 fae5 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 80017d2:	f643 7308 	movw	r3, #16136	; 0x3f08
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	4856      	ldr	r0, [pc, #344]	; (8001944 <MX_GPIO_Init+0x284>)
 80017ea:	f001 fad7 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 80017ee:	2310      	movs	r3, #16
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	4850      	ldr	r0, [pc, #320]	; (8001944 <MX_GPIO_Init+0x284>)
 8001804:	f001 faca 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001808:	2332      	movs	r3, #50	; 0x32
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001818:	230b      	movs	r3, #11
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001820:	4619      	mov	r1, r3
 8001822:	4849      	ldr	r0, [pc, #292]	; (8001948 <MX_GPIO_Init+0x288>)
 8001824:	f001 faba 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001828:	2386      	movs	r3, #134	; 0x86
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001838:	230b      	movs	r3, #11
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	4842      	ldr	r0, [pc, #264]	; (800194c <MX_GPIO_Init+0x28c>)
 8001844:	f001 faaa 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001848:	f244 0381 	movw	r3, #16513	; 0x4081
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	4836      	ldr	r0, [pc, #216]	; (800193c <MX_GPIO_Init+0x27c>)
 8001862:	f001 fa9b 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001878:	230b      	movs	r3, #11
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	4619      	mov	r1, r3
 8001882:	482e      	ldr	r0, [pc, #184]	; (800193c <MX_GPIO_Init+0x27c>)
 8001884:	f001 fa8a 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001888:	2340      	movs	r3, #64	; 0x40
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	4828      	ldr	r0, [pc, #160]	; (8001940 <MX_GPIO_Init+0x280>)
 80018a0:	f001 fa7c 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	4822      	ldr	r0, [pc, #136]	; (8001940 <MX_GPIO_Init+0x280>)
 80018b8:	f001 fa70 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018ce:	230a      	movs	r3, #10
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d6:	4619      	mov	r1, r3
 80018d8:	481c      	ldr	r0, [pc, #112]	; (800194c <MX_GPIO_Init+0x28c>)
 80018da:	f001 fa5f 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4816      	ldr	r0, [pc, #88]	; (800194c <MX_GPIO_Init+0x28c>)
 80018f4:	f001 fa52 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800190a:	230b      	movs	r3, #11
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <MX_GPIO_Init+0x280>)
 8001916:	f001 fa41 	bl	8002d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2101      	movs	r1, #1
 800191e:	200a      	movs	r0, #10
 8001920:	f001 f9f7 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001924:	200a      	movs	r0, #10
 8001926:	f001 fa10 	bl	8002d4a <HAL_NVIC_EnableIRQ>

}
 800192a:	bf00      	nop
 800192c:	3738      	adds	r7, #56	; 0x38
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40021000 	.word	0x40021000
 800193c:	40020400 	.word	0x40020400
 8001940:	40021800 	.word	0x40021800
 8001944:	40021400 	.word	0x40021400
 8001948:	40020800 	.word	0x40020800
 800194c:	40020000 	.word	0x40020000

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>
	...

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_MspInit+0x44>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_MspInit+0x44>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_MspInit+0x44>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x44>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x44>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x44>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_ADC_MspInit+0x74>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d123      	bne.n	8001a0e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_ADC_MspInit+0x78>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_ADC_MspInit+0x78>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_ADC_MspInit+0x78>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_ADC_MspInit+0x78>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_ADC_MspInit+0x78>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_ADC_MspInit+0x78>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 80019f6:	2308      	movs	r3, #8
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fa:	2303      	movs	r3, #3
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_ADC_MspInit+0x7c>)
 8001a0a:	f001 f9c7 	bl	8002d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40012000 	.word	0x40012000
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0b0      	sub	sp, #192	; 0xc0
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	2290      	movs	r2, #144	; 0x90
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f005 fda8 	bl	800759a <memset>
  if(hi2c->Instance==I2C1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a44      	ldr	r2, [pc, #272]	; (8001b60 <HAL_I2C_MspInit+0x13c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d13e      	bne.n	8001ad2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a58:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fe9b 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001a70:	f7ff ff6e 	bl	8001950 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4a3a      	ldr	r2, [pc, #232]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a80:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a94:	2312      	movs	r3, #18
 8001a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	482d      	ldr	r0, [pc, #180]	; (8001b68 <HAL_I2C_MspInit+0x144>)
 8001ab4:	f001 f972 	bl	8002d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	4a29      	ldr	r2, [pc, #164]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ad0:	e041      	b.n	8001b56 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_I2C_MspInit+0x148>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d13c      	bne.n	8001b56 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 fe57 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001af8:	f7ff ff2a 	bl	8001950 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b14:	2303      	movs	r3, #3
 8001b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1a:	2312      	movs	r3, #18
 8001b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b36:	4619      	mov	r1, r3
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <HAL_I2C_MspInit+0x14c>)
 8001b3a:	f001 f92f 	bl	8002d9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_I2C_MspInit+0x140>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
}
 8001b56:	bf00      	nop
 8001b58:	37c0      	adds	r7, #192	; 0xc0
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40005400 	.word	0x40005400
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40005800 	.word	0x40005800
 8001b70:	40021400 	.word	0x40021400

08001b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	; 0x30
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a33      	ldr	r2, [pc, #204]	; (8001c60 <HAL_SPI_MspInit+0xec>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d160      	bne.n	8001c58 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a2c      	ldr	r2, [pc, #176]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc6:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a26      	ldr	r2, [pc, #152]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_SPI_MspInit+0xf0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c06:	2305      	movs	r3, #5
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4815      	ldr	r0, [pc, #84]	; (8001c68 <HAL_SPI_MspInit+0xf4>)
 8001c12:	f001 f8c3 	bl	8002d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c26:	2305      	movs	r3, #5
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480e      	ldr	r0, [pc, #56]	; (8001c6c <HAL_SPI_MspInit+0xf8>)
 8001c32:	f001 f8b3 	bl	8002d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c48:	2305      	movs	r3, #5
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <HAL_SPI_MspInit+0xfc>)
 8001c54:	f001 f8a2 	bl	8002d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c58:	bf00      	nop
 8001c5a:	3730      	adds	r7, #48	; 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40013000 	.word	0x40013000
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021800 	.word	0x40021800

08001c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <HAL_TIM_Base_MspInit+0xe8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10c      	bne.n	8001cb0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c96:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001cae:	e051      	b.n	8001d54 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb8:	d129      	bne.n	8001d0e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	4619      	mov	r1, r3
 8001d06:	4817      	ldr	r0, [pc, #92]	; (8001d64 <HAL_TIM_Base_MspInit+0xf0>)
 8001d08:	f001 f848 	bl	8002d9c <HAL_GPIO_Init>
}
 8001d0c:	e022      	b.n	8001d54 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <HAL_TIM_Base_MspInit+0xf4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d10c      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	e010      	b.n	8001d54 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_TIM_Base_MspInit+0xf8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d10b      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	6453      	str	r3, [r2, #68]	; 0x44
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_TIM_Base_MspInit+0xec>)
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
}
 8001d54:	bf00      	nop
 8001d56:	3730      	adds	r7, #48	; 0x30
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	40010400 	.word	0x40010400

08001d70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2e      	ldr	r2, [pc, #184]	; (8001e48 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d128      	bne.n	8001de4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d92:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a2d      	ldr	r2, [pc, #180]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001dc2:	2330      	movs	r3, #48	; 0x30
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	481c      	ldr	r0, [pc, #112]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001dde:	f000 ffdd 	bl	8002d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001de2:	e02d      	b.n	8001e40 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d128      	bne.n	8001e40 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001e1e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e3c:	f000 ffae 	bl	8002d9c <HAL_GPIO_Init>
}
 8001e40:	bf00      	nop
 8001e42:	3730      	adds	r7, #48	; 0x30
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40000800 	.word	0x40000800
 8001e58:	40020c00 	.word	0x40020c00

08001e5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_TIM_PWM_MspInit+0x38>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10b      	bne.n	8001e86 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40014000 	.word	0x40014000
 8001e98:	40023800 	.word	0x40023800

08001e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08c      	sub	sp, #48	; 0x30
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a56      	ldr	r2, [pc, #344]	; (8002014 <HAL_TIM_MspPostInit+0x178>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d11d      	bne.n	8001efa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ebe:	4b56      	ldr	r3, [pc, #344]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a55      	ldr	r2, [pc, #340]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001ec4:	f043 0310 	orr.w	r3, r3, #16
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001ed6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	484a      	ldr	r0, [pc, #296]	; (800201c <HAL_TIM_MspPostInit+0x180>)
 8001ef4:	f000 ff52 	bl	8002d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001ef8:	e088      	b.n	800200c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f02:	d11d      	bne.n	8001f40 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	4b44      	ldr	r3, [pc, #272]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a43      	ldr	r2, [pc, #268]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	4619      	mov	r1, r3
 8001f38:	4839      	ldr	r0, [pc, #228]	; (8002020 <HAL_TIM_MspPostInit+0x184>)
 8001f3a:	f000 ff2f 	bl	8002d9c <HAL_GPIO_Init>
}
 8001f3e:	e065      	b.n	800200c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a37      	ldr	r2, [pc, #220]	; (8002024 <HAL_TIM_MspPostInit+0x188>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d11c      	bne.n	8001f84 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a32      	ldr	r2, [pc, #200]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f72:	2302      	movs	r3, #2
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4828      	ldr	r0, [pc, #160]	; (8002020 <HAL_TIM_MspPostInit+0x184>)
 8001f7e:	f000 ff0d 	bl	8002d9c <HAL_GPIO_Init>
}
 8001f82:	e043      	b.n	800200c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a27      	ldr	r2, [pc, #156]	; (8002028 <HAL_TIM_MspPostInit+0x18c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d11d      	bne.n	8001fca <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a21      	ldr	r2, [pc, #132]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8001fa6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	481a      	ldr	r0, [pc, #104]	; (800202c <HAL_TIM_MspPostInit+0x190>)
 8001fc4:	f000 feea 	bl	8002d9c <HAL_GPIO_Init>
}
 8001fc8:	e020      	b.n	800200c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_TIM_MspPostInit+0x194>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_TIM_MspPostInit+0x17c>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8001fec:	2360      	movs	r3, #96	; 0x60
 8001fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	4619      	mov	r1, r3
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <HAL_TIM_MspPostInit+0x180>)
 8002008:	f000 fec8 	bl	8002d9c <HAL_GPIO_Init>
}
 800200c:	bf00      	nop
 800200e:	3730      	adds	r7, #48	; 0x30
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40010000 	.word	0x40010000
 8002018:	40023800 	.word	0x40023800
 800201c:	40021000 	.word	0x40021000
 8002020:	40020000 	.word	0x40020000
 8002024:	40000c00 	.word	0x40000c00
 8002028:	40010400 	.word	0x40010400
 800202c:	40020800 	.word	0x40020800
 8002030:	40014000 	.word	0x40014000

08002034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0b6      	sub	sp, #216	; 0xd8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800204c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002050:	2290      	movs	r2, #144	; 0x90
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f005 faa0 	bl	800759a <memset>
  if(huart->Instance==UART4)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4aa0      	ldr	r2, [pc, #640]	; (80022e0 <HAL_UART_MspInit+0x2ac>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d13e      	bne.n	80020e2 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002074:	4618      	mov	r0, r3
 8002076:	f002 fb93 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002080:	f7ff fc66 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002084:	4b97      	ldr	r3, [pc, #604]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4a96      	ldr	r2, [pc, #600]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 800208a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800208e:	6413      	str	r3, [r2, #64]	; 0x40
 8002090:	4b94      	ldr	r3, [pc, #592]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002098:	633b      	str	r3, [r7, #48]	; 0x30
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209c:	4b91      	ldr	r3, [pc, #580]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	4a90      	ldr	r2, [pc, #576]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	6313      	str	r3, [r2, #48]	; 0x30
 80020a8:	4b8e      	ldr	r3, [pc, #568]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80020b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020ce:	2308      	movs	r3, #8
 80020d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020d8:	4619      	mov	r1, r3
 80020da:	4883      	ldr	r0, [pc, #524]	; (80022e8 <HAL_UART_MspInit+0x2b4>)
 80020dc:	f000 fe5e 	bl	8002d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020e0:	e151      	b.n	8002386 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a81      	ldr	r2, [pc, #516]	; (80022ec <HAL_UART_MspInit+0x2b8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d160      	bne.n	80021ae <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80020ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 fb4f 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002108:	f7ff fc22 	bl	8001950 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800210c:	4b75      	ldr	r3, [pc, #468]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a74      	ldr	r2, [pc, #464]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 8002112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
 8002118:	4b72      	ldr	r3, [pc, #456]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a6e      	ldr	r2, [pc, #440]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b6c      	ldr	r3, [pc, #432]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213c:	4b69      	ldr	r3, [pc, #420]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4a68      	ldr	r2, [pc, #416]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	6313      	str	r3, [r2, #48]	; 0x30
 8002148:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800216e:	2308      	movs	r3, #8
 8002170:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002178:	4619      	mov	r1, r3
 800217a:	485d      	ldr	r0, [pc, #372]	; (80022f0 <HAL_UART_MspInit+0x2bc>)
 800217c:	f000 fe0e 	bl	8002d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800219a:	2308      	movs	r3, #8
 800219c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4850      	ldr	r0, [pc, #320]	; (80022e8 <HAL_UART_MspInit+0x2b4>)
 80021a8:	f000 fdf8 	bl	8002d9c <HAL_GPIO_Init>
}
 80021ac:	e0eb      	b.n	8002386 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a50      	ldr	r2, [pc, #320]	; (80022f4 <HAL_UART_MspInit+0x2c0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d151      	bne.n	800225c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021b8:	2340      	movs	r3, #64	; 0x40
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021bc:	2300      	movs	r3, #0
 80021be:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 faeb 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80021d0:	f7ff fbbe 	bl	8001950 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	4a42      	ldr	r2, [pc, #264]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	6453      	str	r3, [r2, #68]	; 0x44
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ec:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	4a3c      	ldr	r2, [pc, #240]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	6313      	str	r3, [r2, #48]	; 0x30
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800221e:	2304      	movs	r3, #4
 8002220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002228:	4619      	mov	r1, r3
 800222a:	4831      	ldr	r0, [pc, #196]	; (80022f0 <HAL_UART_MspInit+0x2bc>)
 800222c:	f000 fdb6 	bl	8002d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002230:	2340      	movs	r3, #64	; 0x40
 8002232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002248:	2307      	movs	r3, #7
 800224a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002252:	4619      	mov	r1, r3
 8002254:	4826      	ldr	r0, [pc, #152]	; (80022f0 <HAL_UART_MspInit+0x2bc>)
 8002256:	f000 fda1 	bl	8002d9c <HAL_GPIO_Init>
}
 800225a:	e094      	b.n	8002386 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <HAL_UART_MspInit+0x2c4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d14c      	bne.n	8002300 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800226a:	2300      	movs	r3, #0
 800226c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002272:	4618      	mov	r0, r3
 8002274:	f002 fa94 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800227e:	f7ff fb67 	bl	8001950 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_UART_MspInit+0x2b0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022b2:	2360      	movs	r3, #96	; 0x60
 80022b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ca:	2307      	movs	r3, #7
 80022cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022d4:	4619      	mov	r1, r3
 80022d6:	4809      	ldr	r0, [pc, #36]	; (80022fc <HAL_UART_MspInit+0x2c8>)
 80022d8:	f000 fd60 	bl	8002d9c <HAL_GPIO_Init>
}
 80022dc:	e053      	b.n	8002386 <HAL_UART_MspInit+0x352>
 80022de:	bf00      	nop
 80022e0:	40004c00 	.word	0x40004c00
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40005000 	.word	0x40005000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40004400 	.word	0x40004400
 80022fc:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a22      	ldr	r2, [pc, #136]	; (8002390 <HAL_UART_MspInit+0x35c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d13d      	bne.n	8002386 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800230a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002316:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fa40 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002326:	f7ff fb13 	bl	8001950 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_UART_MspInit+0x360>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_UART_MspInit+0x360>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_UART_MspInit+0x360>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_UART_MspInit+0x360>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a13      	ldr	r2, [pc, #76]	; (8002394 <HAL_UART_MspInit+0x360>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_UART_MspInit+0x360>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800235a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800235e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002374:	2307      	movs	r3, #7
 8002376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <HAL_UART_MspInit+0x364>)
 8002382:	f000 fd0b 	bl	8002d9c <HAL_GPIO_Init>
}
 8002386:	bf00      	nop
 8002388:	37d8      	adds	r7, #216	; 0xd8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40004800 	.word	0x40004800
 8002394:	40023800 	.word	0x40023800
 8002398:	40020c00 	.word	0x40020c00

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <NMI_Handler+0x4>

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <MemManage_Handler+0x4>

080023ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <UsageFault_Handler+0x4>

080023ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e8:	f000 f8bc 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 80023f4:	2010      	movs	r0, #16
 80023f6:	f000 fe97 	bl	8003128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f004 ff90 	bl	8007354 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20080000 	.word	0x20080000
 8002460:	00000400 	.word	0x00000400
 8002464:	200006a8 	.word	0x200006a8
 8002468:	20000770 	.word	0x20000770

0800246c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <SystemInit+0x28>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <SystemInit+0x28>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SystemInit+0x28>)
 8002482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002486:	609a      	str	r2, [r3, #8]
#endif
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800249c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800249e:	e003      	b.n	80024a8 <LoopCopyDataInit>

080024a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024a6:	3104      	adds	r1, #4

080024a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024a8:	480b      	ldr	r0, [pc, #44]	; (80024d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024b0:	d3f6      	bcc.n	80024a0 <CopyDataInit>
  ldr  r2, =_sbss
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024b4:	e002      	b.n	80024bc <LoopFillZerobss>

080024b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024b8:	f842 3b04 	str.w	r3, [r2], #4

080024bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024c0:	d3f9      	bcc.n	80024b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024c2:	f7ff ffd3 	bl	800246c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c6:	f005 f841 	bl	800754c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ca:	f7fe f8cd 	bl	8000668 <main>
  bx  lr    
 80024ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80024d4:	08008518 	.word	0x08008518
  ldr  r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024dc:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80024e0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80024e4:	2000076c 	.word	0x2000076c

080024e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC_IRQHandler>

080024ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ee:	2003      	movs	r0, #3
 80024f0:	f000 fc04 	bl	8002cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f000 f805 	bl	8002504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024fa:	f7ff fa2f 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_InitTick+0x54>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_InitTick+0x58>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fc2d 	bl	8002d82 <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f000 fbe7 	bl	8002d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <HAL_InitTick+0x5c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000000 	.word	0x20000000
 800255c:	20000008 	.word	0x20000008
 8002560:	20000004 	.word	0x20000004

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000008 	.word	0x20000008
 8002588:	200006ac 	.word	0x200006ac

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200006ac 	.word	0x200006ac

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000008 	.word	0x20000008

080025ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e031      	b.n	8002666 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff f9ca 	bl	80019a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d116      	bne.n	8002658 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_ADC_Init+0x84>)
 8002630:	4013      	ands	r3, r2
 8002632:	f043 0202 	orr.w	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f970 	bl	8002920 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f023 0303 	bic.w	r3, r3, #3
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
 8002656:	e001      	b.n	800265c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	ffffeefd 	.word	0xffffeefd

08002674 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x1c>
 800268c:	2302      	movs	r3, #2
 800268e:	e136      	b.n	80028fe <HAL_ADC_ConfigChannel+0x28a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b09      	cmp	r3, #9
 800269e:	d93a      	bls.n	8002716 <HAL_ADC_ConfigChannel+0xa2>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026a8:	d035      	beq.n	8002716 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68d9      	ldr	r1, [r3, #12]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	3b1e      	subs	r3, #30
 80026c0:	2207      	movs	r2, #7
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	400a      	ands	r2, r1
 80026ce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a8d      	ldr	r2, [pc, #564]	; (800290c <HAL_ADC_ConfigChannel+0x298>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d10a      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68d9      	ldr	r1, [r3, #12]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	061a      	lsls	r2, r3, #24
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ee:	e035      	b.n	800275c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68d9      	ldr	r1, [r3, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	4603      	mov	r3, r0
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4403      	add	r3, r0
 8002708:	3b1e      	subs	r3, #30
 800270a:	409a      	lsls	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002714:	e022      	b.n	800275c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6919      	ldr	r1, [r3, #16]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	2207      	movs	r2, #7
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43da      	mvns	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	400a      	ands	r2, r1
 8002738:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6919      	ldr	r1, [r3, #16]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4618      	mov	r0, r3
 800274c:	4603      	mov	r3, r0
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4403      	add	r3, r0
 8002752:	409a      	lsls	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b06      	cmp	r3, #6
 8002762:	d824      	bhi.n	80027ae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	3b05      	subs	r3, #5
 8002776:	221f      	movs	r2, #31
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43da      	mvns	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	400a      	ands	r2, r1
 8002784:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4618      	mov	r0, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	3b05      	subs	r3, #5
 80027a0:	fa00 f203 	lsl.w	r2, r0, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34
 80027ac:	e04c      	b.n	8002848 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d824      	bhi.n	8002800 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b23      	subs	r3, #35	; 0x23
 80027c8:	221f      	movs	r2, #31
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	400a      	ands	r2, r1
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	3b23      	subs	r3, #35	; 0x23
 80027f2:	fa00 f203 	lsl.w	r2, r0, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
 80027fe:	e023      	b.n	8002848 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b41      	subs	r3, #65	; 0x41
 8002812:	221f      	movs	r2, #31
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43da      	mvns	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	400a      	ands	r2, r1
 8002820:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3b41      	subs	r3, #65	; 0x41
 800283c:	fa00 f203 	lsl.w	r2, r0, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a30      	ldr	r2, [pc, #192]	; (8002910 <HAL_ADC_ConfigChannel+0x29c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10a      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1f4>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800285a:	d105      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 8002862:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002866:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a28      	ldr	r2, [pc, #160]	; (8002910 <HAL_ADC_ConfigChannel+0x29c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10f      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x21e>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b12      	cmp	r3, #18
 8002878:	d10b      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a25      	ldr	r2, [pc, #148]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 8002880:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002884:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 800288c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002890:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <HAL_ADC_ConfigChannel+0x29c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d12b      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x280>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_ADC_ConfigChannel+0x298>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d003      	beq.n	80028ae <HAL_ADC_ConfigChannel+0x23a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b11      	cmp	r3, #17
 80028ac:	d122      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 80028b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80028b8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a15      	ldr	r2, [pc, #84]	; (8002914 <HAL_ADC_ConfigChannel+0x2a0>)
 80028c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a10      	ldr	r2, [pc, #64]	; (800290c <HAL_ADC_ConfigChannel+0x298>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d111      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_ADC_ConfigChannel+0x2a4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a11      	ldr	r2, [pc, #68]	; (800291c <HAL_ADC_ConfigChannel+0x2a8>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0c9a      	lsrs	r2, r3, #18
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028e6:	e002      	b.n	80028ee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f9      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	10000012 	.word	0x10000012
 8002910:	40012000 	.word	0x40012000
 8002914:	40012300 	.word	0x40012300
 8002918:	20000000 	.word	0x20000000
 800291c:	431bde83 	.word	0x431bde83

08002920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002928:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <ADC_Init+0x1ec>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a77      	ldr	r2, [pc, #476]	; (8002b0c <ADC_Init+0x1ec>)
 800292e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002932:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002934:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <ADC_Init+0x1ec>)
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4973      	ldr	r1, [pc, #460]	; (8002b0c <ADC_Init+0x1ec>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	021a      	lsls	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002974:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002996:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <ADC_Init+0x1f0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d022      	beq.n	80029fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6899      	ldr	r1, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6899      	ldr	r1, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	e00f      	b.n	8002a1a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0202 	bic.w	r2, r2, #2
 8002a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	005a      	lsls	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	3b01      	subs	r3, #1
 8002a74:	035a      	lsls	r2, r3, #13
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	e007      	b.n	8002a90 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	051a      	lsls	r2, r3, #20
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ac4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ad2:	025a      	lsls	r2, r3, #9
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6899      	ldr	r1, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	029a      	lsls	r2, r3, #10
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40012300 	.word	0x40012300
 8002b10:	0f000001 	.word	0x0f000001

08002b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <__NVIC_SetPriorityGrouping+0x40>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <__NVIC_SetPriorityGrouping+0x40>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00
 8002b58:	05fa0000 	.word	0x05fa0000

08002b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_GetPriorityGrouping+0x18>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0307 	and.w	r3, r3, #7
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	db0b      	blt.n	8002ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	4907      	ldr	r1, [pc, #28]	; (8002bb0 <__NVIC_EnableIRQ+0x38>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2001      	movs	r0, #1
 8002b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000e100 	.word	0xe000e100

08002bb4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	db12      	blt.n	8002bec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	490a      	ldr	r1, [pc, #40]	; (8002bf8 <__NVIC_DisableIRQ+0x44>)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bda:	3320      	adds	r3, #32
 8002bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002be0:	f3bf 8f4f 	dsb	sy
}
 8002be4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002be6:	f3bf 8f6f 	isb	sy
}
 8002bea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db0a      	blt.n	8002c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	490c      	ldr	r1, [pc, #48]	; (8002c48 <__NVIC_SetPriority+0x4c>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c24:	e00a      	b.n	8002c3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4908      	ldr	r1, [pc, #32]	; (8002c4c <__NVIC_SetPriority+0x50>)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3b04      	subs	r3, #4
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	440b      	add	r3, r1
 8002c3a:	761a      	strb	r2, [r3, #24]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f1c3 0307 	rsb	r3, r3, #7
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	bf28      	it	cs
 8002c6e:	2304      	movcs	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d902      	bls.n	8002c80 <NVIC_EncodePriority+0x30>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3b03      	subs	r3, #3
 8002c7e:	e000      	b.n	8002c82 <NVIC_EncodePriority+0x32>
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c98:	f04f 31ff 	mov.w	r1, #4294967295
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43d9      	mvns	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	4313      	orrs	r3, r2
         );
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	d301      	bcc.n	8002cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00f      	b.n	8002cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <SysTick_Config+0x40>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	f7ff ff8e 	bl	8002bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff05 	bl	8002b14 <__NVIC_SetPriorityGrouping>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d24:	f7ff ff1a 	bl	8002b5c <__NVIC_GetPriorityGrouping>
 8002d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f7ff ff8e 	bl	8002c50 <NVIC_EncodePriority>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff5d 	bl	8002bfc <__NVIC_SetPriority>
}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff0d 	bl	8002b78 <__NVIC_EnableIRQ>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff1d 	bl	8002bb4 <__NVIC_DisableIRQ>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ff94 	bl	8002cb8 <SysTick_Config>
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e175      	b.n	80030a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 8164 	bne.w	80030a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_GPIO_Init+0x56>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80be 	beq.w	80030a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <HAL_GPIO_Init+0x324>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	4a65      	ldr	r2, [pc, #404]	; (80030c0 <HAL_GPIO_Init+0x324>)
 8002f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f30:	6453      	str	r3, [r2, #68]	; 0x44
 8002f32:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_GPIO_Init+0x324>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f3e:	4a61      	ldr	r2, [pc, #388]	; (80030c4 <HAL_GPIO_Init+0x328>)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3302      	adds	r3, #2
 8002f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a58      	ldr	r2, [pc, #352]	; (80030c8 <HAL_GPIO_Init+0x32c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d037      	beq.n	8002fda <HAL_GPIO_Init+0x23e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a57      	ldr	r2, [pc, #348]	; (80030cc <HAL_GPIO_Init+0x330>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d031      	beq.n	8002fd6 <HAL_GPIO_Init+0x23a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a56      	ldr	r2, [pc, #344]	; (80030d0 <HAL_GPIO_Init+0x334>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02b      	beq.n	8002fd2 <HAL_GPIO_Init+0x236>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a55      	ldr	r2, [pc, #340]	; (80030d4 <HAL_GPIO_Init+0x338>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d025      	beq.n	8002fce <HAL_GPIO_Init+0x232>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a54      	ldr	r2, [pc, #336]	; (80030d8 <HAL_GPIO_Init+0x33c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01f      	beq.n	8002fca <HAL_GPIO_Init+0x22e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a53      	ldr	r2, [pc, #332]	; (80030dc <HAL_GPIO_Init+0x340>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d019      	beq.n	8002fc6 <HAL_GPIO_Init+0x22a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_GPIO_Init+0x344>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_GPIO_Init+0x226>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a51      	ldr	r2, [pc, #324]	; (80030e4 <HAL_GPIO_Init+0x348>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00d      	beq.n	8002fbe <HAL_GPIO_Init+0x222>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a50      	ldr	r2, [pc, #320]	; (80030e8 <HAL_GPIO_Init+0x34c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <HAL_GPIO_Init+0x21e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4f      	ldr	r2, [pc, #316]	; (80030ec <HAL_GPIO_Init+0x350>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_GPIO_Init+0x21a>
 8002fb2:	2309      	movs	r3, #9
 8002fb4:	e012      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fb6:	230a      	movs	r3, #10
 8002fb8:	e010      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	e00e      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	e00c      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	e00a      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	e008      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e004      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e002      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f002 0203 	and.w	r2, r2, #3
 8002fe2:	0092      	lsls	r2, r2, #2
 8002fe4:	4093      	lsls	r3, r2
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fec:	4935      	ldr	r1, [pc, #212]	; (80030c4 <HAL_GPIO_Init+0x328>)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <HAL_GPIO_Init+0x354>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800301e:	4a34      	ldr	r2, [pc, #208]	; (80030f0 <HAL_GPIO_Init+0x354>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003024:	4b32      	ldr	r3, [pc, #200]	; (80030f0 <HAL_GPIO_Init+0x354>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003048:	4a29      	ldr	r2, [pc, #164]	; (80030f0 <HAL_GPIO_Init+0x354>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_GPIO_Init+0x354>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003072:	4a1f      	ldr	r2, [pc, #124]	; (80030f0 <HAL_GPIO_Init+0x354>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_GPIO_Init+0x354>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <HAL_GPIO_Init+0x354>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3301      	adds	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	f67f ae86 	bls.w	8002dbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40013800 	.word	0x40013800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40020400 	.word	0x40020400
 80030d0:	40020800 	.word	0x40020800
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40021400 	.word	0x40021400
 80030e0:	40021800 	.word	0x40021800
 80030e4:	40021c00 	.word	0x40021c00
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40022400 	.word	0x40022400
 80030f0:	40013c00 	.word	0x40013c00

080030f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	807b      	strh	r3, [r7, #2]
 8003100:	4613      	mov	r3, r2
 8003102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003104:	787b      	ldrb	r3, [r7, #1]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800310a:	887a      	ldrh	r2, [r7, #2]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003110:	e003      	b.n	800311a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003112:	887b      	ldrh	r3, [r7, #2]
 8003114:	041a      	lsls	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	619a      	str	r2, [r3, #24]
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800313e:	4a05      	ldr	r2, [pc, #20]	; (8003154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fa54 	bl	80005f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40013c00 	.word	0x40013c00

08003158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07f      	b.n	800326a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fe fc50 	bl	8001a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	; 0x24
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	e006      	b.n	80031e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d104      	bne.n	80031f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <HAL_I2C_Init+0x11c>)
 80031fe:	430b      	orrs	r3, r1
 8003200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69d9      	ldr	r1, [r3, #28]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1a      	ldr	r2, [r3, #32]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	02008000 	.word	0x02008000

08003278 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	817b      	strh	r3, [r7, #10]
 800328a:	460b      	mov	r3, r1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	f040 80f9 	bne.w	8003492 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_I2C_Mem_Write+0x34>
 80032a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0ed      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Mem_Write+0x4e>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e0e6      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ce:	f7ff f95d 	bl	800258c <HAL_GetTick>
 80032d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	2319      	movs	r3, #25
 80032da:	2201      	movs	r2, #1
 80032dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fac3 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0d1      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2221      	movs	r2, #33	; 0x21
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a3a      	ldr	r2, [r7, #32]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003318:	88f8      	ldrh	r0, [r7, #6]
 800331a:	893a      	ldrh	r2, [r7, #8]
 800331c:	8979      	ldrh	r1, [r7, #10]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4603      	mov	r3, r0
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f9d3 	bl	80036d4 <I2C_RequestMemoryWrite>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0a9      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2bff      	cmp	r3, #255	; 0xff
 8003348:	d90e      	bls.n	8003368 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	; 0xff
 800334e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	b2da      	uxtb	r2, r3
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	2300      	movs	r3, #0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fc1f 	bl	8003ba4 <I2C_TransferConfig>
 8003366:	e00f      	b.n	8003388 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	b2da      	uxtb	r2, r3
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fc0e 	bl	8003ba4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 faad 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e07b      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d034      	beq.n	8003440 <HAL_I2C_Mem_Write+0x1c8>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d130      	bne.n	8003440 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fa3f 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e04d      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2bff      	cmp	r3, #255	; 0xff
 8003400:	d90e      	bls.n	8003420 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22ff      	movs	r2, #255	; 0xff
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fbc3 	bl	8003ba4 <I2C_TransferConfig>
 800341e:	e00f      	b.n	8003440 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	b2da      	uxtb	r2, r3
 8003430:	8979      	ldrh	r1, [r7, #10]
 8003432:	2300      	movs	r3, #0
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fbb2 	bl	8003ba4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d19e      	bne.n	8003388 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fa8c 	bl	800396c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e01a      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2220      	movs	r2, #32
 8003464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_I2C_Mem_Write+0x224>)
 8003472:	400b      	ands	r3, r1
 8003474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	fe00e800 	.word	0xfe00e800

080034a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	817b      	strh	r3, [r7, #10]
 80034b2:	460b      	mov	r3, r1
 80034b4:	813b      	strh	r3, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	f040 80fd 	bne.w	80036c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_I2C_Mem_Read+0x34>
 80034ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0f1      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_I2C_Mem_Read+0x4e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0ea      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f6:	f7ff f849 	bl	800258c <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2319      	movs	r3, #25
 8003502:	2201      	movs	r2, #1
 8003504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f9af 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0d5      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2222      	movs	r2, #34	; 0x22
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2240      	movs	r2, #64	; 0x40
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003540:	88f8      	ldrh	r0, [r7, #6]
 8003542:	893a      	ldrh	r2, [r7, #8]
 8003544:	8979      	ldrh	r1, [r7, #10]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4603      	mov	r3, r0
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f913 	bl	800377c <I2C_RequestMemoryRead>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0ad      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d90e      	bls.n	8003590 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	b2da      	uxtb	r2, r3
 800357e:	8979      	ldrh	r1, [r7, #10]
 8003580:	4b52      	ldr	r3, [pc, #328]	; (80036cc <HAL_I2C_Mem_Read+0x22c>)
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fb0b 	bl	8003ba4 <I2C_TransferConfig>
 800358e:	e00f      	b.n	80035b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	8979      	ldrh	r1, [r7, #10]
 80035a2:	4b4a      	ldr	r3, [pc, #296]	; (80036cc <HAL_I2C_Mem_Read+0x22c>)
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fafa 	bl	8003ba4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	2200      	movs	r2, #0
 80035b8:	2104      	movs	r1, #4
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f956 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07c      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d034      	beq.n	8003670 <HAL_I2C_Mem_Read+0x1d0>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	d130      	bne.n	8003670 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	2200      	movs	r2, #0
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f927 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e04d      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	2bff      	cmp	r3, #255	; 0xff
 8003630:	d90e      	bls.n	8003650 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	b2da      	uxtb	r2, r3
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	2300      	movs	r3, #0
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 faab 	bl	8003ba4 <I2C_TransferConfig>
 800364e:	e00f      	b.n	8003670 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	b2da      	uxtb	r2, r3
 8003660:	8979      	ldrh	r1, [r7, #10]
 8003662:	2300      	movs	r3, #0
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa9a 	bl	8003ba4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d19a      	bne.n	80035b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f974 	bl	800396c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e01a      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2220      	movs	r2, #32
 8003694:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_I2C_Mem_Read+0x230>)
 80036a2:	400b      	ands	r3, r1
 80036a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e000      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
  }
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	80002400 	.word	0x80002400
 80036d0:	fe00e800 	.word	0xfe00e800

080036d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	817b      	strh	r3, [r7, #10]
 80036e6:	460b      	mov	r3, r1
 80036e8:	813b      	strh	r3, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	8979      	ldrh	r1, [r7, #10]
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <I2C_RequestMemoryWrite+0xa4>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fa51 	bl	8003ba4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f8f0 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e02c      	b.n	8003770 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	629a      	str	r2, [r3, #40]	; 0x28
 8003726:	e015      	b.n	8003754 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b29b      	uxth	r3, r3
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	69b9      	ldr	r1, [r7, #24]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f8d6 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e012      	b.n	8003770 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800374a:	893b      	ldrh	r3, [r7, #8]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2200      	movs	r2, #0
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f884 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	80002000 	.word	0x80002000

0800377c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4603      	mov	r3, r0
 800378c:	817b      	strh	r3, [r7, #10]
 800378e:	460b      	mov	r3, r1
 8003790:	813b      	strh	r3, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	4b20      	ldr	r3, [pc, #128]	; (8003820 <I2C_RequestMemoryRead+0xa4>)
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f9fe 	bl	8003ba4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f89d 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e02c      	b.n	8003816 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037c2:	893b      	ldrh	r3, [r7, #8]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
 80037cc:	e015      	b.n	80037fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037ce:	893b      	ldrh	r3, [r7, #8]
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f883 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e012      	b.n	8003816 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037f0:	893b      	ldrh	r3, [r7, #8]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2200      	movs	r2, #0
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f831 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	80002000 	.word	0x80002000

08003824 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d103      	bne.n	8003842 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d007      	beq.n	8003860 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	619a      	str	r2, [r3, #24]
  }
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800387c:	e022      	b.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d01e      	beq.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fe fe81 	bl	800258c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d113      	bne.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e00f      	b.n	80038e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d0cd      	beq.n	800387e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038f8:	e02c      	b.n	8003954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f870 	bl	80039e4 <I2C_IsErrorOccurred>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e02a      	b.n	8003964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d01e      	beq.n	8003954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fe fe39 	bl	800258c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d113      	bne.n	8003954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e007      	b.n	8003964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d1cb      	bne.n	80038fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003978:	e028      	b.n	80039cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f830 	bl	80039e4 <I2C_IsErrorOccurred>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e026      	b.n	80039dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe fdfd 	bl	800258c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d113      	bne.n	80039cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e007      	b.n	80039dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d1cf      	bne.n	800397a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d068      	beq.n	8003ae2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2210      	movs	r2, #16
 8003a16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a18:	e049      	b.n	8003aae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d045      	beq.n	8003aae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fe fdb3 	bl	800258c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_IsErrorOccurred+0x54>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d13a      	bne.n	8003aae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5a:	d121      	bne.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a62:	d01d      	beq.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d01a      	beq.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a7a:	f7fe fd87 	bl	800258c <HAL_GetTick>
 8003a7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a80:	e00e      	b.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a82:	f7fe fd83 	bl	800258c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b19      	cmp	r3, #25
 8003a8e:	d907      	bls.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f043 0320 	orr.w	r3, r3, #32
 8003a96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a9e:	e006      	b.n	8003aae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d1e9      	bne.n	8003a82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d003      	beq.n	8003ac4 <I2C_IsErrorOccurred+0xe0>
 8003abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0aa      	beq.n	8003a1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00b      	beq.n	8003b0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f043 0308 	orr.w	r3, r3, #8
 8003b1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01c      	beq.n	8003b92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff fe63 	bl	8003824 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <I2C_IsErrorOccurred+0x1bc>)
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3728      	adds	r7, #40	; 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	fe00e800 	.word	0xfe00e800

08003ba4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	817b      	strh	r3, [r7, #10]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb6:	897b      	ldrh	r3, [r7, #10]
 8003bb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bbc:	7a7b      	ldrb	r3, [r7, #9]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	0d5b      	lsrs	r3, r3, #21
 8003bde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <I2C_TransferConfig+0x60>)
 8003be4:	430b      	orrs	r3, r1
 8003be6:	43db      	mvns	r3, r3
 8003be8:	ea02 0103 	and.w	r1, r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	03ff63ff 	.word	0x03ff63ff

08003c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d138      	bne.n	8003c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e032      	b.n	8003c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d139      	bne.n	8003d28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e033      	b.n	8003d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2224      	movs	r2, #36	; 0x24
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40007000 	.word	0x40007000

08003d58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d86:	f7fe fc01 	bl	800258c <HAL_GetTick>
 8003d8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d8c:	e009      	b.n	8003da2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d8e:	f7fe fbfd 	bl	800258c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d9c:	d901      	bls.n	8003da2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e022      	b.n	8003de8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dae:	d1ee      	bne.n	8003d8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003db0:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dbc:	f7fe fbe6 	bl	800258c <HAL_GetTick>
 8003dc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dc2:	e009      	b.n	8003dd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dc4:	f7fe fbe2 	bl	800258c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd2:	d901      	bls.n	8003dd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e007      	b.n	8003de8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de4:	d1ee      	bne.n	8003dc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40007000 	.word	0x40007000

08003df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e00:	2300      	movs	r3, #0
 8003e02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e29b      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8087 	beq.w	8003f2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e1c:	4b96      	ldr	r3, [pc, #600]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d00c      	beq.n	8003e42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e28:	4b93      	ldr	r3, [pc, #588]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d112      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62>
 8003e34:	4b90      	ldr	r3, [pc, #576]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e42:	4b8d      	ldr	r3, [pc, #564]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d06c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x130>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d168      	bne.n	8003f28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e275      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x7a>
 8003e64:	4b84      	ldr	r3, [pc, #528]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a83      	ldr	r2, [pc, #524]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e02e      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x9c>
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7e      	ldr	r2, [pc, #504]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b7c      	ldr	r3, [pc, #496]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a7b      	ldr	r2, [pc, #492]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e01d      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	4b76      	ldr	r3, [pc, #472]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a75      	ldr	r2, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	4b73      	ldr	r3, [pc, #460]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a72      	ldr	r2, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd8>
 8003eb8:	4b6f      	ldr	r3, [pc, #444]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6e      	ldr	r2, [pc, #440]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b6c      	ldr	r3, [pc, #432]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6b      	ldr	r2, [pc, #428]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fb58 	bl	800258c <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee0:	f7fe fb54 	bl	800258c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e229      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe8>
 8003efe:	e014      	b.n	8003f2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe fb44 	bl	800258c <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f08:	f7fe fb40 	bl	800258c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e215      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1a:	4b57      	ldr	r3, [pc, #348]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x110>
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d069      	beq.n	800400a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f36:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f42:	4b4d      	ldr	r3, [pc, #308]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d11c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x190>
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_RCC_OscConfig+0x17a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e1e9      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	493d      	ldr	r1, [pc, #244]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f86:	e040      	b.n	800400a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d023      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a38      	ldr	r2, [pc, #224]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe faf6 	bl	800258c <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fe faf2 	bl	800258c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e1c7      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb6:	4b30      	ldr	r3, [pc, #192]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4929      	ldr	r1, [pc, #164]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
 8003fd6:	e018      	b.n	800400a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd8:	4b27      	ldr	r3, [pc, #156]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a26      	ldr	r2, [pc, #152]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fad2 	bl	800258c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fec:	f7fe face 	bl	800258c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1a3      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d038      	beq.n	8004088 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d019      	beq.n	8004052 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401e:	4b16      	ldr	r3, [pc, #88]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	4a15      	ldr	r2, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fe faaf 	bl	800258c <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004032:	f7fe faab 	bl	800258c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e180      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x23a>
 8004050:	e01a      	b.n	8004088 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fe fa95 	bl	800258c <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004066:	f7fe fa91 	bl	800258c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d903      	bls.n	800407c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e166      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
 8004078:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	4b92      	ldr	r3, [pc, #584]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800407e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ee      	bne.n	8004066 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80a4 	beq.w	80041de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004096:	4b8c      	ldr	r3, [pc, #560]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	4b89      	ldr	r3, [pc, #548]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	4a88      	ldr	r2, [pc, #544]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6413      	str	r3, [r2, #64]	; 0x40
 80040ae:	4b86      	ldr	r3, [pc, #536]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040be:	4b83      	ldr	r3, [pc, #524]	; (80042cc <HAL_RCC_OscConfig+0x4d4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d118      	bne.n	80040fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80040ca:	4b80      	ldr	r3, [pc, #512]	; (80042cc <HAL_RCC_OscConfig+0x4d4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7f      	ldr	r2, [pc, #508]	; (80042cc <HAL_RCC_OscConfig+0x4d4>)
 80040d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d6:	f7fe fa59 	bl	800258c <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040de:	f7fe fa55 	bl	800258c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b64      	cmp	r3, #100	; 0x64
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e12a      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f0:	4b76      	ldr	r3, [pc, #472]	; (80042cc <HAL_RCC_OscConfig+0x4d4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d106      	bne.n	8004112 <HAL_RCC_OscConfig+0x31a>
 8004104:	4b70      	ldr	r3, [pc, #448]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	4a6f      	ldr	r2, [pc, #444]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6713      	str	r3, [r2, #112]	; 0x70
 8004110:	e02d      	b.n	800416e <HAL_RCC_OscConfig+0x376>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x33c>
 800411a:	4b6b      	ldr	r3, [pc, #428]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	4a6a      	ldr	r2, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6713      	str	r3, [r2, #112]	; 0x70
 8004126:	4b68      	ldr	r3, [pc, #416]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4a67      	ldr	r2, [pc, #412]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800412c:	f023 0304 	bic.w	r3, r3, #4
 8004130:	6713      	str	r3, [r2, #112]	; 0x70
 8004132:	e01c      	b.n	800416e <HAL_RCC_OscConfig+0x376>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b05      	cmp	r3, #5
 800413a:	d10c      	bne.n	8004156 <HAL_RCC_OscConfig+0x35e>
 800413c:	4b62      	ldr	r3, [pc, #392]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a61      	ldr	r2, [pc, #388]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
 8004148:	4b5f      	ldr	r3, [pc, #380]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a5e      	ldr	r2, [pc, #376]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	e00b      	b.n	800416e <HAL_RCC_OscConfig+0x376>
 8004156:	4b5c      	ldr	r3, [pc, #368]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a5b      	ldr	r2, [pc, #364]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
 8004162:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d015      	beq.n	80041a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004176:	f7fe fa09 	bl	800258c <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417c:	e00a      	b.n	8004194 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417e:	f7fe fa05 	bl	800258c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f241 3288 	movw	r2, #5000	; 0x1388
 800418c:	4293      	cmp	r3, r2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0d8      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	4b4c      	ldr	r3, [pc, #304]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ee      	beq.n	800417e <HAL_RCC_OscConfig+0x386>
 80041a0:	e014      	b.n	80041cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a2:	f7fe f9f3 	bl	800258c <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a8:	e00a      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041aa:	f7fe f9ef 	bl	800258c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e0c2      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c0:	4b41      	ldr	r3, [pc, #260]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ee      	bne.n	80041aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d105      	bne.n	80041de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4b3d      	ldr	r3, [pc, #244]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a3c      	ldr	r2, [pc, #240]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80ae 	beq.w	8004344 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e8:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d06d      	beq.n	80042d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d14b      	bne.n	8004294 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b32      	ldr	r3, [pc, #200]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a31      	ldr	r2, [pc, #196]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe f9c0 	bl	800258c <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe f9bc 	bl	800258c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e091      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	071b      	lsls	r3, r3, #28
 800425a:	491b      	ldr	r1, [pc, #108]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800426a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fe f98e 	bl	800258c <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004274:	f7fe f98a 	bl	800258c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e05f      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x47c>
 8004292:	e057      	b.n	8004344 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 800429a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800429e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fe f974 	bl	800258c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fe f970 	bl	800258c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e045      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4b0>
 80042c6:	e03d      	b.n	8004344 <HAL_RCC_OscConfig+0x54c>
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80042d0:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <HAL_RCC_OscConfig+0x558>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d030      	beq.n	8004340 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d129      	bne.n	8004340 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d122      	bne.n	8004340 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004306:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004308:	4293      	cmp	r3, r2
 800430a:	d119      	bne.n	8004340 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	3b01      	subs	r3, #1
 800431a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d10f      	bne.n	8004340 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d107      	bne.n	8004340 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800

08004354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0d0      	b.n	800450e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800436c:	4b6a      	ldr	r3, [pc, #424]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d910      	bls.n	800439c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b67      	ldr	r3, [pc, #412]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 020f 	bic.w	r2, r3, #15
 8004382:	4965      	ldr	r1, [pc, #404]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b63      	ldr	r3, [pc, #396]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0b8      	b.n	800450e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b4:	4b59      	ldr	r3, [pc, #356]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a58      	ldr	r2, [pc, #352]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80043ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a52      	ldr	r2, [pc, #328]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80043d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	494d      	ldr	r1, [pc, #308]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d040      	beq.n	8004478 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d115      	bne.n	8004436 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e07f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004416:	4b41      	ldr	r3, [pc, #260]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e073      	b.n	800450e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004426:	4b3d      	ldr	r3, [pc, #244]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e06b      	b.n	800450e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f023 0203 	bic.w	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4936      	ldr	r1, [pc, #216]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004448:	f7fe f8a0 	bl	800258c <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	e00a      	b.n	8004466 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004450:	f7fe f89c 	bl	800258c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e053      	b.n	800450e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	4b2d      	ldr	r3, [pc, #180]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 020c 	and.w	r2, r3, #12
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	429a      	cmp	r2, r3
 8004476:	d1eb      	bne.n	8004450 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004478:	4b27      	ldr	r3, [pc, #156]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d210      	bcs.n	80044a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b24      	ldr	r3, [pc, #144]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 020f 	bic.w	r2, r3, #15
 800448e:	4922      	ldr	r1, [pc, #136]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e032      	b.n	800450e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4916      	ldr	r1, [pc, #88]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	490e      	ldr	r1, [pc, #56]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044e6:	f000 f821 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	490a      	ldr	r1, [pc, #40]	; (8004520 <HAL_RCC_ClockConfig+0x1cc>)
 80044f8:	5ccb      	ldrb	r3, [r1, r3]
 80044fa:	fa22 f303 	lsr.w	r3, r2, r3
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <HAL_RCC_ClockConfig+0x1d0>)
 8004500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x1d4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd fffc 	bl	8002504 <HAL_InitTick>

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023c00 	.word	0x40023c00
 800451c:	40023800 	.word	0x40023800
 8004520:	0800843c 	.word	0x0800843c
 8004524:	20000000 	.word	0x20000000
 8004528:	20000004 	.word	0x20000004

0800452c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800452c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004530:	b094      	sub	sp, #80	; 0x50
 8004532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	647b      	str	r3, [r7, #68]	; 0x44
 8004538:	2300      	movs	r3, #0
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453c:	2300      	movs	r3, #0
 800453e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004544:	4b79      	ldr	r3, [pc, #484]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	2b08      	cmp	r3, #8
 800454e:	d00d      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x40>
 8004550:	2b08      	cmp	r3, #8
 8004552:	f200 80e1 	bhi.w	8004718 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x34>
 800455a:	2b04      	cmp	r3, #4
 800455c:	d003      	beq.n	8004566 <HAL_RCC_GetSysClockFreq+0x3a>
 800455e:	e0db      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004560:	4b73      	ldr	r3, [pc, #460]	; (8004730 <HAL_RCC_GetSysClockFreq+0x204>)
 8004562:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004564:	e0db      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004566:	4b73      	ldr	r3, [pc, #460]	; (8004734 <HAL_RCC_GetSysClockFreq+0x208>)
 8004568:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800456a:	e0d8      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800456c:	4b6f      	ldr	r3, [pc, #444]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004576:	4b6d      	ldr	r3, [pc, #436]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d063      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004582:	4b6a      	ldr	r3, [pc, #424]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	2200      	movs	r2, #0
 800458a:	63bb      	str	r3, [r7, #56]	; 0x38
 800458c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004594:	633b      	str	r3, [r7, #48]	; 0x30
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
 800459a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800459e:	4622      	mov	r2, r4
 80045a0:	462b      	mov	r3, r5
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f04f 0100 	mov.w	r1, #0
 80045aa:	0159      	lsls	r1, r3, #5
 80045ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045b0:	0150      	lsls	r0, r2, #5
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4621      	mov	r1, r4
 80045b8:	1a51      	subs	r1, r2, r1
 80045ba:	6139      	str	r1, [r7, #16]
 80045bc:	4629      	mov	r1, r5
 80045be:	eb63 0301 	sbc.w	r3, r3, r1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045d0:	4659      	mov	r1, fp
 80045d2:	018b      	lsls	r3, r1, #6
 80045d4:	4651      	mov	r1, sl
 80045d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045da:	4651      	mov	r1, sl
 80045dc:	018a      	lsls	r2, r1, #6
 80045de:	4651      	mov	r1, sl
 80045e0:	ebb2 0801 	subs.w	r8, r2, r1
 80045e4:	4659      	mov	r1, fp
 80045e6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045fe:	4690      	mov	r8, r2
 8004600:	4699      	mov	r9, r3
 8004602:	4623      	mov	r3, r4
 8004604:	eb18 0303 	adds.w	r3, r8, r3
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	462b      	mov	r3, r5
 800460c:	eb49 0303 	adc.w	r3, r9, r3
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800461e:	4629      	mov	r1, r5
 8004620:	024b      	lsls	r3, r1, #9
 8004622:	4621      	mov	r1, r4
 8004624:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004628:	4621      	mov	r1, r4
 800462a:	024a      	lsls	r2, r1, #9
 800462c:	4610      	mov	r0, r2
 800462e:	4619      	mov	r1, r3
 8004630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004632:	2200      	movs	r2, #0
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
 8004636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800463c:	f7fb fe58 	bl	80002f0 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4613      	mov	r3, r2
 8004646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004648:	e058      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464a:	4b38      	ldr	r3, [pc, #224]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	2200      	movs	r2, #0
 8004652:	4618      	mov	r0, r3
 8004654:	4611      	mov	r1, r2
 8004656:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	f04f 0000 	mov.w	r0, #0
 800466c:	f04f 0100 	mov.w	r1, #0
 8004670:	0159      	lsls	r1, r3, #5
 8004672:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004676:	0150      	lsls	r0, r2, #5
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4641      	mov	r1, r8
 800467e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004682:	4649      	mov	r1, r9
 8004684:	eb63 0b01 	sbc.w	fp, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004694:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004698:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800469c:	ebb2 040a 	subs.w	r4, r2, sl
 80046a0:	eb63 050b 	sbc.w	r5, r3, fp
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	00eb      	lsls	r3, r5, #3
 80046ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b2:	00e2      	lsls	r2, r4, #3
 80046b4:	4614      	mov	r4, r2
 80046b6:	461d      	mov	r5, r3
 80046b8:	4643      	mov	r3, r8
 80046ba:	18e3      	adds	r3, r4, r3
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	464b      	mov	r3, r9
 80046c0:	eb45 0303 	adc.w	r3, r5, r3
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046d2:	4629      	mov	r1, r5
 80046d4:	028b      	lsls	r3, r1, #10
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046dc:	4621      	mov	r1, r4
 80046de:	028a      	lsls	r2, r1, #10
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e6:	2200      	movs	r2, #0
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	61fa      	str	r2, [r7, #28]
 80046ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f0:	f7fb fdfe 	bl	80002f0 <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4613      	mov	r3, r2
 80046fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	3301      	adds	r3, #1
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800470c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800470e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004716:	e002      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetSysClockFreq+0x204>)
 800471a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800471c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004720:	4618      	mov	r0, r3
 8004722:	3750      	adds	r7, #80	; 0x50
 8004724:	46bd      	mov	sp, r7
 8004726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	00f42400 	.word	0x00f42400
 8004734:	007a1200 	.word	0x007a1200

08004738 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCC_GetHCLKFreq+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000000 	.word	0x20000000

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004754:	f7ff fff0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0a9b      	lsrs	r3, r3, #10
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4903      	ldr	r1, [pc, #12]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800
 8004774:	0800844c 	.word	0x0800844c

08004778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800477c:	f7ff ffdc 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0b5b      	lsrs	r3, r3, #13
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4903      	ldr	r1, [pc, #12]	; (800479c <HAL_RCC_GetPCLK2Freq+0x24>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40023800 	.word	0x40023800
 800479c:	0800844c 	.word	0x0800844c

080047a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d012      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047c8:	4b69      	ldr	r3, [pc, #420]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a68      	ldr	r2, [pc, #416]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047d2:	6093      	str	r3, [r2, #8]
 80047d4:	4b66      	ldr	r3, [pc, #408]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	4964      	ldr	r1, [pc, #400]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047ea:	2301      	movs	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d017      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047fa:	4b5d      	ldr	r3, [pc, #372]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	4959      	ldr	r1, [pc, #356]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004818:	d101      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800481a:	2301      	movs	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004826:	2301      	movs	r3, #1
 8004828:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d017      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004836:	4b4e      	ldr	r3, [pc, #312]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800483c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	494a      	ldr	r1, [pc, #296]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004854:	d101      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004856:	2301      	movs	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004862:	2301      	movs	r3, #1
 8004864:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004872:	2301      	movs	r3, #1
 8004874:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 808b 	beq.w	800499a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004884:	4b3a      	ldr	r3, [pc, #232]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	4a39      	ldr	r2, [pc, #228]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488e:	6413      	str	r3, [r2, #64]	; 0x40
 8004890:	4b37      	ldr	r3, [pc, #220]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800489c:	4b35      	ldr	r3, [pc, #212]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a34      	ldr	r2, [pc, #208]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a8:	f7fd fe70 	bl	800258c <HAL_GetTick>
 80048ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b0:	f7fd fe6c 	bl	800258c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e38f      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048c2:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ce:	4b28      	ldr	r3, [pc, #160]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d035      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d02e      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ec:	4b20      	ldr	r3, [pc, #128]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048f6:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004900:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004902:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800490e:	4a18      	ldr	r2, [pc, #96]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004914:	4b16      	ldr	r3, [pc, #88]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d114      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fd fe34 	bl	800258c <HAL_GetTick>
 8004924:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004926:	e00a      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004928:	f7fd fe30 	bl	800258c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	; 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e351      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0ee      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004956:	d111      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004966:	400b      	ands	r3, r1
 8004968:	4901      	ldr	r1, [pc, #4]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
 800496e:	e00b      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004970:	40023800 	.word	0x40023800
 8004974:	40007000 	.word	0x40007000
 8004978:	0ffffcff 	.word	0x0ffffcff
 800497c:	4bac      	ldr	r3, [pc, #688]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4aab      	ldr	r2, [pc, #684]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004982:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004986:	6093      	str	r3, [r2, #8]
 8004988:	4ba9      	ldr	r3, [pc, #676]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004994:	49a6      	ldr	r1, [pc, #664]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004996:	4313      	orrs	r3, r2
 8004998:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d010      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049a6:	4ba2      	ldr	r3, [pc, #648]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ac:	4aa0      	ldr	r2, [pc, #640]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80049b6:	4b9e      	ldr	r3, [pc, #632]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	499b      	ldr	r1, [pc, #620]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049d4:	4b96      	ldr	r3, [pc, #600]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e2:	4993      	ldr	r1, [pc, #588]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049f6:	4b8e      	ldr	r3, [pc, #568]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a04:	498a      	ldr	r1, [pc, #552]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a18:	4b85      	ldr	r3, [pc, #532]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a26:	4982      	ldr	r1, [pc, #520]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a3a:	4b7d      	ldr	r3, [pc, #500]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	4979      	ldr	r1, [pc, #484]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a5c:	4b74      	ldr	r3, [pc, #464]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	f023 0203 	bic.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	4971      	ldr	r1, [pc, #452]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a7e:	4b6c      	ldr	r3, [pc, #432]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a84:	f023 020c 	bic.w	r2, r3, #12
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8c:	4968      	ldr	r1, [pc, #416]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aa0:	4b63      	ldr	r3, [pc, #396]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	4960      	ldr	r1, [pc, #384]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ac2:	4b5b      	ldr	r3, [pc, #364]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	4957      	ldr	r1, [pc, #348]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ae4:	4b52      	ldr	r3, [pc, #328]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af2:	494f      	ldr	r1, [pc, #316]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b06:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	4946      	ldr	r1, [pc, #280]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b28:	4b41      	ldr	r3, [pc, #260]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b36:	493e      	ldr	r1, [pc, #248]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b4a:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b58:	4935      	ldr	r1, [pc, #212]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b6c:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b7a:	492d      	ldr	r1, [pc, #180]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d011      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b8e:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9c:	4924      	ldr	r1, [pc, #144]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bce:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bdc:	4914      	ldr	r1, [pc, #80]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c00:	490b      	ldr	r1, [pc, #44]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00f      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c24:	4902      	ldr	r1, [pc, #8]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c2c:	e002      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c40:	4b8a      	ldr	r3, [pc, #552]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	4986      	ldr	r1, [pc, #536]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00b      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c64:	4b81      	ldr	r3, [pc, #516]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c74:	497d      	ldr	r1, [pc, #500]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d006      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80d6 	beq.w	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c90:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a75      	ldr	r2, [pc, #468]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9c:	f7fd fc76 	bl	800258c <HAL_GetTick>
 8004ca0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ca4:	f7fd fc72 	bl	800258c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e195      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d021      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11d      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cd6:	4b65      	ldr	r3, [pc, #404]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ce4:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cea:	0e1b      	lsrs	r3, r3, #24
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	019a      	lsls	r2, r3, #6
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	061b      	lsls	r3, r3, #24
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	071b      	lsls	r3, r3, #28
 8004d0a:	4958      	ldr	r1, [pc, #352]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d004      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d02e      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3c:	d129      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d3e:	4b4b      	ldr	r3, [pc, #300]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d44:	0c1b      	lsrs	r3, r3, #16
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d4c:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d52:	0f1b      	lsrs	r3, r3, #28
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	019a      	lsls	r2, r3, #6
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	061b      	lsls	r3, r3, #24
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	071b      	lsls	r3, r3, #28
 8004d72:	493e      	ldr	r1, [pc, #248]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d7a:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d80:	f023 021f 	bic.w	r2, r3, #31
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	4938      	ldr	r1, [pc, #224]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01d      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d9e:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dac:	4b2f      	ldr	r3, [pc, #188]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db2:	0f1b      	lsrs	r3, r3, #28
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	019a      	lsls	r2, r3, #6
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	071b      	lsls	r3, r3, #28
 8004dd2:	4926      	ldr	r1, [pc, #152]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d011      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	019a      	lsls	r2, r3, #6
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	041b      	lsls	r3, r3, #16
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	071b      	lsls	r3, r3, #28
 8004e02:	491a      	ldr	r1, [pc, #104]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e16:	f7fd fbb9 	bl	800258c <HAL_GetTick>
 8004e1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e1e:	f7fd fbb5 	bl	800258c <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b64      	cmp	r3, #100	; 0x64
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e0d8      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e30:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	f040 80ce 	bne.w	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e50:	f7fd fb9c 	bl	800258c <HAL_GetTick>
 8004e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e56:	e00b      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e58:	f7fd fb98 	bl	800258c <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d904      	bls.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e0bb      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e70:	4b5e      	ldr	r3, [pc, #376]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7c:	d0ec      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d02e      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d12a      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ea6:	4b51      	ldr	r3, [pc, #324]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eb4:	4b4d      	ldr	r3, [pc, #308]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	0f1b      	lsrs	r3, r3, #28
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	019a      	lsls	r2, r3, #6
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	041b      	lsls	r3, r3, #16
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	061b      	lsls	r3, r3, #24
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	071b      	lsls	r3, r3, #28
 8004eda:	4944      	ldr	r1, [pc, #272]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ee2:	4b42      	ldr	r3, [pc, #264]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	493d      	ldr	r1, [pc, #244]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d022      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f10:	d11d      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f12:	4b36      	ldr	r3, [pc, #216]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	0e1b      	lsrs	r3, r3, #24
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f20:	4b32      	ldr	r3, [pc, #200]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	0f1b      	lsrs	r3, r3, #28
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	019a      	lsls	r2, r3, #6
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	071b      	lsls	r3, r3, #28
 8004f46:	4929      	ldr	r1, [pc, #164]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d028      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f5a:	4b24      	ldr	r3, [pc, #144]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f60:	0e1b      	lsrs	r3, r3, #24
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f68:	4b20      	ldr	r3, [pc, #128]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	0c1b      	lsrs	r3, r3, #16
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	019a      	lsls	r2, r3, #6
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	431a      	orrs	r2, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	061b      	lsls	r3, r3, #24
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	071b      	lsls	r3, r3, #28
 8004f8e:	4917      	ldr	r1, [pc, #92]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	4911      	ldr	r1, [pc, #68]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb8:	f7fd fae8 	bl	800258c <HAL_GetTick>
 8004fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fc0:	f7fd fae4 	bl	800258c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b64      	cmp	r3, #100	; 0x64
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e007      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fde:	d1ef      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800

08004ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e09d      	b.n	800513e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d108      	bne.n	800501c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005012:	d009      	beq.n	8005028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	61da      	str	r2, [r3, #28]
 800501a:	e005      	b.n	8005028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fc fd96 	bl	8001b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005068:	d902      	bls.n	8005070 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e002      	b.n	8005076 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005074:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800507e:	d007      	beq.n	8005090 <HAL_SPI_Init+0xa0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005088:	d002      	beq.n	8005090 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	ea42 0103 	orr.w	r1, r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	f003 0204 	and.w	r2, r3, #4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800510c:	ea42 0103 	orr.w	r1, r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800512c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e049      	b.n	80051ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fc fd81 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3304      	adds	r3, #4
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 fc0d 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e049      	b.n	800529a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc fe1e 	bl	8001e5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f000 fbb6 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e049      	b.n	8005348 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f841 	bl	8005350 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3304      	adds	r3, #4
 80052de:	4619      	mov	r1, r3
 80052e0:	4610      	mov	r0, r2
 80052e2:	f000 fb5f 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e08f      	b.n	8005498 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7fc fcef 	bl	8001d70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6899      	ldr	r1, [r3, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <HAL_TIM_Encoder_Init+0x13c>)
 80053a6:	400b      	ands	r3, r1
 80053a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4619      	mov	r1, r3
 80053b4:	4610      	mov	r0, r2
 80053b6:	f000 faf5 	bl	80059a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <HAL_TIM_Encoder_Init+0x140>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	4313      	orrs	r3, r2
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4b2b      	ldr	r3, [pc, #172]	; (80054a8 <HAL_TIM_Encoder_Init+0x144>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <HAL_TIM_Encoder_Init+0x148>)
 8005402:	4013      	ands	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	4313      	orrs	r3, r2
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	011a      	lsls	r2, r3, #4
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	031b      	lsls	r3, r3, #12
 8005424:	4313      	orrs	r3, r2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800543a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	4313      	orrs	r3, r2
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	fffebff8 	.word	0xfffebff8
 80054a4:	fffffcfc 	.word	0xfffffcfc
 80054a8:	fffff3f3 	.word	0xfffff3f3
 80054ac:	ffff0f0f 	.word	0xffff0f0f

080054b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e088      	b.n	80055e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d11b      	bne.n	8005514 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f000 fd58 	bl	8005fa0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 020c 	bic.w	r2, r2, #12
 80054fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6999      	ldr	r1, [r3, #24]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	619a      	str	r2, [r3, #24]
 8005512:	e060      	b.n	80055d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b04      	cmp	r3, #4
 8005518:	d11c      	bne.n	8005554 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6819      	ldr	r1, [r3, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f000 fddc 	bl	80060e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800553c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6999      	ldr	r1, [r3, #24]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	021a      	lsls	r2, r3, #8
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	619a      	str	r2, [r3, #24]
 8005552:	e040      	b.n	80055d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b08      	cmp	r3, #8
 8005558:	d11b      	bne.n	8005592 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	6819      	ldr	r1, [r3, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f000 fe29 	bl	80061c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69da      	ldr	r2, [r3, #28]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 020c 	bic.w	r2, r2, #12
 800557c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69d9      	ldr	r1, [r3, #28]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	61da      	str	r2, [r3, #28]
 8005590:	e021      	b.n	80055d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d11c      	bne.n	80055d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6819      	ldr	r1, [r3, #0]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f000 fe46 	bl	8006238 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69da      	ldr	r2, [r3, #28]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69d9      	ldr	r1, [r3, #28]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	61da      	str	r2, [r3, #28]
 80055d0:	e001      	b.n	80055d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055de:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005602:	2302      	movs	r3, #2
 8005604:	e0ff      	b.n	8005806 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b14      	cmp	r3, #20
 8005612:	f200 80f0 	bhi.w	80057f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005671 	.word	0x08005671
 8005620:	080057f7 	.word	0x080057f7
 8005624:	080057f7 	.word	0x080057f7
 8005628:	080057f7 	.word	0x080057f7
 800562c:	080056b1 	.word	0x080056b1
 8005630:	080057f7 	.word	0x080057f7
 8005634:	080057f7 	.word	0x080057f7
 8005638:	080057f7 	.word	0x080057f7
 800563c:	080056f3 	.word	0x080056f3
 8005640:	080057f7 	.word	0x080057f7
 8005644:	080057f7 	.word	0x080057f7
 8005648:	080057f7 	.word	0x080057f7
 800564c:	08005733 	.word	0x08005733
 8005650:	080057f7 	.word	0x080057f7
 8005654:	080057f7 	.word	0x080057f7
 8005658:	080057f7 	.word	0x080057f7
 800565c:	08005775 	.word	0x08005775
 8005660:	080057f7 	.word	0x080057f7
 8005664:	080057f7 	.word	0x080057f7
 8005668:	080057f7 	.word	0x080057f7
 800566c:	080057b5 	.word	0x080057b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fa34 	bl	8005ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0208 	orr.w	r2, r2, #8
 800568a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0204 	bic.w	r2, r2, #4
 800569a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6999      	ldr	r1, [r3, #24]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	619a      	str	r2, [r3, #24]
      break;
 80056ae:	e0a5      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fa86 	bl	8005bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6999      	ldr	r1, [r3, #24]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	619a      	str	r2, [r3, #24]
      break;
 80056f0:	e084      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fadd 	bl	8005cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0208 	orr.w	r2, r2, #8
 800570c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0204 	bic.w	r2, r2, #4
 800571c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69d9      	ldr	r1, [r3, #28]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	61da      	str	r2, [r3, #28]
      break;
 8005730:	e064      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fb33 	bl	8005da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69d9      	ldr	r1, [r3, #28]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	021a      	lsls	r2, r3, #8
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	61da      	str	r2, [r3, #28]
      break;
 8005772:	e043      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fb6a 	bl	8005e54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0208 	orr.w	r2, r2, #8
 800578e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057b2:	e023      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fb9c 	bl	8005ef8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	021a      	lsls	r2, r3, #8
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057f4:	e002      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
      break;
 80057fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop

08005810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIM_ConfigClockSource+0x1c>
 8005828:	2302      	movs	r3, #2
 800582a:	e0b4      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x186>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	4b56      	ldr	r3, [pc, #344]	; (80059a0 <HAL_TIM_ConfigClockSource+0x190>)
 8005848:	4013      	ands	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005864:	d03e      	beq.n	80058e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586a:	f200 8087 	bhi.w	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005872:	f000 8086 	beq.w	8005982 <HAL_TIM_ConfigClockSource+0x172>
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	d87f      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b70      	cmp	r3, #112	; 0x70
 800587e:	d01a      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005880:	2b70      	cmp	r3, #112	; 0x70
 8005882:	d87b      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b60      	cmp	r3, #96	; 0x60
 8005886:	d050      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x11a>
 8005888:	2b60      	cmp	r3, #96	; 0x60
 800588a:	d877      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b50      	cmp	r3, #80	; 0x50
 800588e:	d03c      	beq.n	800590a <HAL_TIM_ConfigClockSource+0xfa>
 8005890:	2b50      	cmp	r3, #80	; 0x50
 8005892:	d873      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d058      	beq.n	800594a <HAL_TIM_ConfigClockSource+0x13a>
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d86f      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b30      	cmp	r3, #48	; 0x30
 800589e:	d064      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058a0:	2b30      	cmp	r3, #48	; 0x30
 80058a2:	d86b      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d060      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d867      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d05c      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d05a      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	e062      	b.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6899      	ldr	r1, [r3, #8]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f000 fd0f 	bl	80062e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	609a      	str	r2, [r3, #8]
      break;
 80058e2:	e04f      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6899      	ldr	r1, [r3, #8]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f000 fcf8 	bl	80062e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005906:	609a      	str	r2, [r3, #8]
      break;
 8005908:	e03c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	6859      	ldr	r1, [r3, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	461a      	mov	r2, r3
 8005918:	f000 fbb6 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2150      	movs	r1, #80	; 0x50
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fcc5 	bl	80062b2 <TIM_ITRx_SetConfig>
      break;
 8005928:	e02c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6859      	ldr	r1, [r3, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	461a      	mov	r2, r3
 8005938:	f000 fc12 	bl	8006160 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2160      	movs	r1, #96	; 0x60
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fcb5 	bl	80062b2 <TIM_ITRx_SetConfig>
      break;
 8005948:	e01c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	461a      	mov	r2, r3
 8005958:	f000 fb96 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2140      	movs	r1, #64	; 0x40
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fca5 	bl	80062b2 <TIM_ITRx_SetConfig>
      break;
 8005968:	e00c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f000 fc9c 	bl	80062b2 <TIM_ITRx_SetConfig>
      break;
 800597a:	e003      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	73fb      	strb	r3, [r7, #15]
      break;
 8005980:	e000      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	fffeff88 	.word	0xfffeff88

080059a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a40      	ldr	r2, [pc, #256]	; (8005ab8 <TIM_Base_SetConfig+0x114>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c2:	d00f      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3d      	ldr	r2, [pc, #244]	; (8005abc <TIM_Base_SetConfig+0x118>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3c      	ldr	r2, [pc, #240]	; (8005ac0 <TIM_Base_SetConfig+0x11c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d007      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3b      	ldr	r2, [pc, #236]	; (8005ac4 <TIM_Base_SetConfig+0x120>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a3a      	ldr	r2, [pc, #232]	; (8005ac8 <TIM_Base_SetConfig+0x124>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d108      	bne.n	80059f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2f      	ldr	r2, [pc, #188]	; (8005ab8 <TIM_Base_SetConfig+0x114>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d02b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d027      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2c      	ldr	r2, [pc, #176]	; (8005abc <TIM_Base_SetConfig+0x118>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d023      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2b      	ldr	r2, [pc, #172]	; (8005ac0 <TIM_Base_SetConfig+0x11c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01f      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <TIM_Base_SetConfig+0x120>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a29      	ldr	r2, [pc, #164]	; (8005ac8 <TIM_Base_SetConfig+0x124>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d017      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a28      	ldr	r2, [pc, #160]	; (8005acc <TIM_Base_SetConfig+0x128>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a27      	ldr	r2, [pc, #156]	; (8005ad0 <TIM_Base_SetConfig+0x12c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a26      	ldr	r2, [pc, #152]	; (8005ad4 <TIM_Base_SetConfig+0x130>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a25      	ldr	r2, [pc, #148]	; (8005ad8 <TIM_Base_SetConfig+0x134>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a24      	ldr	r2, [pc, #144]	; (8005adc <TIM_Base_SetConfig+0x138>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a23      	ldr	r2, [pc, #140]	; (8005ae0 <TIM_Base_SetConfig+0x13c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	; (8005ab8 <TIM_Base_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_Base_SetConfig+0xf8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a0c      	ldr	r2, [pc, #48]	; (8005ac8 <TIM_Base_SetConfig+0x124>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d103      	bne.n	8005aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800
 8005ad8:	40001800 	.word	0x40001800
 8005adc:	40001c00 	.word	0x40001c00
 8005ae0:	40002000 	.word	0x40002000

08005ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4b2b      	ldr	r3, [pc, #172]	; (8005bbc <TIM_OC1_SetConfig+0xd8>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0302 	bic.w	r3, r3, #2
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <TIM_OC1_SetConfig+0xdc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC1_SetConfig+0x64>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a20      	ldr	r2, [pc, #128]	; (8005bc4 <TIM_OC1_SetConfig+0xe0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10c      	bne.n	8005b62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0308 	bic.w	r3, r3, #8
 8005b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 0304 	bic.w	r3, r3, #4
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <TIM_OC1_SetConfig+0xdc>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC1_SetConfig+0x8e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <TIM_OC1_SetConfig+0xe0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d111      	bne.n	8005b96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	fffeff8f 	.word	0xfffeff8f
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40010400 	.word	0x40010400

08005bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f023 0210 	bic.w	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <TIM_OC2_SetConfig+0xe4>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0320 	bic.w	r3, r3, #32
 8005c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <TIM_OC2_SetConfig+0xe8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC2_SetConfig+0x68>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a22      	ldr	r2, [pc, #136]	; (8005cb4 <TIM_OC2_SetConfig+0xec>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10d      	bne.n	8005c4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <TIM_OC2_SetConfig+0xe8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_OC2_SetConfig+0x94>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a17      	ldr	r2, [pc, #92]	; (8005cb4 <TIM_OC2_SetConfig+0xec>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d113      	bne.n	8005c84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	feff8fff 	.word	0xfeff8fff
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4b2d      	ldr	r3, [pc, #180]	; (8005d98 <TIM_OC3_SetConfig+0xe0>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a22      	ldr	r2, [pc, #136]	; (8005d9c <TIM_OC3_SetConfig+0xe4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d003      	beq.n	8005d1e <TIM_OC3_SetConfig+0x66>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a21      	ldr	r2, [pc, #132]	; (8005da0 <TIM_OC3_SetConfig+0xe8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d10d      	bne.n	8005d3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <TIM_OC3_SetConfig+0xe4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_OC3_SetConfig+0x92>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <TIM_OC3_SetConfig+0xe8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d113      	bne.n	8005d72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	fffeff8f 	.word	0xfffeff8f
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40010400 	.word	0x40010400

08005da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <TIM_OC4_SetConfig+0xa4>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	031b      	lsls	r3, r3, #12
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <TIM_OC4_SetConfig+0xa8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC4_SetConfig+0x68>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a12      	ldr	r2, [pc, #72]	; (8005e50 <TIM_OC4_SetConfig+0xac>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d109      	bne.n	8005e20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	feff8fff 	.word	0xfeff8fff
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400

08005e54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <TIM_OC5_SetConfig+0x98>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a12      	ldr	r2, [pc, #72]	; (8005ef0 <TIM_OC5_SetConfig+0x9c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <TIM_OC5_SetConfig+0x5e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a11      	ldr	r2, [pc, #68]	; (8005ef4 <TIM_OC5_SetConfig+0xa0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d109      	bne.n	8005ec6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	fffeff8f 	.word	0xfffeff8f
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40010400 	.word	0x40010400

08005ef8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <TIM_OC6_SetConfig+0x9c>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	051b      	lsls	r3, r3, #20
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <TIM_OC6_SetConfig+0xa0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC6_SetConfig+0x60>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <TIM_OC6_SetConfig+0xa4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d109      	bne.n	8005f6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	029b      	lsls	r3, r3, #10
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	feff8fff 	.word	0xfeff8fff
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40010400 	.word	0x40010400

08005fa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4a28      	ldr	r2, [pc, #160]	; (800606c <TIM_TI1_SetConfig+0xcc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01b      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d017      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a25      	ldr	r2, [pc, #148]	; (8006070 <TIM_TI1_SetConfig+0xd0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a24      	ldr	r2, [pc, #144]	; (8006074 <TIM_TI1_SetConfig+0xd4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00f      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a23      	ldr	r2, [pc, #140]	; (8006078 <TIM_TI1_SetConfig+0xd8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00b      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a22      	ldr	r2, [pc, #136]	; (800607c <TIM_TI1_SetConfig+0xdc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d007      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a21      	ldr	r2, [pc, #132]	; (8006080 <TIM_TI1_SetConfig+0xe0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a20      	ldr	r2, [pc, #128]	; (8006084 <TIM_TI1_SetConfig+0xe4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <TIM_TI1_SetConfig+0x6a>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <TIM_TI1_SetConfig+0x6c>
 800600a:	2300      	movs	r3, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	e003      	b.n	800602a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	b2db      	uxtb	r3, r3
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f023 030a 	bic.w	r3, r3, #10
 8006044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f003 030a 	and.w	r3, r3, #10
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40001800 	.word	0x40001800

08006088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 030a 	bic.w	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b087      	sub	sp, #28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f023 0210 	bic.w	r2, r3, #16
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	031b      	lsls	r3, r3, #12
 800612a:	b29b      	uxth	r3, r3
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006138:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	621a      	str	r2, [r3, #32]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f023 0210 	bic.w	r2, r3, #16
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800618a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	031b      	lsls	r3, r3, #12
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800619c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 0303 	bic.w	r3, r3, #3
 80061ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	b2db      	uxtb	r3, r3
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006210:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	621a      	str	r2, [r3, #32]
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006264:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006276:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	031b      	lsls	r3, r3, #12
 800627c:	b29b      	uxth	r3, r3
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800628a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	031b      	lsls	r3, r3, #12
 8006290:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	621a      	str	r2, [r3, #32]
}
 80062a6:	bf00      	nop
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b085      	sub	sp, #20
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f043 0307 	orr.w	r3, r3, #7
 80062d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	609a      	str	r2, [r3, #8]
}
 80062dc:	bf00      	nop
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	021a      	lsls	r2, r3, #8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	431a      	orrs	r2, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4313      	orrs	r3, r2
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	609a      	str	r2, [r3, #8]
}
 800631c:	bf00      	nop
 800631e:	371c      	adds	r7, #28
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800633c:	2302      	movs	r3, #2
 800633e:	e06d      	b.n	800641c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a30      	ldr	r2, [pc, #192]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d004      	beq.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a2f      	ldr	r2, [pc, #188]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d108      	bne.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800637a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a20      	ldr	r2, [pc, #128]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b2:	d01d      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a15      	ldr	r2, [pc, #84]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a16      	ldr	r2, [pc, #88]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a15      	ldr	r2, [pc, #84]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10c      	bne.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40010000 	.word	0x40010000
 800642c:	40010400 	.word	0x40010400
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40014000 	.word	0x40014000
 8006440:	40001800 	.word	0x40001800

08006444 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800645c:	2302      	movs	r3, #2
 800645e:	e065      	b.n	800652c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	041b      	lsls	r3, r3, #16
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a16      	ldr	r2, [pc, #88]	; (8006538 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d004      	beq.n	80064ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a14      	ldr	r2, [pc, #80]	; (800653c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d115      	bne.n	800651a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	051b      	lsls	r3, r3, #20
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400

08006540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e040      	b.n	80065d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb fd66 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2224      	movs	r2, #36	; 0x24
 800656c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f82c 	bl	80065dc <UART_SetConfig>
 8006584:	4603      	mov	r3, r0
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e022      	b.n	80065d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fa84 	bl	8006aa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fb0b 	bl	8006be8 <UART_CheckIdleState>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4ba6      	ldr	r3, [pc, #664]	; (80068a0 <UART_SetConfig+0x2c4>)
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6812      	ldr	r2, [r2, #0]
 800660e:	6979      	ldr	r1, [r7, #20]
 8006610:	430b      	orrs	r3, r1
 8006612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	430a      	orrs	r2, r1
 800664c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a94      	ldr	r2, [pc, #592]	; (80068a4 <UART_SetConfig+0x2c8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d120      	bne.n	800669a <UART_SetConfig+0xbe>
 8006658:	4b93      	ldr	r3, [pc, #588]	; (80068a8 <UART_SetConfig+0x2cc>)
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	2b03      	cmp	r3, #3
 8006664:	d816      	bhi.n	8006694 <UART_SetConfig+0xb8>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0x90>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	0800667d 	.word	0x0800667d
 8006670:	08006689 	.word	0x08006689
 8006674:	08006683 	.word	0x08006683
 8006678:	0800668f 	.word	0x0800668f
 800667c:	2301      	movs	r3, #1
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e150      	b.n	8006924 <UART_SetConfig+0x348>
 8006682:	2302      	movs	r3, #2
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e14d      	b.n	8006924 <UART_SetConfig+0x348>
 8006688:	2304      	movs	r3, #4
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e14a      	b.n	8006924 <UART_SetConfig+0x348>
 800668e:	2308      	movs	r3, #8
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e147      	b.n	8006924 <UART_SetConfig+0x348>
 8006694:	2310      	movs	r3, #16
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e144      	b.n	8006924 <UART_SetConfig+0x348>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a83      	ldr	r2, [pc, #524]	; (80068ac <UART_SetConfig+0x2d0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d132      	bne.n	800670a <UART_SetConfig+0x12e>
 80066a4:	4b80      	ldr	r3, [pc, #512]	; (80068a8 <UART_SetConfig+0x2cc>)
 80066a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066aa:	f003 030c 	and.w	r3, r3, #12
 80066ae:	2b0c      	cmp	r3, #12
 80066b0:	d828      	bhi.n	8006704 <UART_SetConfig+0x128>
 80066b2:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0xdc>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066ed 	.word	0x080066ed
 80066bc:	08006705 	.word	0x08006705
 80066c0:	08006705 	.word	0x08006705
 80066c4:	08006705 	.word	0x08006705
 80066c8:	080066f9 	.word	0x080066f9
 80066cc:	08006705 	.word	0x08006705
 80066d0:	08006705 	.word	0x08006705
 80066d4:	08006705 	.word	0x08006705
 80066d8:	080066f3 	.word	0x080066f3
 80066dc:	08006705 	.word	0x08006705
 80066e0:	08006705 	.word	0x08006705
 80066e4:	08006705 	.word	0x08006705
 80066e8:	080066ff 	.word	0x080066ff
 80066ec:	2300      	movs	r3, #0
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e118      	b.n	8006924 <UART_SetConfig+0x348>
 80066f2:	2302      	movs	r3, #2
 80066f4:	77fb      	strb	r3, [r7, #31]
 80066f6:	e115      	b.n	8006924 <UART_SetConfig+0x348>
 80066f8:	2304      	movs	r3, #4
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	e112      	b.n	8006924 <UART_SetConfig+0x348>
 80066fe:	2308      	movs	r3, #8
 8006700:	77fb      	strb	r3, [r7, #31]
 8006702:	e10f      	b.n	8006924 <UART_SetConfig+0x348>
 8006704:	2310      	movs	r3, #16
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e10c      	b.n	8006924 <UART_SetConfig+0x348>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a68      	ldr	r2, [pc, #416]	; (80068b0 <UART_SetConfig+0x2d4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d120      	bne.n	8006756 <UART_SetConfig+0x17a>
 8006714:	4b64      	ldr	r3, [pc, #400]	; (80068a8 <UART_SetConfig+0x2cc>)
 8006716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800671e:	2b30      	cmp	r3, #48	; 0x30
 8006720:	d013      	beq.n	800674a <UART_SetConfig+0x16e>
 8006722:	2b30      	cmp	r3, #48	; 0x30
 8006724:	d814      	bhi.n	8006750 <UART_SetConfig+0x174>
 8006726:	2b20      	cmp	r3, #32
 8006728:	d009      	beq.n	800673e <UART_SetConfig+0x162>
 800672a:	2b20      	cmp	r3, #32
 800672c:	d810      	bhi.n	8006750 <UART_SetConfig+0x174>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <UART_SetConfig+0x15c>
 8006732:	2b10      	cmp	r3, #16
 8006734:	d006      	beq.n	8006744 <UART_SetConfig+0x168>
 8006736:	e00b      	b.n	8006750 <UART_SetConfig+0x174>
 8006738:	2300      	movs	r3, #0
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e0f2      	b.n	8006924 <UART_SetConfig+0x348>
 800673e:	2302      	movs	r3, #2
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e0ef      	b.n	8006924 <UART_SetConfig+0x348>
 8006744:	2304      	movs	r3, #4
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e0ec      	b.n	8006924 <UART_SetConfig+0x348>
 800674a:	2308      	movs	r3, #8
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e0e9      	b.n	8006924 <UART_SetConfig+0x348>
 8006750:	2310      	movs	r3, #16
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e0e6      	b.n	8006924 <UART_SetConfig+0x348>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a56      	ldr	r2, [pc, #344]	; (80068b4 <UART_SetConfig+0x2d8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d120      	bne.n	80067a2 <UART_SetConfig+0x1c6>
 8006760:	4b51      	ldr	r3, [pc, #324]	; (80068a8 <UART_SetConfig+0x2cc>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800676a:	2bc0      	cmp	r3, #192	; 0xc0
 800676c:	d013      	beq.n	8006796 <UART_SetConfig+0x1ba>
 800676e:	2bc0      	cmp	r3, #192	; 0xc0
 8006770:	d814      	bhi.n	800679c <UART_SetConfig+0x1c0>
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d009      	beq.n	800678a <UART_SetConfig+0x1ae>
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	d810      	bhi.n	800679c <UART_SetConfig+0x1c0>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <UART_SetConfig+0x1a8>
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d006      	beq.n	8006790 <UART_SetConfig+0x1b4>
 8006782:	e00b      	b.n	800679c <UART_SetConfig+0x1c0>
 8006784:	2300      	movs	r3, #0
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e0cc      	b.n	8006924 <UART_SetConfig+0x348>
 800678a:	2302      	movs	r3, #2
 800678c:	77fb      	strb	r3, [r7, #31]
 800678e:	e0c9      	b.n	8006924 <UART_SetConfig+0x348>
 8006790:	2304      	movs	r3, #4
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e0c6      	b.n	8006924 <UART_SetConfig+0x348>
 8006796:	2308      	movs	r3, #8
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e0c3      	b.n	8006924 <UART_SetConfig+0x348>
 800679c:	2310      	movs	r3, #16
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e0c0      	b.n	8006924 <UART_SetConfig+0x348>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a44      	ldr	r2, [pc, #272]	; (80068b8 <UART_SetConfig+0x2dc>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d125      	bne.n	80067f8 <UART_SetConfig+0x21c>
 80067ac:	4b3e      	ldr	r3, [pc, #248]	; (80068a8 <UART_SetConfig+0x2cc>)
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ba:	d017      	beq.n	80067ec <UART_SetConfig+0x210>
 80067bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c0:	d817      	bhi.n	80067f2 <UART_SetConfig+0x216>
 80067c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c6:	d00b      	beq.n	80067e0 <UART_SetConfig+0x204>
 80067c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067cc:	d811      	bhi.n	80067f2 <UART_SetConfig+0x216>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <UART_SetConfig+0x1fe>
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d6:	d006      	beq.n	80067e6 <UART_SetConfig+0x20a>
 80067d8:	e00b      	b.n	80067f2 <UART_SetConfig+0x216>
 80067da:	2300      	movs	r3, #0
 80067dc:	77fb      	strb	r3, [r7, #31]
 80067de:	e0a1      	b.n	8006924 <UART_SetConfig+0x348>
 80067e0:	2302      	movs	r3, #2
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e09e      	b.n	8006924 <UART_SetConfig+0x348>
 80067e6:	2304      	movs	r3, #4
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e09b      	b.n	8006924 <UART_SetConfig+0x348>
 80067ec:	2308      	movs	r3, #8
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e098      	b.n	8006924 <UART_SetConfig+0x348>
 80067f2:	2310      	movs	r3, #16
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e095      	b.n	8006924 <UART_SetConfig+0x348>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2f      	ldr	r2, [pc, #188]	; (80068bc <UART_SetConfig+0x2e0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d125      	bne.n	800684e <UART_SetConfig+0x272>
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <UART_SetConfig+0x2cc>)
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006808:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800680c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006810:	d017      	beq.n	8006842 <UART_SetConfig+0x266>
 8006812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006816:	d817      	bhi.n	8006848 <UART_SetConfig+0x26c>
 8006818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681c:	d00b      	beq.n	8006836 <UART_SetConfig+0x25a>
 800681e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006822:	d811      	bhi.n	8006848 <UART_SetConfig+0x26c>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <UART_SetConfig+0x254>
 8006828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682c:	d006      	beq.n	800683c <UART_SetConfig+0x260>
 800682e:	e00b      	b.n	8006848 <UART_SetConfig+0x26c>
 8006830:	2301      	movs	r3, #1
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	e076      	b.n	8006924 <UART_SetConfig+0x348>
 8006836:	2302      	movs	r3, #2
 8006838:	77fb      	strb	r3, [r7, #31]
 800683a:	e073      	b.n	8006924 <UART_SetConfig+0x348>
 800683c:	2304      	movs	r3, #4
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	e070      	b.n	8006924 <UART_SetConfig+0x348>
 8006842:	2308      	movs	r3, #8
 8006844:	77fb      	strb	r3, [r7, #31]
 8006846:	e06d      	b.n	8006924 <UART_SetConfig+0x348>
 8006848:	2310      	movs	r3, #16
 800684a:	77fb      	strb	r3, [r7, #31]
 800684c:	e06a      	b.n	8006924 <UART_SetConfig+0x348>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <UART_SetConfig+0x2e4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d138      	bne.n	80068ca <UART_SetConfig+0x2ee>
 8006858:	4b13      	ldr	r3, [pc, #76]	; (80068a8 <UART_SetConfig+0x2cc>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006862:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006866:	d017      	beq.n	8006898 <UART_SetConfig+0x2bc>
 8006868:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800686c:	d82a      	bhi.n	80068c4 <UART_SetConfig+0x2e8>
 800686e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006872:	d00b      	beq.n	800688c <UART_SetConfig+0x2b0>
 8006874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006878:	d824      	bhi.n	80068c4 <UART_SetConfig+0x2e8>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <UART_SetConfig+0x2aa>
 800687e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006882:	d006      	beq.n	8006892 <UART_SetConfig+0x2b6>
 8006884:	e01e      	b.n	80068c4 <UART_SetConfig+0x2e8>
 8006886:	2300      	movs	r3, #0
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	e04b      	b.n	8006924 <UART_SetConfig+0x348>
 800688c:	2302      	movs	r3, #2
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	e048      	b.n	8006924 <UART_SetConfig+0x348>
 8006892:	2304      	movs	r3, #4
 8006894:	77fb      	strb	r3, [r7, #31]
 8006896:	e045      	b.n	8006924 <UART_SetConfig+0x348>
 8006898:	2308      	movs	r3, #8
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e042      	b.n	8006924 <UART_SetConfig+0x348>
 800689e:	bf00      	nop
 80068a0:	efff69f3 	.word	0xefff69f3
 80068a4:	40011000 	.word	0x40011000
 80068a8:	40023800 	.word	0x40023800
 80068ac:	40004400 	.word	0x40004400
 80068b0:	40004800 	.word	0x40004800
 80068b4:	40004c00 	.word	0x40004c00
 80068b8:	40005000 	.word	0x40005000
 80068bc:	40011400 	.word	0x40011400
 80068c0:	40007800 	.word	0x40007800
 80068c4:	2310      	movs	r3, #16
 80068c6:	77fb      	strb	r3, [r7, #31]
 80068c8:	e02c      	b.n	8006924 <UART_SetConfig+0x348>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a72      	ldr	r2, [pc, #456]	; (8006a98 <UART_SetConfig+0x4bc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d125      	bne.n	8006920 <UART_SetConfig+0x344>
 80068d4:	4b71      	ldr	r3, [pc, #452]	; (8006a9c <UART_SetConfig+0x4c0>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068e2:	d017      	beq.n	8006914 <UART_SetConfig+0x338>
 80068e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068e8:	d817      	bhi.n	800691a <UART_SetConfig+0x33e>
 80068ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ee:	d00b      	beq.n	8006908 <UART_SetConfig+0x32c>
 80068f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f4:	d811      	bhi.n	800691a <UART_SetConfig+0x33e>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <UART_SetConfig+0x326>
 80068fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fe:	d006      	beq.n	800690e <UART_SetConfig+0x332>
 8006900:	e00b      	b.n	800691a <UART_SetConfig+0x33e>
 8006902:	2300      	movs	r3, #0
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	e00d      	b.n	8006924 <UART_SetConfig+0x348>
 8006908:	2302      	movs	r3, #2
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e00a      	b.n	8006924 <UART_SetConfig+0x348>
 800690e:	2304      	movs	r3, #4
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e007      	b.n	8006924 <UART_SetConfig+0x348>
 8006914:	2308      	movs	r3, #8
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e004      	b.n	8006924 <UART_SetConfig+0x348>
 800691a:	2310      	movs	r3, #16
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e001      	b.n	8006924 <UART_SetConfig+0x348>
 8006920:	2310      	movs	r3, #16
 8006922:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692c:	d15b      	bne.n	80069e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800692e:	7ffb      	ldrb	r3, [r7, #31]
 8006930:	2b08      	cmp	r3, #8
 8006932:	d828      	bhi.n	8006986 <UART_SetConfig+0x3aa>
 8006934:	a201      	add	r2, pc, #4	; (adr r2, 800693c <UART_SetConfig+0x360>)
 8006936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693a:	bf00      	nop
 800693c:	08006961 	.word	0x08006961
 8006940:	08006969 	.word	0x08006969
 8006944:	08006971 	.word	0x08006971
 8006948:	08006987 	.word	0x08006987
 800694c:	08006977 	.word	0x08006977
 8006950:	08006987 	.word	0x08006987
 8006954:	08006987 	.word	0x08006987
 8006958:	08006987 	.word	0x08006987
 800695c:	0800697f 	.word	0x0800697f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006960:	f7fd fef6 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8006964:	61b8      	str	r0, [r7, #24]
        break;
 8006966:	e013      	b.n	8006990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006968:	f7fd ff06 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 800696c:	61b8      	str	r0, [r7, #24]
        break;
 800696e:	e00f      	b.n	8006990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006970:	4b4b      	ldr	r3, [pc, #300]	; (8006aa0 <UART_SetConfig+0x4c4>)
 8006972:	61bb      	str	r3, [r7, #24]
        break;
 8006974:	e00c      	b.n	8006990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006976:	f7fd fdd9 	bl	800452c <HAL_RCC_GetSysClockFreq>
 800697a:	61b8      	str	r0, [r7, #24]
        break;
 800697c:	e008      	b.n	8006990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800697e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006982:	61bb      	str	r3, [r7, #24]
        break;
 8006984:	e004      	b.n	8006990 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	77bb      	strb	r3, [r7, #30]
        break;
 800698e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d074      	beq.n	8006a80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	005a      	lsls	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	441a      	add	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b0f      	cmp	r3, #15
 80069b0:	d916      	bls.n	80069e0 <UART_SetConfig+0x404>
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b8:	d212      	bcs.n	80069e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f023 030f 	bic.w	r3, r3, #15
 80069c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	89fb      	ldrh	r3, [r7, #14]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	89fa      	ldrh	r2, [r7, #14]
 80069dc:	60da      	str	r2, [r3, #12]
 80069de:	e04f      	b.n	8006a80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	77bb      	strb	r3, [r7, #30]
 80069e4:	e04c      	b.n	8006a80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069e6:	7ffb      	ldrb	r3, [r7, #31]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d828      	bhi.n	8006a3e <UART_SetConfig+0x462>
 80069ec:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <UART_SetConfig+0x418>)
 80069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f2:	bf00      	nop
 80069f4:	08006a19 	.word	0x08006a19
 80069f8:	08006a21 	.word	0x08006a21
 80069fc:	08006a29 	.word	0x08006a29
 8006a00:	08006a3f 	.word	0x08006a3f
 8006a04:	08006a2f 	.word	0x08006a2f
 8006a08:	08006a3f 	.word	0x08006a3f
 8006a0c:	08006a3f 	.word	0x08006a3f
 8006a10:	08006a3f 	.word	0x08006a3f
 8006a14:	08006a37 	.word	0x08006a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a18:	f7fd fe9a 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8006a1c:	61b8      	str	r0, [r7, #24]
        break;
 8006a1e:	e013      	b.n	8006a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a20:	f7fd feaa 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 8006a24:	61b8      	str	r0, [r7, #24]
        break;
 8006a26:	e00f      	b.n	8006a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a28:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <UART_SetConfig+0x4c4>)
 8006a2a:	61bb      	str	r3, [r7, #24]
        break;
 8006a2c:	e00c      	b.n	8006a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a2e:	f7fd fd7d 	bl	800452c <HAL_RCC_GetSysClockFreq>
 8006a32:	61b8      	str	r0, [r7, #24]
        break;
 8006a34:	e008      	b.n	8006a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3a:	61bb      	str	r3, [r7, #24]
        break;
 8006a3c:	e004      	b.n	8006a48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	77bb      	strb	r3, [r7, #30]
        break;
 8006a46:	bf00      	nop
    }

    if (pclk != 0U)
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d018      	beq.n	8006a80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	085a      	lsrs	r2, r3, #1
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	441a      	add	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b0f      	cmp	r3, #15
 8006a66:	d909      	bls.n	8006a7c <UART_SetConfig+0x4a0>
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a6e:	d205      	bcs.n	8006a7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60da      	str	r2, [r3, #12]
 8006a7a:	e001      	b.n	8006a80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40007c00 	.word	0x40007c00
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	00f42400 	.word	0x00f42400

08006aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01a      	beq.n	8006bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ba2:	d10a      	bne.n	8006bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	605a      	str	r2, [r3, #4]
  }
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bf8:	f7fb fcc8 	bl	800258c <HAL_GetTick>
 8006bfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d10e      	bne.n	8006c2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f831 	bl	8006c82 <UART_WaitOnFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e027      	b.n	8006c7a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d10e      	bne.n	8006c56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f81b 	bl	8006c82 <UART_WaitOnFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e011      	b.n	8006c7a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b09c      	sub	sp, #112	; 0x70
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	603b      	str	r3, [r7, #0]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c92:	e0a7      	b.n	8006de4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	f000 80a3 	beq.w	8006de4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fb fc75 	bl	800258c <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d13f      	bne.n	8006d34 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e6      	bne.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3308      	adds	r3, #8
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3308      	adds	r3, #8
 8006d04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d06:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e068      	b.n	8006e06 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d050      	beq.n	8006de4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d50:	d148      	bne.n	8006de4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d5a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e6      	bne.n	8006d5c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3308      	adds	r3, #8
 8006dac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dae:	623a      	str	r2, [r7, #32]
 8006db0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	69f9      	ldr	r1, [r7, #28]
 8006db4:	6a3a      	ldr	r2, [r7, #32]
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e5      	bne.n	8006d8e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e010      	b.n	8006e06 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4013      	ands	r3, r2
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	bf0c      	ite	eq
 8006df4:	2301      	moveq	r3, #1
 8006df6:	2300      	movne	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	f43f af48 	beq.w	8006c94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3770      	adds	r7, #112	; 0x70
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <findslot>:
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <findslot+0x2c>)
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	b118      	cbz	r0, 8006e22 <findslot+0x12>
 8006e1a:	6983      	ldr	r3, [r0, #24]
 8006e1c:	b90b      	cbnz	r3, 8006e22 <findslot+0x12>
 8006e1e:	f000 faf7 	bl	8007410 <__sinit>
 8006e22:	2c13      	cmp	r4, #19
 8006e24:	d807      	bhi.n	8006e36 <findslot+0x26>
 8006e26:	4806      	ldr	r0, [pc, #24]	; (8006e40 <findslot+0x30>)
 8006e28:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006e2c:	3201      	adds	r2, #1
 8006e2e:	d002      	beq.n	8006e36 <findslot+0x26>
 8006e30:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006e34:	bd10      	pop	{r4, pc}
 8006e36:	2000      	movs	r0, #0
 8006e38:	e7fc      	b.n	8006e34 <findslot+0x24>
 8006e3a:	bf00      	nop
 8006e3c:	20000014 	.word	0x20000014
 8006e40:	200006bc 	.word	0x200006bc

08006e44 <error>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	4604      	mov	r4, r0
 8006e48:	f000 fa84 	bl	8007354 <__errno>
 8006e4c:	2613      	movs	r6, #19
 8006e4e:	4605      	mov	r5, r0
 8006e50:	2700      	movs	r7, #0
 8006e52:	4630      	mov	r0, r6
 8006e54:	4639      	mov	r1, r7
 8006e56:	beab      	bkpt	0x00ab
 8006e58:	4606      	mov	r6, r0
 8006e5a:	602e      	str	r6, [r5, #0]
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e60 <checkerror>:
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d101      	bne.n	8006e68 <checkerror+0x8>
 8006e64:	f7ff bfee 	b.w	8006e44 <error>
 8006e68:	4770      	bx	lr

08006e6a <_swiread>:
 8006e6a:	b530      	push	{r4, r5, lr}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006e72:	9203      	str	r2, [sp, #12]
 8006e74:	2406      	movs	r4, #6
 8006e76:	ad01      	add	r5, sp, #4
 8006e78:	4620      	mov	r0, r4
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	beab      	bkpt	0x00ab
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4620      	mov	r0, r4
 8006e82:	f7ff ffed 	bl	8006e60 <checkerror>
 8006e86:	b005      	add	sp, #20
 8006e88:	bd30      	pop	{r4, r5, pc}

08006e8a <_read>:
 8006e8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e8c:	4615      	mov	r5, r2
 8006e8e:	9101      	str	r1, [sp, #4]
 8006e90:	f7ff ffbe 	bl	8006e10 <findslot>
 8006e94:	9901      	ldr	r1, [sp, #4]
 8006e96:	4604      	mov	r4, r0
 8006e98:	b938      	cbnz	r0, 8006eaa <_read+0x20>
 8006e9a:	f000 fa5b 	bl	8007354 <__errno>
 8006e9e:	2309      	movs	r3, #9
 8006ea0:	6003      	str	r3, [r0, #0]
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea6:	b003      	add	sp, #12
 8006ea8:	bd30      	pop	{r4, r5, pc}
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	462a      	mov	r2, r5
 8006eae:	f7ff ffdc 	bl	8006e6a <_swiread>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	d0f7      	beq.n	8006ea6 <_read+0x1c>
 8006eb6:	6863      	ldr	r3, [r4, #4]
 8006eb8:	1a2a      	subs	r2, r5, r0
 8006eba:	4413      	add	r3, r2
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	e7f1      	b.n	8006ea6 <_read+0x1c>

08006ec2 <_swilseek>:
 8006ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	4616      	mov	r6, r2
 8006ec8:	f7ff ffa2 	bl	8006e10 <findslot>
 8006ecc:	4605      	mov	r5, r0
 8006ece:	b940      	cbnz	r0, 8006ee2 <_swilseek+0x20>
 8006ed0:	f000 fa40 	bl	8007354 <__errno>
 8006ed4:	2309      	movs	r3, #9
 8006ed6:	6003      	str	r3, [r0, #0]
 8006ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8006edc:	4620      	mov	r0, r4
 8006ede:	b003      	add	sp, #12
 8006ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee2:	2e02      	cmp	r6, #2
 8006ee4:	d903      	bls.n	8006eee <_swilseek+0x2c>
 8006ee6:	f000 fa35 	bl	8007354 <__errno>
 8006eea:	2316      	movs	r3, #22
 8006eec:	e7f3      	b.n	8006ed6 <_swilseek+0x14>
 8006eee:	2e01      	cmp	r6, #1
 8006ef0:	d112      	bne.n	8006f18 <_swilseek+0x56>
 8006ef2:	6843      	ldr	r3, [r0, #4]
 8006ef4:	18e4      	adds	r4, r4, r3
 8006ef6:	d4f6      	bmi.n	8006ee6 <_swilseek+0x24>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	260a      	movs	r6, #10
 8006efc:	e9cd 3400 	strd	r3, r4, [sp]
 8006f00:	466f      	mov	r7, sp
 8006f02:	4630      	mov	r0, r6
 8006f04:	4639      	mov	r1, r7
 8006f06:	beab      	bkpt	0x00ab
 8006f08:	4606      	mov	r6, r0
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7ff ffa8 	bl	8006e60 <checkerror>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	dbe1      	blt.n	8006ed8 <_swilseek+0x16>
 8006f14:	606c      	str	r4, [r5, #4]
 8006f16:	e7e1      	b.n	8006edc <_swilseek+0x1a>
 8006f18:	2e02      	cmp	r6, #2
 8006f1a:	d1ed      	bne.n	8006ef8 <_swilseek+0x36>
 8006f1c:	6803      	ldr	r3, [r0, #0]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	260c      	movs	r6, #12
 8006f22:	466f      	mov	r7, sp
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	beab      	bkpt	0x00ab
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff ff97 	bl	8006e60 <checkerror>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	d0d0      	beq.n	8006ed8 <_swilseek+0x16>
 8006f36:	4404      	add	r4, r0
 8006f38:	e7de      	b.n	8006ef8 <_swilseek+0x36>

08006f3a <_lseek>:
 8006f3a:	f7ff bfc2 	b.w	8006ec2 <_swilseek>

08006f3e <_swiwrite>:
 8006f3e:	b530      	push	{r4, r5, lr}
 8006f40:	b085      	sub	sp, #20
 8006f42:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006f46:	9203      	str	r2, [sp, #12]
 8006f48:	2405      	movs	r4, #5
 8006f4a:	ad01      	add	r5, sp, #4
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	beab      	bkpt	0x00ab
 8006f52:	4604      	mov	r4, r0
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7ff ff83 	bl	8006e60 <checkerror>
 8006f5a:	b005      	add	sp, #20
 8006f5c:	bd30      	pop	{r4, r5, pc}

08006f5e <_write>:
 8006f5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f60:	4615      	mov	r5, r2
 8006f62:	9101      	str	r1, [sp, #4]
 8006f64:	f7ff ff54 	bl	8006e10 <findslot>
 8006f68:	9901      	ldr	r1, [sp, #4]
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	b930      	cbnz	r0, 8006f7c <_write+0x1e>
 8006f6e:	f000 f9f1 	bl	8007354 <__errno>
 8006f72:	2309      	movs	r3, #9
 8006f74:	6003      	str	r3, [r0, #0]
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7a:	e012      	b.n	8006fa2 <_write+0x44>
 8006f7c:	6800      	ldr	r0, [r0, #0]
 8006f7e:	462a      	mov	r2, r5
 8006f80:	f7ff ffdd 	bl	8006f3e <_swiwrite>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	dbf6      	blt.n	8006f76 <_write+0x18>
 8006f88:	6862      	ldr	r2, [r4, #4]
 8006f8a:	1a2b      	subs	r3, r5, r0
 8006f8c:	441a      	add	r2, r3
 8006f8e:	42a8      	cmp	r0, r5
 8006f90:	6062      	str	r2, [r4, #4]
 8006f92:	d105      	bne.n	8006fa0 <_write+0x42>
 8006f94:	2000      	movs	r0, #0
 8006f96:	b003      	add	sp, #12
 8006f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f9c:	f7ff bf52 	b.w	8006e44 <error>
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	b003      	add	sp, #12
 8006fa4:	bd30      	pop	{r4, r5, pc}

08006fa6 <_swiclose>:
 8006fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fa8:	2402      	movs	r4, #2
 8006faa:	9001      	str	r0, [sp, #4]
 8006fac:	ad01      	add	r5, sp, #4
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	beab      	bkpt	0x00ab
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f7ff ff52 	bl	8006e60 <checkerror>
 8006fbc:	b003      	add	sp, #12
 8006fbe:	bd30      	pop	{r4, r5, pc}

08006fc0 <_close>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	f7ff ff24 	bl	8006e10 <findslot>
 8006fc8:	4604      	mov	r4, r0
 8006fca:	b930      	cbnz	r0, 8006fda <_close+0x1a>
 8006fcc:	f000 f9c2 	bl	8007354 <__errno>
 8006fd0:	2309      	movs	r3, #9
 8006fd2:	6003      	str	r3, [r0, #0]
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	bd38      	pop	{r3, r4, r5, pc}
 8006fda:	3d01      	subs	r5, #1
 8006fdc:	2d01      	cmp	r5, #1
 8006fde:	d809      	bhi.n	8006ff4 <_close+0x34>
 8006fe0:	4b09      	ldr	r3, [pc, #36]	; (8007008 <_close+0x48>)
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d104      	bne.n	8006ff4 <_close+0x34>
 8006fea:	f04f 33ff 	mov.w	r3, #4294967295
 8006fee:	6003      	str	r3, [r0, #0]
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	e7f1      	b.n	8006fd8 <_close+0x18>
 8006ff4:	6820      	ldr	r0, [r4, #0]
 8006ff6:	f7ff ffd6 	bl	8006fa6 <_swiclose>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d1ec      	bne.n	8006fd8 <_close+0x18>
 8006ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	e7e8      	b.n	8006fd8 <_close+0x18>
 8007006:	bf00      	nop
 8007008:	200006bc 	.word	0x200006bc

0800700c <_swistat>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	460c      	mov	r4, r1
 8007010:	f7ff fefe 	bl	8006e10 <findslot>
 8007014:	4605      	mov	r5, r0
 8007016:	b930      	cbnz	r0, 8007026 <_swistat+0x1a>
 8007018:	f000 f99c 	bl	8007354 <__errno>
 800701c:	2309      	movs	r3, #9
 800701e:	6003      	str	r3, [r0, #0]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	bd70      	pop	{r4, r5, r6, pc}
 8007026:	6863      	ldr	r3, [r4, #4]
 8007028:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800702c:	6063      	str	r3, [r4, #4]
 800702e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007032:	64a3      	str	r3, [r4, #72]	; 0x48
 8007034:	260c      	movs	r6, #12
 8007036:	4630      	mov	r0, r6
 8007038:	4629      	mov	r1, r5
 800703a:	beab      	bkpt	0x00ab
 800703c:	4605      	mov	r5, r0
 800703e:	4628      	mov	r0, r5
 8007040:	f7ff ff0e 	bl	8006e60 <checkerror>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	bf1c      	itt	ne
 8007048:	6120      	strne	r0, [r4, #16]
 800704a:	2000      	movne	r0, #0
 800704c:	e7ea      	b.n	8007024 <_swistat+0x18>

0800704e <_fstat>:
 800704e:	460b      	mov	r3, r1
 8007050:	b510      	push	{r4, lr}
 8007052:	2100      	movs	r1, #0
 8007054:	4604      	mov	r4, r0
 8007056:	2258      	movs	r2, #88	; 0x58
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fa9e 	bl	800759a <memset>
 800705e:	4601      	mov	r1, r0
 8007060:	4620      	mov	r0, r4
 8007062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007066:	f7ff bfd1 	b.w	800700c <_swistat>

0800706a <_stat>:
 800706a:	b538      	push	{r3, r4, r5, lr}
 800706c:	460d      	mov	r5, r1
 800706e:	4604      	mov	r4, r0
 8007070:	2258      	movs	r2, #88	; 0x58
 8007072:	2100      	movs	r1, #0
 8007074:	4628      	mov	r0, r5
 8007076:	f000 fa90 	bl	800759a <memset>
 800707a:	4620      	mov	r0, r4
 800707c:	2100      	movs	r1, #0
 800707e:	f000 f811 	bl	80070a4 <_swiopen>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	4604      	mov	r4, r0
 8007086:	d00b      	beq.n	80070a0 <_stat+0x36>
 8007088:	686b      	ldr	r3, [r5, #4]
 800708a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800708e:	606b      	str	r3, [r5, #4]
 8007090:	4629      	mov	r1, r5
 8007092:	f7ff ffbb 	bl	800700c <_swistat>
 8007096:	4605      	mov	r5, r0
 8007098:	4620      	mov	r0, r4
 800709a:	f7ff ff91 	bl	8006fc0 <_close>
 800709e:	462c      	mov	r4, r5
 80070a0:	4620      	mov	r0, r4
 80070a2:	bd38      	pop	{r3, r4, r5, pc}

080070a4 <_swiopen>:
 80070a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070a8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8007154 <_swiopen+0xb0>
 80070ac:	b097      	sub	sp, #92	; 0x5c
 80070ae:	4607      	mov	r7, r0
 80070b0:	460e      	mov	r6, r1
 80070b2:	2500      	movs	r5, #0
 80070b4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80070b8:	1c61      	adds	r1, r4, #1
 80070ba:	d037      	beq.n	800712c <_swiopen+0x88>
 80070bc:	3501      	adds	r5, #1
 80070be:	2d14      	cmp	r5, #20
 80070c0:	d1f8      	bne.n	80070b4 <_swiopen+0x10>
 80070c2:	f000 f947 	bl	8007354 <__errno>
 80070c6:	2318      	movs	r3, #24
 80070c8:	6003      	str	r3, [r0, #0]
 80070ca:	f04f 34ff 	mov.w	r4, #4294967295
 80070ce:	e03d      	b.n	800714c <_swiopen+0xa8>
 80070d0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80070d4:	f240 6301 	movw	r3, #1537	; 0x601
 80070d8:	07b2      	lsls	r2, r6, #30
 80070da:	bf48      	it	mi
 80070dc:	f044 0402 	orrmi.w	r4, r4, #2
 80070e0:	421e      	tst	r6, r3
 80070e2:	bf18      	it	ne
 80070e4:	f044 0404 	orrne.w	r4, r4, #4
 80070e8:	0733      	lsls	r3, r6, #28
 80070ea:	bf48      	it	mi
 80070ec:	f024 0404 	bicmi.w	r4, r4, #4
 80070f0:	4638      	mov	r0, r7
 80070f2:	bf48      	it	mi
 80070f4:	f044 0408 	orrmi.w	r4, r4, #8
 80070f8:	9700      	str	r7, [sp, #0]
 80070fa:	f7f9 f8a1 	bl	8000240 <strlen>
 80070fe:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007102:	2401      	movs	r4, #1
 8007104:	4620      	mov	r0, r4
 8007106:	4649      	mov	r1, r9
 8007108:	beab      	bkpt	0x00ab
 800710a:	4604      	mov	r4, r0
 800710c:	2c00      	cmp	r4, #0
 800710e:	db08      	blt.n	8007122 <_swiopen+0x7e>
 8007110:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8007114:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8007118:	2300      	movs	r3, #0
 800711a:	f8c8 3004 	str.w	r3, [r8, #4]
 800711e:	462c      	mov	r4, r5
 8007120:	e014      	b.n	800714c <_swiopen+0xa8>
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff fe8e 	bl	8006e44 <error>
 8007128:	4604      	mov	r4, r0
 800712a:	e00f      	b.n	800714c <_swiopen+0xa8>
 800712c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8007130:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007134:	46e9      	mov	r9, sp
 8007136:	d1cb      	bne.n	80070d0 <_swiopen+0x2c>
 8007138:	4649      	mov	r1, r9
 800713a:	4638      	mov	r0, r7
 800713c:	f7ff ff95 	bl	800706a <_stat>
 8007140:	3001      	adds	r0, #1
 8007142:	d0c5      	beq.n	80070d0 <_swiopen+0x2c>
 8007144:	f000 f906 	bl	8007354 <__errno>
 8007148:	2311      	movs	r3, #17
 800714a:	6003      	str	r3, [r0, #0]
 800714c:	4620      	mov	r0, r4
 800714e:	b017      	add	sp, #92	; 0x5c
 8007150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007154:	200006bc 	.word	0x200006bc

08007158 <_get_semihosting_exts>:
 8007158:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800715c:	4606      	mov	r6, r0
 800715e:	460f      	mov	r7, r1
 8007160:	482a      	ldr	r0, [pc, #168]	; (800720c <_get_semihosting_exts+0xb4>)
 8007162:	2100      	movs	r1, #0
 8007164:	4615      	mov	r5, r2
 8007166:	f7ff ff9d 	bl	80070a4 <_swiopen>
 800716a:	462a      	mov	r2, r5
 800716c:	4604      	mov	r4, r0
 800716e:	2100      	movs	r1, #0
 8007170:	4630      	mov	r0, r6
 8007172:	f000 fa12 	bl	800759a <memset>
 8007176:	1c63      	adds	r3, r4, #1
 8007178:	d016      	beq.n	80071a8 <_get_semihosting_exts+0x50>
 800717a:	4620      	mov	r0, r4
 800717c:	f7ff fe48 	bl	8006e10 <findslot>
 8007180:	f04f 090c 	mov.w	r9, #12
 8007184:	4680      	mov	r8, r0
 8007186:	4648      	mov	r0, r9
 8007188:	4641      	mov	r1, r8
 800718a:	beab      	bkpt	0x00ab
 800718c:	4680      	mov	r8, r0
 800718e:	4640      	mov	r0, r8
 8007190:	f7ff fe66 	bl	8006e60 <checkerror>
 8007194:	2803      	cmp	r0, #3
 8007196:	dd02      	ble.n	800719e <_get_semihosting_exts+0x46>
 8007198:	1ec3      	subs	r3, r0, #3
 800719a:	42ab      	cmp	r3, r5
 800719c:	dc08      	bgt.n	80071b0 <_get_semihosting_exts+0x58>
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff ff0e 	bl	8006fc0 <_close>
 80071a4:	f04f 34ff 	mov.w	r4, #4294967295
 80071a8:	4620      	mov	r0, r4
 80071aa:	b003      	add	sp, #12
 80071ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071b0:	2204      	movs	r2, #4
 80071b2:	eb0d 0102 	add.w	r1, sp, r2
 80071b6:	4620      	mov	r0, r4
 80071b8:	f7ff fe67 	bl	8006e8a <_read>
 80071bc:	2803      	cmp	r0, #3
 80071be:	ddee      	ble.n	800719e <_get_semihosting_exts+0x46>
 80071c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80071c4:	2b53      	cmp	r3, #83	; 0x53
 80071c6:	d1ea      	bne.n	800719e <_get_semihosting_exts+0x46>
 80071c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80071cc:	2b48      	cmp	r3, #72	; 0x48
 80071ce:	d1e6      	bne.n	800719e <_get_semihosting_exts+0x46>
 80071d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80071d4:	2b46      	cmp	r3, #70	; 0x46
 80071d6:	d1e2      	bne.n	800719e <_get_semihosting_exts+0x46>
 80071d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80071dc:	2b42      	cmp	r3, #66	; 0x42
 80071de:	d1de      	bne.n	800719e <_get_semihosting_exts+0x46>
 80071e0:	2201      	movs	r2, #1
 80071e2:	4639      	mov	r1, r7
 80071e4:	4620      	mov	r0, r4
 80071e6:	f7ff fe6c 	bl	8006ec2 <_swilseek>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	dbd7      	blt.n	800719e <_get_semihosting_exts+0x46>
 80071ee:	462a      	mov	r2, r5
 80071f0:	4631      	mov	r1, r6
 80071f2:	4620      	mov	r0, r4
 80071f4:	f7ff fe49 	bl	8006e8a <_read>
 80071f8:	4605      	mov	r5, r0
 80071fa:	4620      	mov	r0, r4
 80071fc:	f7ff fee0 	bl	8006fc0 <_close>
 8007200:	4628      	mov	r0, r5
 8007202:	f7ff fe2d 	bl	8006e60 <checkerror>
 8007206:	4604      	mov	r4, r0
 8007208:	e7ce      	b.n	80071a8 <_get_semihosting_exts+0x50>
 800720a:	bf00      	nop
 800720c:	08008454 	.word	0x08008454

08007210 <initialise_semihosting_exts>:
 8007210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007212:	4d0a      	ldr	r5, [pc, #40]	; (800723c <initialise_semihosting_exts+0x2c>)
 8007214:	4c0a      	ldr	r4, [pc, #40]	; (8007240 <initialise_semihosting_exts+0x30>)
 8007216:	2100      	movs	r1, #0
 8007218:	2201      	movs	r2, #1
 800721a:	a801      	add	r0, sp, #4
 800721c:	6029      	str	r1, [r5, #0]
 800721e:	6022      	str	r2, [r4, #0]
 8007220:	f7ff ff9a 	bl	8007158 <_get_semihosting_exts>
 8007224:	2800      	cmp	r0, #0
 8007226:	dd07      	ble.n	8007238 <initialise_semihosting_exts+0x28>
 8007228:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800722c:	f003 0201 	and.w	r2, r3, #1
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	602a      	str	r2, [r5, #0]
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	b003      	add	sp, #12
 800723a:	bd30      	pop	{r4, r5, pc}
 800723c:	2000000c 	.word	0x2000000c
 8007240:	20000010 	.word	0x20000010

08007244 <_has_ext_stdout_stderr>:
 8007244:	b510      	push	{r4, lr}
 8007246:	4c04      	ldr	r4, [pc, #16]	; (8007258 <_has_ext_stdout_stderr+0x14>)
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	da01      	bge.n	8007252 <_has_ext_stdout_stderr+0xe>
 800724e:	f7ff ffdf 	bl	8007210 <initialise_semihosting_exts>
 8007252:	6820      	ldr	r0, [r4, #0]
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	20000010 	.word	0x20000010

0800725c <initialise_monitor_handles>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	b085      	sub	sp, #20
 8007262:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007314 <initialise_monitor_handles+0xb8>
 8007266:	f8cd 9004 	str.w	r9, [sp, #4]
 800726a:	2303      	movs	r3, #3
 800726c:	2400      	movs	r4, #0
 800726e:	9303      	str	r3, [sp, #12]
 8007270:	af01      	add	r7, sp, #4
 8007272:	9402      	str	r4, [sp, #8]
 8007274:	2501      	movs	r5, #1
 8007276:	4628      	mov	r0, r5
 8007278:	4639      	mov	r1, r7
 800727a:	beab      	bkpt	0x00ab
 800727c:	4605      	mov	r5, r0
 800727e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007318 <initialise_monitor_handles+0xbc>
 8007282:	4623      	mov	r3, r4
 8007284:	4c20      	ldr	r4, [pc, #128]	; (8007308 <initialise_monitor_handles+0xac>)
 8007286:	f8c8 5000 	str.w	r5, [r8]
 800728a:	f04f 32ff 	mov.w	r2, #4294967295
 800728e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007292:	3301      	adds	r3, #1
 8007294:	2b14      	cmp	r3, #20
 8007296:	d1fa      	bne.n	800728e <initialise_monitor_handles+0x32>
 8007298:	f7ff ffd4 	bl	8007244 <_has_ext_stdout_stderr>
 800729c:	4d1b      	ldr	r5, [pc, #108]	; (800730c <initialise_monitor_handles+0xb0>)
 800729e:	b1d0      	cbz	r0, 80072d6 <initialise_monitor_handles+0x7a>
 80072a0:	f04f 0a03 	mov.w	sl, #3
 80072a4:	2304      	movs	r3, #4
 80072a6:	f8cd 9004 	str.w	r9, [sp, #4]
 80072aa:	2601      	movs	r6, #1
 80072ac:	f8cd a00c 	str.w	sl, [sp, #12]
 80072b0:	9302      	str	r3, [sp, #8]
 80072b2:	4630      	mov	r0, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	beab      	bkpt	0x00ab
 80072b8:	4683      	mov	fp, r0
 80072ba:	4b15      	ldr	r3, [pc, #84]	; (8007310 <initialise_monitor_handles+0xb4>)
 80072bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80072c0:	f8c3 b000 	str.w	fp, [r3]
 80072c4:	2308      	movs	r3, #8
 80072c6:	f8cd a00c 	str.w	sl, [sp, #12]
 80072ca:	9302      	str	r3, [sp, #8]
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	beab      	bkpt	0x00ab
 80072d2:	4606      	mov	r6, r0
 80072d4:	602e      	str	r6, [r5, #0]
 80072d6:	682b      	ldr	r3, [r5, #0]
 80072d8:	3301      	adds	r3, #1
 80072da:	bf02      	ittt	eq
 80072dc:	4b0c      	ldreq	r3, [pc, #48]	; (8007310 <initialise_monitor_handles+0xb4>)
 80072de:	681b      	ldreq	r3, [r3, #0]
 80072e0:	602b      	streq	r3, [r5, #0]
 80072e2:	2600      	movs	r6, #0
 80072e4:	f8d8 3000 	ldr.w	r3, [r8]
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	6066      	str	r6, [r4, #4]
 80072ec:	f7ff ffaa 	bl	8007244 <_has_ext_stdout_stderr>
 80072f0:	b130      	cbz	r0, 8007300 <initialise_monitor_handles+0xa4>
 80072f2:	4b07      	ldr	r3, [pc, #28]	; (8007310 <initialise_monitor_handles+0xb4>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007300:	b005      	add	sp, #20
 8007302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007306:	bf00      	nop
 8007308:	200006bc 	.word	0x200006bc
 800730c:	200006b0 	.word	0x200006b0
 8007310:	200006b8 	.word	0x200006b8
 8007314:	0800846a 	.word	0x0800846a
 8007318:	200006b4 	.word	0x200006b4

0800731c <_isatty>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	f7ff fd77 	bl	8006e10 <findslot>
 8007322:	2509      	movs	r5, #9
 8007324:	4604      	mov	r4, r0
 8007326:	b920      	cbnz	r0, 8007332 <_isatty+0x16>
 8007328:	f000 f814 	bl	8007354 <__errno>
 800732c:	6005      	str	r5, [r0, #0]
 800732e:	4620      	mov	r0, r4
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	4628      	mov	r0, r5
 8007334:	4621      	mov	r1, r4
 8007336:	beab      	bkpt	0x00ab
 8007338:	4604      	mov	r4, r0
 800733a:	2c01      	cmp	r4, #1
 800733c:	d0f7      	beq.n	800732e <_isatty+0x12>
 800733e:	f000 f809 	bl	8007354 <__errno>
 8007342:	2400      	movs	r4, #0
 8007344:	4605      	mov	r5, r0
 8007346:	2613      	movs	r6, #19
 8007348:	4630      	mov	r0, r6
 800734a:	4621      	mov	r1, r4
 800734c:	beab      	bkpt	0x00ab
 800734e:	4606      	mov	r6, r0
 8007350:	602e      	str	r6, [r5, #0]
 8007352:	e7ec      	b.n	800732e <_isatty+0x12>

08007354 <__errno>:
 8007354:	4b01      	ldr	r3, [pc, #4]	; (800735c <__errno+0x8>)
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	20000014 	.word	0x20000014

08007360 <std>:
 8007360:	2300      	movs	r3, #0
 8007362:	b510      	push	{r4, lr}
 8007364:	4604      	mov	r4, r0
 8007366:	e9c0 3300 	strd	r3, r3, [r0]
 800736a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800736e:	6083      	str	r3, [r0, #8]
 8007370:	8181      	strh	r1, [r0, #12]
 8007372:	6643      	str	r3, [r0, #100]	; 0x64
 8007374:	81c2      	strh	r2, [r0, #14]
 8007376:	6183      	str	r3, [r0, #24]
 8007378:	4619      	mov	r1, r3
 800737a:	2208      	movs	r2, #8
 800737c:	305c      	adds	r0, #92	; 0x5c
 800737e:	f000 f90c 	bl	800759a <memset>
 8007382:	4b05      	ldr	r3, [pc, #20]	; (8007398 <std+0x38>)
 8007384:	6263      	str	r3, [r4, #36]	; 0x24
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <std+0x3c>)
 8007388:	62a3      	str	r3, [r4, #40]	; 0x28
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <std+0x40>)
 800738c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <std+0x44>)
 8007390:	6224      	str	r4, [r4, #32]
 8007392:	6323      	str	r3, [r4, #48]	; 0x30
 8007394:	bd10      	pop	{r4, pc}
 8007396:	bf00      	nop
 8007398:	08007811 	.word	0x08007811
 800739c:	08007833 	.word	0x08007833
 80073a0:	0800786b 	.word	0x0800786b
 80073a4:	0800788f 	.word	0x0800788f

080073a8 <_cleanup_r>:
 80073a8:	4901      	ldr	r1, [pc, #4]	; (80073b0 <_cleanup_r+0x8>)
 80073aa:	f000 b8af 	b.w	800750c <_fwalk_reent>
 80073ae:	bf00      	nop
 80073b0:	08007b69 	.word	0x08007b69

080073b4 <__sfmoreglue>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	2268      	movs	r2, #104	; 0x68
 80073b8:	1e4d      	subs	r5, r1, #1
 80073ba:	4355      	muls	r5, r2
 80073bc:	460e      	mov	r6, r1
 80073be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073c2:	f000 f913 	bl	80075ec <_malloc_r>
 80073c6:	4604      	mov	r4, r0
 80073c8:	b140      	cbz	r0, 80073dc <__sfmoreglue+0x28>
 80073ca:	2100      	movs	r1, #0
 80073cc:	e9c0 1600 	strd	r1, r6, [r0]
 80073d0:	300c      	adds	r0, #12
 80073d2:	60a0      	str	r0, [r4, #8]
 80073d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073d8:	f000 f8df 	bl	800759a <memset>
 80073dc:	4620      	mov	r0, r4
 80073de:	bd70      	pop	{r4, r5, r6, pc}

080073e0 <__sfp_lock_acquire>:
 80073e0:	4801      	ldr	r0, [pc, #4]	; (80073e8 <__sfp_lock_acquire+0x8>)
 80073e2:	f000 b8d8 	b.w	8007596 <__retarget_lock_acquire_recursive>
 80073e6:	bf00      	nop
 80073e8:	2000075d 	.word	0x2000075d

080073ec <__sfp_lock_release>:
 80073ec:	4801      	ldr	r0, [pc, #4]	; (80073f4 <__sfp_lock_release+0x8>)
 80073ee:	f000 b8d3 	b.w	8007598 <__retarget_lock_release_recursive>
 80073f2:	bf00      	nop
 80073f4:	2000075d 	.word	0x2000075d

080073f8 <__sinit_lock_acquire>:
 80073f8:	4801      	ldr	r0, [pc, #4]	; (8007400 <__sinit_lock_acquire+0x8>)
 80073fa:	f000 b8cc 	b.w	8007596 <__retarget_lock_acquire_recursive>
 80073fe:	bf00      	nop
 8007400:	2000075e 	.word	0x2000075e

08007404 <__sinit_lock_release>:
 8007404:	4801      	ldr	r0, [pc, #4]	; (800740c <__sinit_lock_release+0x8>)
 8007406:	f000 b8c7 	b.w	8007598 <__retarget_lock_release_recursive>
 800740a:	bf00      	nop
 800740c:	2000075e 	.word	0x2000075e

08007410 <__sinit>:
 8007410:	b510      	push	{r4, lr}
 8007412:	4604      	mov	r4, r0
 8007414:	f7ff fff0 	bl	80073f8 <__sinit_lock_acquire>
 8007418:	69a3      	ldr	r3, [r4, #24]
 800741a:	b11b      	cbz	r3, 8007424 <__sinit+0x14>
 800741c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007420:	f7ff bff0 	b.w	8007404 <__sinit_lock_release>
 8007424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007428:	6523      	str	r3, [r4, #80]	; 0x50
 800742a:	4b13      	ldr	r3, [pc, #76]	; (8007478 <__sinit+0x68>)
 800742c:	4a13      	ldr	r2, [pc, #76]	; (800747c <__sinit+0x6c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	62a2      	str	r2, [r4, #40]	; 0x28
 8007432:	42a3      	cmp	r3, r4
 8007434:	bf04      	itt	eq
 8007436:	2301      	moveq	r3, #1
 8007438:	61a3      	streq	r3, [r4, #24]
 800743a:	4620      	mov	r0, r4
 800743c:	f000 f820 	bl	8007480 <__sfp>
 8007440:	6060      	str	r0, [r4, #4]
 8007442:	4620      	mov	r0, r4
 8007444:	f000 f81c 	bl	8007480 <__sfp>
 8007448:	60a0      	str	r0, [r4, #8]
 800744a:	4620      	mov	r0, r4
 800744c:	f000 f818 	bl	8007480 <__sfp>
 8007450:	2200      	movs	r2, #0
 8007452:	60e0      	str	r0, [r4, #12]
 8007454:	2104      	movs	r1, #4
 8007456:	6860      	ldr	r0, [r4, #4]
 8007458:	f7ff ff82 	bl	8007360 <std>
 800745c:	68a0      	ldr	r0, [r4, #8]
 800745e:	2201      	movs	r2, #1
 8007460:	2109      	movs	r1, #9
 8007462:	f7ff ff7d 	bl	8007360 <std>
 8007466:	68e0      	ldr	r0, [r4, #12]
 8007468:	2202      	movs	r2, #2
 800746a:	2112      	movs	r1, #18
 800746c:	f7ff ff78 	bl	8007360 <std>
 8007470:	2301      	movs	r3, #1
 8007472:	61a3      	str	r3, [r4, #24]
 8007474:	e7d2      	b.n	800741c <__sinit+0xc>
 8007476:	bf00      	nop
 8007478:	080084d0 	.word	0x080084d0
 800747c:	080073a9 	.word	0x080073a9

08007480 <__sfp>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	4607      	mov	r7, r0
 8007484:	f7ff ffac 	bl	80073e0 <__sfp_lock_acquire>
 8007488:	4b1e      	ldr	r3, [pc, #120]	; (8007504 <__sfp+0x84>)
 800748a:	681e      	ldr	r6, [r3, #0]
 800748c:	69b3      	ldr	r3, [r6, #24]
 800748e:	b913      	cbnz	r3, 8007496 <__sfp+0x16>
 8007490:	4630      	mov	r0, r6
 8007492:	f7ff ffbd 	bl	8007410 <__sinit>
 8007496:	3648      	adds	r6, #72	; 0x48
 8007498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800749c:	3b01      	subs	r3, #1
 800749e:	d503      	bpl.n	80074a8 <__sfp+0x28>
 80074a0:	6833      	ldr	r3, [r6, #0]
 80074a2:	b30b      	cbz	r3, 80074e8 <__sfp+0x68>
 80074a4:	6836      	ldr	r6, [r6, #0]
 80074a6:	e7f7      	b.n	8007498 <__sfp+0x18>
 80074a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074ac:	b9d5      	cbnz	r5, 80074e4 <__sfp+0x64>
 80074ae:	4b16      	ldr	r3, [pc, #88]	; (8007508 <__sfp+0x88>)
 80074b0:	60e3      	str	r3, [r4, #12]
 80074b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074b6:	6665      	str	r5, [r4, #100]	; 0x64
 80074b8:	f000 f86c 	bl	8007594 <__retarget_lock_init_recursive>
 80074bc:	f7ff ff96 	bl	80073ec <__sfp_lock_release>
 80074c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074c8:	6025      	str	r5, [r4, #0]
 80074ca:	61a5      	str	r5, [r4, #24]
 80074cc:	2208      	movs	r2, #8
 80074ce:	4629      	mov	r1, r5
 80074d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074d4:	f000 f861 	bl	800759a <memset>
 80074d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074e0:	4620      	mov	r0, r4
 80074e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e4:	3468      	adds	r4, #104	; 0x68
 80074e6:	e7d9      	b.n	800749c <__sfp+0x1c>
 80074e8:	2104      	movs	r1, #4
 80074ea:	4638      	mov	r0, r7
 80074ec:	f7ff ff62 	bl	80073b4 <__sfmoreglue>
 80074f0:	4604      	mov	r4, r0
 80074f2:	6030      	str	r0, [r6, #0]
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d1d5      	bne.n	80074a4 <__sfp+0x24>
 80074f8:	f7ff ff78 	bl	80073ec <__sfp_lock_release>
 80074fc:	230c      	movs	r3, #12
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	e7ee      	b.n	80074e0 <__sfp+0x60>
 8007502:	bf00      	nop
 8007504:	080084d0 	.word	0x080084d0
 8007508:	ffff0001 	.word	0xffff0001

0800750c <_fwalk_reent>:
 800750c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007510:	4606      	mov	r6, r0
 8007512:	4688      	mov	r8, r1
 8007514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007518:	2700      	movs	r7, #0
 800751a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800751e:	f1b9 0901 	subs.w	r9, r9, #1
 8007522:	d505      	bpl.n	8007530 <_fwalk_reent+0x24>
 8007524:	6824      	ldr	r4, [r4, #0]
 8007526:	2c00      	cmp	r4, #0
 8007528:	d1f7      	bne.n	800751a <_fwalk_reent+0xe>
 800752a:	4638      	mov	r0, r7
 800752c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007530:	89ab      	ldrh	r3, [r5, #12]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d907      	bls.n	8007546 <_fwalk_reent+0x3a>
 8007536:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800753a:	3301      	adds	r3, #1
 800753c:	d003      	beq.n	8007546 <_fwalk_reent+0x3a>
 800753e:	4629      	mov	r1, r5
 8007540:	4630      	mov	r0, r6
 8007542:	47c0      	blx	r8
 8007544:	4307      	orrs	r7, r0
 8007546:	3568      	adds	r5, #104	; 0x68
 8007548:	e7e9      	b.n	800751e <_fwalk_reent+0x12>
	...

0800754c <__libc_init_array>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	4d0d      	ldr	r5, [pc, #52]	; (8007584 <__libc_init_array+0x38>)
 8007550:	4c0d      	ldr	r4, [pc, #52]	; (8007588 <__libc_init_array+0x3c>)
 8007552:	1b64      	subs	r4, r4, r5
 8007554:	10a4      	asrs	r4, r4, #2
 8007556:	2600      	movs	r6, #0
 8007558:	42a6      	cmp	r6, r4
 800755a:	d109      	bne.n	8007570 <__libc_init_array+0x24>
 800755c:	4d0b      	ldr	r5, [pc, #44]	; (800758c <__libc_init_array+0x40>)
 800755e:	4c0c      	ldr	r4, [pc, #48]	; (8007590 <__libc_init_array+0x44>)
 8007560:	f000 ff30 	bl	80083c4 <_init>
 8007564:	1b64      	subs	r4, r4, r5
 8007566:	10a4      	asrs	r4, r4, #2
 8007568:	2600      	movs	r6, #0
 800756a:	42a6      	cmp	r6, r4
 800756c:	d105      	bne.n	800757a <__libc_init_array+0x2e>
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	f855 3b04 	ldr.w	r3, [r5], #4
 8007574:	4798      	blx	r3
 8007576:	3601      	adds	r6, #1
 8007578:	e7ee      	b.n	8007558 <__libc_init_array+0xc>
 800757a:	f855 3b04 	ldr.w	r3, [r5], #4
 800757e:	4798      	blx	r3
 8007580:	3601      	adds	r6, #1
 8007582:	e7f2      	b.n	800756a <__libc_init_array+0x1e>
 8007584:	08008510 	.word	0x08008510
 8007588:	08008510 	.word	0x08008510
 800758c:	08008510 	.word	0x08008510
 8007590:	08008514 	.word	0x08008514

08007594 <__retarget_lock_init_recursive>:
 8007594:	4770      	bx	lr

08007596 <__retarget_lock_acquire_recursive>:
 8007596:	4770      	bx	lr

08007598 <__retarget_lock_release_recursive>:
 8007598:	4770      	bx	lr

0800759a <memset>:
 800759a:	4402      	add	r2, r0
 800759c:	4603      	mov	r3, r0
 800759e:	4293      	cmp	r3, r2
 80075a0:	d100      	bne.n	80075a4 <memset+0xa>
 80075a2:	4770      	bx	lr
 80075a4:	f803 1b01 	strb.w	r1, [r3], #1
 80075a8:	e7f9      	b.n	800759e <memset+0x4>
	...

080075ac <sbrk_aligned>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4e0e      	ldr	r6, [pc, #56]	; (80075e8 <sbrk_aligned+0x3c>)
 80075b0:	460c      	mov	r4, r1
 80075b2:	6831      	ldr	r1, [r6, #0]
 80075b4:	4605      	mov	r5, r0
 80075b6:	b911      	cbnz	r1, 80075be <sbrk_aligned+0x12>
 80075b8:	f000 f91a 	bl	80077f0 <_sbrk_r>
 80075bc:	6030      	str	r0, [r6, #0]
 80075be:	4621      	mov	r1, r4
 80075c0:	4628      	mov	r0, r5
 80075c2:	f000 f915 	bl	80077f0 <_sbrk_r>
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	d00a      	beq.n	80075e0 <sbrk_aligned+0x34>
 80075ca:	1cc4      	adds	r4, r0, #3
 80075cc:	f024 0403 	bic.w	r4, r4, #3
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d007      	beq.n	80075e4 <sbrk_aligned+0x38>
 80075d4:	1a21      	subs	r1, r4, r0
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 f90a 	bl	80077f0 <_sbrk_r>
 80075dc:	3001      	adds	r0, #1
 80075de:	d101      	bne.n	80075e4 <sbrk_aligned+0x38>
 80075e0:	f04f 34ff 	mov.w	r4, #4294967295
 80075e4:	4620      	mov	r0, r4
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	20000764 	.word	0x20000764

080075ec <_malloc_r>:
 80075ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f0:	1ccd      	adds	r5, r1, #3
 80075f2:	f025 0503 	bic.w	r5, r5, #3
 80075f6:	3508      	adds	r5, #8
 80075f8:	2d0c      	cmp	r5, #12
 80075fa:	bf38      	it	cc
 80075fc:	250c      	movcc	r5, #12
 80075fe:	2d00      	cmp	r5, #0
 8007600:	4607      	mov	r7, r0
 8007602:	db01      	blt.n	8007608 <_malloc_r+0x1c>
 8007604:	42a9      	cmp	r1, r5
 8007606:	d905      	bls.n	8007614 <_malloc_r+0x28>
 8007608:	230c      	movs	r3, #12
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	2600      	movs	r6, #0
 800760e:	4630      	mov	r0, r6
 8007610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007614:	4e2e      	ldr	r6, [pc, #184]	; (80076d0 <_malloc_r+0xe4>)
 8007616:	f000 fb5b 	bl	8007cd0 <__malloc_lock>
 800761a:	6833      	ldr	r3, [r6, #0]
 800761c:	461c      	mov	r4, r3
 800761e:	bb34      	cbnz	r4, 800766e <_malloc_r+0x82>
 8007620:	4629      	mov	r1, r5
 8007622:	4638      	mov	r0, r7
 8007624:	f7ff ffc2 	bl	80075ac <sbrk_aligned>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	4604      	mov	r4, r0
 800762c:	d14d      	bne.n	80076ca <_malloc_r+0xde>
 800762e:	6834      	ldr	r4, [r6, #0]
 8007630:	4626      	mov	r6, r4
 8007632:	2e00      	cmp	r6, #0
 8007634:	d140      	bne.n	80076b8 <_malloc_r+0xcc>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	4631      	mov	r1, r6
 800763a:	4638      	mov	r0, r7
 800763c:	eb04 0803 	add.w	r8, r4, r3
 8007640:	f000 f8d6 	bl	80077f0 <_sbrk_r>
 8007644:	4580      	cmp	r8, r0
 8007646:	d13a      	bne.n	80076be <_malloc_r+0xd2>
 8007648:	6821      	ldr	r1, [r4, #0]
 800764a:	3503      	adds	r5, #3
 800764c:	1a6d      	subs	r5, r5, r1
 800764e:	f025 0503 	bic.w	r5, r5, #3
 8007652:	3508      	adds	r5, #8
 8007654:	2d0c      	cmp	r5, #12
 8007656:	bf38      	it	cc
 8007658:	250c      	movcc	r5, #12
 800765a:	4629      	mov	r1, r5
 800765c:	4638      	mov	r0, r7
 800765e:	f7ff ffa5 	bl	80075ac <sbrk_aligned>
 8007662:	3001      	adds	r0, #1
 8007664:	d02b      	beq.n	80076be <_malloc_r+0xd2>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	442b      	add	r3, r5
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	e00e      	b.n	800768c <_malloc_r+0xa0>
 800766e:	6822      	ldr	r2, [r4, #0]
 8007670:	1b52      	subs	r2, r2, r5
 8007672:	d41e      	bmi.n	80076b2 <_malloc_r+0xc6>
 8007674:	2a0b      	cmp	r2, #11
 8007676:	d916      	bls.n	80076a6 <_malloc_r+0xba>
 8007678:	1961      	adds	r1, r4, r5
 800767a:	42a3      	cmp	r3, r4
 800767c:	6025      	str	r5, [r4, #0]
 800767e:	bf18      	it	ne
 8007680:	6059      	strne	r1, [r3, #4]
 8007682:	6863      	ldr	r3, [r4, #4]
 8007684:	bf08      	it	eq
 8007686:	6031      	streq	r1, [r6, #0]
 8007688:	5162      	str	r2, [r4, r5]
 800768a:	604b      	str	r3, [r1, #4]
 800768c:	4638      	mov	r0, r7
 800768e:	f104 060b 	add.w	r6, r4, #11
 8007692:	f000 fb23 	bl	8007cdc <__malloc_unlock>
 8007696:	f026 0607 	bic.w	r6, r6, #7
 800769a:	1d23      	adds	r3, r4, #4
 800769c:	1af2      	subs	r2, r6, r3
 800769e:	d0b6      	beq.n	800760e <_malloc_r+0x22>
 80076a0:	1b9b      	subs	r3, r3, r6
 80076a2:	50a3      	str	r3, [r4, r2]
 80076a4:	e7b3      	b.n	800760e <_malloc_r+0x22>
 80076a6:	6862      	ldr	r2, [r4, #4]
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	bf0c      	ite	eq
 80076ac:	6032      	streq	r2, [r6, #0]
 80076ae:	605a      	strne	r2, [r3, #4]
 80076b0:	e7ec      	b.n	800768c <_malloc_r+0xa0>
 80076b2:	4623      	mov	r3, r4
 80076b4:	6864      	ldr	r4, [r4, #4]
 80076b6:	e7b2      	b.n	800761e <_malloc_r+0x32>
 80076b8:	4634      	mov	r4, r6
 80076ba:	6876      	ldr	r6, [r6, #4]
 80076bc:	e7b9      	b.n	8007632 <_malloc_r+0x46>
 80076be:	230c      	movs	r3, #12
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	4638      	mov	r0, r7
 80076c4:	f000 fb0a 	bl	8007cdc <__malloc_unlock>
 80076c8:	e7a1      	b.n	800760e <_malloc_r+0x22>
 80076ca:	6025      	str	r5, [r4, #0]
 80076cc:	e7de      	b.n	800768c <_malloc_r+0xa0>
 80076ce:	bf00      	nop
 80076d0:	20000760 	.word	0x20000760

080076d4 <iprintf>:
 80076d4:	b40f      	push	{r0, r1, r2, r3}
 80076d6:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <iprintf+0x2c>)
 80076d8:	b513      	push	{r0, r1, r4, lr}
 80076da:	681c      	ldr	r4, [r3, #0]
 80076dc:	b124      	cbz	r4, 80076e8 <iprintf+0x14>
 80076de:	69a3      	ldr	r3, [r4, #24]
 80076e0:	b913      	cbnz	r3, 80076e8 <iprintf+0x14>
 80076e2:	4620      	mov	r0, r4
 80076e4:	f7ff fe94 	bl	8007410 <__sinit>
 80076e8:	ab05      	add	r3, sp, #20
 80076ea:	9a04      	ldr	r2, [sp, #16]
 80076ec:	68a1      	ldr	r1, [r4, #8]
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fb6f 	bl	8007dd4 <_vfiprintf_r>
 80076f6:	b002      	add	sp, #8
 80076f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fc:	b004      	add	sp, #16
 80076fe:	4770      	bx	lr
 8007700:	20000014 	.word	0x20000014

08007704 <_puts_r>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	460e      	mov	r6, r1
 8007708:	4605      	mov	r5, r0
 800770a:	b118      	cbz	r0, 8007714 <_puts_r+0x10>
 800770c:	6983      	ldr	r3, [r0, #24]
 800770e:	b90b      	cbnz	r3, 8007714 <_puts_r+0x10>
 8007710:	f7ff fe7e 	bl	8007410 <__sinit>
 8007714:	69ab      	ldr	r3, [r5, #24]
 8007716:	68ac      	ldr	r4, [r5, #8]
 8007718:	b913      	cbnz	r3, 8007720 <_puts_r+0x1c>
 800771a:	4628      	mov	r0, r5
 800771c:	f7ff fe78 	bl	8007410 <__sinit>
 8007720:	4b2c      	ldr	r3, [pc, #176]	; (80077d4 <_puts_r+0xd0>)
 8007722:	429c      	cmp	r4, r3
 8007724:	d120      	bne.n	8007768 <_puts_r+0x64>
 8007726:	686c      	ldr	r4, [r5, #4]
 8007728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800772a:	07db      	lsls	r3, r3, #31
 800772c:	d405      	bmi.n	800773a <_puts_r+0x36>
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	0598      	lsls	r0, r3, #22
 8007732:	d402      	bmi.n	800773a <_puts_r+0x36>
 8007734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007736:	f7ff ff2e 	bl	8007596 <__retarget_lock_acquire_recursive>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	0719      	lsls	r1, r3, #28
 800773e:	d51d      	bpl.n	800777c <_puts_r+0x78>
 8007740:	6923      	ldr	r3, [r4, #16]
 8007742:	b1db      	cbz	r3, 800777c <_puts_r+0x78>
 8007744:	3e01      	subs	r6, #1
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800774c:	3b01      	subs	r3, #1
 800774e:	60a3      	str	r3, [r4, #8]
 8007750:	bb39      	cbnz	r1, 80077a2 <_puts_r+0x9e>
 8007752:	2b00      	cmp	r3, #0
 8007754:	da38      	bge.n	80077c8 <_puts_r+0xc4>
 8007756:	4622      	mov	r2, r4
 8007758:	210a      	movs	r1, #10
 800775a:	4628      	mov	r0, r5
 800775c:	f000 f89c 	bl	8007898 <__swbuf_r>
 8007760:	3001      	adds	r0, #1
 8007762:	d011      	beq.n	8007788 <_puts_r+0x84>
 8007764:	250a      	movs	r5, #10
 8007766:	e011      	b.n	800778c <_puts_r+0x88>
 8007768:	4b1b      	ldr	r3, [pc, #108]	; (80077d8 <_puts_r+0xd4>)
 800776a:	429c      	cmp	r4, r3
 800776c:	d101      	bne.n	8007772 <_puts_r+0x6e>
 800776e:	68ac      	ldr	r4, [r5, #8]
 8007770:	e7da      	b.n	8007728 <_puts_r+0x24>
 8007772:	4b1a      	ldr	r3, [pc, #104]	; (80077dc <_puts_r+0xd8>)
 8007774:	429c      	cmp	r4, r3
 8007776:	bf08      	it	eq
 8007778:	68ec      	ldreq	r4, [r5, #12]
 800777a:	e7d5      	b.n	8007728 <_puts_r+0x24>
 800777c:	4621      	mov	r1, r4
 800777e:	4628      	mov	r0, r5
 8007780:	f000 f8ee 	bl	8007960 <__swsetup_r>
 8007784:	2800      	cmp	r0, #0
 8007786:	d0dd      	beq.n	8007744 <_puts_r+0x40>
 8007788:	f04f 35ff 	mov.w	r5, #4294967295
 800778c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800778e:	07da      	lsls	r2, r3, #31
 8007790:	d405      	bmi.n	800779e <_puts_r+0x9a>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	059b      	lsls	r3, r3, #22
 8007796:	d402      	bmi.n	800779e <_puts_r+0x9a>
 8007798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800779a:	f7ff fefd 	bl	8007598 <__retarget_lock_release_recursive>
 800779e:	4628      	mov	r0, r5
 80077a0:	bd70      	pop	{r4, r5, r6, pc}
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	da04      	bge.n	80077b0 <_puts_r+0xac>
 80077a6:	69a2      	ldr	r2, [r4, #24]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	dc06      	bgt.n	80077ba <_puts_r+0xb6>
 80077ac:	290a      	cmp	r1, #10
 80077ae:	d004      	beq.n	80077ba <_puts_r+0xb6>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	6022      	str	r2, [r4, #0]
 80077b6:	7019      	strb	r1, [r3, #0]
 80077b8:	e7c5      	b.n	8007746 <_puts_r+0x42>
 80077ba:	4622      	mov	r2, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 f86b 	bl	8007898 <__swbuf_r>
 80077c2:	3001      	adds	r0, #1
 80077c4:	d1bf      	bne.n	8007746 <_puts_r+0x42>
 80077c6:	e7df      	b.n	8007788 <_puts_r+0x84>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	250a      	movs	r5, #10
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	6022      	str	r2, [r4, #0]
 80077d0:	701d      	strb	r5, [r3, #0]
 80077d2:	e7db      	b.n	800778c <_puts_r+0x88>
 80077d4:	08008490 	.word	0x08008490
 80077d8:	080084b0 	.word	0x080084b0
 80077dc:	08008470 	.word	0x08008470

080077e0 <puts>:
 80077e0:	4b02      	ldr	r3, [pc, #8]	; (80077ec <puts+0xc>)
 80077e2:	4601      	mov	r1, r0
 80077e4:	6818      	ldr	r0, [r3, #0]
 80077e6:	f7ff bf8d 	b.w	8007704 <_puts_r>
 80077ea:	bf00      	nop
 80077ec:	20000014 	.word	0x20000014

080077f0 <_sbrk_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4d06      	ldr	r5, [pc, #24]	; (800780c <_sbrk_r+0x1c>)
 80077f4:	2300      	movs	r3, #0
 80077f6:	4604      	mov	r4, r0
 80077f8:	4608      	mov	r0, r1
 80077fa:	602b      	str	r3, [r5, #0]
 80077fc:	f7fa fe00 	bl	8002400 <_sbrk>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_sbrk_r+0x1a>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	b103      	cbz	r3, 800780a <_sbrk_r+0x1a>
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20000768 	.word	0x20000768

08007810 <__sread>:
 8007810:	b510      	push	{r4, lr}
 8007812:	460c      	mov	r4, r1
 8007814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007818:	f000 fda0 	bl	800835c <_read_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	bfab      	itete	ge
 8007820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007822:	89a3      	ldrhlt	r3, [r4, #12]
 8007824:	181b      	addge	r3, r3, r0
 8007826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800782a:	bfac      	ite	ge
 800782c:	6563      	strge	r3, [r4, #84]	; 0x54
 800782e:	81a3      	strhlt	r3, [r4, #12]
 8007830:	bd10      	pop	{r4, pc}

08007832 <__swrite>:
 8007832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007836:	461f      	mov	r7, r3
 8007838:	898b      	ldrh	r3, [r1, #12]
 800783a:	05db      	lsls	r3, r3, #23
 800783c:	4605      	mov	r5, r0
 800783e:	460c      	mov	r4, r1
 8007840:	4616      	mov	r6, r2
 8007842:	d505      	bpl.n	8007850 <__swrite+0x1e>
 8007844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007848:	2302      	movs	r3, #2
 800784a:	2200      	movs	r2, #0
 800784c:	f000 f9c8 	bl	8007be0 <_lseek_r>
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	4632      	mov	r2, r6
 800785e:	463b      	mov	r3, r7
 8007860:	4628      	mov	r0, r5
 8007862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007866:	f000 b869 	b.w	800793c <_write_r>

0800786a <__sseek>:
 800786a:	b510      	push	{r4, lr}
 800786c:	460c      	mov	r4, r1
 800786e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007872:	f000 f9b5 	bl	8007be0 <_lseek_r>
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	bf15      	itete	ne
 800787c:	6560      	strne	r0, [r4, #84]	; 0x54
 800787e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007886:	81a3      	strheq	r3, [r4, #12]
 8007888:	bf18      	it	ne
 800788a:	81a3      	strhne	r3, [r4, #12]
 800788c:	bd10      	pop	{r4, pc}

0800788e <__sclose>:
 800788e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007892:	f000 b8d3 	b.w	8007a3c <_close_r>
	...

08007898 <__swbuf_r>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	460e      	mov	r6, r1
 800789c:	4614      	mov	r4, r2
 800789e:	4605      	mov	r5, r0
 80078a0:	b118      	cbz	r0, 80078aa <__swbuf_r+0x12>
 80078a2:	6983      	ldr	r3, [r0, #24]
 80078a4:	b90b      	cbnz	r3, 80078aa <__swbuf_r+0x12>
 80078a6:	f7ff fdb3 	bl	8007410 <__sinit>
 80078aa:	4b21      	ldr	r3, [pc, #132]	; (8007930 <__swbuf_r+0x98>)
 80078ac:	429c      	cmp	r4, r3
 80078ae:	d12b      	bne.n	8007908 <__swbuf_r+0x70>
 80078b0:	686c      	ldr	r4, [r5, #4]
 80078b2:	69a3      	ldr	r3, [r4, #24]
 80078b4:	60a3      	str	r3, [r4, #8]
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	071a      	lsls	r2, r3, #28
 80078ba:	d52f      	bpl.n	800791c <__swbuf_r+0x84>
 80078bc:	6923      	ldr	r3, [r4, #16]
 80078be:	b36b      	cbz	r3, 800791c <__swbuf_r+0x84>
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	6820      	ldr	r0, [r4, #0]
 80078c4:	1ac0      	subs	r0, r0, r3
 80078c6:	6963      	ldr	r3, [r4, #20]
 80078c8:	b2f6      	uxtb	r6, r6
 80078ca:	4283      	cmp	r3, r0
 80078cc:	4637      	mov	r7, r6
 80078ce:	dc04      	bgt.n	80078da <__swbuf_r+0x42>
 80078d0:	4621      	mov	r1, r4
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 f948 	bl	8007b68 <_fflush_r>
 80078d8:	bb30      	cbnz	r0, 8007928 <__swbuf_r+0x90>
 80078da:	68a3      	ldr	r3, [r4, #8]
 80078dc:	3b01      	subs	r3, #1
 80078de:	60a3      	str	r3, [r4, #8]
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	6022      	str	r2, [r4, #0]
 80078e6:	701e      	strb	r6, [r3, #0]
 80078e8:	6963      	ldr	r3, [r4, #20]
 80078ea:	3001      	adds	r0, #1
 80078ec:	4283      	cmp	r3, r0
 80078ee:	d004      	beq.n	80078fa <__swbuf_r+0x62>
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	07db      	lsls	r3, r3, #31
 80078f4:	d506      	bpl.n	8007904 <__swbuf_r+0x6c>
 80078f6:	2e0a      	cmp	r6, #10
 80078f8:	d104      	bne.n	8007904 <__swbuf_r+0x6c>
 80078fa:	4621      	mov	r1, r4
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 f933 	bl	8007b68 <_fflush_r>
 8007902:	b988      	cbnz	r0, 8007928 <__swbuf_r+0x90>
 8007904:	4638      	mov	r0, r7
 8007906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007908:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <__swbuf_r+0x9c>)
 800790a:	429c      	cmp	r4, r3
 800790c:	d101      	bne.n	8007912 <__swbuf_r+0x7a>
 800790e:	68ac      	ldr	r4, [r5, #8]
 8007910:	e7cf      	b.n	80078b2 <__swbuf_r+0x1a>
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <__swbuf_r+0xa0>)
 8007914:	429c      	cmp	r4, r3
 8007916:	bf08      	it	eq
 8007918:	68ec      	ldreq	r4, [r5, #12]
 800791a:	e7ca      	b.n	80078b2 <__swbuf_r+0x1a>
 800791c:	4621      	mov	r1, r4
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f81e 	bl	8007960 <__swsetup_r>
 8007924:	2800      	cmp	r0, #0
 8007926:	d0cb      	beq.n	80078c0 <__swbuf_r+0x28>
 8007928:	f04f 37ff 	mov.w	r7, #4294967295
 800792c:	e7ea      	b.n	8007904 <__swbuf_r+0x6c>
 800792e:	bf00      	nop
 8007930:	08008490 	.word	0x08008490
 8007934:	080084b0 	.word	0x080084b0
 8007938:	08008470 	.word	0x08008470

0800793c <_write_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d07      	ldr	r5, [pc, #28]	; (800795c <_write_r+0x20>)
 8007940:	4604      	mov	r4, r0
 8007942:	4608      	mov	r0, r1
 8007944:	4611      	mov	r1, r2
 8007946:	2200      	movs	r2, #0
 8007948:	602a      	str	r2, [r5, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	f7ff fb07 	bl	8006f5e <_write>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_write_r+0x1e>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b103      	cbz	r3, 800795a <_write_r+0x1e>
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	20000768 	.word	0x20000768

08007960 <__swsetup_r>:
 8007960:	4b32      	ldr	r3, [pc, #200]	; (8007a2c <__swsetup_r+0xcc>)
 8007962:	b570      	push	{r4, r5, r6, lr}
 8007964:	681d      	ldr	r5, [r3, #0]
 8007966:	4606      	mov	r6, r0
 8007968:	460c      	mov	r4, r1
 800796a:	b125      	cbz	r5, 8007976 <__swsetup_r+0x16>
 800796c:	69ab      	ldr	r3, [r5, #24]
 800796e:	b913      	cbnz	r3, 8007976 <__swsetup_r+0x16>
 8007970:	4628      	mov	r0, r5
 8007972:	f7ff fd4d 	bl	8007410 <__sinit>
 8007976:	4b2e      	ldr	r3, [pc, #184]	; (8007a30 <__swsetup_r+0xd0>)
 8007978:	429c      	cmp	r4, r3
 800797a:	d10f      	bne.n	800799c <__swsetup_r+0x3c>
 800797c:	686c      	ldr	r4, [r5, #4]
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007984:	0719      	lsls	r1, r3, #28
 8007986:	d42c      	bmi.n	80079e2 <__swsetup_r+0x82>
 8007988:	06dd      	lsls	r5, r3, #27
 800798a:	d411      	bmi.n	80079b0 <__swsetup_r+0x50>
 800798c:	2309      	movs	r3, #9
 800798e:	6033      	str	r3, [r6, #0]
 8007990:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	f04f 30ff 	mov.w	r0, #4294967295
 800799a:	e03e      	b.n	8007a1a <__swsetup_r+0xba>
 800799c:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <__swsetup_r+0xd4>)
 800799e:	429c      	cmp	r4, r3
 80079a0:	d101      	bne.n	80079a6 <__swsetup_r+0x46>
 80079a2:	68ac      	ldr	r4, [r5, #8]
 80079a4:	e7eb      	b.n	800797e <__swsetup_r+0x1e>
 80079a6:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <__swsetup_r+0xd8>)
 80079a8:	429c      	cmp	r4, r3
 80079aa:	bf08      	it	eq
 80079ac:	68ec      	ldreq	r4, [r5, #12]
 80079ae:	e7e6      	b.n	800797e <__swsetup_r+0x1e>
 80079b0:	0758      	lsls	r0, r3, #29
 80079b2:	d512      	bpl.n	80079da <__swsetup_r+0x7a>
 80079b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079b6:	b141      	cbz	r1, 80079ca <__swsetup_r+0x6a>
 80079b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079bc:	4299      	cmp	r1, r3
 80079be:	d002      	beq.n	80079c6 <__swsetup_r+0x66>
 80079c0:	4630      	mov	r0, r6
 80079c2:	f000 f991 	bl	8007ce8 <_free_r>
 80079c6:	2300      	movs	r3, #0
 80079c8:	6363      	str	r3, [r4, #52]	; 0x34
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	2300      	movs	r3, #0
 80079d4:	6063      	str	r3, [r4, #4]
 80079d6:	6923      	ldr	r3, [r4, #16]
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f043 0308 	orr.w	r3, r3, #8
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	b94b      	cbnz	r3, 80079fa <__swsetup_r+0x9a>
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f0:	d003      	beq.n	80079fa <__swsetup_r+0x9a>
 80079f2:	4621      	mov	r1, r4
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 f92b 	bl	8007c50 <__smakebuf_r>
 80079fa:	89a0      	ldrh	r0, [r4, #12]
 80079fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a00:	f010 0301 	ands.w	r3, r0, #1
 8007a04:	d00a      	beq.n	8007a1c <__swsetup_r+0xbc>
 8007a06:	2300      	movs	r3, #0
 8007a08:	60a3      	str	r3, [r4, #8]
 8007a0a:	6963      	ldr	r3, [r4, #20]
 8007a0c:	425b      	negs	r3, r3
 8007a0e:	61a3      	str	r3, [r4, #24]
 8007a10:	6923      	ldr	r3, [r4, #16]
 8007a12:	b943      	cbnz	r3, 8007a26 <__swsetup_r+0xc6>
 8007a14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a18:	d1ba      	bne.n	8007990 <__swsetup_r+0x30>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	0781      	lsls	r1, r0, #30
 8007a1e:	bf58      	it	pl
 8007a20:	6963      	ldrpl	r3, [r4, #20]
 8007a22:	60a3      	str	r3, [r4, #8]
 8007a24:	e7f4      	b.n	8007a10 <__swsetup_r+0xb0>
 8007a26:	2000      	movs	r0, #0
 8007a28:	e7f7      	b.n	8007a1a <__swsetup_r+0xba>
 8007a2a:	bf00      	nop
 8007a2c:	20000014 	.word	0x20000014
 8007a30:	08008490 	.word	0x08008490
 8007a34:	080084b0 	.word	0x080084b0
 8007a38:	08008470 	.word	0x08008470

08007a3c <_close_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d06      	ldr	r5, [pc, #24]	; (8007a58 <_close_r+0x1c>)
 8007a40:	2300      	movs	r3, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	602b      	str	r3, [r5, #0]
 8007a48:	f7ff faba 	bl	8006fc0 <_close>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_close_r+0x1a>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_close_r+0x1a>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	20000768 	.word	0x20000768

08007a5c <__sflush_r>:
 8007a5c:	898a      	ldrh	r2, [r1, #12]
 8007a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	4605      	mov	r5, r0
 8007a64:	0710      	lsls	r0, r2, #28
 8007a66:	460c      	mov	r4, r1
 8007a68:	d458      	bmi.n	8007b1c <__sflush_r+0xc0>
 8007a6a:	684b      	ldr	r3, [r1, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dc05      	bgt.n	8007a7c <__sflush_r+0x20>
 8007a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dc02      	bgt.n	8007a7c <__sflush_r+0x20>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	d0f9      	beq.n	8007a76 <__sflush_r+0x1a>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a88:	682f      	ldr	r7, [r5, #0]
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	d032      	beq.n	8007af4 <__sflush_r+0x98>
 8007a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	075a      	lsls	r2, r3, #29
 8007a94:	d505      	bpl.n	8007aa2 <__sflush_r+0x46>
 8007a96:	6863      	ldr	r3, [r4, #4]
 8007a98:	1ac0      	subs	r0, r0, r3
 8007a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a9c:	b10b      	cbz	r3, 8007aa2 <__sflush_r+0x46>
 8007a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aa0:	1ac0      	subs	r0, r0, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa8:	6a21      	ldr	r1, [r4, #32]
 8007aaa:	4628      	mov	r0, r5
 8007aac:	47b0      	blx	r6
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	d106      	bne.n	8007ac2 <__sflush_r+0x66>
 8007ab4:	6829      	ldr	r1, [r5, #0]
 8007ab6:	291d      	cmp	r1, #29
 8007ab8:	d82c      	bhi.n	8007b14 <__sflush_r+0xb8>
 8007aba:	4a2a      	ldr	r2, [pc, #168]	; (8007b64 <__sflush_r+0x108>)
 8007abc:	40ca      	lsrs	r2, r1
 8007abe:	07d6      	lsls	r6, r2, #31
 8007ac0:	d528      	bpl.n	8007b14 <__sflush_r+0xb8>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	6062      	str	r2, [r4, #4]
 8007ac6:	04d9      	lsls	r1, r3, #19
 8007ac8:	6922      	ldr	r2, [r4, #16]
 8007aca:	6022      	str	r2, [r4, #0]
 8007acc:	d504      	bpl.n	8007ad8 <__sflush_r+0x7c>
 8007ace:	1c42      	adds	r2, r0, #1
 8007ad0:	d101      	bne.n	8007ad6 <__sflush_r+0x7a>
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	b903      	cbnz	r3, 8007ad8 <__sflush_r+0x7c>
 8007ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ada:	602f      	str	r7, [r5, #0]
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d0ca      	beq.n	8007a76 <__sflush_r+0x1a>
 8007ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae4:	4299      	cmp	r1, r3
 8007ae6:	d002      	beq.n	8007aee <__sflush_r+0x92>
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 f8fd 	bl	8007ce8 <_free_r>
 8007aee:	2000      	movs	r0, #0
 8007af0:	6360      	str	r0, [r4, #52]	; 0x34
 8007af2:	e7c1      	b.n	8007a78 <__sflush_r+0x1c>
 8007af4:	6a21      	ldr	r1, [r4, #32]
 8007af6:	2301      	movs	r3, #1
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b0      	blx	r6
 8007afc:	1c41      	adds	r1, r0, #1
 8007afe:	d1c7      	bne.n	8007a90 <__sflush_r+0x34>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0c4      	beq.n	8007a90 <__sflush_r+0x34>
 8007b06:	2b1d      	cmp	r3, #29
 8007b08:	d001      	beq.n	8007b0e <__sflush_r+0xb2>
 8007b0a:	2b16      	cmp	r3, #22
 8007b0c:	d101      	bne.n	8007b12 <__sflush_r+0xb6>
 8007b0e:	602f      	str	r7, [r5, #0]
 8007b10:	e7b1      	b.n	8007a76 <__sflush_r+0x1a>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	e7ad      	b.n	8007a78 <__sflush_r+0x1c>
 8007b1c:	690f      	ldr	r7, [r1, #16]
 8007b1e:	2f00      	cmp	r7, #0
 8007b20:	d0a9      	beq.n	8007a76 <__sflush_r+0x1a>
 8007b22:	0793      	lsls	r3, r2, #30
 8007b24:	680e      	ldr	r6, [r1, #0]
 8007b26:	bf08      	it	eq
 8007b28:	694b      	ldreq	r3, [r1, #20]
 8007b2a:	600f      	str	r7, [r1, #0]
 8007b2c:	bf18      	it	ne
 8007b2e:	2300      	movne	r3, #0
 8007b30:	eba6 0807 	sub.w	r8, r6, r7
 8007b34:	608b      	str	r3, [r1, #8]
 8007b36:	f1b8 0f00 	cmp.w	r8, #0
 8007b3a:	dd9c      	ble.n	8007a76 <__sflush_r+0x1a>
 8007b3c:	6a21      	ldr	r1, [r4, #32]
 8007b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b40:	4643      	mov	r3, r8
 8007b42:	463a      	mov	r2, r7
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b0      	blx	r6
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	dc06      	bgt.n	8007b5a <__sflush_r+0xfe>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	e78e      	b.n	8007a78 <__sflush_r+0x1c>
 8007b5a:	4407      	add	r7, r0
 8007b5c:	eba8 0800 	sub.w	r8, r8, r0
 8007b60:	e7e9      	b.n	8007b36 <__sflush_r+0xda>
 8007b62:	bf00      	nop
 8007b64:	20400001 	.word	0x20400001

08007b68 <_fflush_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	690b      	ldr	r3, [r1, #16]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	b913      	cbnz	r3, 8007b78 <_fflush_r+0x10>
 8007b72:	2500      	movs	r5, #0
 8007b74:	4628      	mov	r0, r5
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	b118      	cbz	r0, 8007b82 <_fflush_r+0x1a>
 8007b7a:	6983      	ldr	r3, [r0, #24]
 8007b7c:	b90b      	cbnz	r3, 8007b82 <_fflush_r+0x1a>
 8007b7e:	f7ff fc47 	bl	8007410 <__sinit>
 8007b82:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <_fflush_r+0x6c>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d11b      	bne.n	8007bc0 <_fflush_r+0x58>
 8007b88:	686c      	ldr	r4, [r5, #4]
 8007b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0ef      	beq.n	8007b72 <_fflush_r+0xa>
 8007b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b94:	07d0      	lsls	r0, r2, #31
 8007b96:	d404      	bmi.n	8007ba2 <_fflush_r+0x3a>
 8007b98:	0599      	lsls	r1, r3, #22
 8007b9a:	d402      	bmi.n	8007ba2 <_fflush_r+0x3a>
 8007b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b9e:	f7ff fcfa 	bl	8007596 <__retarget_lock_acquire_recursive>
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	f7ff ff59 	bl	8007a5c <__sflush_r>
 8007baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bac:	07da      	lsls	r2, r3, #31
 8007bae:	4605      	mov	r5, r0
 8007bb0:	d4e0      	bmi.n	8007b74 <_fflush_r+0xc>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	059b      	lsls	r3, r3, #22
 8007bb6:	d4dd      	bmi.n	8007b74 <_fflush_r+0xc>
 8007bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bba:	f7ff fced 	bl	8007598 <__retarget_lock_release_recursive>
 8007bbe:	e7d9      	b.n	8007b74 <_fflush_r+0xc>
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <_fflush_r+0x70>)
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d101      	bne.n	8007bca <_fflush_r+0x62>
 8007bc6:	68ac      	ldr	r4, [r5, #8]
 8007bc8:	e7df      	b.n	8007b8a <_fflush_r+0x22>
 8007bca:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <_fflush_r+0x74>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	bf08      	it	eq
 8007bd0:	68ec      	ldreq	r4, [r5, #12]
 8007bd2:	e7da      	b.n	8007b8a <_fflush_r+0x22>
 8007bd4:	08008490 	.word	0x08008490
 8007bd8:	080084b0 	.word	0x080084b0
 8007bdc:	08008470 	.word	0x08008470

08007be0 <_lseek_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4d07      	ldr	r5, [pc, #28]	; (8007c00 <_lseek_r+0x20>)
 8007be4:	4604      	mov	r4, r0
 8007be6:	4608      	mov	r0, r1
 8007be8:	4611      	mov	r1, r2
 8007bea:	2200      	movs	r2, #0
 8007bec:	602a      	str	r2, [r5, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f7ff f9a3 	bl	8006f3a <_lseek>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_lseek_r+0x1e>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_lseek_r+0x1e>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	20000768 	.word	0x20000768

08007c04 <__swhatbuf_r>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	460e      	mov	r6, r1
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	b096      	sub	sp, #88	; 0x58
 8007c10:	4614      	mov	r4, r2
 8007c12:	461d      	mov	r5, r3
 8007c14:	da08      	bge.n	8007c28 <__swhatbuf_r+0x24>
 8007c16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	602a      	str	r2, [r5, #0]
 8007c1e:	061a      	lsls	r2, r3, #24
 8007c20:	d410      	bmi.n	8007c44 <__swhatbuf_r+0x40>
 8007c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c26:	e00e      	b.n	8007c46 <__swhatbuf_r+0x42>
 8007c28:	466a      	mov	r2, sp
 8007c2a:	f000 fba9 	bl	8008380 <_fstat_r>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	dbf1      	blt.n	8007c16 <__swhatbuf_r+0x12>
 8007c32:	9a01      	ldr	r2, [sp, #4]
 8007c34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c3c:	425a      	negs	r2, r3
 8007c3e:	415a      	adcs	r2, r3
 8007c40:	602a      	str	r2, [r5, #0]
 8007c42:	e7ee      	b.n	8007c22 <__swhatbuf_r+0x1e>
 8007c44:	2340      	movs	r3, #64	; 0x40
 8007c46:	2000      	movs	r0, #0
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	b016      	add	sp, #88	; 0x58
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c50 <__smakebuf_r>:
 8007c50:	898b      	ldrh	r3, [r1, #12]
 8007c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c54:	079d      	lsls	r5, r3, #30
 8007c56:	4606      	mov	r6, r0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	d507      	bpl.n	8007c6c <__smakebuf_r+0x1c>
 8007c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	6123      	str	r3, [r4, #16]
 8007c64:	2301      	movs	r3, #1
 8007c66:	6163      	str	r3, [r4, #20]
 8007c68:	b002      	add	sp, #8
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	ab01      	add	r3, sp, #4
 8007c6e:	466a      	mov	r2, sp
 8007c70:	f7ff ffc8 	bl	8007c04 <__swhatbuf_r>
 8007c74:	9900      	ldr	r1, [sp, #0]
 8007c76:	4605      	mov	r5, r0
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7ff fcb7 	bl	80075ec <_malloc_r>
 8007c7e:	b948      	cbnz	r0, 8007c94 <__smakebuf_r+0x44>
 8007c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c84:	059a      	lsls	r2, r3, #22
 8007c86:	d4ef      	bmi.n	8007c68 <__smakebuf_r+0x18>
 8007c88:	f023 0303 	bic.w	r3, r3, #3
 8007c8c:	f043 0302 	orr.w	r3, r3, #2
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	e7e3      	b.n	8007c5c <__smakebuf_r+0xc>
 8007c94:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <__smakebuf_r+0x7c>)
 8007c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	6020      	str	r0, [r4, #0]
 8007c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca0:	81a3      	strh	r3, [r4, #12]
 8007ca2:	9b00      	ldr	r3, [sp, #0]
 8007ca4:	6163      	str	r3, [r4, #20]
 8007ca6:	9b01      	ldr	r3, [sp, #4]
 8007ca8:	6120      	str	r0, [r4, #16]
 8007caa:	b15b      	cbz	r3, 8007cc4 <__smakebuf_r+0x74>
 8007cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 fb77 	bl	80083a4 <_isatty_r>
 8007cb6:	b128      	cbz	r0, 8007cc4 <__smakebuf_r+0x74>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f023 0303 	bic.w	r3, r3, #3
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	89a0      	ldrh	r0, [r4, #12]
 8007cc6:	4305      	orrs	r5, r0
 8007cc8:	81a5      	strh	r5, [r4, #12]
 8007cca:	e7cd      	b.n	8007c68 <__smakebuf_r+0x18>
 8007ccc:	080073a9 	.word	0x080073a9

08007cd0 <__malloc_lock>:
 8007cd0:	4801      	ldr	r0, [pc, #4]	; (8007cd8 <__malloc_lock+0x8>)
 8007cd2:	f7ff bc60 	b.w	8007596 <__retarget_lock_acquire_recursive>
 8007cd6:	bf00      	nop
 8007cd8:	2000075c 	.word	0x2000075c

08007cdc <__malloc_unlock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	; (8007ce4 <__malloc_unlock+0x8>)
 8007cde:	f7ff bc5b 	b.w	8007598 <__retarget_lock_release_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	2000075c 	.word	0x2000075c

08007ce8 <_free_r>:
 8007ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d044      	beq.n	8007d78 <_free_r+0x90>
 8007cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf2:	9001      	str	r0, [sp, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8007cfa:	bfb8      	it	lt
 8007cfc:	18e4      	addlt	r4, r4, r3
 8007cfe:	f7ff ffe7 	bl	8007cd0 <__malloc_lock>
 8007d02:	4a1e      	ldr	r2, [pc, #120]	; (8007d7c <_free_r+0x94>)
 8007d04:	9801      	ldr	r0, [sp, #4]
 8007d06:	6813      	ldr	r3, [r2, #0]
 8007d08:	b933      	cbnz	r3, 8007d18 <_free_r+0x30>
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	6014      	str	r4, [r2, #0]
 8007d0e:	b003      	add	sp, #12
 8007d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d14:	f7ff bfe2 	b.w	8007cdc <__malloc_unlock>
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d908      	bls.n	8007d2e <_free_r+0x46>
 8007d1c:	6825      	ldr	r5, [r4, #0]
 8007d1e:	1961      	adds	r1, r4, r5
 8007d20:	428b      	cmp	r3, r1
 8007d22:	bf01      	itttt	eq
 8007d24:	6819      	ldreq	r1, [r3, #0]
 8007d26:	685b      	ldreq	r3, [r3, #4]
 8007d28:	1949      	addeq	r1, r1, r5
 8007d2a:	6021      	streq	r1, [r4, #0]
 8007d2c:	e7ed      	b.n	8007d0a <_free_r+0x22>
 8007d2e:	461a      	mov	r2, r3
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	b10b      	cbz	r3, 8007d38 <_free_r+0x50>
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	d9fa      	bls.n	8007d2e <_free_r+0x46>
 8007d38:	6811      	ldr	r1, [r2, #0]
 8007d3a:	1855      	adds	r5, r2, r1
 8007d3c:	42a5      	cmp	r5, r4
 8007d3e:	d10b      	bne.n	8007d58 <_free_r+0x70>
 8007d40:	6824      	ldr	r4, [r4, #0]
 8007d42:	4421      	add	r1, r4
 8007d44:	1854      	adds	r4, r2, r1
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	6011      	str	r1, [r2, #0]
 8007d4a:	d1e0      	bne.n	8007d0e <_free_r+0x26>
 8007d4c:	681c      	ldr	r4, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	6053      	str	r3, [r2, #4]
 8007d52:	4421      	add	r1, r4
 8007d54:	6011      	str	r1, [r2, #0]
 8007d56:	e7da      	b.n	8007d0e <_free_r+0x26>
 8007d58:	d902      	bls.n	8007d60 <_free_r+0x78>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	6003      	str	r3, [r0, #0]
 8007d5e:	e7d6      	b.n	8007d0e <_free_r+0x26>
 8007d60:	6825      	ldr	r5, [r4, #0]
 8007d62:	1961      	adds	r1, r4, r5
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf04      	itt	eq
 8007d68:	6819      	ldreq	r1, [r3, #0]
 8007d6a:	685b      	ldreq	r3, [r3, #4]
 8007d6c:	6063      	str	r3, [r4, #4]
 8007d6e:	bf04      	itt	eq
 8007d70:	1949      	addeq	r1, r1, r5
 8007d72:	6021      	streq	r1, [r4, #0]
 8007d74:	6054      	str	r4, [r2, #4]
 8007d76:	e7ca      	b.n	8007d0e <_free_r+0x26>
 8007d78:	b003      	add	sp, #12
 8007d7a:	bd30      	pop	{r4, r5, pc}
 8007d7c:	20000760 	.word	0x20000760

08007d80 <__sfputc_r>:
 8007d80:	6893      	ldr	r3, [r2, #8]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	b410      	push	{r4}
 8007d88:	6093      	str	r3, [r2, #8]
 8007d8a:	da08      	bge.n	8007d9e <__sfputc_r+0x1e>
 8007d8c:	6994      	ldr	r4, [r2, #24]
 8007d8e:	42a3      	cmp	r3, r4
 8007d90:	db01      	blt.n	8007d96 <__sfputc_r+0x16>
 8007d92:	290a      	cmp	r1, #10
 8007d94:	d103      	bne.n	8007d9e <__sfputc_r+0x1e>
 8007d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d9a:	f7ff bd7d 	b.w	8007898 <__swbuf_r>
 8007d9e:	6813      	ldr	r3, [r2, #0]
 8007da0:	1c58      	adds	r0, r3, #1
 8007da2:	6010      	str	r0, [r2, #0]
 8007da4:	7019      	strb	r1, [r3, #0]
 8007da6:	4608      	mov	r0, r1
 8007da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <__sfputs_r>:
 8007dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db0:	4606      	mov	r6, r0
 8007db2:	460f      	mov	r7, r1
 8007db4:	4614      	mov	r4, r2
 8007db6:	18d5      	adds	r5, r2, r3
 8007db8:	42ac      	cmp	r4, r5
 8007dba:	d101      	bne.n	8007dc0 <__sfputs_r+0x12>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	e007      	b.n	8007dd0 <__sfputs_r+0x22>
 8007dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc4:	463a      	mov	r2, r7
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f7ff ffda 	bl	8007d80 <__sfputc_r>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d1f3      	bne.n	8007db8 <__sfputs_r+0xa>
 8007dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dd4 <_vfiprintf_r>:
 8007dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	460d      	mov	r5, r1
 8007dda:	b09d      	sub	sp, #116	; 0x74
 8007ddc:	4614      	mov	r4, r2
 8007dde:	4698      	mov	r8, r3
 8007de0:	4606      	mov	r6, r0
 8007de2:	b118      	cbz	r0, 8007dec <_vfiprintf_r+0x18>
 8007de4:	6983      	ldr	r3, [r0, #24]
 8007de6:	b90b      	cbnz	r3, 8007dec <_vfiprintf_r+0x18>
 8007de8:	f7ff fb12 	bl	8007410 <__sinit>
 8007dec:	4b89      	ldr	r3, [pc, #548]	; (8008014 <_vfiprintf_r+0x240>)
 8007dee:	429d      	cmp	r5, r3
 8007df0:	d11b      	bne.n	8007e2a <_vfiprintf_r+0x56>
 8007df2:	6875      	ldr	r5, [r6, #4]
 8007df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df6:	07d9      	lsls	r1, r3, #31
 8007df8:	d405      	bmi.n	8007e06 <_vfiprintf_r+0x32>
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	059a      	lsls	r2, r3, #22
 8007dfe:	d402      	bmi.n	8007e06 <_vfiprintf_r+0x32>
 8007e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e02:	f7ff fbc8 	bl	8007596 <__retarget_lock_acquire_recursive>
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	071b      	lsls	r3, r3, #28
 8007e0a:	d501      	bpl.n	8007e10 <_vfiprintf_r+0x3c>
 8007e0c:	692b      	ldr	r3, [r5, #16]
 8007e0e:	b9eb      	cbnz	r3, 8007e4c <_vfiprintf_r+0x78>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff fda4 	bl	8007960 <__swsetup_r>
 8007e18:	b1c0      	cbz	r0, 8007e4c <_vfiprintf_r+0x78>
 8007e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e1c:	07dc      	lsls	r4, r3, #31
 8007e1e:	d50e      	bpl.n	8007e3e <_vfiprintf_r+0x6a>
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	b01d      	add	sp, #116	; 0x74
 8007e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2a:	4b7b      	ldr	r3, [pc, #492]	; (8008018 <_vfiprintf_r+0x244>)
 8007e2c:	429d      	cmp	r5, r3
 8007e2e:	d101      	bne.n	8007e34 <_vfiprintf_r+0x60>
 8007e30:	68b5      	ldr	r5, [r6, #8]
 8007e32:	e7df      	b.n	8007df4 <_vfiprintf_r+0x20>
 8007e34:	4b79      	ldr	r3, [pc, #484]	; (800801c <_vfiprintf_r+0x248>)
 8007e36:	429d      	cmp	r5, r3
 8007e38:	bf08      	it	eq
 8007e3a:	68f5      	ldreq	r5, [r6, #12]
 8007e3c:	e7da      	b.n	8007df4 <_vfiprintf_r+0x20>
 8007e3e:	89ab      	ldrh	r3, [r5, #12]
 8007e40:	0598      	lsls	r0, r3, #22
 8007e42:	d4ed      	bmi.n	8007e20 <_vfiprintf_r+0x4c>
 8007e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e46:	f7ff fba7 	bl	8007598 <__retarget_lock_release_recursive>
 8007e4a:	e7e9      	b.n	8007e20 <_vfiprintf_r+0x4c>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e50:	2320      	movs	r3, #32
 8007e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e5a:	2330      	movs	r3, #48	; 0x30
 8007e5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008020 <_vfiprintf_r+0x24c>
 8007e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e64:	f04f 0901 	mov.w	r9, #1
 8007e68:	4623      	mov	r3, r4
 8007e6a:	469a      	mov	sl, r3
 8007e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e70:	b10a      	cbz	r2, 8007e76 <_vfiprintf_r+0xa2>
 8007e72:	2a25      	cmp	r2, #37	; 0x25
 8007e74:	d1f9      	bne.n	8007e6a <_vfiprintf_r+0x96>
 8007e76:	ebba 0b04 	subs.w	fp, sl, r4
 8007e7a:	d00b      	beq.n	8007e94 <_vfiprintf_r+0xc0>
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	4622      	mov	r2, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff ff93 	bl	8007dae <__sfputs_r>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	f000 80aa 	beq.w	8007fe2 <_vfiprintf_r+0x20e>
 8007e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e90:	445a      	add	r2, fp
 8007e92:	9209      	str	r2, [sp, #36]	; 0x24
 8007e94:	f89a 3000 	ldrb.w	r3, [sl]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 80a2 	beq.w	8007fe2 <_vfiprintf_r+0x20e>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ea8:	f10a 0a01 	add.w	sl, sl, #1
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	9307      	str	r3, [sp, #28]
 8007eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8007eb6:	4654      	mov	r4, sl
 8007eb8:	2205      	movs	r2, #5
 8007eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ebe:	4858      	ldr	r0, [pc, #352]	; (8008020 <_vfiprintf_r+0x24c>)
 8007ec0:	f7f8 f9c6 	bl	8000250 <memchr>
 8007ec4:	9a04      	ldr	r2, [sp, #16]
 8007ec6:	b9d8      	cbnz	r0, 8007f00 <_vfiprintf_r+0x12c>
 8007ec8:	06d1      	lsls	r1, r2, #27
 8007eca:	bf44      	itt	mi
 8007ecc:	2320      	movmi	r3, #32
 8007ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed2:	0713      	lsls	r3, r2, #28
 8007ed4:	bf44      	itt	mi
 8007ed6:	232b      	movmi	r3, #43	; 0x2b
 8007ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007edc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee2:	d015      	beq.n	8007f10 <_vfiprintf_r+0x13c>
 8007ee4:	9a07      	ldr	r2, [sp, #28]
 8007ee6:	4654      	mov	r4, sl
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f04f 0c0a 	mov.w	ip, #10
 8007eee:	4621      	mov	r1, r4
 8007ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ef4:	3b30      	subs	r3, #48	; 0x30
 8007ef6:	2b09      	cmp	r3, #9
 8007ef8:	d94e      	bls.n	8007f98 <_vfiprintf_r+0x1c4>
 8007efa:	b1b0      	cbz	r0, 8007f2a <_vfiprintf_r+0x156>
 8007efc:	9207      	str	r2, [sp, #28]
 8007efe:	e014      	b.n	8007f2a <_vfiprintf_r+0x156>
 8007f00:	eba0 0308 	sub.w	r3, r0, r8
 8007f04:	fa09 f303 	lsl.w	r3, r9, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	46a2      	mov	sl, r4
 8007f0e:	e7d2      	b.n	8007eb6 <_vfiprintf_r+0xe2>
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	1d19      	adds	r1, r3, #4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	9103      	str	r1, [sp, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bfbb      	ittet	lt
 8007f1c:	425b      	neglt	r3, r3
 8007f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f22:	9307      	strge	r3, [sp, #28]
 8007f24:	9307      	strlt	r3, [sp, #28]
 8007f26:	bfb8      	it	lt
 8007f28:	9204      	strlt	r2, [sp, #16]
 8007f2a:	7823      	ldrb	r3, [r4, #0]
 8007f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f2e:	d10c      	bne.n	8007f4a <_vfiprintf_r+0x176>
 8007f30:	7863      	ldrb	r3, [r4, #1]
 8007f32:	2b2a      	cmp	r3, #42	; 0x2a
 8007f34:	d135      	bne.n	8007fa2 <_vfiprintf_r+0x1ce>
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	1d1a      	adds	r2, r3, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	9203      	str	r2, [sp, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bfb8      	it	lt
 8007f42:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f46:	3402      	adds	r4, #2
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008030 <_vfiprintf_r+0x25c>
 8007f4e:	7821      	ldrb	r1, [r4, #0]
 8007f50:	2203      	movs	r2, #3
 8007f52:	4650      	mov	r0, sl
 8007f54:	f7f8 f97c 	bl	8000250 <memchr>
 8007f58:	b140      	cbz	r0, 8007f6c <_vfiprintf_r+0x198>
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	eba0 000a 	sub.w	r0, r0, sl
 8007f60:	fa03 f000 	lsl.w	r0, r3, r0
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	4303      	orrs	r3, r0
 8007f68:	3401      	adds	r4, #1
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f70:	482c      	ldr	r0, [pc, #176]	; (8008024 <_vfiprintf_r+0x250>)
 8007f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f76:	2206      	movs	r2, #6
 8007f78:	f7f8 f96a 	bl	8000250 <memchr>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d03f      	beq.n	8008000 <_vfiprintf_r+0x22c>
 8007f80:	4b29      	ldr	r3, [pc, #164]	; (8008028 <_vfiprintf_r+0x254>)
 8007f82:	bb1b      	cbnz	r3, 8007fcc <_vfiprintf_r+0x1f8>
 8007f84:	9b03      	ldr	r3, [sp, #12]
 8007f86:	3307      	adds	r3, #7
 8007f88:	f023 0307 	bic.w	r3, r3, #7
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f92:	443b      	add	r3, r7
 8007f94:	9309      	str	r3, [sp, #36]	; 0x24
 8007f96:	e767      	b.n	8007e68 <_vfiprintf_r+0x94>
 8007f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	e7a5      	b.n	8007eee <_vfiprintf_r+0x11a>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	3401      	adds	r4, #1
 8007fa6:	9305      	str	r3, [sp, #20]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	f04f 0c0a 	mov.w	ip, #10
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fb4:	3a30      	subs	r2, #48	; 0x30
 8007fb6:	2a09      	cmp	r2, #9
 8007fb8:	d903      	bls.n	8007fc2 <_vfiprintf_r+0x1ee>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0c5      	beq.n	8007f4a <_vfiprintf_r+0x176>
 8007fbe:	9105      	str	r1, [sp, #20]
 8007fc0:	e7c3      	b.n	8007f4a <_vfiprintf_r+0x176>
 8007fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e7f0      	b.n	8007fae <_vfiprintf_r+0x1da>
 8007fcc:	ab03      	add	r3, sp, #12
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4b16      	ldr	r3, [pc, #88]	; (800802c <_vfiprintf_r+0x258>)
 8007fd4:	a904      	add	r1, sp, #16
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f3af 8000 	nop.w
 8007fdc:	4607      	mov	r7, r0
 8007fde:	1c78      	adds	r0, r7, #1
 8007fe0:	d1d6      	bne.n	8007f90 <_vfiprintf_r+0x1bc>
 8007fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe4:	07d9      	lsls	r1, r3, #31
 8007fe6:	d405      	bmi.n	8007ff4 <_vfiprintf_r+0x220>
 8007fe8:	89ab      	ldrh	r3, [r5, #12]
 8007fea:	059a      	lsls	r2, r3, #22
 8007fec:	d402      	bmi.n	8007ff4 <_vfiprintf_r+0x220>
 8007fee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ff0:	f7ff fad2 	bl	8007598 <__retarget_lock_release_recursive>
 8007ff4:	89ab      	ldrh	r3, [r5, #12]
 8007ff6:	065b      	lsls	r3, r3, #25
 8007ff8:	f53f af12 	bmi.w	8007e20 <_vfiprintf_r+0x4c>
 8007ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ffe:	e711      	b.n	8007e24 <_vfiprintf_r+0x50>
 8008000:	ab03      	add	r3, sp, #12
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	462a      	mov	r2, r5
 8008006:	4b09      	ldr	r3, [pc, #36]	; (800802c <_vfiprintf_r+0x258>)
 8008008:	a904      	add	r1, sp, #16
 800800a:	4630      	mov	r0, r6
 800800c:	f000 f880 	bl	8008110 <_printf_i>
 8008010:	e7e4      	b.n	8007fdc <_vfiprintf_r+0x208>
 8008012:	bf00      	nop
 8008014:	08008490 	.word	0x08008490
 8008018:	080084b0 	.word	0x080084b0
 800801c:	08008470 	.word	0x08008470
 8008020:	080084d4 	.word	0x080084d4
 8008024:	080084de 	.word	0x080084de
 8008028:	00000000 	.word	0x00000000
 800802c:	08007daf 	.word	0x08007daf
 8008030:	080084da 	.word	0x080084da

08008034 <_printf_common>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	4616      	mov	r6, r2
 800803a:	4699      	mov	r9, r3
 800803c:	688a      	ldr	r2, [r1, #8]
 800803e:	690b      	ldr	r3, [r1, #16]
 8008040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008044:	4293      	cmp	r3, r2
 8008046:	bfb8      	it	lt
 8008048:	4613      	movlt	r3, r2
 800804a:	6033      	str	r3, [r6, #0]
 800804c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008050:	4607      	mov	r7, r0
 8008052:	460c      	mov	r4, r1
 8008054:	b10a      	cbz	r2, 800805a <_printf_common+0x26>
 8008056:	3301      	adds	r3, #1
 8008058:	6033      	str	r3, [r6, #0]
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	0699      	lsls	r1, r3, #26
 800805e:	bf42      	ittt	mi
 8008060:	6833      	ldrmi	r3, [r6, #0]
 8008062:	3302      	addmi	r3, #2
 8008064:	6033      	strmi	r3, [r6, #0]
 8008066:	6825      	ldr	r5, [r4, #0]
 8008068:	f015 0506 	ands.w	r5, r5, #6
 800806c:	d106      	bne.n	800807c <_printf_common+0x48>
 800806e:	f104 0a19 	add.w	sl, r4, #25
 8008072:	68e3      	ldr	r3, [r4, #12]
 8008074:	6832      	ldr	r2, [r6, #0]
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	42ab      	cmp	r3, r5
 800807a:	dc26      	bgt.n	80080ca <_printf_common+0x96>
 800807c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008080:	1e13      	subs	r3, r2, #0
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	bf18      	it	ne
 8008086:	2301      	movne	r3, #1
 8008088:	0692      	lsls	r2, r2, #26
 800808a:	d42b      	bmi.n	80080e4 <_printf_common+0xb0>
 800808c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008090:	4649      	mov	r1, r9
 8008092:	4638      	mov	r0, r7
 8008094:	47c0      	blx	r8
 8008096:	3001      	adds	r0, #1
 8008098:	d01e      	beq.n	80080d8 <_printf_common+0xa4>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	68e5      	ldr	r5, [r4, #12]
 800809e:	6832      	ldr	r2, [r6, #0]
 80080a0:	f003 0306 	and.w	r3, r3, #6
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	bf08      	it	eq
 80080a8:	1aad      	subeq	r5, r5, r2
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	6922      	ldr	r2, [r4, #16]
 80080ae:	bf0c      	ite	eq
 80080b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080b4:	2500      	movne	r5, #0
 80080b6:	4293      	cmp	r3, r2
 80080b8:	bfc4      	itt	gt
 80080ba:	1a9b      	subgt	r3, r3, r2
 80080bc:	18ed      	addgt	r5, r5, r3
 80080be:	2600      	movs	r6, #0
 80080c0:	341a      	adds	r4, #26
 80080c2:	42b5      	cmp	r5, r6
 80080c4:	d11a      	bne.n	80080fc <_printf_common+0xc8>
 80080c6:	2000      	movs	r0, #0
 80080c8:	e008      	b.n	80080dc <_printf_common+0xa8>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4652      	mov	r2, sl
 80080ce:	4649      	mov	r1, r9
 80080d0:	4638      	mov	r0, r7
 80080d2:	47c0      	blx	r8
 80080d4:	3001      	adds	r0, #1
 80080d6:	d103      	bne.n	80080e0 <_printf_common+0xac>
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	3501      	adds	r5, #1
 80080e2:	e7c6      	b.n	8008072 <_printf_common+0x3e>
 80080e4:	18e1      	adds	r1, r4, r3
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	2030      	movs	r0, #48	; 0x30
 80080ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080ee:	4422      	add	r2, r4
 80080f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080f8:	3302      	adds	r3, #2
 80080fa:	e7c7      	b.n	800808c <_printf_common+0x58>
 80080fc:	2301      	movs	r3, #1
 80080fe:	4622      	mov	r2, r4
 8008100:	4649      	mov	r1, r9
 8008102:	4638      	mov	r0, r7
 8008104:	47c0      	blx	r8
 8008106:	3001      	adds	r0, #1
 8008108:	d0e6      	beq.n	80080d8 <_printf_common+0xa4>
 800810a:	3601      	adds	r6, #1
 800810c:	e7d9      	b.n	80080c2 <_printf_common+0x8e>
	...

08008110 <_printf_i>:
 8008110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	7e0f      	ldrb	r7, [r1, #24]
 8008116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008118:	2f78      	cmp	r7, #120	; 0x78
 800811a:	4691      	mov	r9, r2
 800811c:	4680      	mov	r8, r0
 800811e:	460c      	mov	r4, r1
 8008120:	469a      	mov	sl, r3
 8008122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008126:	d807      	bhi.n	8008138 <_printf_i+0x28>
 8008128:	2f62      	cmp	r7, #98	; 0x62
 800812a:	d80a      	bhi.n	8008142 <_printf_i+0x32>
 800812c:	2f00      	cmp	r7, #0
 800812e:	f000 80d8 	beq.w	80082e2 <_printf_i+0x1d2>
 8008132:	2f58      	cmp	r7, #88	; 0x58
 8008134:	f000 80a3 	beq.w	800827e <_printf_i+0x16e>
 8008138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800813c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008140:	e03a      	b.n	80081b8 <_printf_i+0xa8>
 8008142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008146:	2b15      	cmp	r3, #21
 8008148:	d8f6      	bhi.n	8008138 <_printf_i+0x28>
 800814a:	a101      	add	r1, pc, #4	; (adr r1, 8008150 <_printf_i+0x40>)
 800814c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008150:	080081a9 	.word	0x080081a9
 8008154:	080081bd 	.word	0x080081bd
 8008158:	08008139 	.word	0x08008139
 800815c:	08008139 	.word	0x08008139
 8008160:	08008139 	.word	0x08008139
 8008164:	08008139 	.word	0x08008139
 8008168:	080081bd 	.word	0x080081bd
 800816c:	08008139 	.word	0x08008139
 8008170:	08008139 	.word	0x08008139
 8008174:	08008139 	.word	0x08008139
 8008178:	08008139 	.word	0x08008139
 800817c:	080082c9 	.word	0x080082c9
 8008180:	080081ed 	.word	0x080081ed
 8008184:	080082ab 	.word	0x080082ab
 8008188:	08008139 	.word	0x08008139
 800818c:	08008139 	.word	0x08008139
 8008190:	080082eb 	.word	0x080082eb
 8008194:	08008139 	.word	0x08008139
 8008198:	080081ed 	.word	0x080081ed
 800819c:	08008139 	.word	0x08008139
 80081a0:	08008139 	.word	0x08008139
 80081a4:	080082b3 	.word	0x080082b3
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	1d1a      	adds	r2, r3, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	602a      	str	r2, [r5, #0]
 80081b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081b8:	2301      	movs	r3, #1
 80081ba:	e0a3      	b.n	8008304 <_printf_i+0x1f4>
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	6829      	ldr	r1, [r5, #0]
 80081c0:	0606      	lsls	r6, r0, #24
 80081c2:	f101 0304 	add.w	r3, r1, #4
 80081c6:	d50a      	bpl.n	80081de <_printf_i+0xce>
 80081c8:	680e      	ldr	r6, [r1, #0]
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	2e00      	cmp	r6, #0
 80081ce:	da03      	bge.n	80081d8 <_printf_i+0xc8>
 80081d0:	232d      	movs	r3, #45	; 0x2d
 80081d2:	4276      	negs	r6, r6
 80081d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d8:	485e      	ldr	r0, [pc, #376]	; (8008354 <_printf_i+0x244>)
 80081da:	230a      	movs	r3, #10
 80081dc:	e019      	b.n	8008212 <_printf_i+0x102>
 80081de:	680e      	ldr	r6, [r1, #0]
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081e6:	bf18      	it	ne
 80081e8:	b236      	sxthne	r6, r6
 80081ea:	e7ef      	b.n	80081cc <_printf_i+0xbc>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	6820      	ldr	r0, [r4, #0]
 80081f0:	1d19      	adds	r1, r3, #4
 80081f2:	6029      	str	r1, [r5, #0]
 80081f4:	0601      	lsls	r1, r0, #24
 80081f6:	d501      	bpl.n	80081fc <_printf_i+0xec>
 80081f8:	681e      	ldr	r6, [r3, #0]
 80081fa:	e002      	b.n	8008202 <_printf_i+0xf2>
 80081fc:	0646      	lsls	r6, r0, #25
 80081fe:	d5fb      	bpl.n	80081f8 <_printf_i+0xe8>
 8008200:	881e      	ldrh	r6, [r3, #0]
 8008202:	4854      	ldr	r0, [pc, #336]	; (8008354 <_printf_i+0x244>)
 8008204:	2f6f      	cmp	r7, #111	; 0x6f
 8008206:	bf0c      	ite	eq
 8008208:	2308      	moveq	r3, #8
 800820a:	230a      	movne	r3, #10
 800820c:	2100      	movs	r1, #0
 800820e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008212:	6865      	ldr	r5, [r4, #4]
 8008214:	60a5      	str	r5, [r4, #8]
 8008216:	2d00      	cmp	r5, #0
 8008218:	bfa2      	ittt	ge
 800821a:	6821      	ldrge	r1, [r4, #0]
 800821c:	f021 0104 	bicge.w	r1, r1, #4
 8008220:	6021      	strge	r1, [r4, #0]
 8008222:	b90e      	cbnz	r6, 8008228 <_printf_i+0x118>
 8008224:	2d00      	cmp	r5, #0
 8008226:	d04d      	beq.n	80082c4 <_printf_i+0x1b4>
 8008228:	4615      	mov	r5, r2
 800822a:	fbb6 f1f3 	udiv	r1, r6, r3
 800822e:	fb03 6711 	mls	r7, r3, r1, r6
 8008232:	5dc7      	ldrb	r7, [r0, r7]
 8008234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008238:	4637      	mov	r7, r6
 800823a:	42bb      	cmp	r3, r7
 800823c:	460e      	mov	r6, r1
 800823e:	d9f4      	bls.n	800822a <_printf_i+0x11a>
 8008240:	2b08      	cmp	r3, #8
 8008242:	d10b      	bne.n	800825c <_printf_i+0x14c>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	07de      	lsls	r6, r3, #31
 8008248:	d508      	bpl.n	800825c <_printf_i+0x14c>
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	6861      	ldr	r1, [r4, #4]
 800824e:	4299      	cmp	r1, r3
 8008250:	bfde      	ittt	le
 8008252:	2330      	movle	r3, #48	; 0x30
 8008254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800825c:	1b52      	subs	r2, r2, r5
 800825e:	6122      	str	r2, [r4, #16]
 8008260:	f8cd a000 	str.w	sl, [sp]
 8008264:	464b      	mov	r3, r9
 8008266:	aa03      	add	r2, sp, #12
 8008268:	4621      	mov	r1, r4
 800826a:	4640      	mov	r0, r8
 800826c:	f7ff fee2 	bl	8008034 <_printf_common>
 8008270:	3001      	adds	r0, #1
 8008272:	d14c      	bne.n	800830e <_printf_i+0x1fe>
 8008274:	f04f 30ff 	mov.w	r0, #4294967295
 8008278:	b004      	add	sp, #16
 800827a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827e:	4835      	ldr	r0, [pc, #212]	; (8008354 <_printf_i+0x244>)
 8008280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008284:	6829      	ldr	r1, [r5, #0]
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	f851 6b04 	ldr.w	r6, [r1], #4
 800828c:	6029      	str	r1, [r5, #0]
 800828e:	061d      	lsls	r5, r3, #24
 8008290:	d514      	bpl.n	80082bc <_printf_i+0x1ac>
 8008292:	07df      	lsls	r7, r3, #31
 8008294:	bf44      	itt	mi
 8008296:	f043 0320 	orrmi.w	r3, r3, #32
 800829a:	6023      	strmi	r3, [r4, #0]
 800829c:	b91e      	cbnz	r6, 80082a6 <_printf_i+0x196>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	f023 0320 	bic.w	r3, r3, #32
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	2310      	movs	r3, #16
 80082a8:	e7b0      	b.n	800820c <_printf_i+0xfc>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	f043 0320 	orr.w	r3, r3, #32
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	2378      	movs	r3, #120	; 0x78
 80082b4:	4828      	ldr	r0, [pc, #160]	; (8008358 <_printf_i+0x248>)
 80082b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082ba:	e7e3      	b.n	8008284 <_printf_i+0x174>
 80082bc:	0659      	lsls	r1, r3, #25
 80082be:	bf48      	it	mi
 80082c0:	b2b6      	uxthmi	r6, r6
 80082c2:	e7e6      	b.n	8008292 <_printf_i+0x182>
 80082c4:	4615      	mov	r5, r2
 80082c6:	e7bb      	b.n	8008240 <_printf_i+0x130>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	6826      	ldr	r6, [r4, #0]
 80082cc:	6961      	ldr	r1, [r4, #20]
 80082ce:	1d18      	adds	r0, r3, #4
 80082d0:	6028      	str	r0, [r5, #0]
 80082d2:	0635      	lsls	r5, r6, #24
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	d501      	bpl.n	80082dc <_printf_i+0x1cc>
 80082d8:	6019      	str	r1, [r3, #0]
 80082da:	e002      	b.n	80082e2 <_printf_i+0x1d2>
 80082dc:	0670      	lsls	r0, r6, #25
 80082de:	d5fb      	bpl.n	80082d8 <_printf_i+0x1c8>
 80082e0:	8019      	strh	r1, [r3, #0]
 80082e2:	2300      	movs	r3, #0
 80082e4:	6123      	str	r3, [r4, #16]
 80082e6:	4615      	mov	r5, r2
 80082e8:	e7ba      	b.n	8008260 <_printf_i+0x150>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	1d1a      	adds	r2, r3, #4
 80082ee:	602a      	str	r2, [r5, #0]
 80082f0:	681d      	ldr	r5, [r3, #0]
 80082f2:	6862      	ldr	r2, [r4, #4]
 80082f4:	2100      	movs	r1, #0
 80082f6:	4628      	mov	r0, r5
 80082f8:	f7f7 ffaa 	bl	8000250 <memchr>
 80082fc:	b108      	cbz	r0, 8008302 <_printf_i+0x1f2>
 80082fe:	1b40      	subs	r0, r0, r5
 8008300:	6060      	str	r0, [r4, #4]
 8008302:	6863      	ldr	r3, [r4, #4]
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	2300      	movs	r3, #0
 8008308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800830c:	e7a8      	b.n	8008260 <_printf_i+0x150>
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	462a      	mov	r2, r5
 8008312:	4649      	mov	r1, r9
 8008314:	4640      	mov	r0, r8
 8008316:	47d0      	blx	sl
 8008318:	3001      	adds	r0, #1
 800831a:	d0ab      	beq.n	8008274 <_printf_i+0x164>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	079b      	lsls	r3, r3, #30
 8008320:	d413      	bmi.n	800834a <_printf_i+0x23a>
 8008322:	68e0      	ldr	r0, [r4, #12]
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	4298      	cmp	r0, r3
 8008328:	bfb8      	it	lt
 800832a:	4618      	movlt	r0, r3
 800832c:	e7a4      	b.n	8008278 <_printf_i+0x168>
 800832e:	2301      	movs	r3, #1
 8008330:	4632      	mov	r2, r6
 8008332:	4649      	mov	r1, r9
 8008334:	4640      	mov	r0, r8
 8008336:	47d0      	blx	sl
 8008338:	3001      	adds	r0, #1
 800833a:	d09b      	beq.n	8008274 <_printf_i+0x164>
 800833c:	3501      	adds	r5, #1
 800833e:	68e3      	ldr	r3, [r4, #12]
 8008340:	9903      	ldr	r1, [sp, #12]
 8008342:	1a5b      	subs	r3, r3, r1
 8008344:	42ab      	cmp	r3, r5
 8008346:	dcf2      	bgt.n	800832e <_printf_i+0x21e>
 8008348:	e7eb      	b.n	8008322 <_printf_i+0x212>
 800834a:	2500      	movs	r5, #0
 800834c:	f104 0619 	add.w	r6, r4, #25
 8008350:	e7f5      	b.n	800833e <_printf_i+0x22e>
 8008352:	bf00      	nop
 8008354:	080084e5 	.word	0x080084e5
 8008358:	080084f6 	.word	0x080084f6

0800835c <_read_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d07      	ldr	r5, [pc, #28]	; (800837c <_read_r+0x20>)
 8008360:	4604      	mov	r4, r0
 8008362:	4608      	mov	r0, r1
 8008364:	4611      	mov	r1, r2
 8008366:	2200      	movs	r2, #0
 8008368:	602a      	str	r2, [r5, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	f7fe fd8d 	bl	8006e8a <_read>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_read_r+0x1e>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_read_r+0x1e>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20000768 	.word	0x20000768

08008380 <_fstat_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d07      	ldr	r5, [pc, #28]	; (80083a0 <_fstat_r+0x20>)
 8008384:	2300      	movs	r3, #0
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	4611      	mov	r1, r2
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	f7fe fe5e 	bl	800704e <_fstat>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d102      	bne.n	800839c <_fstat_r+0x1c>
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	b103      	cbz	r3, 800839c <_fstat_r+0x1c>
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	bd38      	pop	{r3, r4, r5, pc}
 800839e:	bf00      	nop
 80083a0:	20000768 	.word	0x20000768

080083a4 <_isatty_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d06      	ldr	r5, [pc, #24]	; (80083c0 <_isatty_r+0x1c>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	4604      	mov	r4, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	602b      	str	r3, [r5, #0]
 80083b0:	f7fe ffb4 	bl	800731c <_isatty>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <_isatty_r+0x1a>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	b103      	cbz	r3, 80083be <_isatty_r+0x1a>
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	20000768 	.word	0x20000768

080083c4 <_init>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr

080083d0 <_fini>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr
