
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008764  08008764  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008764  08008764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800876c  0800876c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800876c  0800876c  0001876c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  2000007c  080087f0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  080087f0  00020788  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c41  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002715  00000000  00000000  00036ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00039400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b7f  00000000  00000000  0003bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181db  00000000  00000000  00065637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105910  00000000  00000000  0007d812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183122  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a0  00000000  00000000  00183174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	080085c8 	.word	0x080085c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	080085c8 	.word	0x080085c8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_GPIO_EXTI_Callback>:
int inputUser = 0;
int counter = 0;
int flag=0;
int freq;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af04      	add	r7, sp, #16
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1,&colum, 1, I2C_TIMEOUT);
 80005fe:	23c8      	movs	r3, #200	; 0xc8
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	2301      	movs	r3, #1
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	2227      	movs	r2, #39	; 0x27
 800060e:	217e      	movs	r1, #126	; 0x7e
 8000610:	483d      	ldr	r0, [pc, #244]	; (8000708 <HAL_GPIO_EXTI_Callback+0x114>)
 8000612:	f003 f847 	bl	80036a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1,&row, 1, I2C_TIMEOUT);
 8000616:	23c8      	movs	r3, #200	; 0xc8
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	2301      	movs	r3, #1
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2301      	movs	r3, #1
 8000624:	2228      	movs	r2, #40	; 0x28
 8000626:	217e      	movs	r1, #126	; 0x7e
 8000628:	4837      	ldr	r0, [pc, #220]	; (8000708 <HAL_GPIO_EXTI_Callback+0x114>)
 800062a:	f003 f83b 	bl	80036a4 <HAL_I2C_Mem_Read>
  printf("Interrupt on pin (%d).\n", GPIO_Pin);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	4619      	mov	r1, r3
 8000632:	4837      	ldr	r0, [pc, #220]	; (8000710 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000634:	f007 f950 	bl	80078d8 <iprintf>
  printf("colum.raw (%d)    row.raw (%d).\n", colum, row);
 8000638:	4b32      	ldr	r3, [pc, #200]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a33      	ldr	r2, [pc, #204]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 800063e:	6812      	ldr	r2, [r2, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	4834      	ldr	r0, [pc, #208]	; (8000714 <HAL_GPIO_EXTI_Callback+0x120>)
 8000644:	f007 f948 	bl	80078d8 <iprintf>
  colum = getIndex (colum);
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f875 	bl	800073c <getIndex>
 8000652:	4603      	mov	r3, r0
 8000654:	4a2b      	ldr	r2, [pc, #172]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 8000656:	6013      	str	r3, [r2, #0]
  row = getIndex(row);
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f86d 	bl	800073c <getIndex>
 8000662:	4603      	mov	r3, r0
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 8000666:	6013      	str	r3, [r2, #0]
  printf("colum (%d)    row (%d).\n", colum, row);
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4829      	ldr	r0, [pc, #164]	; (8000718 <HAL_GPIO_EXTI_Callback+0x124>)
 8000674:	f007 f930 	bl	80078d8 <iprintf>
  triggeredChar = keypadLayout[row][colum];
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <HAL_GPIO_EXTI_Callback+0x118>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <HAL_GPIO_EXTI_Callback+0x110>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4926      	ldr	r1, [pc, #152]	; (800071c <HAL_GPIO_EXTI_Callback+0x128>)
 8000682:	0092      	lsls	r2, r2, #2
 8000684:	440a      	add	r2, r1
 8000686:	4413      	add	r3, r2
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 800068c:	701a      	strb	r2, [r3, #0]

  if(flag == 1){
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <HAL_GPIO_EXTI_Callback+0x130>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d10c      	bne.n	80006b0 <HAL_GPIO_EXTI_Callback+0xbc>
	  freq = inputUser;
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <HAL_GPIO_EXTI_Callback+0x134>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a24      	ldr	r2, [pc, #144]	; (800072c <HAL_GPIO_EXTI_Callback+0x138>)
 800069c:	6013      	str	r3, [r2, #0]
	  inputUser = 0;
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <HAL_GPIO_EXTI_Callback+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
	  counter = 0;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <HAL_GPIO_EXTI_Callback+0x13c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
	  flag = 0;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <HAL_GPIO_EXTI_Callback+0x130>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
  }
	  if((triggeredChar <= '9') && (triggeredChar >= '0')){
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b39      	cmp	r3, #57	; 0x39
 80006b6:	d81a      	bhi.n	80006ee <HAL_GPIO_EXTI_Callback+0xfa>
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b2f      	cmp	r3, #47	; 0x2f
 80006be:	d916      	bls.n	80006ee <HAL_GPIO_EXTI_Callback+0xfa>
	  	 		  keypadFreq = (int)(triggeredChar - '0');
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3b30      	subs	r3, #48	; 0x30
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <HAL_GPIO_EXTI_Callback+0x140>)
 80006c8:	6013      	str	r3, [r2, #0]
	  	 		  inputUser = inputUser*(10^counter) + keypadFreq;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_GPIO_EXTI_Callback+0x13c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f083 030a 	eor.w	r3, r3, #10
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <HAL_GPIO_EXTI_Callback+0x134>)
 80006d4:	6812      	ldr	r2, [r2, #0]
 80006d6:	fb03 f202 	mul.w	r2, r3, r2
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_GPIO_EXTI_Callback+0x140>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	4a11      	ldr	r2, [pc, #68]	; (8000728 <HAL_GPIO_EXTI_Callback+0x134>)
 80006e2:	6013      	str	r3, [r2, #0]
	  	 		  counter++;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_GPIO_EXTI_Callback+0x13c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <HAL_GPIO_EXTI_Callback+0x13c>)
 80006ec:	6013      	str	r3, [r2, #0]
	  }
  printf("Triggered Char: %c \n\r ", triggeredChar);
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <HAL_GPIO_EXTI_Callback+0x144>)
 80006f6:	f007 f8ef 	bl	80078d8 <iprintf>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200006a8 	.word	0x200006a8
 8000708:	200000e0 	.word	0x200000e0
 800070c:	200006ac 	.word	0x200006ac
 8000710:	080085f0 	.word	0x080085f0
 8000714:	08008608 	.word	0x08008608
 8000718:	0800862c 	.word	0x0800862c
 800071c:	08008688 	.word	0x08008688
 8000720:	200006b0 	.word	0x200006b0
 8000724:	200006bc 	.word	0x200006bc
 8000728:	200006b4 	.word	0x200006b4
 800072c:	200006c0 	.word	0x200006c0
 8000730:	200006b8 	.word	0x200006b8
 8000734:	20000000 	.word	0x20000000
 8000738:	08008648 	.word	0x08008648

0800073c <getIndex>:

int getIndex(int value){
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  switch (value){
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3bf7      	subs	r3, #247	; 0xf7
 8000748:	2b07      	cmp	r3, #7
 800074a:	d81b      	bhi.n	8000784 <getIndex+0x48>
 800074c:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <getIndex+0x18>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000775 	.word	0x08000775
 8000758:	08000785 	.word	0x08000785
 800075c:	08000785 	.word	0x08000785
 8000760:	08000785 	.word	0x08000785
 8000764:	08000779 	.word	0x08000779
 8000768:	08000785 	.word	0x08000785
 800076c:	0800077d 	.word	0x0800077d
 8000770:	08000781 	.word	0x08000781
    case 247:
      return 3;
 8000774:	2303      	movs	r3, #3
 8000776:	e006      	b.n	8000786 <getIndex+0x4a>
    case 251:
      return 2;
 8000778:	2302      	movs	r3, #2
 800077a:	e004      	b.n	8000786 <getIndex+0x4a>
    case 253:
      return 1;
 800077c:	2301      	movs	r3, #1
 800077e:	e002      	b.n	8000786 <getIndex+0x4a>
    case 254:
      return 0;
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <getIndex+0x4a>
    default:
    	return 99;
 8000784:	2363      	movs	r3, #99	; 0x63
  }
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	0000      	movs	r0, r0
	...

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f001 ff8c 	bl	80026ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 fa5d 	bl	8000c60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initialise_monitor_handles();
 80007a6:	f006 fe5b 	bl	8007460 <initialise_monitor_handles>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f001 f871 	bl	8001890 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007ae:	f001 f83f 	bl	8001830 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80007b2:	f000 fac7 	bl	8000d44 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007b6:	f000 fb17 	bl	8000de8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007ba:	f000 fb55 	bl	8000e68 <MX_I2C2_Init>
  MX_SPI1_Init();
 80007be:	f000 fb93 	bl	8000ee8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80007c2:	f000 fbcf 	bl	8000f64 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007c6:	f000 fc9d 	bl	8001104 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007ca:	f000 fd35 	bl	8001238 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007ce:	f000 fd89 	bl	80012e4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007d2:	f000 fddd 	bl	8001390 <MX_TIM5_Init>
  MX_TIM8_Init();
 80007d6:	f000 fe53 	bl	8001480 <MX_TIM8_Init>
  MX_UART4_Init();
 80007da:	f000 ff69 	bl	80016b0 <MX_UART4_Init>
  MX_UART5_Init();
 80007de:	f000 ff97 	bl	8001710 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80007e2:	f000 ffc5 	bl	8001770 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007e6:	f000 fff3 	bl	80017d0 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 80007ea:	f000 ff1b 	bl	8001624 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2110      	movs	r1, #16
 80007f2:	48bb      	ldr	r0, [pc, #748]	; (8000ae0 <main+0x348>)
 80007f4:	f002 fd66 	bl	80032c4 <HAL_GPIO_WritePin>

  /* Disable EXTI4_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f002 fb9c 	bl	8002f36 <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80007fe:	2312      	movs	r3, #18
 8000800:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000802:	23c8      	movs	r3, #200	; 0xc8
 8000804:	9302      	str	r3, [sp, #8]
 8000806:	2301      	movs	r3, #1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	1dbb      	adds	r3, r7, #6
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2301      	movs	r3, #1
 8000810:	227d      	movs	r2, #125	; 0x7d
 8000812:	217e      	movs	r1, #126	; 0x7e
 8000814:	48b3      	ldr	r0, [pc, #716]	; (8000ae4 <main+0x34c>)
 8000816:	f002 fe31 	bl	800347c <HAL_I2C_Mem_Write>
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d004      	beq.n	800082e <main+0x96>
    printf("I2C communication error (%X).\n", status);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4619      	mov	r1, r3
 8000828:	48af      	ldr	r0, [pc, #700]	; (8000ae8 <main+0x350>)
 800082a:	f007 f855 	bl	80078d8 <iprintf>

  data = 0x34;
 800082e:	2334      	movs	r3, #52	; 0x34
 8000830:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000832:	23c8      	movs	r3, #200	; 0xc8
 8000834:	9302      	str	r3, [sp, #8]
 8000836:	2301      	movs	r3, #1
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	1dbb      	adds	r3, r7, #6
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	227d      	movs	r2, #125	; 0x7d
 8000842:	217e      	movs	r1, #126	; 0x7e
 8000844:	48a7      	ldr	r0, [pc, #668]	; (8000ae4 <main+0x34c>)
 8000846:	f002 fe19 	bl	800347c <HAL_I2C_Mem_Write>
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d004      	beq.n	800085e <main+0xc6>
    printf("I2C communication error (%X).\n", status);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4619      	mov	r1, r3
 8000858:	48a3      	ldr	r0, [pc, #652]	; (8000ae8 <main+0x350>)
 800085a:	f007 f83d 	bl	80078d8 <iprintf>

  HAL_Delay(100);
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f001 ff88 	bl	8002774 <HAL_Delay>

  /* Set KeyPad scanning engine */

  /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
  data = 0x40;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 8000868:	23c8      	movs	r3, #200	; 0xc8
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	2301      	movs	r3, #1
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	1dbb      	adds	r3, r7, #6
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	221e      	movs	r2, #30
 8000878:	217e      	movs	r1, #126	; 0x7e
 800087a:	489a      	ldr	r0, [pc, #616]	; (8000ae4 <main+0x34c>)
 800087c:	f002 fdfe 	bl	800347c <HAL_I2C_Mem_Write>
 8000880:	4603      	mov	r3, r0
 8000882:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d004      	beq.n	8000894 <main+0xfc>
    printf("I2C communication error (%X).\n", status);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4619      	mov	r1, r3
 800088e:	4896      	ldr	r0, [pc, #600]	; (8000ae8 <main+0x350>)
 8000890:	f007 f822 	bl	80078d8 <iprintf>

  /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
  data = 0xF0;
 8000894:	23f0      	movs	r3, #240	; 0xf0
 8000896:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000898:	23c8      	movs	r3, #200	; 0xc8
 800089a:	9302      	str	r3, [sp, #8]
 800089c:	2301      	movs	r3, #1
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	220f      	movs	r2, #15
 80008a8:	217e      	movs	r1, #126	; 0x7e
 80008aa:	488e      	ldr	r0, [pc, #568]	; (8000ae4 <main+0x34c>)
 80008ac:	f002 fde6 	bl	800347c <HAL_I2C_Mem_Write>
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d004      	beq.n	80008c4 <main+0x12c>
    printf("I2C communication error (%X).\n", status);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4619      	mov	r1, r3
 80008be:	488a      	ldr	r0, [pc, #552]	; (8000ae8 <main+0x350>)
 80008c0:	f007 f80a 	bl	80078d8 <iprintf>

  /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
  data = 0x0F;
 80008c4:	230f      	movs	r3, #15
 80008c6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 80008c8:	23c8      	movs	r3, #200	; 0xc8
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	2301      	movs	r3, #1
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	1dbb      	adds	r3, r7, #6
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	220e      	movs	r2, #14
 80008d8:	217e      	movs	r1, #126	; 0x7e
 80008da:	4882      	ldr	r0, [pc, #520]	; (8000ae4 <main+0x34c>)
 80008dc:	f002 fdce 	bl	800347c <HAL_I2C_Mem_Write>
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <main+0x15c>
    printf("I2C communication error (%X).\n", status);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4619      	mov	r1, r3
 80008ee:	487e      	ldr	r0, [pc, #504]	; (8000ae8 <main+0x350>)
 80008f0:	f006 fff2 	bl	80078d8 <iprintf>

  /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
  data = 0x0F;
 80008f4:	230f      	movs	r3, #15
 80008f6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 80008f8:	23c8      	movs	r3, #200	; 0xc8
 80008fa:	9302      	str	r3, [sp, #8]
 80008fc:	2301      	movs	r3, #1
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	1dbb      	adds	r3, r7, #6
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	220b      	movs	r2, #11
 8000908:	217e      	movs	r1, #126	; 0x7e
 800090a:	4876      	ldr	r0, [pc, #472]	; (8000ae4 <main+0x34c>)
 800090c:	f002 fdb6 	bl	800347c <HAL_I2C_Mem_Write>
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d004      	beq.n	8000924 <main+0x18c>
    printf("I2C communication error (%X).\n", status);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4619      	mov	r1, r3
 800091e:	4872      	ldr	r0, [pc, #456]	; (8000ae8 <main+0x350>)
 8000920:	f006 ffda 	bl	80078d8 <iprintf>

  /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
  data = 0x0F;
 8000924:	230f      	movs	r3, #15
 8000926:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 8000928:	23c8      	movs	r3, #200	; 0xc8
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	2301      	movs	r3, #1
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	2206      	movs	r2, #6
 8000938:	217e      	movs	r1, #126	; 0x7e
 800093a:	486a      	ldr	r0, [pc, #424]	; (8000ae4 <main+0x34c>)
 800093c:	f002 fd9e 	bl	800347c <HAL_I2C_Mem_Write>
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <main+0x1bc>
    printf("I2C communication error (%X).\n", status);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4619      	mov	r1, r3
 800094e:	4866      	ldr	r0, [pc, #408]	; (8000ae8 <main+0x350>)
 8000950:	f006 ffc2 	bl	80078d8 <iprintf>

  /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
  data = 0x0F;
 8000954:	230f      	movs	r3, #15
 8000956:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 8000958:	23c8      	movs	r3, #200	; 0xc8
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2223      	movs	r2, #35	; 0x23
 8000968:	217e      	movs	r1, #126	; 0x7e
 800096a:	485e      	ldr	r0, [pc, #376]	; (8000ae4 <main+0x34c>)
 800096c:	f002 fd86 	bl	800347c <HAL_I2C_Mem_Write>
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <main+0x1ec>
    printf("I2C communication error (%X).\n", status);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4619      	mov	r1, r3
 800097e:	485a      	ldr	r0, [pc, #360]	; (8000ae8 <main+0x350>)
 8000980:	f006 ffaa 	bl	80078d8 <iprintf>

  /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
  data = 0x05;
 8000984:	2305      	movs	r3, #5
 8000986:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8000988:	23c8      	movs	r3, #200	; 0xc8
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2301      	movs	r3, #1
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	1dbb      	adds	r3, r7, #6
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2301      	movs	r3, #1
 8000996:	2222      	movs	r2, #34	; 0x22
 8000998:	217e      	movs	r1, #126	; 0x7e
 800099a:	4852      	ldr	r0, [pc, #328]	; (8000ae4 <main+0x34c>)
 800099c:	f002 fd6e 	bl	800347c <HAL_I2C_Mem_Write>
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <main+0x21c>
    printf("I2C communication error (%X).\n", status);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4619      	mov	r1, r3
 80009ae:	484e      	ldr	r0, [pc, #312]	; (8000ae8 <main+0x350>)
 80009b0:	f006 ff92 	bl	80078d8 <iprintf>

  /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
  data = 0x7D;
 80009b4:	237d      	movs	r3, #125	; 0x7d
 80009b6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 80009b8:	23c8      	movs	r3, #200	; 0xc8
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2301      	movs	r3, #1
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2301      	movs	r3, #1
 80009c6:	2225      	movs	r2, #37	; 0x25
 80009c8:	217e      	movs	r1, #126	; 0x7e
 80009ca:	4846      	ldr	r0, [pc, #280]	; (8000ae4 <main+0x34c>)
 80009cc:	f002 fd56 	bl	800347c <HAL_I2C_Mem_Write>
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d004      	beq.n	80009e4 <main+0x24c>
    printf("I2C communication error (%X).\n", status);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4619      	mov	r1, r3
 80009de:	4842      	ldr	r0, [pc, #264]	; (8000ae8 <main+0x350>)
 80009e0:	f006 ff7a 	bl	80078d8 <iprintf>

  /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
  data = 0x1B;
 80009e4:	231b      	movs	r3, #27
 80009e6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 80009e8:	23c8      	movs	r3, #200	; 0xc8
 80009ea:	9302      	str	r3, [sp, #8]
 80009ec:	2301      	movs	r3, #1
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2301      	movs	r3, #1
 80009f6:	2226      	movs	r2, #38	; 0x26
 80009f8:	217e      	movs	r1, #126	; 0x7e
 80009fa:	483a      	ldr	r0, [pc, #232]	; (8000ae4 <main+0x34c>)
 80009fc:	f002 fd3e 	bl	800347c <HAL_I2C_Mem_Write>
 8000a00:	4603      	mov	r3, r0
 8000a02:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <main+0x27c>
    printf("I2C communication error (%X).\n", status);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <main+0x350>)
 8000a10:	f006 ff62 	bl	80078d8 <iprintf>

  /* Enable EXTI4_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000a14:	2064      	movs	r0, #100	; 0x64
 8000a16:	f001 fead 	bl	8002774 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f002 fa7d 	bl	8002f1a <HAL_NVIC_EnableIRQ>

  /* Disable EXTI2_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000a20:	2008      	movs	r0, #8
 8000a22:	f002 fa88 	bl	8002f36 <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 8000a26:	2312      	movs	r3, #18
 8000a28:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000a2a:	23c8      	movs	r3, #200	; 0xc8
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	1dbb      	adds	r3, r7, #6
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2301      	movs	r3, #1
 8000a38:	227d      	movs	r2, #125	; 0x7d
 8000a3a:	217c      	movs	r1, #124	; 0x7c
 8000a3c:	4829      	ldr	r0, [pc, #164]	; (8000ae4 <main+0x34c>)
 8000a3e:	f002 fd1d 	bl	800347c <HAL_I2C_Mem_Write>
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d004      	beq.n	8000a56 <main+0x2be>
    printf("I2C communication error (%X).\n", status);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <main+0x350>)
 8000a52:	f006 ff41 	bl	80078d8 <iprintf>

  data = 0x34;
 8000a56:	2334      	movs	r3, #52	; 0x34
 8000a58:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000a5a:	23c8      	movs	r3, #200	; 0xc8
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	1dbb      	adds	r3, r7, #6
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	227d      	movs	r2, #125	; 0x7d
 8000a6a:	217c      	movs	r1, #124	; 0x7c
 8000a6c:	481d      	ldr	r0, [pc, #116]	; (8000ae4 <main+0x34c>)
 8000a6e:	f002 fd05 	bl	800347c <HAL_I2C_Mem_Write>
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d004      	beq.n	8000a86 <main+0x2ee>
    printf("I2C communication error (%X).\n", status);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4819      	ldr	r0, [pc, #100]	; (8000ae8 <main+0x350>)
 8000a82:	f006 ff29 	bl	80078d8 <iprintf>

  HAL_Delay(100);
 8000a86:	2064      	movs	r0, #100	; 0x64
 8000a88:	f001 fe74 	bl	8002774 <HAL_Delay>

  /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000a8c:	23ff      	movs	r3, #255	; 0xff
 8000a8e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000a90:	23c8      	movs	r3, #200	; 0xc8
 8000a92:	9302      	str	r3, [sp, #8]
 8000a94:	2301      	movs	r3, #1
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	217c      	movs	r1, #124	; 0x7c
 8000aa2:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <main+0x34c>)
 8000aa4:	f002 fcea 	bl	800347c <HAL_I2C_Mem_Write>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d004      	beq.n	8000abc <main+0x324>
    printf("I2C communication error (%X).\n", status);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <main+0x350>)
 8000ab8:	f006 ff0e 	bl	80078d8 <iprintf>

  /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000abc:	23ff      	movs	r3, #255	; 0xff
 8000abe:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000ac0:	23c8      	movs	r3, #200	; 0xc8
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2301      	movs	r3, #1
 8000ace:	220e      	movs	r2, #14
 8000ad0:	217c      	movs	r1, #124	; 0x7c
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <main+0x34c>)
 8000ad4:	f002 fcd2 	bl	800347c <HAL_I2C_Mem_Write>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	e005      	b.n	8000aec <main+0x354>
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	200000e0 	.word	0x200000e0
 8000ae8:	08008660 	.word	0x08008660
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d004      	beq.n	8000afa <main+0x362>
    printf("I2C communication error (%X).\n", status);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	4619      	mov	r1, r3
 8000af4:	4852      	ldr	r0, [pc, #328]	; (8000c40 <main+0x4a8>)
 8000af6:	f006 feef 	bl	80078d8 <iprintf>

  /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
  data = 0x00;
 8000afa:	2300      	movs	r3, #0
 8000afc:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000afe:	23c8      	movs	r3, #200	; 0xc8
 8000b00:	9302      	str	r3, [sp, #8]
 8000b02:	2301      	movs	r3, #1
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	1dbb      	adds	r3, r7, #6
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	2213      	movs	r2, #19
 8000b0e:	217c      	movs	r1, #124	; 0x7c
 8000b10:	484c      	ldr	r0, [pc, #304]	; (8000c44 <main+0x4ac>)
 8000b12:	f002 fcb3 	bl	800347c <HAL_I2C_Mem_Write>
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d004      	beq.n	8000b2a <main+0x392>
    printf("I2C communication error (%X).\n", status);
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4619      	mov	r1, r3
 8000b24:	4846      	ldr	r0, [pc, #280]	; (8000c40 <main+0x4a8>)
 8000b26:	f006 fed7 	bl	80078d8 <iprintf>

  /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000b2a:	23aa      	movs	r3, #170	; 0xaa
 8000b2c:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000b2e:	23c8      	movs	r3, #200	; 0xc8
 8000b30:	9302      	str	r3, [sp, #8]
 8000b32:	2301      	movs	r3, #1
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	1dbb      	adds	r3, r7, #6
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	2216      	movs	r2, #22
 8000b3e:	217c      	movs	r1, #124	; 0x7c
 8000b40:	4840      	ldr	r0, [pc, #256]	; (8000c44 <main+0x4ac>)
 8000b42:	f002 fc9b 	bl	800347c <HAL_I2C_Mem_Write>
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d004      	beq.n	8000b5a <main+0x3c2>
    printf("I2C communication error (%X).\n", status);
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4619      	mov	r1, r3
 8000b54:	483a      	ldr	r0, [pc, #232]	; (8000c40 <main+0x4a8>)
 8000b56:	f006 febf 	bl	80078d8 <iprintf>

  /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000b5a:	23aa      	movs	r3, #170	; 0xaa
 8000b5c:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000b5e:	23c8      	movs	r3, #200	; 0xc8
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	2301      	movs	r3, #1
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2217      	movs	r2, #23
 8000b6e:	217c      	movs	r1, #124	; 0x7c
 8000b70:	4834      	ldr	r0, [pc, #208]	; (8000c44 <main+0x4ac>)
 8000b72:	f002 fc83 	bl	800347c <HAL_I2C_Mem_Write>
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d004      	beq.n	8000b8a <main+0x3f2>
    printf("I2C communication error (%X).\n", status);
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4619      	mov	r1, r3
 8000b84:	482e      	ldr	r0, [pc, #184]	; (8000c40 <main+0x4a8>)
 8000b86:	f006 fea7 	bl	80078d8 <iprintf>

  /* Enable EXTI2_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f001 fdf2 	bl	8002774 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b90:	2008      	movs	r0, #8
 8000b92:	f002 f9c2 	bl	8002f1a <HAL_NVIC_EnableIRQ>


  printf("Ready\n");
 8000b96:	482c      	ldr	r0, [pc, #176]	; (8000c48 <main+0x4b0>)
 8000b98:	f006 ff24 	bl	80079e4 <puts>

	  /*HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &lineData, 1, I2C_TIMEOUT);
	  findBinary(lineData);
	  printf("Decimal is: %d \n\r", lineData);
	  HAL_Delay(500);*/
	  if(triggeredChar == '#'){
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <main+0x4b4>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b23      	cmp	r3, #35	; 0x23
 8000ba2:	d124      	bne.n	8000bee <main+0x456>
		  flag = 1;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <main+0x4b8>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8000baa:	2120      	movs	r1, #32
 8000bac:	4829      	ldr	r0, [pc, #164]	; (8000c54 <main+0x4bc>)
 8000bae:	f002 fba2 	bl	80032f6 <HAL_GPIO_TogglePin>
		  if(inputUser != 0){
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <main+0x4c0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d014      	beq.n	8000be4 <main+0x44c>
			  HAL_Delay((1.0/inputUser)*1000);
 8000bba:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <main+0x4c0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bc6:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000bca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000bce:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000c38 <main+0x4a0>
 8000bd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bd6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bda:	ee17 0a90 	vmov	r0, s15
 8000bde:	f001 fdc9 	bl	8002774 <HAL_Delay>
 8000be2:	e7db      	b.n	8000b9c <main+0x404>
		  }
		  else{
			  HAL_Delay(1000);
 8000be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be8:	f001 fdc4 	bl	8002774 <HAL_Delay>
 8000bec:	e7d6      	b.n	8000b9c <main+0x404>
		  }
	  }
	  else{
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8000bee:	2120      	movs	r1, #32
 8000bf0:	4818      	ldr	r0, [pc, #96]	; (8000c54 <main+0x4bc>)
 8000bf2:	f002 fb80 	bl	80032f6 <HAL_GPIO_TogglePin>
		  if(freq != 0){
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <main+0x4c4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d014      	beq.n	8000c28 <main+0x490>
			  HAL_Delay((1.0/freq)*1000);
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <main+0x4c4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	ee07 3a90 	vmov	s15, r3
 8000c06:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c0a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000c0e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c12:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c38 <main+0x4a0>
 8000c16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1e:	ee17 0a90 	vmov	r0, s15
 8000c22:	f001 fda7 	bl	8002774 <HAL_Delay>
 8000c26:	e7b9      	b.n	8000b9c <main+0x404>
		  }
		  else{
			  HAL_Delay(1000);
 8000c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2c:	f001 fda2 	bl	8002774 <HAL_Delay>
	  if(triggeredChar == '#'){
 8000c30:	e7b4      	b.n	8000b9c <main+0x404>
 8000c32:	bf00      	nop
 8000c34:	f3af 8000 	nop.w
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	408f4000 	.word	0x408f4000
 8000c40:	08008660 	.word	0x08008660
 8000c44:	200000e0 	.word	0x200000e0
 8000c48:	08008680 	.word	0x08008680
 8000c4c:	200006b0 	.word	0x200006b0
 8000c50:	200006bc 	.word	0x200006bc
 8000c54:	40021000 	.word	0x40021000
 8000c58:	200006b4 	.word	0x200006b4
 8000c5c:	200006c0 	.word	0x200006c0

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b094      	sub	sp, #80	; 0x50
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2234      	movs	r2, #52	; 0x34
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f006 fd95 	bl	800779e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c84:	f003 f95a 	bl	8003f3c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <SystemClock_Config+0xdc>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a2b      	ldr	r2, [pc, #172]	; (8000d3c <SystemClock_Config+0xdc>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <SystemClock_Config+0xdc>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <SystemClock_Config+0xe0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca8:	4a25      	ldr	r2, [pc, #148]	; (8000d40 <SystemClock_Config+0xe0>)
 8000caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <SystemClock_Config+0xe0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000cd4:	2360      	movs	r3, #96	; 0x60
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 f987 	bl	8003ffc <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cf4:	f000 ff14 	bl	8001b20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cf8:	f003 f930 	bl	8003f5c <HAL_PWREx_EnableOverDrive>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d02:	f000 ff0d 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d06:	230f      	movs	r3, #15
 8000d08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	2103      	movs	r1, #3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fc18 	bl	8004558 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d2e:	f000 fef7 	bl	8001b20 <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3750      	adds	r7, #80	; 0x50
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40007000 	.word	0x40007000

08000d44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d58:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <MX_ADC1_Init+0x9c>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <MX_ADC1_Init+0xa0>)
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000da6:	f001 fd09 	bl	80027bc <HAL_ADC_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000db0:	f000 feb6 	bl	8001b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000db4:	2303      	movs	r3, #3
 8000db6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_ADC1_Init+0x98>)
 8000dc6:	f001 fd3d 	bl	8002844 <HAL_ADC_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dd0:	f000 fea6 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000098 	.word	0x20000098
 8000de0:	40012000 	.word	0x40012000
 8000de4:	0f000001 	.word	0x0f000001

08000de8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000dee:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <MX_I2C1_Init+0x78>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000df4:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <MX_I2C1_Init+0x7c>)
 8000df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e22:	480e      	ldr	r0, [pc, #56]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000e24:	f002 fa9a 	bl	800335c <HAL_I2C_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2e:	f000 fe77 	bl	8001b20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000e36:	f002 ffe9 	bl	8003e0c <HAL_I2CEx_ConfigAnalogFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 fe6e 	bl	8001b20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_I2C1_Init+0x74>)
 8000e48:	f003 f82b 	bl	8003ea2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 fe65 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000e0 	.word	0x200000e0
 8000e60:	40005400 	.word	0x40005400
 8000e64:	20303e5d 	.word	0x20303e5d

08000e68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_I2C2_Init+0x74>)
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <MX_I2C2_Init+0x78>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_I2C2_Init+0x74>)
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <MX_I2C2_Init+0x7c>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_I2C2_Init+0x74>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_I2C2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_I2C2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_I2C2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_I2C2_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_I2C2_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <MX_I2C2_Init+0x74>)
 8000ea4:	f002 fa5a 	bl	800335c <HAL_I2C_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eae:	f000 fe37 	bl	8001b20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4809      	ldr	r0, [pc, #36]	; (8000edc <MX_I2C2_Init+0x74>)
 8000eb6:	f002 ffa9 	bl	8003e0c <HAL_I2CEx_ConfigAnalogFilter>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ec0:	f000 fe2e 	bl	8001b20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_I2C2_Init+0x74>)
 8000ec8:	f002 ffeb 	bl	8003ea2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 fe25 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000134 	.word	0x20000134
 8000ee0:	40005800 	.word	0x40005800
 8000ee4:	20303e5d 	.word	0x20303e5d

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_SPI1_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f02:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f36:	2207      	movs	r2, #7
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f42:	2208      	movs	r2, #8
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_SPI1_Init+0x74>)
 8000f48:	f004 f954 	bl	80051f4 <HAL_SPI_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f52:	f000 fde5 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000188 	.word	0x20000188
 8000f60:	40013000 	.word	0x40013000

08000f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b09a      	sub	sp, #104	; 0x68
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	222c      	movs	r2, #44	; 0x2c
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f006 fbfd 	bl	800779e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa4:	4b55      	ldr	r3, [pc, #340]	; (80010fc <MX_TIM1_Init+0x198>)
 8000fa6:	4a56      	ldr	r2, [pc, #344]	; (8001100 <MX_TIM1_Init+0x19c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000faa:	4b54      	ldr	r3, [pc, #336]	; (80010fc <MX_TIM1_Init+0x198>)
 8000fac:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000fb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b52      	ldr	r3, [pc, #328]	; (80010fc <MX_TIM1_Init+0x198>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000fb8:	4b50      	ldr	r3, [pc, #320]	; (80010fc <MX_TIM1_Init+0x198>)
 8000fba:	22c8      	movs	r2, #200	; 0xc8
 8000fbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <MX_TIM1_Init+0x198>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fc4:	4b4d      	ldr	r3, [pc, #308]	; (80010fc <MX_TIM1_Init+0x198>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <MX_TIM1_Init+0x198>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd0:	484a      	ldr	r0, [pc, #296]	; (80010fc <MX_TIM1_Init+0x198>)
 8000fd2:	f004 f9ba 	bl	800534a <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fdc:	f000 fda0 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fe6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fea:	4619      	mov	r1, r3
 8000fec:	4843      	ldr	r0, [pc, #268]	; (80010fc <MX_TIM1_Init+0x198>)
 8000fee:	f004 fd11 	bl	8005a14 <HAL_TIM_ConfigClockSource>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ff8:	f000 fd92 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ffc:	483f      	ldr	r0, [pc, #252]	; (80010fc <MX_TIM1_Init+0x198>)
 8000ffe:	f004 f9fb 	bl	80053f8 <HAL_TIM_PWM_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001008:	f000 fd8a 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001018:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800101c:	4619      	mov	r1, r3
 800101e:	4837      	ldr	r0, [pc, #220]	; (80010fc <MX_TIM1_Init+0x198>)
 8001020:	f005 fa84 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800102a:	f000 fd79 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102e:	2360      	movs	r3, #96	; 0x60
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001036:	2300      	movs	r3, #0
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800103a:	2300      	movs	r3, #0
 800103c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	482a      	ldr	r0, [pc, #168]	; (80010fc <MX_TIM1_Init+0x198>)
 8001054:	f004 fbca 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800105e:	f000 fd5f 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001066:	2204      	movs	r2, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4824      	ldr	r0, [pc, #144]	; (80010fc <MX_TIM1_Init+0x198>)
 800106c:	f004 fbbe 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001076:	f000 fd53 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800107a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800107e:	2208      	movs	r2, #8
 8001080:	4619      	mov	r1, r3
 8001082:	481e      	ldr	r0, [pc, #120]	; (80010fc <MX_TIM1_Init+0x198>)
 8001084:	f004 fbb2 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800108e:	f000 fd47 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001096:	220c      	movs	r2, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4818      	ldr	r0, [pc, #96]	; (80010fc <MX_TIM1_Init+0x198>)
 800109c:	f004 fba6 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80010a6:	f000 fd3b 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_TIM1_Init+0x198>)
 80010e0:	f005 fab2 	bl	8006648 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80010ea:	f000 fd19 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <MX_TIM1_Init+0x198>)
 80010f0:	f000 ffbc 	bl	800206c <HAL_TIM_MspPostInit>

}
 80010f4:	bf00      	nop
 80010f6:	3768      	adds	r7, #104	; 0x68
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200001ec 	.word	0x200001ec
 8001100:	40010000 	.word	0x40010000

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b092      	sub	sp, #72	; 0x48
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001144:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <MX_TIM2_Init+0x130>)
 8001146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800114c:	4b39      	ldr	r3, [pc, #228]	; (8001234 <MX_TIM2_Init+0x130>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <MX_TIM2_Init+0x130>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001158:	4b36      	ldr	r3, [pc, #216]	; (8001234 <MX_TIM2_Init+0x130>)
 800115a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800115e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b34      	ldr	r3, [pc, #208]	; (8001234 <MX_TIM2_Init+0x130>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b33      	ldr	r3, [pc, #204]	; (8001234 <MX_TIM2_Init+0x130>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800116c:	4831      	ldr	r0, [pc, #196]	; (8001234 <MX_TIM2_Init+0x130>)
 800116e:	f004 f8ec 	bl	800534a <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001178:	f000 fcd2 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001180:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001182:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001186:	4619      	mov	r1, r3
 8001188:	482a      	ldr	r0, [pc, #168]	; (8001234 <MX_TIM2_Init+0x130>)
 800118a:	f004 fc43 	bl	8005a14 <HAL_TIM_ConfigClockSource>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001194:	f000 fcc4 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001198:	4826      	ldr	r0, [pc, #152]	; (8001234 <MX_TIM2_Init+0x130>)
 800119a:	f004 f92d 	bl	80053f8 <HAL_TIM_PWM_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80011a4:	f000 fcbc 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011a8:	4822      	ldr	r0, [pc, #136]	; (8001234 <MX_TIM2_Init+0x130>)
 80011aa:	f004 f97c 	bl	80054a6 <HAL_TIM_IC_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011b4:	f000 fcb4 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c4:	4619      	mov	r1, r3
 80011c6:	481b      	ldr	r0, [pc, #108]	; (8001234 <MX_TIM2_Init+0x130>)
 80011c8:	f005 f9b0 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80011d2:	f000 fca5 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d6:	2360      	movs	r3, #96	; 0x60
 80011d8:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	4811      	ldr	r0, [pc, #68]	; (8001234 <MX_TIM2_Init+0x130>)
 80011f0:	f004 fafc 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80011fa:	f000 fc91 	bl	8001b20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001202:	2301      	movs	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	2208      	movs	r2, #8
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM2_Init+0x130>)
 8001216:	f004 fa4d 	bl	80056b4 <HAL_TIM_IC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001220:	f000 fc7e 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM2_Init+0x130>)
 8001226:	f000 ff21 	bl	800206c <HAL_TIM_MspPostInit>

}
 800122a:	bf00      	nop
 800122c:	3748      	adds	r7, #72	; 0x48
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000238 	.word	0x20000238

08001238 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2224      	movs	r2, #36	; 0x24
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f006 faa9 	bl	800779e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_TIM3_Init+0xa4>)
 8001258:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <MX_TIM3_Init+0xa8>)
 800125a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_TIM3_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_TIM3_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_TIM3_Init+0xa4>)
 800126a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM3_Init+0xa4>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_TIM3_Init+0xa4>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800127c:	2301      	movs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001284:	2301      	movs	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001294:	2301      	movs	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_TIM3_Init+0xa4>)
 80012a8:	f004 f95e 	bl	8005568 <HAL_TIM_Encoder_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80012b2:	f000 fc35 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_TIM3_Init+0xa4>)
 80012c4:	f005 f932 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012ce:	f000 fc27 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3730      	adds	r7, #48	; 0x30
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000284 	.word	0x20000284
 80012e0:	40000400 	.word	0x40000400

080012e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2224      	movs	r2, #36	; 0x24
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 fa53 	bl	800779e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_TIM4_Init+0xa4>)
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <MX_TIM4_Init+0xa8>)
 8001306:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_TIM4_Init+0xa4>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM4_Init+0xa4>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_TIM4_Init+0xa4>)
 8001316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM4_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM4_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001328:	2301      	movs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001330:	2301      	movs	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001340:	2301      	movs	r3, #1
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM4_Init+0xa4>)
 8001354:	f004 f908 	bl	8005568 <HAL_TIM_Encoder_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800135e:	f000 fbdf 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM4_Init+0xa4>)
 8001370:	f005 f8dc 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800137a:	f000 fbd1 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3730      	adds	r7, #48	; 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200002d0 	.word	0x200002d0
 800138c:	40000800 	.word	0x40000800

08001390 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_TIM5_Init+0xe8>)
 80013c4:	4a2d      	ldr	r2, [pc, #180]	; (800147c <MX_TIM5_Init+0xec>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_TIM5_Init+0xe8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <MX_TIM5_Init+0xe8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <MX_TIM5_Init+0xe8>)
 80013d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b26      	ldr	r3, [pc, #152]	; (8001478 <MX_TIM5_Init+0xe8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <MX_TIM5_Init+0xe8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013e8:	4823      	ldr	r0, [pc, #140]	; (8001478 <MX_TIM5_Init+0xe8>)
 80013ea:	f003 ffae 	bl	800534a <HAL_TIM_Base_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80013f4:	f000 fb94 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001402:	4619      	mov	r1, r3
 8001404:	481c      	ldr	r0, [pc, #112]	; (8001478 <MX_TIM5_Init+0xe8>)
 8001406:	f004 fb05 	bl	8005a14 <HAL_TIM_ConfigClockSource>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001410:	f000 fb86 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001414:	4818      	ldr	r0, [pc, #96]	; (8001478 <MX_TIM5_Init+0xe8>)
 8001416:	f003 ffef 	bl	80053f8 <HAL_TIM_PWM_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001420:	f000 fb7e 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <MX_TIM5_Init+0xe8>)
 8001434:	f005 f87a 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800143e:	f000 fb6f 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <MX_TIM5_Init+0xe8>)
 800145a:	f004 f9c7 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001464:	f000 fb5c 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <MX_TIM5_Init+0xe8>)
 800146a:	f000 fdff 	bl	800206c <HAL_TIM_MspPostInit>

}
 800146e:	bf00      	nop
 8001470:	3738      	adds	r7, #56	; 0x38
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000031c 	.word	0x2000031c
 800147c:	40000c00 	.word	0x40000c00

08001480 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b09a      	sub	sp, #104	; 0x68
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
 80014b0:	615a      	str	r2, [r3, #20]
 80014b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	222c      	movs	r2, #44	; 0x2c
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f006 f96f 	bl	800779e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014c0:	4b56      	ldr	r3, [pc, #344]	; (800161c <MX_TIM8_Init+0x19c>)
 80014c2:	4a57      	ldr	r2, [pc, #348]	; (8001620 <MX_TIM8_Init+0x1a0>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80014c6:	4b55      	ldr	r3, [pc, #340]	; (800161c <MX_TIM8_Init+0x19c>)
 80014c8:	f240 32bf 	movw	r2, #959	; 0x3bf
 80014cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b53      	ldr	r3, [pc, #332]	; (800161c <MX_TIM8_Init+0x19c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 80014d4:	4b51      	ldr	r3, [pc, #324]	; (800161c <MX_TIM8_Init+0x19c>)
 80014d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b4f      	ldr	r3, [pc, #316]	; (800161c <MX_TIM8_Init+0x19c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014e2:	4b4e      	ldr	r3, [pc, #312]	; (800161c <MX_TIM8_Init+0x19c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b4c      	ldr	r3, [pc, #304]	; (800161c <MX_TIM8_Init+0x19c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014ee:	484b      	ldr	r0, [pc, #300]	; (800161c <MX_TIM8_Init+0x19c>)
 80014f0:	f003 ff2b 	bl	800534a <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80014fa:	f000 fb11 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001508:	4619      	mov	r1, r3
 800150a:	4844      	ldr	r0, [pc, #272]	; (800161c <MX_TIM8_Init+0x19c>)
 800150c:	f004 fa82 	bl	8005a14 <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001516:	f000 fb03 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800151a:	4840      	ldr	r0, [pc, #256]	; (800161c <MX_TIM8_Init+0x19c>)
 800151c:	f003 ff6c 	bl	80053f8 <HAL_TIM_PWM_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001526:	f000 fafb 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001536:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800153a:	4619      	mov	r1, r3
 800153c:	4837      	ldr	r0, [pc, #220]	; (800161c <MX_TIM8_Init+0x19c>)
 800153e:	f004 fff5 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001548:	f000 faea 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154c:	2360      	movs	r3, #96	; 0x60
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	482a      	ldr	r0, [pc, #168]	; (800161c <MX_TIM8_Init+0x19c>)
 8001572:	f004 f93b 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800157c:	f000 fad0 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001584:	2204      	movs	r2, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4824      	ldr	r0, [pc, #144]	; (800161c <MX_TIM8_Init+0x19c>)
 800158a:	f004 f92f 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001594:	f000 fac4 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800159c:	2208      	movs	r2, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	481e      	ldr	r0, [pc, #120]	; (800161c <MX_TIM8_Init+0x19c>)
 80015a2:	f004 f923 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80015ac:	f000 fab8 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b4:	220c      	movs	r2, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4818      	ldr	r0, [pc, #96]	; (800161c <MX_TIM8_Init+0x19c>)
 80015ba:	f004 f917 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80015c4:	f000 faac 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM8_Init+0x19c>)
 80015fe:	f005 f823 	bl	8006648 <HAL_TIMEx_ConfigBreakDeadTime>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001608:	f000 fa8a 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM8_Init+0x19c>)
 800160e:	f000 fd2d 	bl	800206c <HAL_TIM_MspPostInit>

}
 8001612:	bf00      	nop
 8001614:	3768      	adds	r7, #104	; 0x68
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000368 	.word	0x20000368
 8001620:	40010400 	.word	0x40010400

08001624 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	615a      	str	r2, [r3, #20]
 800163a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_TIM9_Init+0x84>)
 800163e:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <MX_TIM9_Init+0x88>)
 8001640:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM9_Init+0x84>)
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <MX_TIM9_Init+0x84>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_TIM9_Init+0x84>)
 8001650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001654:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_TIM9_Init+0x84>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_TIM9_Init+0x84>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001662:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_TIM9_Init+0x84>)
 8001664:	f003 fec8 	bl	80053f8 <HAL_TIM_PWM_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800166e:	f000 fa57 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001672:	2360      	movs	r3, #96	; 0x60
 8001674:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2204      	movs	r2, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM9_Init+0x84>)
 800168a:	f004 f8af 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001694:	f000 fa44 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM9_Init+0x84>)
 800169a:	f000 fce7 	bl	800206c <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200003b4 	.word	0x200003b4
 80016ac:	40014000 	.word	0x40014000

080016b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_UART4_Init+0x58>)
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <MX_UART4_Init+0x5c>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_UART4_Init+0x58>)
 80016bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_UART4_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_UART4_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_UART4_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_UART4_Init+0x58>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_UART4_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_UART4_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_UART4_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_UART4_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_UART4_Init+0x58>)
 80016f4:	f005 f826 	bl	8006744 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80016fe:	f000 fa0f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000400 	.word	0x20000400
 800170c:	40004c00 	.word	0x40004c00

08001710 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_UART5_Init+0x58>)
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <MX_UART5_Init+0x5c>)
 8001718:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_UART5_Init+0x58>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_UART5_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_UART5_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_UART5_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_UART5_Init+0x58>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_UART5_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_UART5_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_UART5_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_UART5_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_UART5_Init+0x58>)
 8001754:	f004 fff6 	bl	8006744 <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800175e:	f000 f9df 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000488 	.word	0x20000488
 800176c:	40005000 	.word	0x40005000

08001770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <MX_USART1_UART_Init+0x5c>)
 8001778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_USART1_UART_Init+0x58>)
 80017b4:	f004 ffc6 	bl	8006744 <HAL_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017be:	f000 f9af 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000510 	.word	0x20000510
 80017cc:	40011000 	.word	0x40011000

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017d6:	4a15      	ldr	r2, [pc, #84]	; (800182c <MX_USART2_UART_Init+0x5c>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_USART2_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001814:	f004 ff96 	bl	8006744 <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800181e:	f000 f97f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000598 	.word	0x20000598
 800182c:	40004400 	.word	0x40004400

08001830 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001836:	4a15      	ldr	r2, [pc, #84]	; (800188c <MX_USART3_UART_Init+0x5c>)
 8001838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_USART3_UART_Init+0x58>)
 800183c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_USART3_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART3_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART3_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001874:	f004 ff66 	bl	8006744 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800187e:	f000 f94f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000620 	.word	0x20000620
 800188c:	40004800 	.word	0x40004800

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	; 0x38
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a6:	4b97      	ldr	r3, [pc, #604]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a96      	ldr	r2, [pc, #600]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018ac:	f043 0310 	orr.w	r3, r3, #16
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a90      	ldr	r2, [pc, #576]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a8a      	ldr	r2, [pc, #552]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018dc:	f043 0320 	orr.w	r3, r3, #32
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	4b85      	ldr	r3, [pc, #532]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a84      	ldr	r2, [pc, #528]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b82      	ldr	r3, [pc, #520]	; (8001b04 <MX_GPIO_Init+0x274>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b7f      	ldr	r3, [pc, #508]	; (8001b04 <MX_GPIO_Init+0x274>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a7e      	ldr	r2, [pc, #504]	; (8001b04 <MX_GPIO_Init+0x274>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <MX_GPIO_Init+0x274>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <MX_GPIO_Init+0x274>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a78      	ldr	r2, [pc, #480]	; (8001b04 <MX_GPIO_Init+0x274>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <MX_GPIO_Init+0x274>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001936:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <MX_GPIO_Init+0x274>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <MX_GPIO_Init+0x274>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b70      	ldr	r3, [pc, #448]	; (8001b04 <MX_GPIO_Init+0x274>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800194e:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <MX_GPIO_Init+0x274>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a6c      	ldr	r2, [pc, #432]	; (8001b04 <MX_GPIO_Init+0x274>)
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <MX_GPIO_Init+0x274>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2138      	movs	r1, #56	; 0x38
 800196a:	4867      	ldr	r0, [pc, #412]	; (8001b08 <MX_GPIO_Init+0x278>)
 800196c:	f001 fcaa 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f244 0181 	movw	r1, #16513	; 0x4081
 8001976:	4865      	ldr	r0, [pc, #404]	; (8001b0c <MX_GPIO_Init+0x27c>)
 8001978:	f001 fca4 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2140      	movs	r1, #64	; 0x40
 8001980:	4863      	ldr	r0, [pc, #396]	; (8001b10 <MX_GPIO_Init+0x280>)
 8001982:	f001 fc9f 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin PE5 */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5;
 8001986:	2338      	movs	r3, #56	; 0x38
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	4619      	mov	r1, r3
 800199c:	485a      	ldr	r0, [pc, #360]	; (8001b08 <MX_GPIO_Init+0x278>)
 800199e:	f001 fae5 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 80019a2:	f643 7308 	movw	r3, #16136	; 0x3f08
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4856      	ldr	r0, [pc, #344]	; (8001b14 <MX_GPIO_Init+0x284>)
 80019ba:	f001 fad7 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 80019be:	2310      	movs	r3, #16
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	4619      	mov	r1, r3
 80019d2:	4850      	ldr	r0, [pc, #320]	; (8001b14 <MX_GPIO_Init+0x284>)
 80019d4:	f001 faca 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019d8:	2332      	movs	r3, #50	; 0x32
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019e8:	230b      	movs	r3, #11
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	4619      	mov	r1, r3
 80019f2:	4849      	ldr	r0, [pc, #292]	; (8001b18 <MX_GPIO_Init+0x288>)
 80019f4:	f001 faba 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019f8:	2386      	movs	r3, #134	; 0x86
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a08:	230b      	movs	r3, #11
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	4842      	ldr	r0, [pc, #264]	; (8001b1c <MX_GPIO_Init+0x28c>)
 8001a14:	f001 faaa 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a18:	f244 0381 	movw	r3, #16513	; 0x4081
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4836      	ldr	r0, [pc, #216]	; (8001b0c <MX_GPIO_Init+0x27c>)
 8001a32:	f001 fa9b 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a48:	230b      	movs	r3, #11
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a50:	4619      	mov	r1, r3
 8001a52:	482e      	ldr	r0, [pc, #184]	; (8001b0c <MX_GPIO_Init+0x27c>)
 8001a54:	f001 fa8a 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a58:	2340      	movs	r3, #64	; 0x40
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4828      	ldr	r0, [pc, #160]	; (8001b10 <MX_GPIO_Init+0x280>)
 8001a70:	f001 fa7c 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a84:	4619      	mov	r1, r3
 8001a86:	4822      	ldr	r0, [pc, #136]	; (8001b10 <MX_GPIO_Init+0x280>)
 8001a88:	f001 fa70 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a8c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	481c      	ldr	r0, [pc, #112]	; (8001b1c <MX_GPIO_Init+0x28c>)
 8001aaa:	f001 fa5f 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4816      	ldr	r0, [pc, #88]	; (8001b1c <MX_GPIO_Init+0x28c>)
 8001ac4:	f001 fa52 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ac8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ada:	230b      	movs	r3, #11
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480a      	ldr	r0, [pc, #40]	; (8001b10 <MX_GPIO_Init+0x280>)
 8001ae6:	f001 fa41 	bl	8002f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2101      	movs	r1, #1
 8001aee:	200a      	movs	r0, #10
 8001af0:	f001 f9f7 	bl	8002ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001af4:	200a      	movs	r0, #10
 8001af6:	f001 fa10 	bl	8002f1a <HAL_NVIC_EnableIRQ>

}
 8001afa:	bf00      	nop
 8001afc:	3738      	adds	r7, #56	; 0x38
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40021800 	.word	0x40021800
 8001b14:	40021400 	.word	0x40021400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_MspInit+0x44>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_MspInit+0x44>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_MspInit+0x44>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_MspInit+0x44>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <HAL_MspInit+0x44>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_MspInit+0x44>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <HAL_ADC_MspInit+0x74>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d123      	bne.n	8001bde <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_ADC_MspInit+0x7c>)
 8001bda:	f001 f9c7 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40012000 	.word	0x40012000
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0b0      	sub	sp, #192	; 0xc0
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	2290      	movs	r2, #144	; 0x90
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 fdc2 	bl	800779e <memset>
  if(hi2c->Instance==I2C1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a44      	ldr	r2, [pc, #272]	; (8001d30 <HAL_I2C_MspInit+0x13c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d13e      	bne.n	8001ca2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c28:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 feb5 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001c40:	f7ff ff6e 	bl	8001b20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c50:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c64:	2312      	movs	r3, #18
 8001c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c76:	2304      	movs	r3, #4
 8001c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c80:	4619      	mov	r1, r3
 8001c82:	482d      	ldr	r0, [pc, #180]	; (8001d38 <HAL_I2C_MspInit+0x144>)
 8001c84:	f001 f972 	bl	8002f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c92:	6413      	str	r3, [r2, #64]	; 0x40
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ca0:	e041      	b.n	8001d26 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a25      	ldr	r2, [pc, #148]	; (8001d3c <HAL_I2C_MspInit+0x148>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d13c      	bne.n	8001d26 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fe71 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001cc8:	f7ff ff2a 	bl	8001b20 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001cd2:	f043 0320 	orr.w	r3, r3, #32
 8001cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cea:	2312      	movs	r3, #18
 8001cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d06:	4619      	mov	r1, r3
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <HAL_I2C_MspInit+0x14c>)
 8001d0a:	f001 f92f 	bl	8002f6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_I2C_MspInit+0x140>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	bf00      	nop
 8001d28:	37c0      	adds	r7, #192	; 0xc0
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40005400 	.word	0x40005400
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40005800 	.word	0x40005800
 8001d40:	40021400 	.word	0x40021400

08001d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d160      	bne.n	8001e28 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001d6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d96:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	4815      	ldr	r0, [pc, #84]	; (8001e38 <HAL_SPI_MspInit+0xf4>)
 8001de2:	f001 f8c3 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df6:	2305      	movs	r3, #5
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480e      	ldr	r0, [pc, #56]	; (8001e3c <HAL_SPI_MspInit+0xf8>)
 8001e02:	f001 f8b3 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e18:	2305      	movs	r3, #5
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	4619      	mov	r1, r3
 8001e22:	4807      	ldr	r0, [pc, #28]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001e24:	f001 f8a2 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3730      	adds	r7, #48	; 0x30
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40013000 	.word	0x40013000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020c00 	.word	0x40020c00
 8001e40:	40021800 	.word	0x40021800

08001e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <HAL_TIM_Base_MspInit+0xe8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d10c      	bne.n	8001e80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e66:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e7e:	e051      	b.n	8001f24 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e88:	d129      	bne.n	8001ede <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4817      	ldr	r0, [pc, #92]	; (8001f34 <HAL_TIM_Base_MspInit+0xf0>)
 8001ed8:	f001 f848 	bl	8002f6c <HAL_GPIO_Init>
}
 8001edc:	e022      	b.n	8001f24 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a15      	ldr	r2, [pc, #84]	; (8001f38 <HAL_TIM_Base_MspInit+0xf4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10c      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	e010      	b.n	8001f24 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_TIM_Base_MspInit+0xf8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d10b      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	6453      	str	r3, [r2, #68]	; 0x44
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_TIM_Base_MspInit+0xec>)
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
}
 8001f24:	bf00      	nop
 8001f26:	3730      	adds	r7, #48	; 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40010400 	.word	0x40010400

08001f40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d128      	bne.n	8001fb4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a2d      	ldr	r2, [pc, #180]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a27      	ldr	r2, [pc, #156]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001f92:	2330      	movs	r3, #48	; 0x30
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	481c      	ldr	r0, [pc, #112]	; (8002020 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001fae:	f000 ffdd 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fb2:	e02d      	b.n	8002010 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d128      	bne.n	8002010 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a16      	ldr	r2, [pc, #88]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001fee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002000:	2302      	movs	r3, #2
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <HAL_TIM_Encoder_MspInit+0xe8>)
 800200c:	f000 ffae 	bl	8002f6c <HAL_GPIO_Init>
}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40000400 	.word	0x40000400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400
 8002024:	40000800 	.word	0x40000800
 8002028:	40020c00 	.word	0x40020c00

0800202c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_TIM_PWM_MspInit+0x38>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10b      	bne.n	8002056 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_TIM_PWM_MspInit+0x3c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_TIM_PWM_MspInit+0x3c>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_TIM_PWM_MspInit+0x3c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40014000 	.word	0x40014000
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a56      	ldr	r2, [pc, #344]	; (80021e4 <HAL_TIM_MspPostInit+0x178>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d11d      	bne.n	80020ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800208e:	4b56      	ldr	r3, [pc, #344]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a55      	ldr	r2, [pc, #340]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80020a6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4619      	mov	r1, r3
 80020c2:	484a      	ldr	r0, [pc, #296]	; (80021ec <HAL_TIM_MspPostInit+0x180>)
 80020c4:	f000 ff52 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80020c8:	e088      	b.n	80021dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d2:	d11d      	bne.n	8002110 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b44      	ldr	r3, [pc, #272]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6313      	str	r3, [r2, #48]	; 0x30
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 80020ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020fe:	2301      	movs	r3, #1
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	4839      	ldr	r0, [pc, #228]	; (80021f0 <HAL_TIM_MspPostInit+0x184>)
 800210a:	f000 ff2f 	bl	8002f6c <HAL_GPIO_Init>
}
 800210e:	e065      	b.n	80021dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a37      	ldr	r2, [pc, #220]	; (80021f4 <HAL_TIM_MspPostInit+0x188>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d11c      	bne.n	8002154 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a32      	ldr	r2, [pc, #200]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002132:	2301      	movs	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002142:	2302      	movs	r3, #2
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	4828      	ldr	r0, [pc, #160]	; (80021f0 <HAL_TIM_MspPostInit+0x184>)
 800214e:	f000 ff0d 	bl	8002f6c <HAL_GPIO_Init>
}
 8002152:	e043      	b.n	80021dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <HAL_TIM_MspPostInit+0x18c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d11d      	bne.n	800219a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002176:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002188:	2303      	movs	r3, #3
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4619      	mov	r1, r3
 8002192:	481a      	ldr	r0, [pc, #104]	; (80021fc <HAL_TIM_MspPostInit+0x190>)
 8002194:	f000 feea 	bl	8002f6c <HAL_GPIO_Init>
}
 8002198:	e020      	b.n	80021dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a18      	ldr	r2, [pc, #96]	; (8002200 <HAL_TIM_MspPostInit+0x194>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d11b      	bne.n	80021dc <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 80021aa:	f043 0310 	orr.w	r3, r3, #16
 80021ae:	6313      	str	r3, [r2, #48]	; 0x30
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_TIM_MspPostInit+0x17c>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH2_USER_LED2_Pin;
 80021bc:	2340      	movs	r3, #64	; 0x40
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80021cc:	2303      	movs	r3, #3
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM9_CH2_USER_LED2_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <HAL_TIM_MspPostInit+0x180>)
 80021d8:	f000 fec8 	bl	8002f6c <HAL_GPIO_Init>
}
 80021dc:	bf00      	nop
 80021de:	3730      	adds	r7, #48	; 0x30
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40010400 	.word	0x40010400
 80021fc:	40020800 	.word	0x40020800
 8002200:	40014000 	.word	0x40014000

08002204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0b6      	sub	sp, #216	; 0xd8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800221c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002220:	2290      	movs	r2, #144	; 0x90
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f005 faba 	bl	800779e <memset>
  if(huart->Instance==UART4)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4aa0      	ldr	r2, [pc, #640]	; (80024b0 <HAL_UART_MspInit+0x2ac>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d13e      	bne.n	80022b2 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002244:	4618      	mov	r0, r3
 8002246:	f002 fbad 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002250:	f7ff fc66 	bl	8001b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002254:	4b97      	ldr	r3, [pc, #604]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	4a96      	ldr	r2, [pc, #600]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 800225a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800225e:	6413      	str	r3, [r2, #64]	; 0x40
 8002260:	4b94      	ldr	r3, [pc, #592]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226c:	4b91      	ldr	r3, [pc, #580]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	4a90      	ldr	r2, [pc, #576]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6313      	str	r3, [r2, #48]	; 0x30
 8002278:	4b8e      	ldr	r3, [pc, #568]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002284:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800229e:	2308      	movs	r3, #8
 80022a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022a8:	4619      	mov	r1, r3
 80022aa:	4883      	ldr	r0, [pc, #524]	; (80024b8 <HAL_UART_MspInit+0x2b4>)
 80022ac:	f000 fe5e 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022b0:	e151      	b.n	8002556 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a81      	ldr	r2, [pc, #516]	; (80024bc <HAL_UART_MspInit+0x2b8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d160      	bne.n	800237e <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80022bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 fb69 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80022d8:	f7ff fc22 	bl	8001b20 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80022dc:	4b75      	ldr	r3, [pc, #468]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a74      	ldr	r2, [pc, #464]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80022e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
 80022e8:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002300:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230c:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4a68      	ldr	r2, [pc, #416]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6313      	str	r3, [r2, #48]	; 0x30
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002328:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800233e:	2308      	movs	r3, #8
 8002340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002348:	4619      	mov	r1, r3
 800234a:	485d      	ldr	r0, [pc, #372]	; (80024c0 <HAL_UART_MspInit+0x2bc>)
 800234c:	f000 fe0e 	bl	8002f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800236a:	2308      	movs	r3, #8
 800236c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002370:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002374:	4619      	mov	r1, r3
 8002376:	4850      	ldr	r0, [pc, #320]	; (80024b8 <HAL_UART_MspInit+0x2b4>)
 8002378:	f000 fdf8 	bl	8002f6c <HAL_GPIO_Init>
}
 800237c:	e0eb      	b.n	8002556 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a50      	ldr	r2, [pc, #320]	; (80024c4 <HAL_UART_MspInit+0x2c0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d151      	bne.n	800242c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002388:	2340      	movs	r3, #64	; 0x40
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800238c:	2300      	movs	r3, #0
 800238e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002390:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002394:	4618      	mov	r0, r3
 8002396:	f002 fb05 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80023a0:	f7ff fbbe 	bl	8001b20 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a4:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80023aa:	f043 0310 	orr.w	r3, r3, #16
 80023ae:	6453      	str	r3, [r2, #68]	; 0x44
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023bc:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	4a3c      	ldr	r2, [pc, #240]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	6313      	str	r3, [r2, #48]	; 0x30
 80023c8:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80023ee:	2304      	movs	r3, #4
 80023f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4831      	ldr	r0, [pc, #196]	; (80024c0 <HAL_UART_MspInit+0x2bc>)
 80023fc:	f000 fdb6 	bl	8002f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002400:	2340      	movs	r3, #64	; 0x40
 8002402:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002418:	2307      	movs	r3, #7
 800241a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002422:	4619      	mov	r1, r3
 8002424:	4826      	ldr	r0, [pc, #152]	; (80024c0 <HAL_UART_MspInit+0x2bc>)
 8002426:	f000 fda1 	bl	8002f6c <HAL_GPIO_Init>
}
 800242a:	e094      	b.n	8002556 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <HAL_UART_MspInit+0x2c4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d14c      	bne.n	80024d0 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800243a:	2300      	movs	r3, #0
 800243c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002442:	4618      	mov	r0, r3
 8002444:	f002 faae 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800244e:	f7ff fb67 	bl	8001b20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002470:	f043 0308 	orr.w	r3, r3, #8
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_UART_MspInit+0x2b0>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002482:	2360      	movs	r3, #96	; 0x60
 8002484:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800249a:	2307      	movs	r3, #7
 800249c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024a4:	4619      	mov	r1, r3
 80024a6:	4809      	ldr	r0, [pc, #36]	; (80024cc <HAL_UART_MspInit+0x2c8>)
 80024a8:	f000 fd60 	bl	8002f6c <HAL_GPIO_Init>
}
 80024ac:	e053      	b.n	8002556 <HAL_UART_MspInit+0x352>
 80024ae:	bf00      	nop
 80024b0:	40004c00 	.word	0x40004c00
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40005000 	.word	0x40005000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40004400 	.word	0x40004400
 80024cc:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_UART_MspInit+0x35c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d13d      	bne.n	8002556 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 fa5a 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 80024f6:	f7ff fb13 	bl	8001b20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_UART_MspInit+0x360>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a19      	ldr	r2, [pc, #100]	; (8002564 <HAL_UART_MspInit+0x360>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_UART_MspInit+0x360>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_UART_MspInit+0x360>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <HAL_UART_MspInit+0x360>)
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_UART_MspInit+0x360>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800252a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800252e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002544:	2307      	movs	r3, #7
 8002546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800254e:	4619      	mov	r1, r3
 8002550:	4805      	ldr	r0, [pc, #20]	; (8002568 <HAL_UART_MspInit+0x364>)
 8002552:	f000 fd0b 	bl	8002f6c <HAL_GPIO_Init>
}
 8002556:	bf00      	nop
 8002558:	37d8      	adds	r7, #216	; 0xd8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40004800 	.word	0x40004800
 8002564:	40023800 	.word	0x40023800
 8002568:	40020c00 	.word	0x40020c00

0800256c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <NMI_Handler+0x4>

08002572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <HardFault_Handler+0x4>

08002578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <MemManage_Handler+0x4>

0800257e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002582:	e7fe      	b.n	8002582 <BusFault_Handler+0x4>

08002584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <UsageFault_Handler+0x4>

0800258a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b8:	f000 f8bc 	bl	8002734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 80025c4:	2010      	movs	r0, #16
 80025c6:	f000 feb1 	bl	800332c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <_sbrk+0x5c>)
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <_sbrk+0x60>)
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <_sbrk+0x64>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <_sbrk+0x68>)
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d207      	bcs.n	8002610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002600:	f004 ffaa 	bl	8007558 <__errno>
 8002604:	4603      	mov	r3, r0
 8002606:	220c      	movs	r2, #12
 8002608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260e:	e009      	b.n	8002624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <_sbrk+0x64>)
 8002620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20080000 	.word	0x20080000
 8002630:	00000400 	.word	0x00000400
 8002634:	200006c4 	.word	0x200006c4
 8002638:	20000788 	.word	0x20000788

0800263c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <SystemInit+0x28>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	4a07      	ldr	r2, [pc, #28]	; (8002664 <SystemInit+0x28>)
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800264c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <SystemInit+0x28>)
 8002652:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002656:	609a      	str	r2, [r3, #8]
#endif
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800266c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800266e:	e003      	b.n	8002678 <LoopCopyDataInit>

08002670 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002672:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002674:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002676:	3104      	adds	r1, #4

08002678 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002678:	480b      	ldr	r0, [pc, #44]	; (80026a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800267c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800267e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002680:	d3f6      	bcc.n	8002670 <CopyDataInit>
  ldr  r2, =_sbss
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002684:	e002      	b.n	800268c <LoopFillZerobss>

08002686 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002686:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002688:	f842 3b04 	str.w	r3, [r2], #4

0800268c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800268e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002690:	d3f9      	bcc.n	8002686 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002692:	f7ff ffd3 	bl	800263c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002696:	f005 f85b 	bl	8007750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269a:	f7fe f87d 	bl	8000798 <main>
  bx  lr    
 800269e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026a0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80026a4:	08008774 	.word	0x08008774
  ldr  r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026ac:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80026b0:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80026b4:	20000788 	.word	0x20000788

080026b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b8:	e7fe      	b.n	80026b8 <ADC_IRQHandler>

080026ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026be:	2003      	movs	r0, #3
 80026c0:	f000 fc04 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f000 f805 	bl	80026d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ca:	f7ff fa2f 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_InitTick+0x54>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_InitTick+0x58>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fc2d 	bl	8002f52 <HAL_SYSTICK_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00e      	b.n	8002720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b0f      	cmp	r3, #15
 8002706:	d80a      	bhi.n	800271e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002708:	2200      	movs	r2, #0
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002710:	f000 fbe7 	bl	8002ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002714:	4a06      	ldr	r2, [pc, #24]	; (8002730 <HAL_InitTick+0x5c>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e000      	b.n	8002720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000004 	.word	0x20000004
 800272c:	2000000c 	.word	0x2000000c
 8002730:	20000008 	.word	0x20000008

08002734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x20>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_IncTick+0x24>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4413      	add	r3, r2
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_IncTick+0x24>)
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	2000000c 	.word	0x2000000c
 8002758:	200006c8 	.word	0x200006c8

0800275c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return uwTick;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_GetTick+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	200006c8 	.word	0x200006c8

08002774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff ffee 	bl	800275c <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278c:	d005      	beq.n	800279a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_Delay+0x44>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800279a:	bf00      	nop
 800279c:	f7ff ffde 	bl	800275c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d8f7      	bhi.n	800279c <HAL_Delay+0x28>
  {
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2000000c 	.word	0x2000000c

080027bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e031      	b.n	8002836 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff f9ca 	bl	8001b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_ADC_Init+0x84>)
 8002800:	4013      	ands	r3, r2
 8002802:	f043 0202 	orr.w	r2, r3, #2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f970 	bl	8002af0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f023 0303 	bic.w	r3, r3, #3
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
 8002826:	e001      	b.n	800282c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	ffffeefd 	.word	0xffffeefd

08002844 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x1c>
 800285c:	2302      	movs	r3, #2
 800285e:	e136      	b.n	8002ace <HAL_ADC_ConfigChannel+0x28a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b09      	cmp	r3, #9
 800286e:	d93a      	bls.n	80028e6 <HAL_ADC_ConfigChannel+0xa2>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002878:	d035      	beq.n	80028e6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68d9      	ldr	r1, [r3, #12]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	3b1e      	subs	r3, #30
 8002890:	2207      	movs	r2, #7
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	400a      	ands	r2, r1
 800289e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a8d      	ldr	r2, [pc, #564]	; (8002adc <HAL_ADC_ConfigChannel+0x298>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10a      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68d9      	ldr	r1, [r3, #12]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	061a      	lsls	r2, r3, #24
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028be:	e035      	b.n	800292c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68d9      	ldr	r1, [r3, #12]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4618      	mov	r0, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4403      	add	r3, r0
 80028d8:	3b1e      	subs	r3, #30
 80028da:	409a      	lsls	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e4:	e022      	b.n	800292c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6919      	ldr	r1, [r3, #16]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	2207      	movs	r2, #7
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43da      	mvns	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	400a      	ands	r2, r1
 8002908:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6919      	ldr	r1, [r3, #16]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	4618      	mov	r0, r3
 800291c:	4603      	mov	r3, r0
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4403      	add	r3, r0
 8002922:	409a      	lsls	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d824      	bhi.n	800297e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	3b05      	subs	r3, #5
 8002946:	221f      	movs	r2, #31
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43da      	mvns	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	400a      	ands	r2, r1
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	4618      	mov	r0, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	3b05      	subs	r3, #5
 8002970:	fa00 f203 	lsl.w	r2, r0, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	635a      	str	r2, [r3, #52]	; 0x34
 800297c:	e04c      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d824      	bhi.n	80029d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	3b23      	subs	r3, #35	; 0x23
 8002998:	221f      	movs	r2, #31
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	400a      	ands	r2, r1
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	4618      	mov	r0, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	3b23      	subs	r3, #35	; 0x23
 80029c2:	fa00 f203 	lsl.w	r2, r0, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
 80029ce:	e023      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	3b41      	subs	r3, #65	; 0x41
 80029e2:	221f      	movs	r2, #31
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43da      	mvns	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	400a      	ands	r2, r1
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b41      	subs	r3, #65	; 0x41
 8002a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a30      	ldr	r2, [pc, #192]	; (8002ae0 <HAL_ADC_ConfigChannel+0x29c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10a      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1f4>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a2a:	d105      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a32:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a36:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <HAL_ADC_ConfigChannel+0x29c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10f      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x21e>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b12      	cmp	r3, #18
 8002a48:	d10b      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a54:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a56:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a60:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <HAL_ADC_ConfigChannel+0x29c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d12b      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x280>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_ADC_ConfigChannel+0x298>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <HAL_ADC_ConfigChannel+0x23a>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b11      	cmp	r3, #17
 8002a7c:	d122      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a88:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a10      	ldr	r2, [pc, #64]	; (8002adc <HAL_ADC_ConfigChannel+0x298>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d111      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_ADC_ConfigChannel+0x2a8>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0c9a      	lsrs	r2, r3, #18
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ab6:	e002      	b.n	8002abe <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f9      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	10000012 	.word	0x10000012
 8002ae0:	40012000 	.word	0x40012000
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	20000004 	.word	0x20000004
 8002aec:	431bde83 	.word	0x431bde83

08002af0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002af8:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <ADC_Init+0x1ec>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <ADC_Init+0x1ec>)
 8002afe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b04:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <ADC_Init+0x1ec>)
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4973      	ldr	r1, [pc, #460]	; (8002cdc <ADC_Init+0x1ec>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <ADC_Init+0x1f0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d022      	beq.n	8002bca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6899      	ldr	r1, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6899      	ldr	r1, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	e00f      	b.n	8002bea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002be8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0202 	bic.w	r2, r2, #2
 8002bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	005a      	lsls	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	3b01      	subs	r3, #1
 8002c44:	035a      	lsls	r2, r3, #13
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e007      	b.n	8002c60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	051a      	lsls	r2, r3, #20
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ca2:	025a      	lsls	r2, r3, #9
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	029a      	lsls	r2, r3, #10
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	609a      	str	r2, [r3, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40012300 	.word	0x40012300
 8002ce0:	0f000001 	.word	0x0f000001

08002ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <__NVIC_SetPriorityGrouping+0x40>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x40>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00
 8002d28:	05fa0000 	.word	0x05fa0000

08002d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4907      	ldr	r1, [pc, #28]	; (8002d80 <__NVIC_EnableIRQ+0x38>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db12      	blt.n	8002dbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <__NVIC_DisableIRQ+0x44>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	3320      	adds	r3, #32
 8002dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002db0:	f3bf 8f4f 	dsb	sy
}
 8002db4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002db6:	f3bf 8f6f 	isb	sy
}
 8002dba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	; (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e98:	d301      	bcc.n	8002e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00f      	b.n	8002ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <SysTick_Config+0x40>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eac:	f7ff ff8e 	bl	8002dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff05 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef4:	f7ff ff1a 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ff8e 	bl	8002e20 <NVIC_EncodePriority>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff5d 	bl	8002dcc <__NVIC_SetPriority>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff0d 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff1d 	bl	8002d84 <__NVIC_DisableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff94 	bl	8002e88 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e175      	b.n	8003278 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f040 8164 	bne.w	8003272 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d005      	beq.n	8002fc2 <HAL_GPIO_Init+0x56>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d130      	bne.n	8003024 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2203      	movs	r2, #3
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 0201 	and.w	r2, r3, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d017      	beq.n	8003060 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d123      	bne.n	80030b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80be 	beq.w	8003272 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_GPIO_Init+0x324>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a65      	ldr	r2, [pc, #404]	; (8003290 <HAL_GPIO_Init+0x324>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_GPIO_Init+0x324>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800310e:	4a61      	ldr	r2, [pc, #388]	; (8003294 <HAL_GPIO_Init+0x328>)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_GPIO_Init+0x32c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d037      	beq.n	80031aa <HAL_GPIO_Init+0x23e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a57      	ldr	r2, [pc, #348]	; (800329c <HAL_GPIO_Init+0x330>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d031      	beq.n	80031a6 <HAL_GPIO_Init+0x23a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a56      	ldr	r2, [pc, #344]	; (80032a0 <HAL_GPIO_Init+0x334>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02b      	beq.n	80031a2 <HAL_GPIO_Init+0x236>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a55      	ldr	r2, [pc, #340]	; (80032a4 <HAL_GPIO_Init+0x338>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d025      	beq.n	800319e <HAL_GPIO_Init+0x232>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a54      	ldr	r2, [pc, #336]	; (80032a8 <HAL_GPIO_Init+0x33c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01f      	beq.n	800319a <HAL_GPIO_Init+0x22e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a53      	ldr	r2, [pc, #332]	; (80032ac <HAL_GPIO_Init+0x340>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d019      	beq.n	8003196 <HAL_GPIO_Init+0x22a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_GPIO_Init+0x344>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_GPIO_Init+0x226>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <HAL_GPIO_Init+0x348>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00d      	beq.n	800318e <HAL_GPIO_Init+0x222>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a50      	ldr	r2, [pc, #320]	; (80032b8 <HAL_GPIO_Init+0x34c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x21e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4f      	ldr	r2, [pc, #316]	; (80032bc <HAL_GPIO_Init+0x350>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_GPIO_Init+0x21a>
 8003182:	2309      	movs	r3, #9
 8003184:	e012      	b.n	80031ac <HAL_GPIO_Init+0x240>
 8003186:	230a      	movs	r3, #10
 8003188:	e010      	b.n	80031ac <HAL_GPIO_Init+0x240>
 800318a:	2308      	movs	r3, #8
 800318c:	e00e      	b.n	80031ac <HAL_GPIO_Init+0x240>
 800318e:	2307      	movs	r3, #7
 8003190:	e00c      	b.n	80031ac <HAL_GPIO_Init+0x240>
 8003192:	2306      	movs	r3, #6
 8003194:	e00a      	b.n	80031ac <HAL_GPIO_Init+0x240>
 8003196:	2305      	movs	r3, #5
 8003198:	e008      	b.n	80031ac <HAL_GPIO_Init+0x240>
 800319a:	2304      	movs	r3, #4
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x240>
 800319e:	2303      	movs	r3, #3
 80031a0:	e004      	b.n	80031ac <HAL_GPIO_Init+0x240>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e002      	b.n	80031ac <HAL_GPIO_Init+0x240>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_GPIO_Init+0x240>
 80031aa:	2300      	movs	r3, #0
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f002 0203 	and.w	r2, r2, #3
 80031b2:	0092      	lsls	r2, r2, #2
 80031b4:	4093      	lsls	r3, r2
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031bc:	4935      	ldr	r1, [pc, #212]	; (8003294 <HAL_GPIO_Init+0x328>)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_GPIO_Init+0x354>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ee:	4a34      	ldr	r2, [pc, #208]	; (80032c0 <HAL_GPIO_Init+0x354>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f4:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <HAL_GPIO_Init+0x354>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003218:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <HAL_GPIO_Init+0x354>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321e:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <HAL_GPIO_Init+0x354>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003242:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <HAL_GPIO_Init+0x354>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_GPIO_Init+0x354>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800326c:	4a14      	ldr	r2, [pc, #80]	; (80032c0 <HAL_GPIO_Init+0x354>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3301      	adds	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	f67f ae86 	bls.w	8002f8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	40013800 	.word	0x40013800
 8003298:	40020000 	.word	0x40020000
 800329c:	40020400 	.word	0x40020400
 80032a0:	40020800 	.word	0x40020800
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40021400 	.word	0x40021400
 80032b0:	40021800 	.word	0x40021800
 80032b4:	40021c00 	.word	0x40021c00
 80032b8:	40022000 	.word	0x40022000
 80032bc:	40022400 	.word	0x40022400
 80032c0:	40013c00 	.word	0x40013c00

080032c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
 80032d0:	4613      	mov	r3, r2
 80032d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d4:	787b      	ldrb	r3, [r7, #1]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032e0:	e003      	b.n	80032ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	041a      	lsls	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	619a      	str	r2, [r3, #24]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b085      	sub	sp, #20
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003308:	887a      	ldrh	r2, [r7, #2]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	041a      	lsls	r2, r3, #16
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	43d9      	mvns	r1, r3
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	400b      	ands	r3, r1
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	619a      	str	r2, [r3, #24]
}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003342:	4a05      	ldr	r2, [pc, #20]	; (8003358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd f952 	bl	80005f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40013c00 	.word	0x40013c00

0800335c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e07f      	b.n	800346e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fe fc36 	bl	8001bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2224      	movs	r2, #36	; 0x24
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	e006      	b.n	80033e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d104      	bne.n	80033f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_I2C_Init+0x11c>)
 8003402:	430b      	orrs	r3, r1
 8003404:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003414:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69d9      	ldr	r1, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	02008000 	.word	0x02008000

0800347c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b20      	cmp	r3, #32
 80034a0:	f040 80f9 	bne.w	8003696 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x34>
 80034aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0ed      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Mem_Write+0x4e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0e6      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034d2:	f7ff f943 	bl	800275c <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2319      	movs	r3, #25
 80034de:	2201      	movs	r2, #1
 80034e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fac3 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0d1      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2221      	movs	r2, #33	; 0x21
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800351c:	88f8      	ldrh	r0, [r7, #6]
 800351e:	893a      	ldrh	r2, [r7, #8]
 8003520:	8979      	ldrh	r1, [r7, #10]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4603      	mov	r3, r0
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f9d3 	bl	80038d8 <I2C_RequestMemoryWrite>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0a9      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2bff      	cmp	r3, #255	; 0xff
 800354c:	d90e      	bls.n	800356c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	b2da      	uxtb	r2, r3
 800355a:	8979      	ldrh	r1, [r7, #10]
 800355c:	2300      	movs	r3, #0
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fc1f 	bl	8003da8 <I2C_TransferConfig>
 800356a:	e00f      	b.n	800358c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	b2da      	uxtb	r2, r3
 800357c:	8979      	ldrh	r1, [r7, #10]
 800357e:	2300      	movs	r3, #0
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fc0e 	bl	8003da8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 faad 	bl	8003af0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e07b      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d034      	beq.n	8003644 <HAL_I2C_Mem_Write+0x1c8>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d130      	bne.n	8003644 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	2200      	movs	r2, #0
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fa3f 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e04d      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2bff      	cmp	r3, #255	; 0xff
 8003604:	d90e      	bls.n	8003624 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	22ff      	movs	r2, #255	; 0xff
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	2300      	movs	r3, #0
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fbc3 	bl	8003da8 <I2C_TransferConfig>
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	b2da      	uxtb	r2, r3
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	2300      	movs	r3, #0
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fbb2 	bl	8003da8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d19e      	bne.n	800358c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fa8c 	bl	8003b70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e01a      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2220      	movs	r2, #32
 8003668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_I2C_Mem_Write+0x224>)
 8003676:	400b      	ands	r3, r1
 8003678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	fe00e800 	.word	0xfe00e800

080036a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	f040 80fd 	bne.w	80038c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_I2C_Mem_Read+0x34>
 80036d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0f1      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_I2C_Mem_Read+0x4e>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e0ea      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036fa:	f7ff f82f 	bl	800275c <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	2319      	movs	r3, #25
 8003706:	2201      	movs	r2, #1
 8003708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f9af 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0d5      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2222      	movs	r2, #34	; 0x22
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800373c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003744:	88f8      	ldrh	r0, [r7, #6]
 8003746:	893a      	ldrh	r2, [r7, #8]
 8003748:	8979      	ldrh	r1, [r7, #10]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4603      	mov	r3, r0
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f913 	bl	8003980 <I2C_RequestMemoryRead>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ad      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2bff      	cmp	r3, #255	; 0xff
 8003774:	d90e      	bls.n	8003794 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	22ff      	movs	r2, #255	; 0xff
 800377a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	4b52      	ldr	r3, [pc, #328]	; (80038d0 <HAL_I2C_Mem_Read+0x22c>)
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fb0b 	bl	8003da8 <I2C_TransferConfig>
 8003792:	e00f      	b.n	80037b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	8979      	ldrh	r1, [r7, #10]
 80037a6:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_I2C_Mem_Read+0x22c>)
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fafa 	bl	8003da8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2200      	movs	r2, #0
 80037bc:	2104      	movs	r1, #4
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f956 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07c      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d034      	beq.n	8003874 <HAL_I2C_Mem_Read+0x1d0>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d130      	bne.n	8003874 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	2200      	movs	r2, #0
 800381a:	2180      	movs	r1, #128	; 0x80
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f927 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e04d      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2bff      	cmp	r3, #255	; 0xff
 8003834:	d90e      	bls.n	8003854 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	22ff      	movs	r2, #255	; 0xff
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	b2da      	uxtb	r2, r3
 8003842:	8979      	ldrh	r1, [r7, #10]
 8003844:	2300      	movs	r3, #0
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 faab 	bl	8003da8 <I2C_TransferConfig>
 8003852:	e00f      	b.n	8003874 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	b2da      	uxtb	r2, r3
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fa9a 	bl	8003da8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d19a      	bne.n	80037b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f974 	bl	8003b70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e01a      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2220      	movs	r2, #32
 8003898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_I2C_Mem_Read+0x230>)
 80038a6:	400b      	ands	r3, r1
 80038a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	80002400 	.word	0x80002400
 80038d4:	fe00e800 	.word	0xfe00e800

080038d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	460b      	mov	r3, r1
 80038ec:	813b      	strh	r3, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	8979      	ldrh	r1, [r7, #10]
 80038f8:	4b20      	ldr	r3, [pc, #128]	; (800397c <I2C_RequestMemoryWrite+0xa4>)
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fa51 	bl	8003da8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f8f0 	bl	8003af0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e02c      	b.n	8003974 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003920:	893b      	ldrh	r3, [r7, #8]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
 800392a:	e015      	b.n	8003958 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b29b      	uxth	r3, r3
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	69b9      	ldr	r1, [r7, #24]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f8d6 	bl	8003af0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e012      	b.n	8003974 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800394e:	893b      	ldrh	r3, [r7, #8]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2200      	movs	r2, #0
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f884 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	80002000 	.word	0x80002000

08003980 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	817b      	strh	r3, [r7, #10]
 8003992:	460b      	mov	r3, r1
 8003994:	813b      	strh	r3, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <I2C_RequestMemoryRead+0xa4>)
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f9fe 	bl	8003da8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f89d 	bl	8003af0 <I2C_WaitOnTXISFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e02c      	b.n	8003a1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d105      	bne.n	80039d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039c6:	893b      	ldrh	r3, [r7, #8]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
 80039d0:	e015      	b.n	80039fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039d2:	893b      	ldrh	r3, [r7, #8]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	69b9      	ldr	r1, [r7, #24]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f883 	bl	8003af0 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e012      	b.n	8003a1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2140      	movs	r1, #64	; 0x40
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f831 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	80002000 	.word	0x80002000

08003a28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d103      	bne.n	8003a46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d007      	beq.n	8003a64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	619a      	str	r2, [r3, #24]
  }
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a80:	e022      	b.n	8003ac8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a88:	d01e      	beq.n	8003ac8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7fe fe67 	bl	800275c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d113      	bne.n	8003ac8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e00f      	b.n	8003ae8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d0cd      	beq.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003afc:	e02c      	b.n	8003b58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f870 	bl	8003be8 <I2C_IsErrorOccurred>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e02a      	b.n	8003b68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b18:	d01e      	beq.n	8003b58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7fe fe1f 	bl	800275c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d113      	bne.n	8003b58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e007      	b.n	8003b68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d1cb      	bne.n	8003afe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b7c:	e028      	b.n	8003bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f830 	bl	8003be8 <I2C_IsErrorOccurred>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e026      	b.n	8003be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b92:	f7fe fde3 	bl	800275c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d113      	bne.n	8003bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e007      	b.n	8003be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d1cf      	bne.n	8003b7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d068      	beq.n	8003ce6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2210      	movs	r2, #16
 8003c1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c1c:	e049      	b.n	8003cb2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c24:	d045      	beq.n	8003cb2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c26:	f7fe fd99 	bl	800275c <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <I2C_IsErrorOccurred+0x54>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d13a      	bne.n	8003cb2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5e:	d121      	bne.n	8003ca4 <I2C_IsErrorOccurred+0xbc>
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c66:	d01d      	beq.n	8003ca4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d01a      	beq.n	8003ca4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c7e:	f7fe fd6d 	bl	800275c <HAL_GetTick>
 8003c82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c84:	e00e      	b.n	8003ca4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c86:	f7fe fd69 	bl	800275c <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b19      	cmp	r3, #25
 8003c92:	d907      	bls.n	8003ca4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f043 0320 	orr.w	r3, r3, #32
 8003c9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003ca2:	e006      	b.n	8003cb2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d1e9      	bne.n	8003c86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d003      	beq.n	8003cc8 <I2C_IsErrorOccurred+0xe0>
 8003cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0aa      	beq.n	8003c1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	f043 0304 	orr.w	r3, r3, #4
 8003cde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f043 0308 	orr.w	r3, r3, #8
 8003d20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	f043 0302 	orr.w	r3, r3, #2
 8003d42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01c      	beq.n	8003d96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff fe63 	bl	8003a28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <I2C_IsErrorOccurred+0x1bc>)
 8003d6e:	400b      	ands	r3, r1
 8003d70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3728      	adds	r7, #40	; 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	fe00e800 	.word	0xfe00e800

08003da8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	817b      	strh	r3, [r7, #10]
 8003db6:	4613      	mov	r3, r2
 8003db8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dc0:	7a7b      	ldrb	r3, [r7, #9]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	0d5b      	lsrs	r3, r3, #21
 8003de2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <I2C_TransferConfig+0x60>)
 8003de8:	430b      	orrs	r3, r1
 8003dea:	43db      	mvns	r3, r3
 8003dec:	ea02 0103 	and.w	r1, r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	03ff63ff 	.word	0x03ff63ff

08003e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d138      	bne.n	8003e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e032      	b.n	8003e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6819      	ldr	r1, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d139      	bne.n	8003f2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e033      	b.n	8003f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2224      	movs	r2, #36	; 0x24
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40007000 	.word	0x40007000

08003f5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f8a:	f7fe fbe7 	bl	800275c <HAL_GetTick>
 8003f8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f90:	e009      	b.n	8003fa6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f92:	f7fe fbe3 	bl	800275c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa0:	d901      	bls.n	8003fa6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e022      	b.n	8003fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d1ee      	bne.n	8003f92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc0:	f7fe fbcc 	bl	800275c <HAL_GetTick>
 8003fc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fc6:	e009      	b.n	8003fdc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fc8:	f7fe fbc8 	bl	800275c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd6:	d901      	bls.n	8003fdc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e007      	b.n	8003fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe8:	d1ee      	bne.n	8003fc8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40007000 	.word	0x40007000

08003ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004004:	2300      	movs	r3, #0
 8004006:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e29b      	b.n	800454a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8087 	beq.w	800412e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004020:	4b96      	ldr	r3, [pc, #600]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	2b04      	cmp	r3, #4
 800402a:	d00c      	beq.n	8004046 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402c:	4b93      	ldr	r3, [pc, #588]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	2b08      	cmp	r3, #8
 8004036:	d112      	bne.n	800405e <HAL_RCC_OscConfig+0x62>
 8004038:	4b90      	ldr	r3, [pc, #576]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004044:	d10b      	bne.n	800405e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004046:	4b8d      	ldr	r3, [pc, #564]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d06c      	beq.n	800412c <HAL_RCC_OscConfig+0x130>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d168      	bne.n	800412c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e275      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x7a>
 8004068:	4b84      	ldr	r3, [pc, #528]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a83      	ldr	r2, [pc, #524]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e02e      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x9c>
 800407e:	4b7f      	ldr	r3, [pc, #508]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7e      	ldr	r2, [pc, #504]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b7c      	ldr	r3, [pc, #496]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a7b      	ldr	r2, [pc, #492]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e01d      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0xc0>
 80040a2:	4b76      	ldr	r3, [pc, #472]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a75      	ldr	r2, [pc, #468]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a72      	ldr	r2, [pc, #456]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 80040bc:	4b6f      	ldr	r3, [pc, #444]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a6e      	ldr	r2, [pc, #440]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b6c      	ldr	r3, [pc, #432]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6b      	ldr	r2, [pc, #428]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d013      	beq.n	8004104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fe fb3e 	bl	800275c <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fe fb3a 	bl	800275c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e229      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	4b61      	ldr	r3, [pc, #388]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0xe8>
 8004102:	e014      	b.n	800412e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fb2a 	bl	800275c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fe fb26 	bl	800275c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e215      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411e:	4b57      	ldr	r3, [pc, #348]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x110>
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d069      	beq.n	800420e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800413a:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004146:	4b4d      	ldr	r3, [pc, #308]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b08      	cmp	r3, #8
 8004150:	d11c      	bne.n	800418c <HAL_RCC_OscConfig+0x190>
 8004152:	4b4a      	ldr	r3, [pc, #296]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d116      	bne.n	800418c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_RCC_OscConfig+0x17a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d001      	beq.n	8004176 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e1e9      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004176:	4b41      	ldr	r3, [pc, #260]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	493d      	ldr	r1, [pc, #244]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418a:	e040      	b.n	800420e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d023      	beq.n	80041dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004194:	4b39      	ldr	r3, [pc, #228]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a38      	ldr	r2, [pc, #224]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fe fadc 	bl	800275c <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a8:	f7fe fad8 	bl	800275c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e1c7      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c6:	4b2d      	ldr	r3, [pc, #180]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4929      	ldr	r1, [pc, #164]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]
 80041da:	e018      	b.n	800420e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041dc:	4b27      	ldr	r3, [pc, #156]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fe fab8 	bl	800275c <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f0:	f7fe fab4 	bl	800275c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e1a3      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d038      	beq.n	800428c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d019      	beq.n	8004256 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004222:	4b16      	ldr	r3, [pc, #88]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004226:	4a15      	ldr	r2, [pc, #84]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fe fa95 	bl	800275c <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004236:	f7fe fa91 	bl	800275c <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e180      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x23a>
 8004254:	e01a      	b.n	800428c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004262:	f7fe fa7b 	bl	800275c <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004268:	e00a      	b.n	8004280 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426a:	f7fe fa77 	bl	800275c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d903      	bls.n	8004280 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e166      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
 800427c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004280:	4b92      	ldr	r3, [pc, #584]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ee      	bne.n	800426a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80a4 	beq.w	80043e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429a:	4b8c      	ldr	r3, [pc, #560]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10d      	bne.n	80042c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	4b89      	ldr	r3, [pc, #548]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	4a88      	ldr	r2, [pc, #544]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40
 80042b2:	4b86      	ldr	r3, [pc, #536]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c2:	4b83      	ldr	r3, [pc, #524]	; (80044d0 <HAL_RCC_OscConfig+0x4d4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d118      	bne.n	8004300 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042ce:	4b80      	ldr	r3, [pc, #512]	; (80044d0 <HAL_RCC_OscConfig+0x4d4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a7f      	ldr	r2, [pc, #508]	; (80044d0 <HAL_RCC_OscConfig+0x4d4>)
 80042d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042da:	f7fe fa3f 	bl	800275c <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e2:	f7fe fa3b 	bl	800275c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b64      	cmp	r3, #100	; 0x64
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e12a      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f4:	4b76      	ldr	r3, [pc, #472]	; (80044d0 <HAL_RCC_OscConfig+0x4d4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x31a>
 8004308:	4b70      	ldr	r3, [pc, #448]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	4a6f      	ldr	r2, [pc, #444]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	; 0x70
 8004314:	e02d      	b.n	8004372 <HAL_RCC_OscConfig+0x376>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x33c>
 800431e:	4b6b      	ldr	r3, [pc, #428]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a6a      	ldr	r2, [pc, #424]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
 800432a:	4b68      	ldr	r3, [pc, #416]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a67      	ldr	r2, [pc, #412]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004330:	f023 0304 	bic.w	r3, r3, #4
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
 8004336:	e01c      	b.n	8004372 <HAL_RCC_OscConfig+0x376>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b05      	cmp	r3, #5
 800433e:	d10c      	bne.n	800435a <HAL_RCC_OscConfig+0x35e>
 8004340:	4b62      	ldr	r3, [pc, #392]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	4a61      	ldr	r2, [pc, #388]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004346:	f043 0304 	orr.w	r3, r3, #4
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
 800434c:	4b5f      	ldr	r3, [pc, #380]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	4a5e      	ldr	r2, [pc, #376]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6713      	str	r3, [r2, #112]	; 0x70
 8004358:	e00b      	b.n	8004372 <HAL_RCC_OscConfig+0x376>
 800435a:	4b5c      	ldr	r3, [pc, #368]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a5b      	ldr	r2, [pc, #364]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	4b59      	ldr	r3, [pc, #356]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a58      	ldr	r2, [pc, #352]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800436c:	f023 0304 	bic.w	r3, r3, #4
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d015      	beq.n	80043a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fe f9ef 	bl	800275c <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fe f9eb 	bl	800275c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e0d8      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	4b4c      	ldr	r3, [pc, #304]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ee      	beq.n	8004382 <HAL_RCC_OscConfig+0x386>
 80043a4:	e014      	b.n	80043d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a6:	f7fe f9d9 	bl	800275c <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ac:	e00a      	b.n	80043c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fe f9d5 	bl	800275c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0c2      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c4:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1ee      	bne.n	80043ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d105      	bne.n	80043e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d6:	4b3d      	ldr	r3, [pc, #244]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a3c      	ldr	r2, [pc, #240]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80043dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80ae 	beq.w	8004548 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ec:	4b37      	ldr	r3, [pc, #220]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d06d      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d14b      	bne.n	8004498 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004400:	4b32      	ldr	r3, [pc, #200]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a31      	ldr	r2, [pc, #196]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fe f9a6 	bl	800275c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe f9a2 	bl	800275c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e091      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	4b29      	ldr	r3, [pc, #164]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	019b      	lsls	r3, r3, #6
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	3b01      	subs	r3, #1
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	071b      	lsls	r3, r3, #28
 800445e:	491b      	ldr	r1, [pc, #108]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004464:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a18      	ldr	r2, [pc, #96]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800446a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fe f974 	bl	800275c <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fe f970 	bl	800275c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e05f      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x47c>
 8004496:	e057      	b.n	8004548 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800449e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fe f95a 	bl	800275c <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fe f956 	bl	800275c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e045      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x4b0>
 80044ca:	e03d      	b.n	8004548 <HAL_RCC_OscConfig+0x54c>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044d4:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <HAL_RCC_OscConfig+0x558>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d030      	beq.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d129      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d122      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800450a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800450c:	4293      	cmp	r3, r2
 800450e:	d119      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	3b01      	subs	r3, #1
 800451e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d10f      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d107      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800

08004558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0d0      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b6a      	ldr	r3, [pc, #424]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d910      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b67      	ldr	r3, [pc, #412]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 020f 	bic.w	r2, r3, #15
 8004586:	4965      	ldr	r1, [pc, #404]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b63      	ldr	r3, [pc, #396]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0b8      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b8:	4b59      	ldr	r3, [pc, #356]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a58      	ldr	r2, [pc, #352]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d0:	4b53      	ldr	r3, [pc, #332]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a52      	ldr	r2, [pc, #328]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045dc:	4b50      	ldr	r3, [pc, #320]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	494d      	ldr	r1, [pc, #308]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d040      	beq.n	800467c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	4b47      	ldr	r3, [pc, #284]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d115      	bne.n	800463a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e07f      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b41      	ldr	r3, [pc, #260]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e073      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	4b3d      	ldr	r3, [pc, #244]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e06b      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b39      	ldr	r3, [pc, #228]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4936      	ldr	r1, [pc, #216]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464c:	f7fe f886 	bl	800275c <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fe f882 	bl	800275c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e053      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800467c:	4b27      	ldr	r3, [pc, #156]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d210      	bcs.n	80046ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 020f 	bic.w	r2, r3, #15
 8004692:	4922      	ldr	r1, [pc, #136]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b20      	ldr	r3, [pc, #128]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e032      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4916      	ldr	r1, [pc, #88]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	490e      	ldr	r1, [pc, #56]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ea:	f000 f821 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 80046ee:	4602      	mov	r2, r0
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	490a      	ldr	r1, [pc, #40]	; (8004724 <HAL_RCC_ClockConfig+0x1cc>)
 80046fc:	5ccb      	ldrb	r3, [r1, r3]
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	4a09      	ldr	r2, [pc, #36]	; (8004728 <HAL_RCC_ClockConfig+0x1d0>)
 8004704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x1d4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd ffe2 	bl	80026d4 <HAL_InitTick>

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40023c00 	.word	0x40023c00
 8004720:	40023800 	.word	0x40023800
 8004724:	08008698 	.word	0x08008698
 8004728:	20000004 	.word	0x20000004
 800472c:	20000008 	.word	0x20000008

08004730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004734:	b094      	sub	sp, #80	; 0x50
 8004736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	647b      	str	r3, [r7, #68]	; 0x44
 800473c:	2300      	movs	r3, #0
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004740:	2300      	movs	r3, #0
 8004742:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004748:	4b79      	ldr	r3, [pc, #484]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b08      	cmp	r3, #8
 8004752:	d00d      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x40>
 8004754:	2b08      	cmp	r3, #8
 8004756:	f200 80e1 	bhi.w	800491c <HAL_RCC_GetSysClockFreq+0x1ec>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x34>
 800475e:	2b04      	cmp	r3, #4
 8004760:	d003      	beq.n	800476a <HAL_RCC_GetSysClockFreq+0x3a>
 8004762:	e0db      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004764:	4b73      	ldr	r3, [pc, #460]	; (8004934 <HAL_RCC_GetSysClockFreq+0x204>)
 8004766:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004768:	e0db      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800476a:	4b73      	ldr	r3, [pc, #460]	; (8004938 <HAL_RCC_GetSysClockFreq+0x208>)
 800476c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800476e:	e0d8      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004770:	4b6f      	ldr	r3, [pc, #444]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800477a:	4b6d      	ldr	r3, [pc, #436]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d063      	beq.n	800484e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004786:	4b6a      	ldr	r3, [pc, #424]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	099b      	lsrs	r3, r3, #6
 800478c:	2200      	movs	r2, #0
 800478e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004790:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004798:	633b      	str	r3, [r7, #48]	; 0x30
 800479a:	2300      	movs	r3, #0
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047a2:	4622      	mov	r2, r4
 80047a4:	462b      	mov	r3, r5
 80047a6:	f04f 0000 	mov.w	r0, #0
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	0159      	lsls	r1, r3, #5
 80047b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b4:	0150      	lsls	r0, r2, #5
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4621      	mov	r1, r4
 80047bc:	1a51      	subs	r1, r2, r1
 80047be:	6139      	str	r1, [r7, #16]
 80047c0:	4629      	mov	r1, r5
 80047c2:	eb63 0301 	sbc.w	r3, r3, r1
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d4:	4659      	mov	r1, fp
 80047d6:	018b      	lsls	r3, r1, #6
 80047d8:	4651      	mov	r1, sl
 80047da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047de:	4651      	mov	r1, sl
 80047e0:	018a      	lsls	r2, r1, #6
 80047e2:	4651      	mov	r1, sl
 80047e4:	ebb2 0801 	subs.w	r8, r2, r1
 80047e8:	4659      	mov	r1, fp
 80047ea:	eb63 0901 	sbc.w	r9, r3, r1
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004802:	4690      	mov	r8, r2
 8004804:	4699      	mov	r9, r3
 8004806:	4623      	mov	r3, r4
 8004808:	eb18 0303 	adds.w	r3, r8, r3
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	462b      	mov	r3, r5
 8004810:	eb49 0303 	adc.w	r3, r9, r3
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004822:	4629      	mov	r1, r5
 8004824:	024b      	lsls	r3, r1, #9
 8004826:	4621      	mov	r1, r4
 8004828:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800482c:	4621      	mov	r1, r4
 800482e:	024a      	lsls	r2, r1, #9
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004836:	2200      	movs	r2, #0
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
 800483a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800483c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004840:	f7fb fd56 	bl	80002f0 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484c:	e058      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484e:	4b38      	ldr	r3, [pc, #224]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	2200      	movs	r2, #0
 8004856:	4618      	mov	r0, r3
 8004858:	4611      	mov	r1, r2
 800485a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	2300      	movs	r3, #0
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
 8004864:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	f04f 0000 	mov.w	r0, #0
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	0159      	lsls	r1, r3, #5
 8004876:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800487a:	0150      	lsls	r0, r2, #5
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4641      	mov	r1, r8
 8004882:	ebb2 0a01 	subs.w	sl, r2, r1
 8004886:	4649      	mov	r1, r9
 8004888:	eb63 0b01 	sbc.w	fp, r3, r1
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004898:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800489c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048a0:	ebb2 040a 	subs.w	r4, r2, sl
 80048a4:	eb63 050b 	sbc.w	r5, r3, fp
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	00eb      	lsls	r3, r5, #3
 80048b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b6:	00e2      	lsls	r2, r4, #3
 80048b8:	4614      	mov	r4, r2
 80048ba:	461d      	mov	r5, r3
 80048bc:	4643      	mov	r3, r8
 80048be:	18e3      	adds	r3, r4, r3
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	464b      	mov	r3, r9
 80048c4:	eb45 0303 	adc.w	r3, r5, r3
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048d6:	4629      	mov	r1, r5
 80048d8:	028b      	lsls	r3, r1, #10
 80048da:	4621      	mov	r1, r4
 80048dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e0:	4621      	mov	r1, r4
 80048e2:	028a      	lsls	r2, r1, #10
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ea:	2200      	movs	r2, #0
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	61fa      	str	r2, [r7, #28]
 80048f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f4:	f7fb fcfc 	bl	80002f0 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4613      	mov	r3, r2
 80048fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	3301      	adds	r3, #1
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004910:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800491a:	e002      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetSysClockFreq+0x204>)
 800491e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004924:	4618      	mov	r0, r3
 8004926:	3750      	adds	r7, #80	; 0x50
 8004928:	46bd      	mov	sp, r7
 800492a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800
 8004934:	00f42400 	.word	0x00f42400
 8004938:	007a1200 	.word	0x007a1200

0800493c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <HAL_RCC_GetHCLKFreq+0x14>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000004 	.word	0x20000004

08004954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004958:	f7ff fff0 	bl	800493c <HAL_RCC_GetHCLKFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	0a9b      	lsrs	r3, r3, #10
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4903      	ldr	r1, [pc, #12]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40023800 	.word	0x40023800
 8004978:	080086a8 	.word	0x080086a8

0800497c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004980:	f7ff ffdc 	bl	800493c <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0b5b      	lsrs	r3, r3, #13
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	; (80049a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	080086a8 	.word	0x080086a8

080049a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049cc:	4b69      	ldr	r3, [pc, #420]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4a68      	ldr	r2, [pc, #416]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049d6:	6093      	str	r3, [r2, #8]
 80049d8:	4b66      	ldr	r3, [pc, #408]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	4964      	ldr	r1, [pc, #400]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d017      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049fe:	4b5d      	ldr	r3, [pc, #372]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	4959      	ldr	r1, [pc, #356]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d017      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a3a:	4b4e      	ldr	r3, [pc, #312]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	494a      	ldr	r1, [pc, #296]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a58:	d101      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a66:	2301      	movs	r3, #1
 8004a68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 808b 	beq.w	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a88:	4b3a      	ldr	r3, [pc, #232]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	4a39      	ldr	r2, [pc, #228]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a92:	6413      	str	r3, [r2, #64]	; 0x40
 8004a94:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004aa0:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a34      	ldr	r2, [pc, #208]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aac:	f7fd fe56 	bl	800275c <HAL_GetTick>
 8004ab0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab4:	f7fd fe52 	bl	800275c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e38f      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ad2:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ada:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d035      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d02e      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004af0:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004afa:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b06:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b18:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d114      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fd fe1a 	bl	800275c <HAL_GetTick>
 8004b28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2c:	f7fd fe16 	bl	800275c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e351      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0ee      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b68:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b6a:	400b      	ands	r3, r1
 8004b6c:	4901      	ldr	r1, [pc, #4]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
 8004b72:	e00b      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	0ffffcff 	.word	0x0ffffcff
 8004b80:	4bac      	ldr	r3, [pc, #688]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4aab      	ldr	r2, [pc, #684]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b8a:	6093      	str	r3, [r2, #8]
 8004b8c:	4ba9      	ldr	r3, [pc, #676]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b98:	49a6      	ldr	r1, [pc, #664]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d010      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004baa:	4ba2      	ldr	r3, [pc, #648]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb0:	4aa0      	ldr	r2, [pc, #640]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004bba:	4b9e      	ldr	r3, [pc, #632]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	499b      	ldr	r1, [pc, #620]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd8:	4b96      	ldr	r3, [pc, #600]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be6:	4993      	ldr	r1, [pc, #588]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bfa:	4b8e      	ldr	r3, [pc, #568]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c08:	498a      	ldr	r1, [pc, #552]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c1c:	4b85      	ldr	r3, [pc, #532]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2a:	4982      	ldr	r1, [pc, #520]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c3e:	4b7d      	ldr	r3, [pc, #500]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	4979      	ldr	r1, [pc, #484]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c60:	4b74      	ldr	r3, [pc, #464]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	4971      	ldr	r1, [pc, #452]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c82:	4b6c      	ldr	r3, [pc, #432]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	f023 020c 	bic.w	r2, r3, #12
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c90:	4968      	ldr	r1, [pc, #416]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ca4:	4b63      	ldr	r3, [pc, #396]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	4960      	ldr	r1, [pc, #384]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cc6:	4b5b      	ldr	r3, [pc, #364]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	4957      	ldr	r1, [pc, #348]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ce8:	4b52      	ldr	r3, [pc, #328]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	494f      	ldr	r1, [pc, #316]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d0a:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	4946      	ldr	r1, [pc, #280]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d2c:	4b41      	ldr	r3, [pc, #260]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3a:	493e      	ldr	r1, [pc, #248]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d4e:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5c:	4935      	ldr	r1, [pc, #212]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d70:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d7e:	492d      	ldr	r1, [pc, #180]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d011      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d92:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da0:	4924      	ldr	r1, [pc, #144]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db0:	d101      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dd2:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de0:	4914      	ldr	r1, [pc, #80]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004df4:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e04:	490b      	ldr	r1, [pc, #44]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00f      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e28:	4902      	ldr	r1, [pc, #8]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e30:	e002      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e44:	4b8a      	ldr	r3, [pc, #552]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	4986      	ldr	r1, [pc, #536]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e68:	4b81      	ldr	r3, [pc, #516]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e78:	497d      	ldr	r1, [pc, #500]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d006      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 80d6 	beq.w	8005040 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e94:	4b76      	ldr	r3, [pc, #472]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a75      	ldr	r2, [pc, #468]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea0:	f7fd fc5c 	bl	800275c <HAL_GetTick>
 8004ea4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ea8:	f7fd fc58 	bl	800275c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e195      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eba:	4b6d      	ldr	r3, [pc, #436]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d021      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11d      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004eda:	4b65      	ldr	r3, [pc, #404]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ee8:	4b61      	ldr	r3, [pc, #388]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eee:	0e1b      	lsrs	r3, r3, #24
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	019a      	lsls	r2, r3, #6
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	041b      	lsls	r3, r3, #16
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	061b      	lsls	r3, r3, #24
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	071b      	lsls	r3, r3, #28
 8004f0e:	4958      	ldr	r1, [pc, #352]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d004      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02e      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f40:	d129      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f42:	4b4b      	ldr	r3, [pc, #300]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f50:	4b47      	ldr	r3, [pc, #284]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f56:	0f1b      	lsrs	r3, r3, #28
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	019a      	lsls	r2, r3, #6
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	061b      	lsls	r3, r3, #24
 8004f70:	431a      	orrs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	071b      	lsls	r3, r3, #28
 8004f76:	493e      	ldr	r1, [pc, #248]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f7e:	4b3c      	ldr	r3, [pc, #240]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f84:	f023 021f 	bic.w	r2, r3, #31
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	4938      	ldr	r1, [pc, #224]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01d      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fa2:	4b33      	ldr	r3, [pc, #204]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	0e1b      	lsrs	r3, r3, #24
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fb0:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb6:	0f1b      	lsrs	r3, r3, #28
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	019a      	lsls	r2, r3, #6
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	071b      	lsls	r3, r3, #28
 8004fd6:	4926      	ldr	r1, [pc, #152]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d011      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	019a      	lsls	r2, r3, #6
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	041b      	lsls	r3, r3, #16
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	061b      	lsls	r3, r3, #24
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	071b      	lsls	r3, r3, #28
 8005006:	491a      	ldr	r1, [pc, #104]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800500e:	4b18      	ldr	r3, [pc, #96]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a17      	ldr	r2, [pc, #92]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005014:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501a:	f7fd fb9f 	bl	800275c <HAL_GetTick>
 800501e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005022:	f7fd fb9b 	bl	800275c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b64      	cmp	r3, #100	; 0x64
 800502e:	d901      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e0d8      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b01      	cmp	r3, #1
 8005044:	f040 80ce 	bne.w	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a08      	ldr	r2, [pc, #32]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005054:	f7fd fb82 	bl	800275c <HAL_GetTick>
 8005058:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800505a:	e00b      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800505c:	f7fd fb7e 	bl	800275c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d904      	bls.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e0bb      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005074:	4b5e      	ldr	r3, [pc, #376]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800507c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005080:	d0ec      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d02e      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d12a      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050aa:	4b51      	ldr	r3, [pc, #324]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050b8:	4b4d      	ldr	r3, [pc, #308]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050be:	0f1b      	lsrs	r3, r3, #28
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	019a      	lsls	r2, r3, #6
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	071b      	lsls	r3, r3, #28
 80050de:	4944      	ldr	r1, [pc, #272]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050e6:	4b42      	ldr	r3, [pc, #264]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	3b01      	subs	r3, #1
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	493d      	ldr	r1, [pc, #244]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d022      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005114:	d11d      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005116:	4b36      	ldr	r3, [pc, #216]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	0e1b      	lsrs	r3, r3, #24
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005124:	4b32      	ldr	r3, [pc, #200]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512a:	0f1b      	lsrs	r3, r3, #28
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	019a      	lsls	r2, r3, #6
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	431a      	orrs	r2, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	061b      	lsls	r3, r3, #24
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	071b      	lsls	r3, r3, #28
 800514a:	4929      	ldr	r1, [pc, #164]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d028      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800515e:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	0e1b      	lsrs	r3, r3, #24
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800516c:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	019a      	lsls	r2, r3, #6
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	431a      	orrs	r2, r3
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	061b      	lsls	r3, r3, #24
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	071b      	lsls	r3, r3, #28
 8005192:	4917      	ldr	r1, [pc, #92]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800519a:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4911      	ldr	r1, [pc, #68]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051b0:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a0e      	ldr	r2, [pc, #56]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051bc:	f7fd face 	bl	800275c <HAL_GetTick>
 80051c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051c4:	f7fd faca 	bl	800275c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b64      	cmp	r3, #100	; 0x64
 80051d0:	d901      	bls.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e007      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e2:	d1ef      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800

080051f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e09d      	b.n	8005342 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b00      	cmp	r3, #0
 800520c:	d108      	bne.n	8005220 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005216:	d009      	beq.n	800522c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	61da      	str	r2, [r3, #28]
 800521e:	e005      	b.n	800522c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fd7c 	bl	8001d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005262:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800526c:	d902      	bls.n	8005274 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	e002      	b.n	800527a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005278:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005282:	d007      	beq.n	8005294 <HAL_SPI_Init+0xa0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800528c:	d002      	beq.n	8005294 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	ea42 0103 	orr.w	r1, r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	f003 0204 	and.w	r2, r3, #4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005310:	ea42 0103 	orr.w	r1, r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005330:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e049      	b.n	80053f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fc fd67 	bl	8001e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3304      	adds	r3, #4
 8005386:	4619      	mov	r1, r3
 8005388:	4610      	mov	r0, r2
 800538a:	f000 fc0d 	bl	8005ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e049      	b.n	800549e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fc fe04 	bl	800202c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f000 fbb6 	bl	8005ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e049      	b.n	800554c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f841 	bl	8005554 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f000 fb5f 	bl	8005ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e08f      	b.n	800569c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7fc fcd5 	bl	8001f40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6899      	ldr	r1, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b3e      	ldr	r3, [pc, #248]	; (80056a4 <HAL_TIM_Encoder_Init+0x13c>)
 80055aa:	400b      	ands	r3, r1
 80055ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f000 faf5 	bl	8005ba8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4b31      	ldr	r3, [pc, #196]	; (80056a8 <HAL_TIM_Encoder_Init+0x140>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	4313      	orrs	r3, r2
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4b2b      	ldr	r3, [pc, #172]	; (80056ac <HAL_TIM_Encoder_Init+0x144>)
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <HAL_TIM_Encoder_Init+0x148>)
 8005606:	4013      	ands	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	4313      	orrs	r3, r2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	011a      	lsls	r2, r3, #4
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	031b      	lsls	r3, r3, #12
 8005628:	4313      	orrs	r3, r2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005636:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800563e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	4313      	orrs	r3, r2
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	fffebff8 	.word	0xfffebff8
 80056a8:	fffffcfc 	.word	0xfffffcfc
 80056ac:	fffff3f3 	.word	0xfffff3f3
 80056b0:	ffff0f0f 	.word	0xffff0f0f

080056b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e088      	b.n	80057e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d11b      	bne.n	8005718 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	6819      	ldr	r1, [r3, #0]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f000 fd58 	bl	80061a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 020c 	bic.w	r2, r2, #12
 8005702:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6999      	ldr	r1, [r3, #24]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	619a      	str	r2, [r3, #24]
 8005716:	e060      	b.n	80057da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b04      	cmp	r3, #4
 800571c:	d11c      	bne.n	8005758 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6819      	ldr	r1, [r3, #0]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f000 fddc 	bl	80062ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699a      	ldr	r2, [r3, #24]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005740:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6999      	ldr	r1, [r3, #24]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	021a      	lsls	r2, r3, #8
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	619a      	str	r2, [r3, #24]
 8005756:	e040      	b.n	80057da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b08      	cmp	r3, #8
 800575c:	d11b      	bne.n	8005796 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f000 fe29 	bl	80063c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 020c 	bic.w	r2, r2, #12
 8005780:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69d9      	ldr	r1, [r3, #28]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	61da      	str	r2, [r3, #28]
 8005794:	e021      	b.n	80057da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b0c      	cmp	r3, #12
 800579a:	d11c      	bne.n	80057d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f000 fe46 	bl	800643c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69d9      	ldr	r1, [r3, #28]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	021a      	lsls	r2, r3, #8
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	61da      	str	r2, [r3, #28]
 80057d4:	e001      	b.n	80057da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005806:	2302      	movs	r3, #2
 8005808:	e0ff      	b.n	8005a0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b14      	cmp	r3, #20
 8005816:	f200 80f0 	bhi.w	80059fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005875 	.word	0x08005875
 8005824:	080059fb 	.word	0x080059fb
 8005828:	080059fb 	.word	0x080059fb
 800582c:	080059fb 	.word	0x080059fb
 8005830:	080058b5 	.word	0x080058b5
 8005834:	080059fb 	.word	0x080059fb
 8005838:	080059fb 	.word	0x080059fb
 800583c:	080059fb 	.word	0x080059fb
 8005840:	080058f7 	.word	0x080058f7
 8005844:	080059fb 	.word	0x080059fb
 8005848:	080059fb 	.word	0x080059fb
 800584c:	080059fb 	.word	0x080059fb
 8005850:	08005937 	.word	0x08005937
 8005854:	080059fb 	.word	0x080059fb
 8005858:	080059fb 	.word	0x080059fb
 800585c:	080059fb 	.word	0x080059fb
 8005860:	08005979 	.word	0x08005979
 8005864:	080059fb 	.word	0x080059fb
 8005868:	080059fb 	.word	0x080059fb
 800586c:	080059fb 	.word	0x080059fb
 8005870:	080059b9 	.word	0x080059b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fa34 	bl	8005ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0208 	orr.w	r2, r2, #8
 800588e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0204 	bic.w	r2, r2, #4
 800589e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6999      	ldr	r1, [r3, #24]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	619a      	str	r2, [r3, #24]
      break;
 80058b2:	e0a5      	b.n	8005a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fa86 	bl	8005dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6999      	ldr	r1, [r3, #24]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	021a      	lsls	r2, r3, #8
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	619a      	str	r2, [r3, #24]
      break;
 80058f4:	e084      	b.n	8005a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fadd 	bl	8005ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0208 	orr.w	r2, r2, #8
 8005910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0204 	bic.w	r2, r2, #4
 8005920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69d9      	ldr	r1, [r3, #28]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	61da      	str	r2, [r3, #28]
      break;
 8005934:	e064      	b.n	8005a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fb33 	bl	8005fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69d9      	ldr	r1, [r3, #28]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	021a      	lsls	r2, r3, #8
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	61da      	str	r2, [r3, #28]
      break;
 8005976:	e043      	b.n	8005a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fb6a 	bl	8006058 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0208 	orr.w	r2, r2, #8
 8005992:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0204 	bic.w	r2, r2, #4
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059b6:	e023      	b.n	8005a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fb9c 	bl	80060fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	021a      	lsls	r2, r3, #8
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059f8:	e002      	b.n	8005a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
      break;
 80059fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop

08005a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIM_ConfigClockSource+0x1c>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e0b4      	b.n	8005b9a <HAL_TIM_ConfigClockSource+0x186>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	4b56      	ldr	r3, [pc, #344]	; (8005ba4 <HAL_TIM_ConfigClockSource+0x190>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a68:	d03e      	beq.n	8005ae8 <HAL_TIM_ConfigClockSource+0xd4>
 8005a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6e:	f200 8087 	bhi.w	8005b80 <HAL_TIM_ConfigClockSource+0x16c>
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a76:	f000 8086 	beq.w	8005b86 <HAL_TIM_ConfigClockSource+0x172>
 8005a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7e:	d87f      	bhi.n	8005b80 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b70      	cmp	r3, #112	; 0x70
 8005a82:	d01a      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0xa6>
 8005a84:	2b70      	cmp	r3, #112	; 0x70
 8005a86:	d87b      	bhi.n	8005b80 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b60      	cmp	r3, #96	; 0x60
 8005a8a:	d050      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x11a>
 8005a8c:	2b60      	cmp	r3, #96	; 0x60
 8005a8e:	d877      	bhi.n	8005b80 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b50      	cmp	r3, #80	; 0x50
 8005a92:	d03c      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0xfa>
 8005a94:	2b50      	cmp	r3, #80	; 0x50
 8005a96:	d873      	bhi.n	8005b80 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	d058      	beq.n	8005b4e <HAL_TIM_ConfigClockSource+0x13a>
 8005a9c:	2b40      	cmp	r3, #64	; 0x40
 8005a9e:	d86f      	bhi.n	8005b80 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa0:	2b30      	cmp	r3, #48	; 0x30
 8005aa2:	d064      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0x15a>
 8005aa4:	2b30      	cmp	r3, #48	; 0x30
 8005aa6:	d86b      	bhi.n	8005b80 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d060      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0x15a>
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d867      	bhi.n	8005b80 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d05c      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0x15a>
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d05a      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0x15a>
 8005ab8:	e062      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6899      	ldr	r1, [r3, #8]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f000 fd0f 	bl	80064ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005adc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	609a      	str	r2, [r3, #8]
      break;
 8005ae6:	e04f      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	6899      	ldr	r1, [r3, #8]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f000 fcf8 	bl	80064ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b0a:	609a      	str	r2, [r3, #8]
      break;
 8005b0c:	e03c      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	6859      	ldr	r1, [r3, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f000 fbb6 	bl	800628c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2150      	movs	r1, #80	; 0x50
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fcc5 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005b2c:	e02c      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	6859      	ldr	r1, [r3, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f000 fc12 	bl	8006364 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2160      	movs	r1, #96	; 0x60
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fcb5 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005b4c:	e01c      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6859      	ldr	r1, [r3, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f000 fb96 	bl	800628c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2140      	movs	r1, #64	; 0x40
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fca5 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005b6c:	e00c      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f000 fc9c 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005b7e:	e003      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
      break;
 8005b84:	e000      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	fffeff88 	.word	0xfffeff88

08005ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a40      	ldr	r2, [pc, #256]	; (8005cbc <TIM_Base_SetConfig+0x114>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc6:	d00f      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a3d      	ldr	r2, [pc, #244]	; (8005cc0 <TIM_Base_SetConfig+0x118>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a3c      	ldr	r2, [pc, #240]	; (8005cc4 <TIM_Base_SetConfig+0x11c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3b      	ldr	r2, [pc, #236]	; (8005cc8 <TIM_Base_SetConfig+0x120>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3a      	ldr	r2, [pc, #232]	; (8005ccc <TIM_Base_SetConfig+0x124>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d108      	bne.n	8005bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2f      	ldr	r2, [pc, #188]	; (8005cbc <TIM_Base_SetConfig+0x114>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d02b      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c08:	d027      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a2c      	ldr	r2, [pc, #176]	; (8005cc0 <TIM_Base_SetConfig+0x118>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d023      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2b      	ldr	r2, [pc, #172]	; (8005cc4 <TIM_Base_SetConfig+0x11c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01f      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <TIM_Base_SetConfig+0x120>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01b      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a29      	ldr	r2, [pc, #164]	; (8005ccc <TIM_Base_SetConfig+0x124>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d017      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <TIM_Base_SetConfig+0x128>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <TIM_Base_SetConfig+0x12c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00f      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a26      	ldr	r2, [pc, #152]	; (8005cd8 <TIM_Base_SetConfig+0x130>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a25      	ldr	r2, [pc, #148]	; (8005cdc <TIM_Base_SetConfig+0x134>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a24      	ldr	r2, [pc, #144]	; (8005ce0 <TIM_Base_SetConfig+0x138>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a23      	ldr	r2, [pc, #140]	; (8005ce4 <TIM_Base_SetConfig+0x13c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a0a      	ldr	r2, [pc, #40]	; (8005cbc <TIM_Base_SetConfig+0x114>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_Base_SetConfig+0xf8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a0c      	ldr	r2, [pc, #48]	; (8005ccc <TIM_Base_SetConfig+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d103      	bne.n	8005ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	615a      	str	r2, [r3, #20]
}
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	40000c00 	.word	0x40000c00
 8005ccc:	40010400 	.word	0x40010400
 8005cd0:	40014000 	.word	0x40014000
 8005cd4:	40014400 	.word	0x40014400
 8005cd8:	40014800 	.word	0x40014800
 8005cdc:	40001800 	.word	0x40001800
 8005ce0:	40001c00 	.word	0x40001c00
 8005ce4:	40002000 	.word	0x40002000

08005ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0201 	bic.w	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <TIM_OC1_SetConfig+0xd8>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f023 0302 	bic.w	r3, r3, #2
 8005d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a21      	ldr	r2, [pc, #132]	; (8005dc4 <TIM_OC1_SetConfig+0xdc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC1_SetConfig+0x64>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a20      	ldr	r2, [pc, #128]	; (8005dc8 <TIM_OC1_SetConfig+0xe0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10c      	bne.n	8005d66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0308 	bic.w	r3, r3, #8
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f023 0304 	bic.w	r3, r3, #4
 8005d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a16      	ldr	r2, [pc, #88]	; (8005dc4 <TIM_OC1_SetConfig+0xdc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_OC1_SetConfig+0x8e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <TIM_OC1_SetConfig+0xe0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d111      	bne.n	8005d9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	621a      	str	r2, [r3, #32]
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	fffeff8f 	.word	0xfffeff8f
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40010400 	.word	0x40010400

08005dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0210 	bic.w	r2, r3, #16
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4b2e      	ldr	r3, [pc, #184]	; (8005eb0 <TIM_OC2_SetConfig+0xe4>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	021b      	lsls	r3, r3, #8
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0320 	bic.w	r3, r3, #32
 8005e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a23      	ldr	r2, [pc, #140]	; (8005eb4 <TIM_OC2_SetConfig+0xe8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_OC2_SetConfig+0x68>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <TIM_OC2_SetConfig+0xec>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d10d      	bne.n	8005e50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <TIM_OC2_SetConfig+0xe8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_OC2_SetConfig+0x94>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <TIM_OC2_SetConfig+0xec>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d113      	bne.n	8005e88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	621a      	str	r2, [r3, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	feff8fff 	.word	0xfeff8fff
 8005eb4:	40010000 	.word	0x40010000
 8005eb8:	40010400 	.word	0x40010400

08005ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4b2d      	ldr	r3, [pc, #180]	; (8005f9c <TIM_OC3_SetConfig+0xe0>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a22      	ldr	r2, [pc, #136]	; (8005fa0 <TIM_OC3_SetConfig+0xe4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_OC3_SetConfig+0x66>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a21      	ldr	r2, [pc, #132]	; (8005fa4 <TIM_OC3_SetConfig+0xe8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10d      	bne.n	8005f3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a17      	ldr	r2, [pc, #92]	; (8005fa0 <TIM_OC3_SetConfig+0xe4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <TIM_OC3_SetConfig+0x92>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a16      	ldr	r2, [pc, #88]	; (8005fa4 <TIM_OC3_SetConfig+0xe8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d113      	bne.n	8005f76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	621a      	str	r2, [r3, #32]
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	fffeff8f 	.word	0xfffeff8f
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40010400 	.word	0x40010400

08005fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4b1e      	ldr	r3, [pc, #120]	; (800604c <TIM_OC4_SetConfig+0xa4>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	031b      	lsls	r3, r3, #12
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a13      	ldr	r2, [pc, #76]	; (8006050 <TIM_OC4_SetConfig+0xa8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_OC4_SetConfig+0x68>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a12      	ldr	r2, [pc, #72]	; (8006054 <TIM_OC4_SetConfig+0xac>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d109      	bne.n	8006024 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	019b      	lsls	r3, r3, #6
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	feff8fff 	.word	0xfeff8fff
 8006050:	40010000 	.word	0x40010000
 8006054:	40010400 	.word	0x40010400

08006058 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <TIM_OC5_SetConfig+0x98>)
 8006084:	4013      	ands	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006098:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a12      	ldr	r2, [pc, #72]	; (80060f4 <TIM_OC5_SetConfig+0x9c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_OC5_SetConfig+0x5e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a11      	ldr	r2, [pc, #68]	; (80060f8 <TIM_OC5_SetConfig+0xa0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d109      	bne.n	80060ca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	621a      	str	r2, [r3, #32]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	fffeff8f 	.word	0xfffeff8f
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400

080060fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4b1c      	ldr	r3, [pc, #112]	; (8006198 <TIM_OC6_SetConfig+0x9c>)
 8006128:	4013      	ands	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800613e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	051b      	lsls	r3, r3, #20
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a13      	ldr	r2, [pc, #76]	; (800619c <TIM_OC6_SetConfig+0xa0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC6_SetConfig+0x60>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <TIM_OC6_SetConfig+0xa4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d109      	bne.n	8006170 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	feff8fff 	.word	0xfeff8fff
 800619c:	40010000 	.word	0x40010000
 80061a0:	40010400 	.word	0x40010400

080061a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a28      	ldr	r2, [pc, #160]	; (8006270 <TIM_TI1_SetConfig+0xcc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01b      	beq.n	800620a <TIM_TI1_SetConfig+0x66>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d017      	beq.n	800620a <TIM_TI1_SetConfig+0x66>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a25      	ldr	r2, [pc, #148]	; (8006274 <TIM_TI1_SetConfig+0xd0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <TIM_TI1_SetConfig+0x66>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a24      	ldr	r2, [pc, #144]	; (8006278 <TIM_TI1_SetConfig+0xd4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_TI1_SetConfig+0x66>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a23      	ldr	r2, [pc, #140]	; (800627c <TIM_TI1_SetConfig+0xd8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_TI1_SetConfig+0x66>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a22      	ldr	r2, [pc, #136]	; (8006280 <TIM_TI1_SetConfig+0xdc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_TI1_SetConfig+0x66>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4a21      	ldr	r2, [pc, #132]	; (8006284 <TIM_TI1_SetConfig+0xe0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_TI1_SetConfig+0x66>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a20      	ldr	r2, [pc, #128]	; (8006288 <TIM_TI1_SetConfig+0xe4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d101      	bne.n	800620e <TIM_TI1_SetConfig+0x6a>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <TIM_TI1_SetConfig+0x6c>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f023 0303 	bic.w	r3, r3, #3
 800621a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e003      	b.n	800622e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f043 0301 	orr.w	r3, r3, #1
 800622c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	b2db      	uxtb	r3, r3
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f023 030a 	bic.w	r3, r3, #10
 8006248:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f003 030a 	and.w	r3, r3, #10
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40010000 	.word	0x40010000
 8006274:	40000400 	.word	0x40000400
 8006278:	40000800 	.word	0x40000800
 800627c:	40000c00 	.word	0x40000c00
 8006280:	40010400 	.word	0x40010400
 8006284:	40014000 	.word	0x40014000
 8006288:	40001800 	.word	0x40001800

0800628c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	f023 0201 	bic.w	r2, r3, #1
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 030a 	bic.w	r3, r3, #10
 80062c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b087      	sub	sp, #28
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f023 0210 	bic.w	r2, r3, #16
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006316:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	b29b      	uxth	r3, r3
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800633c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	621a      	str	r2, [r3, #32]
}
 8006358:	bf00      	nop
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f023 0210 	bic.w	r2, r3, #16
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800638e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	031b      	lsls	r3, r3, #12
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	621a      	str	r2, [r3, #32]
}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 0303 	bic.w	r3, r3, #3
 80063f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006400:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	b2db      	uxtb	r3, r3
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006414:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	621a      	str	r2, [r3, #32]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006468:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800647a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	031b      	lsls	r3, r3, #12
 8006480:	b29b      	uxth	r3, r3
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800648e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	031b      	lsls	r3, r3, #12
 8006494:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f043 0307 	orr.w	r3, r3, #7
 80064d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	609a      	str	r2, [r3, #8]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	021a      	lsls	r2, r3, #8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	431a      	orrs	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4313      	orrs	r3, r2
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	609a      	str	r2, [r3, #8]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006540:	2302      	movs	r3, #2
 8006542:	e06d      	b.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a30      	ldr	r2, [pc, #192]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a2f      	ldr	r2, [pc, #188]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d108      	bne.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800657e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006590:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a20      	ldr	r2, [pc, #128]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d022      	beq.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b6:	d01d      	beq.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d018      	beq.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1c      	ldr	r2, [pc, #112]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1a      	ldr	r2, [pc, #104]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00e      	beq.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a15      	ldr	r2, [pc, #84]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d009      	beq.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a16      	ldr	r2, [pc, #88]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a15      	ldr	r2, [pc, #84]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d10c      	bne.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	4313      	orrs	r3, r2
 8006604:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	40010000 	.word	0x40010000
 8006630:	40010400 	.word	0x40010400
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40014000 	.word	0x40014000
 8006644:	40001800 	.word	0x40001800

08006648 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006660:	2302      	movs	r3, #2
 8006662:	e065      	b.n	8006730 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	041b      	lsls	r3, r3, #16
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a16      	ldr	r2, [pc, #88]	; (800673c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a14      	ldr	r2, [pc, #80]	; (8006740 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d115      	bne.n	800671e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	051b      	lsls	r3, r3, #20
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	40010000 	.word	0x40010000
 8006740:	40010400 	.word	0x40010400

08006744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e040      	b.n	80067d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fb fd4c 	bl	8002204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2224      	movs	r2, #36	; 0x24
 8006770:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0201 	bic.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f82c 	bl	80067e0 <UART_SetConfig>
 8006788:	4603      	mov	r3, r0
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e022      	b.n	80067d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa84 	bl	8006ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0201 	orr.w	r2, r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fb0b 	bl	8006dec <UART_CheckIdleState>
 80067d6:	4603      	mov	r3, r0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4ba6      	ldr	r3, [pc, #664]	; (8006aa4 <UART_SetConfig+0x2c4>)
 800680c:	4013      	ands	r3, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	6979      	ldr	r1, [r7, #20]
 8006814:	430b      	orrs	r3, r1
 8006816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	430a      	orrs	r2, r1
 8006850:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a94      	ldr	r2, [pc, #592]	; (8006aa8 <UART_SetConfig+0x2c8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d120      	bne.n	800689e <UART_SetConfig+0xbe>
 800685c:	4b93      	ldr	r3, [pc, #588]	; (8006aac <UART_SetConfig+0x2cc>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b03      	cmp	r3, #3
 8006868:	d816      	bhi.n	8006898 <UART_SetConfig+0xb8>
 800686a:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <UART_SetConfig+0x90>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	08006881 	.word	0x08006881
 8006874:	0800688d 	.word	0x0800688d
 8006878:	08006887 	.word	0x08006887
 800687c:	08006893 	.word	0x08006893
 8006880:	2301      	movs	r3, #1
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	e150      	b.n	8006b28 <UART_SetConfig+0x348>
 8006886:	2302      	movs	r3, #2
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	e14d      	b.n	8006b28 <UART_SetConfig+0x348>
 800688c:	2304      	movs	r3, #4
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	e14a      	b.n	8006b28 <UART_SetConfig+0x348>
 8006892:	2308      	movs	r3, #8
 8006894:	77fb      	strb	r3, [r7, #31]
 8006896:	e147      	b.n	8006b28 <UART_SetConfig+0x348>
 8006898:	2310      	movs	r3, #16
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e144      	b.n	8006b28 <UART_SetConfig+0x348>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a83      	ldr	r2, [pc, #524]	; (8006ab0 <UART_SetConfig+0x2d0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d132      	bne.n	800690e <UART_SetConfig+0x12e>
 80068a8:	4b80      	ldr	r3, [pc, #512]	; (8006aac <UART_SetConfig+0x2cc>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	f003 030c 	and.w	r3, r3, #12
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d828      	bhi.n	8006908 <UART_SetConfig+0x128>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0xdc>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068f1 	.word	0x080068f1
 80068c0:	08006909 	.word	0x08006909
 80068c4:	08006909 	.word	0x08006909
 80068c8:	08006909 	.word	0x08006909
 80068cc:	080068fd 	.word	0x080068fd
 80068d0:	08006909 	.word	0x08006909
 80068d4:	08006909 	.word	0x08006909
 80068d8:	08006909 	.word	0x08006909
 80068dc:	080068f7 	.word	0x080068f7
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006909 	.word	0x08006909
 80068e8:	08006909 	.word	0x08006909
 80068ec:	08006903 	.word	0x08006903
 80068f0:	2300      	movs	r3, #0
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	e118      	b.n	8006b28 <UART_SetConfig+0x348>
 80068f6:	2302      	movs	r3, #2
 80068f8:	77fb      	strb	r3, [r7, #31]
 80068fa:	e115      	b.n	8006b28 <UART_SetConfig+0x348>
 80068fc:	2304      	movs	r3, #4
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e112      	b.n	8006b28 <UART_SetConfig+0x348>
 8006902:	2308      	movs	r3, #8
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	e10f      	b.n	8006b28 <UART_SetConfig+0x348>
 8006908:	2310      	movs	r3, #16
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e10c      	b.n	8006b28 <UART_SetConfig+0x348>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a68      	ldr	r2, [pc, #416]	; (8006ab4 <UART_SetConfig+0x2d4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d120      	bne.n	800695a <UART_SetConfig+0x17a>
 8006918:	4b64      	ldr	r3, [pc, #400]	; (8006aac <UART_SetConfig+0x2cc>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006922:	2b30      	cmp	r3, #48	; 0x30
 8006924:	d013      	beq.n	800694e <UART_SetConfig+0x16e>
 8006926:	2b30      	cmp	r3, #48	; 0x30
 8006928:	d814      	bhi.n	8006954 <UART_SetConfig+0x174>
 800692a:	2b20      	cmp	r3, #32
 800692c:	d009      	beq.n	8006942 <UART_SetConfig+0x162>
 800692e:	2b20      	cmp	r3, #32
 8006930:	d810      	bhi.n	8006954 <UART_SetConfig+0x174>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <UART_SetConfig+0x15c>
 8006936:	2b10      	cmp	r3, #16
 8006938:	d006      	beq.n	8006948 <UART_SetConfig+0x168>
 800693a:	e00b      	b.n	8006954 <UART_SetConfig+0x174>
 800693c:	2300      	movs	r3, #0
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e0f2      	b.n	8006b28 <UART_SetConfig+0x348>
 8006942:	2302      	movs	r3, #2
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e0ef      	b.n	8006b28 <UART_SetConfig+0x348>
 8006948:	2304      	movs	r3, #4
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e0ec      	b.n	8006b28 <UART_SetConfig+0x348>
 800694e:	2308      	movs	r3, #8
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e0e9      	b.n	8006b28 <UART_SetConfig+0x348>
 8006954:	2310      	movs	r3, #16
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e0e6      	b.n	8006b28 <UART_SetConfig+0x348>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a56      	ldr	r2, [pc, #344]	; (8006ab8 <UART_SetConfig+0x2d8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d120      	bne.n	80069a6 <UART_SetConfig+0x1c6>
 8006964:	4b51      	ldr	r3, [pc, #324]	; (8006aac <UART_SetConfig+0x2cc>)
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800696e:	2bc0      	cmp	r3, #192	; 0xc0
 8006970:	d013      	beq.n	800699a <UART_SetConfig+0x1ba>
 8006972:	2bc0      	cmp	r3, #192	; 0xc0
 8006974:	d814      	bhi.n	80069a0 <UART_SetConfig+0x1c0>
 8006976:	2b80      	cmp	r3, #128	; 0x80
 8006978:	d009      	beq.n	800698e <UART_SetConfig+0x1ae>
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d810      	bhi.n	80069a0 <UART_SetConfig+0x1c0>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <UART_SetConfig+0x1a8>
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d006      	beq.n	8006994 <UART_SetConfig+0x1b4>
 8006986:	e00b      	b.n	80069a0 <UART_SetConfig+0x1c0>
 8006988:	2300      	movs	r3, #0
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e0cc      	b.n	8006b28 <UART_SetConfig+0x348>
 800698e:	2302      	movs	r3, #2
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e0c9      	b.n	8006b28 <UART_SetConfig+0x348>
 8006994:	2304      	movs	r3, #4
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e0c6      	b.n	8006b28 <UART_SetConfig+0x348>
 800699a:	2308      	movs	r3, #8
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e0c3      	b.n	8006b28 <UART_SetConfig+0x348>
 80069a0:	2310      	movs	r3, #16
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e0c0      	b.n	8006b28 <UART_SetConfig+0x348>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a44      	ldr	r2, [pc, #272]	; (8006abc <UART_SetConfig+0x2dc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d125      	bne.n	80069fc <UART_SetConfig+0x21c>
 80069b0:	4b3e      	ldr	r3, [pc, #248]	; (8006aac <UART_SetConfig+0x2cc>)
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069be:	d017      	beq.n	80069f0 <UART_SetConfig+0x210>
 80069c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c4:	d817      	bhi.n	80069f6 <UART_SetConfig+0x216>
 80069c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ca:	d00b      	beq.n	80069e4 <UART_SetConfig+0x204>
 80069cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d0:	d811      	bhi.n	80069f6 <UART_SetConfig+0x216>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <UART_SetConfig+0x1fe>
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069da:	d006      	beq.n	80069ea <UART_SetConfig+0x20a>
 80069dc:	e00b      	b.n	80069f6 <UART_SetConfig+0x216>
 80069de:	2300      	movs	r3, #0
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e0a1      	b.n	8006b28 <UART_SetConfig+0x348>
 80069e4:	2302      	movs	r3, #2
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e09e      	b.n	8006b28 <UART_SetConfig+0x348>
 80069ea:	2304      	movs	r3, #4
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e09b      	b.n	8006b28 <UART_SetConfig+0x348>
 80069f0:	2308      	movs	r3, #8
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e098      	b.n	8006b28 <UART_SetConfig+0x348>
 80069f6:	2310      	movs	r3, #16
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e095      	b.n	8006b28 <UART_SetConfig+0x348>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a2f      	ldr	r2, [pc, #188]	; (8006ac0 <UART_SetConfig+0x2e0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d125      	bne.n	8006a52 <UART_SetConfig+0x272>
 8006a06:	4b29      	ldr	r3, [pc, #164]	; (8006aac <UART_SetConfig+0x2cc>)
 8006a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a14:	d017      	beq.n	8006a46 <UART_SetConfig+0x266>
 8006a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a1a:	d817      	bhi.n	8006a4c <UART_SetConfig+0x26c>
 8006a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a20:	d00b      	beq.n	8006a3a <UART_SetConfig+0x25a>
 8006a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a26:	d811      	bhi.n	8006a4c <UART_SetConfig+0x26c>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <UART_SetConfig+0x254>
 8006a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a30:	d006      	beq.n	8006a40 <UART_SetConfig+0x260>
 8006a32:	e00b      	b.n	8006a4c <UART_SetConfig+0x26c>
 8006a34:	2301      	movs	r3, #1
 8006a36:	77fb      	strb	r3, [r7, #31]
 8006a38:	e076      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	77fb      	strb	r3, [r7, #31]
 8006a3e:	e073      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a40:	2304      	movs	r3, #4
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e070      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a46:	2308      	movs	r3, #8
 8006a48:	77fb      	strb	r3, [r7, #31]
 8006a4a:	e06d      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e06a      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <UART_SetConfig+0x2e4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d138      	bne.n	8006ace <UART_SetConfig+0x2ee>
 8006a5c:	4b13      	ldr	r3, [pc, #76]	; (8006aac <UART_SetConfig+0x2cc>)
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a62:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a6a:	d017      	beq.n	8006a9c <UART_SetConfig+0x2bc>
 8006a6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a70:	d82a      	bhi.n	8006ac8 <UART_SetConfig+0x2e8>
 8006a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a76:	d00b      	beq.n	8006a90 <UART_SetConfig+0x2b0>
 8006a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7c:	d824      	bhi.n	8006ac8 <UART_SetConfig+0x2e8>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <UART_SetConfig+0x2aa>
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	d006      	beq.n	8006a96 <UART_SetConfig+0x2b6>
 8006a88:	e01e      	b.n	8006ac8 <UART_SetConfig+0x2e8>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	77fb      	strb	r3, [r7, #31]
 8006a8e:	e04b      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a90:	2302      	movs	r3, #2
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e048      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a96:	2304      	movs	r3, #4
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e045      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e042      	b.n	8006b28 <UART_SetConfig+0x348>
 8006aa2:	bf00      	nop
 8006aa4:	efff69f3 	.word	0xefff69f3
 8006aa8:	40011000 	.word	0x40011000
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	40004400 	.word	0x40004400
 8006ab4:	40004800 	.word	0x40004800
 8006ab8:	40004c00 	.word	0x40004c00
 8006abc:	40005000 	.word	0x40005000
 8006ac0:	40011400 	.word	0x40011400
 8006ac4:	40007800 	.word	0x40007800
 8006ac8:	2310      	movs	r3, #16
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e02c      	b.n	8006b28 <UART_SetConfig+0x348>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a72      	ldr	r2, [pc, #456]	; (8006c9c <UART_SetConfig+0x4bc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d125      	bne.n	8006b24 <UART_SetConfig+0x344>
 8006ad8:	4b71      	ldr	r3, [pc, #452]	; (8006ca0 <UART_SetConfig+0x4c0>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ae2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ae6:	d017      	beq.n	8006b18 <UART_SetConfig+0x338>
 8006ae8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006aec:	d817      	bhi.n	8006b1e <UART_SetConfig+0x33e>
 8006aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af2:	d00b      	beq.n	8006b0c <UART_SetConfig+0x32c>
 8006af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af8:	d811      	bhi.n	8006b1e <UART_SetConfig+0x33e>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <UART_SetConfig+0x326>
 8006afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b02:	d006      	beq.n	8006b12 <UART_SetConfig+0x332>
 8006b04:	e00b      	b.n	8006b1e <UART_SetConfig+0x33e>
 8006b06:	2300      	movs	r3, #0
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e00d      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e00a      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b12:	2304      	movs	r3, #4
 8006b14:	77fb      	strb	r3, [r7, #31]
 8006b16:	e007      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e004      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b1e:	2310      	movs	r3, #16
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e001      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b24:	2310      	movs	r3, #16
 8006b26:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b30:	d15b      	bne.n	8006bea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b32:	7ffb      	ldrb	r3, [r7, #31]
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d828      	bhi.n	8006b8a <UART_SetConfig+0x3aa>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x360>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b6d 	.word	0x08006b6d
 8006b48:	08006b75 	.word	0x08006b75
 8006b4c:	08006b8b 	.word	0x08006b8b
 8006b50:	08006b7b 	.word	0x08006b7b
 8006b54:	08006b8b 	.word	0x08006b8b
 8006b58:	08006b8b 	.word	0x08006b8b
 8006b5c:	08006b8b 	.word	0x08006b8b
 8006b60:	08006b83 	.word	0x08006b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7fd fef6 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8006b68:	61b8      	str	r0, [r7, #24]
        break;
 8006b6a:	e013      	b.n	8006b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b6c:	f7fd ff06 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 8006b70:	61b8      	str	r0, [r7, #24]
        break;
 8006b72:	e00f      	b.n	8006b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b74:	4b4b      	ldr	r3, [pc, #300]	; (8006ca4 <UART_SetConfig+0x4c4>)
 8006b76:	61bb      	str	r3, [r7, #24]
        break;
 8006b78:	e00c      	b.n	8006b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b7a:	f7fd fdd9 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8006b7e:	61b8      	str	r0, [r7, #24]
        break;
 8006b80:	e008      	b.n	8006b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b86:	61bb      	str	r3, [r7, #24]
        break;
 8006b88:	e004      	b.n	8006b94 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	77bb      	strb	r3, [r7, #30]
        break;
 8006b92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d074      	beq.n	8006c84 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	005a      	lsls	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b0f      	cmp	r3, #15
 8006bb4:	d916      	bls.n	8006be4 <UART_SetConfig+0x404>
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bbc:	d212      	bcs.n	8006be4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f023 030f 	bic.w	r3, r3, #15
 8006bc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	89fb      	ldrh	r3, [r7, #14]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	89fa      	ldrh	r2, [r7, #14]
 8006be0:	60da      	str	r2, [r3, #12]
 8006be2:	e04f      	b.n	8006c84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	77bb      	strb	r3, [r7, #30]
 8006be8:	e04c      	b.n	8006c84 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bea:	7ffb      	ldrb	r3, [r7, #31]
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d828      	bhi.n	8006c42 <UART_SetConfig+0x462>
 8006bf0:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <UART_SetConfig+0x418>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c25 	.word	0x08006c25
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	08006c43 	.word	0x08006c43
 8006c08:	08006c33 	.word	0x08006c33
 8006c0c:	08006c43 	.word	0x08006c43
 8006c10:	08006c43 	.word	0x08006c43
 8006c14:	08006c43 	.word	0x08006c43
 8006c18:	08006c3b 	.word	0x08006c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c1c:	f7fd fe9a 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8006c20:	61b8      	str	r0, [r7, #24]
        break;
 8006c22:	e013      	b.n	8006c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c24:	f7fd feaa 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 8006c28:	61b8      	str	r0, [r7, #24]
        break;
 8006c2a:	e00f      	b.n	8006c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <UART_SetConfig+0x4c4>)
 8006c2e:	61bb      	str	r3, [r7, #24]
        break;
 8006c30:	e00c      	b.n	8006c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c32:	f7fd fd7d 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8006c36:	61b8      	str	r0, [r7, #24]
        break;
 8006c38:	e008      	b.n	8006c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3e:	61bb      	str	r3, [r7, #24]
        break;
 8006c40:	e004      	b.n	8006c4c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	77bb      	strb	r3, [r7, #30]
        break;
 8006c4a:	bf00      	nop
    }

    if (pclk != 0U)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d018      	beq.n	8006c84 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	085a      	lsrs	r2, r3, #1
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	441a      	add	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b0f      	cmp	r3, #15
 8006c6a:	d909      	bls.n	8006c80 <UART_SetConfig+0x4a0>
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c72:	d205      	bcs.n	8006c80 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60da      	str	r2, [r3, #12]
 8006c7e:	e001      	b.n	8006c84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c90:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40007c00 	.word	0x40007c00
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	00f42400 	.word	0x00f42400

08006ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01a      	beq.n	8006dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da6:	d10a      	bne.n	8006dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	605a      	str	r2, [r3, #4]
  }
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dfc:	f7fb fcae 	bl	800275c <HAL_GetTick>
 8006e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d10e      	bne.n	8006e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f831 	bl	8006e86 <UART_WaitOnFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e027      	b.n	8006e7e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d10e      	bne.n	8006e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f81b 	bl	8006e86 <UART_WaitOnFlagUntilTimeout>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e011      	b.n	8006e7e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b09c      	sub	sp, #112	; 0x70
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	4613      	mov	r3, r2
 8006e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e96:	e0a7      	b.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e9e:	f000 80a3 	beq.w	8006fe8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea2:	f7fb fc5b 	bl	800275c <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d302      	bcc.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d13f      	bne.n	8006f38 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e6      	bne.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	663b      	str	r3, [r7, #96]	; 0x60
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e5      	bne.n	8006eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e068      	b.n	800700a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d050      	beq.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f54:	d148      	bne.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f80:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e6      	bne.n	8006f60 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3308      	adds	r3, #8
 8006f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f023 0301 	bic.w	r3, r3, #1
 8006fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fb2:	623a      	str	r2, [r7, #32]
 8006fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	69f9      	ldr	r1, [r7, #28]
 8006fb8:	6a3a      	ldr	r2, [r7, #32]
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e5      	bne.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e010      	b.n	800700a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	69da      	ldr	r2, [r3, #28]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	429a      	cmp	r2, r3
 8007004:	f43f af48 	beq.w	8006e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3770      	adds	r7, #112	; 0x70
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <findslot>:
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <findslot+0x2c>)
 8007016:	b510      	push	{r4, lr}
 8007018:	4604      	mov	r4, r0
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	b118      	cbz	r0, 8007026 <findslot+0x12>
 800701e:	6983      	ldr	r3, [r0, #24]
 8007020:	b90b      	cbnz	r3, 8007026 <findslot+0x12>
 8007022:	f000 faf7 	bl	8007614 <__sinit>
 8007026:	2c13      	cmp	r4, #19
 8007028:	d807      	bhi.n	800703a <findslot+0x26>
 800702a:	4806      	ldr	r0, [pc, #24]	; (8007044 <findslot+0x30>)
 800702c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007030:	3201      	adds	r2, #1
 8007032:	d002      	beq.n	800703a <findslot+0x26>
 8007034:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007038:	bd10      	pop	{r4, pc}
 800703a:	2000      	movs	r0, #0
 800703c:	e7fc      	b.n	8007038 <findslot+0x24>
 800703e:	bf00      	nop
 8007040:	20000018 	.word	0x20000018
 8007044:	200006d8 	.word	0x200006d8

08007048 <error>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	4604      	mov	r4, r0
 800704c:	f000 fa84 	bl	8007558 <__errno>
 8007050:	2613      	movs	r6, #19
 8007052:	4605      	mov	r5, r0
 8007054:	2700      	movs	r7, #0
 8007056:	4630      	mov	r0, r6
 8007058:	4639      	mov	r1, r7
 800705a:	beab      	bkpt	0x00ab
 800705c:	4606      	mov	r6, r0
 800705e:	602e      	str	r6, [r5, #0]
 8007060:	4620      	mov	r0, r4
 8007062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007064 <checkerror>:
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d101      	bne.n	800706c <checkerror+0x8>
 8007068:	f7ff bfee 	b.w	8007048 <error>
 800706c:	4770      	bx	lr

0800706e <_swiread>:
 800706e:	b530      	push	{r4, r5, lr}
 8007070:	b085      	sub	sp, #20
 8007072:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007076:	9203      	str	r2, [sp, #12]
 8007078:	2406      	movs	r4, #6
 800707a:	ad01      	add	r5, sp, #4
 800707c:	4620      	mov	r0, r4
 800707e:	4629      	mov	r1, r5
 8007080:	beab      	bkpt	0x00ab
 8007082:	4604      	mov	r4, r0
 8007084:	4620      	mov	r0, r4
 8007086:	f7ff ffed 	bl	8007064 <checkerror>
 800708a:	b005      	add	sp, #20
 800708c:	bd30      	pop	{r4, r5, pc}

0800708e <_read>:
 800708e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007090:	4615      	mov	r5, r2
 8007092:	9101      	str	r1, [sp, #4]
 8007094:	f7ff ffbe 	bl	8007014 <findslot>
 8007098:	9901      	ldr	r1, [sp, #4]
 800709a:	4604      	mov	r4, r0
 800709c:	b938      	cbnz	r0, 80070ae <_read+0x20>
 800709e:	f000 fa5b 	bl	8007558 <__errno>
 80070a2:	2309      	movs	r3, #9
 80070a4:	6003      	str	r3, [r0, #0]
 80070a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070aa:	b003      	add	sp, #12
 80070ac:	bd30      	pop	{r4, r5, pc}
 80070ae:	6800      	ldr	r0, [r0, #0]
 80070b0:	462a      	mov	r2, r5
 80070b2:	f7ff ffdc 	bl	800706e <_swiread>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	d0f7      	beq.n	80070aa <_read+0x1c>
 80070ba:	6863      	ldr	r3, [r4, #4]
 80070bc:	1a2a      	subs	r2, r5, r0
 80070be:	4413      	add	r3, r2
 80070c0:	6063      	str	r3, [r4, #4]
 80070c2:	4610      	mov	r0, r2
 80070c4:	e7f1      	b.n	80070aa <_read+0x1c>

080070c6 <_swilseek>:
 80070c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070c8:	460c      	mov	r4, r1
 80070ca:	4616      	mov	r6, r2
 80070cc:	f7ff ffa2 	bl	8007014 <findslot>
 80070d0:	4605      	mov	r5, r0
 80070d2:	b940      	cbnz	r0, 80070e6 <_swilseek+0x20>
 80070d4:	f000 fa40 	bl	8007558 <__errno>
 80070d8:	2309      	movs	r3, #9
 80070da:	6003      	str	r3, [r0, #0]
 80070dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070e0:	4620      	mov	r0, r4
 80070e2:	b003      	add	sp, #12
 80070e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e6:	2e02      	cmp	r6, #2
 80070e8:	d903      	bls.n	80070f2 <_swilseek+0x2c>
 80070ea:	f000 fa35 	bl	8007558 <__errno>
 80070ee:	2316      	movs	r3, #22
 80070f0:	e7f3      	b.n	80070da <_swilseek+0x14>
 80070f2:	2e01      	cmp	r6, #1
 80070f4:	d112      	bne.n	800711c <_swilseek+0x56>
 80070f6:	6843      	ldr	r3, [r0, #4]
 80070f8:	18e4      	adds	r4, r4, r3
 80070fa:	d4f6      	bmi.n	80070ea <_swilseek+0x24>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	260a      	movs	r6, #10
 8007100:	e9cd 3400 	strd	r3, r4, [sp]
 8007104:	466f      	mov	r7, sp
 8007106:	4630      	mov	r0, r6
 8007108:	4639      	mov	r1, r7
 800710a:	beab      	bkpt	0x00ab
 800710c:	4606      	mov	r6, r0
 800710e:	4630      	mov	r0, r6
 8007110:	f7ff ffa8 	bl	8007064 <checkerror>
 8007114:	2800      	cmp	r0, #0
 8007116:	dbe1      	blt.n	80070dc <_swilseek+0x16>
 8007118:	606c      	str	r4, [r5, #4]
 800711a:	e7e1      	b.n	80070e0 <_swilseek+0x1a>
 800711c:	2e02      	cmp	r6, #2
 800711e:	d1ed      	bne.n	80070fc <_swilseek+0x36>
 8007120:	6803      	ldr	r3, [r0, #0]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	260c      	movs	r6, #12
 8007126:	466f      	mov	r7, sp
 8007128:	4630      	mov	r0, r6
 800712a:	4639      	mov	r1, r7
 800712c:	beab      	bkpt	0x00ab
 800712e:	4606      	mov	r6, r0
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff ff97 	bl	8007064 <checkerror>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	d0d0      	beq.n	80070dc <_swilseek+0x16>
 800713a:	4404      	add	r4, r0
 800713c:	e7de      	b.n	80070fc <_swilseek+0x36>

0800713e <_lseek>:
 800713e:	f7ff bfc2 	b.w	80070c6 <_swilseek>

08007142 <_swiwrite>:
 8007142:	b530      	push	{r4, r5, lr}
 8007144:	b085      	sub	sp, #20
 8007146:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800714a:	9203      	str	r2, [sp, #12]
 800714c:	2405      	movs	r4, #5
 800714e:	ad01      	add	r5, sp, #4
 8007150:	4620      	mov	r0, r4
 8007152:	4629      	mov	r1, r5
 8007154:	beab      	bkpt	0x00ab
 8007156:	4604      	mov	r4, r0
 8007158:	4620      	mov	r0, r4
 800715a:	f7ff ff83 	bl	8007064 <checkerror>
 800715e:	b005      	add	sp, #20
 8007160:	bd30      	pop	{r4, r5, pc}

08007162 <_write>:
 8007162:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007164:	4615      	mov	r5, r2
 8007166:	9101      	str	r1, [sp, #4]
 8007168:	f7ff ff54 	bl	8007014 <findslot>
 800716c:	9901      	ldr	r1, [sp, #4]
 800716e:	4604      	mov	r4, r0
 8007170:	b930      	cbnz	r0, 8007180 <_write+0x1e>
 8007172:	f000 f9f1 	bl	8007558 <__errno>
 8007176:	2309      	movs	r3, #9
 8007178:	6003      	str	r3, [r0, #0]
 800717a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800717e:	e012      	b.n	80071a6 <_write+0x44>
 8007180:	6800      	ldr	r0, [r0, #0]
 8007182:	462a      	mov	r2, r5
 8007184:	f7ff ffdd 	bl	8007142 <_swiwrite>
 8007188:	2800      	cmp	r0, #0
 800718a:	dbf6      	blt.n	800717a <_write+0x18>
 800718c:	6862      	ldr	r2, [r4, #4]
 800718e:	1a2b      	subs	r3, r5, r0
 8007190:	441a      	add	r2, r3
 8007192:	42a8      	cmp	r0, r5
 8007194:	6062      	str	r2, [r4, #4]
 8007196:	d105      	bne.n	80071a4 <_write+0x42>
 8007198:	2000      	movs	r0, #0
 800719a:	b003      	add	sp, #12
 800719c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071a0:	f7ff bf52 	b.w	8007048 <error>
 80071a4:	4618      	mov	r0, r3
 80071a6:	b003      	add	sp, #12
 80071a8:	bd30      	pop	{r4, r5, pc}

080071aa <_swiclose>:
 80071aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ac:	2402      	movs	r4, #2
 80071ae:	9001      	str	r0, [sp, #4]
 80071b0:	ad01      	add	r5, sp, #4
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	beab      	bkpt	0x00ab
 80071b8:	4604      	mov	r4, r0
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7ff ff52 	bl	8007064 <checkerror>
 80071c0:	b003      	add	sp, #12
 80071c2:	bd30      	pop	{r4, r5, pc}

080071c4 <_close>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4605      	mov	r5, r0
 80071c8:	f7ff ff24 	bl	8007014 <findslot>
 80071cc:	4604      	mov	r4, r0
 80071ce:	b930      	cbnz	r0, 80071de <_close+0x1a>
 80071d0:	f000 f9c2 	bl	8007558 <__errno>
 80071d4:	2309      	movs	r3, #9
 80071d6:	6003      	str	r3, [r0, #0]
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071dc:	bd38      	pop	{r3, r4, r5, pc}
 80071de:	3d01      	subs	r5, #1
 80071e0:	2d01      	cmp	r5, #1
 80071e2:	d809      	bhi.n	80071f8 <_close+0x34>
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <_close+0x48>)
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d104      	bne.n	80071f8 <_close+0x34>
 80071ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071f2:	6003      	str	r3, [r0, #0]
 80071f4:	2000      	movs	r0, #0
 80071f6:	e7f1      	b.n	80071dc <_close+0x18>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	f7ff ffd6 	bl	80071aa <_swiclose>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d1ec      	bne.n	80071dc <_close+0x18>
 8007202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	e7e8      	b.n	80071dc <_close+0x18>
 800720a:	bf00      	nop
 800720c:	200006d8 	.word	0x200006d8

08007210 <_swistat>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	460c      	mov	r4, r1
 8007214:	f7ff fefe 	bl	8007014 <findslot>
 8007218:	4605      	mov	r5, r0
 800721a:	b930      	cbnz	r0, 800722a <_swistat+0x1a>
 800721c:	f000 f99c 	bl	8007558 <__errno>
 8007220:	2309      	movs	r3, #9
 8007222:	6003      	str	r3, [r0, #0]
 8007224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007228:	bd70      	pop	{r4, r5, r6, pc}
 800722a:	6863      	ldr	r3, [r4, #4]
 800722c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007230:	6063      	str	r3, [r4, #4]
 8007232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007236:	64a3      	str	r3, [r4, #72]	; 0x48
 8007238:	260c      	movs	r6, #12
 800723a:	4630      	mov	r0, r6
 800723c:	4629      	mov	r1, r5
 800723e:	beab      	bkpt	0x00ab
 8007240:	4605      	mov	r5, r0
 8007242:	4628      	mov	r0, r5
 8007244:	f7ff ff0e 	bl	8007064 <checkerror>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	bf1c      	itt	ne
 800724c:	6120      	strne	r0, [r4, #16]
 800724e:	2000      	movne	r0, #0
 8007250:	e7ea      	b.n	8007228 <_swistat+0x18>

08007252 <_fstat>:
 8007252:	460b      	mov	r3, r1
 8007254:	b510      	push	{r4, lr}
 8007256:	2100      	movs	r1, #0
 8007258:	4604      	mov	r4, r0
 800725a:	2258      	movs	r2, #88	; 0x58
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fa9e 	bl	800779e <memset>
 8007262:	4601      	mov	r1, r0
 8007264:	4620      	mov	r0, r4
 8007266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800726a:	f7ff bfd1 	b.w	8007210 <_swistat>

0800726e <_stat>:
 800726e:	b538      	push	{r3, r4, r5, lr}
 8007270:	460d      	mov	r5, r1
 8007272:	4604      	mov	r4, r0
 8007274:	2258      	movs	r2, #88	; 0x58
 8007276:	2100      	movs	r1, #0
 8007278:	4628      	mov	r0, r5
 800727a:	f000 fa90 	bl	800779e <memset>
 800727e:	4620      	mov	r0, r4
 8007280:	2100      	movs	r1, #0
 8007282:	f000 f811 	bl	80072a8 <_swiopen>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	4604      	mov	r4, r0
 800728a:	d00b      	beq.n	80072a4 <_stat+0x36>
 800728c:	686b      	ldr	r3, [r5, #4]
 800728e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007292:	606b      	str	r3, [r5, #4]
 8007294:	4629      	mov	r1, r5
 8007296:	f7ff ffbb 	bl	8007210 <_swistat>
 800729a:	4605      	mov	r5, r0
 800729c:	4620      	mov	r0, r4
 800729e:	f7ff ff91 	bl	80071c4 <_close>
 80072a2:	462c      	mov	r4, r5
 80072a4:	4620      	mov	r0, r4
 80072a6:	bd38      	pop	{r3, r4, r5, pc}

080072a8 <_swiopen>:
 80072a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072ac:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8007358 <_swiopen+0xb0>
 80072b0:	b097      	sub	sp, #92	; 0x5c
 80072b2:	4607      	mov	r7, r0
 80072b4:	460e      	mov	r6, r1
 80072b6:	2500      	movs	r5, #0
 80072b8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80072bc:	1c61      	adds	r1, r4, #1
 80072be:	d037      	beq.n	8007330 <_swiopen+0x88>
 80072c0:	3501      	adds	r5, #1
 80072c2:	2d14      	cmp	r5, #20
 80072c4:	d1f8      	bne.n	80072b8 <_swiopen+0x10>
 80072c6:	f000 f947 	bl	8007558 <__errno>
 80072ca:	2318      	movs	r3, #24
 80072cc:	6003      	str	r3, [r0, #0]
 80072ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072d2:	e03d      	b.n	8007350 <_swiopen+0xa8>
 80072d4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80072d8:	f240 6301 	movw	r3, #1537	; 0x601
 80072dc:	07b2      	lsls	r2, r6, #30
 80072de:	bf48      	it	mi
 80072e0:	f044 0402 	orrmi.w	r4, r4, #2
 80072e4:	421e      	tst	r6, r3
 80072e6:	bf18      	it	ne
 80072e8:	f044 0404 	orrne.w	r4, r4, #4
 80072ec:	0733      	lsls	r3, r6, #28
 80072ee:	bf48      	it	mi
 80072f0:	f024 0404 	bicmi.w	r4, r4, #4
 80072f4:	4638      	mov	r0, r7
 80072f6:	bf48      	it	mi
 80072f8:	f044 0408 	orrmi.w	r4, r4, #8
 80072fc:	9700      	str	r7, [sp, #0]
 80072fe:	f7f8 ff9f 	bl	8000240 <strlen>
 8007302:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007306:	2401      	movs	r4, #1
 8007308:	4620      	mov	r0, r4
 800730a:	4649      	mov	r1, r9
 800730c:	beab      	bkpt	0x00ab
 800730e:	4604      	mov	r4, r0
 8007310:	2c00      	cmp	r4, #0
 8007312:	db08      	blt.n	8007326 <_swiopen+0x7e>
 8007314:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8007318:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800731c:	2300      	movs	r3, #0
 800731e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007322:	462c      	mov	r4, r5
 8007324:	e014      	b.n	8007350 <_swiopen+0xa8>
 8007326:	4620      	mov	r0, r4
 8007328:	f7ff fe8e 	bl	8007048 <error>
 800732c:	4604      	mov	r4, r0
 800732e:	e00f      	b.n	8007350 <_swiopen+0xa8>
 8007330:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8007334:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007338:	46e9      	mov	r9, sp
 800733a:	d1cb      	bne.n	80072d4 <_swiopen+0x2c>
 800733c:	4649      	mov	r1, r9
 800733e:	4638      	mov	r0, r7
 8007340:	f7ff ff95 	bl	800726e <_stat>
 8007344:	3001      	adds	r0, #1
 8007346:	d0c5      	beq.n	80072d4 <_swiopen+0x2c>
 8007348:	f000 f906 	bl	8007558 <__errno>
 800734c:	2311      	movs	r3, #17
 800734e:	6003      	str	r3, [r0, #0]
 8007350:	4620      	mov	r0, r4
 8007352:	b017      	add	sp, #92	; 0x5c
 8007354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007358:	200006d8 	.word	0x200006d8

0800735c <_get_semihosting_exts>:
 800735c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007360:	4606      	mov	r6, r0
 8007362:	460f      	mov	r7, r1
 8007364:	482a      	ldr	r0, [pc, #168]	; (8007410 <_get_semihosting_exts+0xb4>)
 8007366:	2100      	movs	r1, #0
 8007368:	4615      	mov	r5, r2
 800736a:	f7ff ff9d 	bl	80072a8 <_swiopen>
 800736e:	462a      	mov	r2, r5
 8007370:	4604      	mov	r4, r0
 8007372:	2100      	movs	r1, #0
 8007374:	4630      	mov	r0, r6
 8007376:	f000 fa12 	bl	800779e <memset>
 800737a:	1c63      	adds	r3, r4, #1
 800737c:	d016      	beq.n	80073ac <_get_semihosting_exts+0x50>
 800737e:	4620      	mov	r0, r4
 8007380:	f7ff fe48 	bl	8007014 <findslot>
 8007384:	f04f 090c 	mov.w	r9, #12
 8007388:	4680      	mov	r8, r0
 800738a:	4648      	mov	r0, r9
 800738c:	4641      	mov	r1, r8
 800738e:	beab      	bkpt	0x00ab
 8007390:	4680      	mov	r8, r0
 8007392:	4640      	mov	r0, r8
 8007394:	f7ff fe66 	bl	8007064 <checkerror>
 8007398:	2803      	cmp	r0, #3
 800739a:	dd02      	ble.n	80073a2 <_get_semihosting_exts+0x46>
 800739c:	1ec3      	subs	r3, r0, #3
 800739e:	42ab      	cmp	r3, r5
 80073a0:	dc08      	bgt.n	80073b4 <_get_semihosting_exts+0x58>
 80073a2:	4620      	mov	r0, r4
 80073a4:	f7ff ff0e 	bl	80071c4 <_close>
 80073a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80073ac:	4620      	mov	r0, r4
 80073ae:	b003      	add	sp, #12
 80073b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073b4:	2204      	movs	r2, #4
 80073b6:	eb0d 0102 	add.w	r1, sp, r2
 80073ba:	4620      	mov	r0, r4
 80073bc:	f7ff fe67 	bl	800708e <_read>
 80073c0:	2803      	cmp	r0, #3
 80073c2:	ddee      	ble.n	80073a2 <_get_semihosting_exts+0x46>
 80073c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80073c8:	2b53      	cmp	r3, #83	; 0x53
 80073ca:	d1ea      	bne.n	80073a2 <_get_semihosting_exts+0x46>
 80073cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80073d0:	2b48      	cmp	r3, #72	; 0x48
 80073d2:	d1e6      	bne.n	80073a2 <_get_semihosting_exts+0x46>
 80073d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80073d8:	2b46      	cmp	r3, #70	; 0x46
 80073da:	d1e2      	bne.n	80073a2 <_get_semihosting_exts+0x46>
 80073dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80073e0:	2b42      	cmp	r3, #66	; 0x42
 80073e2:	d1de      	bne.n	80073a2 <_get_semihosting_exts+0x46>
 80073e4:	2201      	movs	r2, #1
 80073e6:	4639      	mov	r1, r7
 80073e8:	4620      	mov	r0, r4
 80073ea:	f7ff fe6c 	bl	80070c6 <_swilseek>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	dbd7      	blt.n	80073a2 <_get_semihosting_exts+0x46>
 80073f2:	462a      	mov	r2, r5
 80073f4:	4631      	mov	r1, r6
 80073f6:	4620      	mov	r0, r4
 80073f8:	f7ff fe49 	bl	800708e <_read>
 80073fc:	4605      	mov	r5, r0
 80073fe:	4620      	mov	r0, r4
 8007400:	f7ff fee0 	bl	80071c4 <_close>
 8007404:	4628      	mov	r0, r5
 8007406:	f7ff fe2d 	bl	8007064 <checkerror>
 800740a:	4604      	mov	r4, r0
 800740c:	e7ce      	b.n	80073ac <_get_semihosting_exts+0x50>
 800740e:	bf00      	nop
 8007410:	080086b0 	.word	0x080086b0

08007414 <initialise_semihosting_exts>:
 8007414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007416:	4d0a      	ldr	r5, [pc, #40]	; (8007440 <initialise_semihosting_exts+0x2c>)
 8007418:	4c0a      	ldr	r4, [pc, #40]	; (8007444 <initialise_semihosting_exts+0x30>)
 800741a:	2100      	movs	r1, #0
 800741c:	2201      	movs	r2, #1
 800741e:	a801      	add	r0, sp, #4
 8007420:	6029      	str	r1, [r5, #0]
 8007422:	6022      	str	r2, [r4, #0]
 8007424:	f7ff ff9a 	bl	800735c <_get_semihosting_exts>
 8007428:	2800      	cmp	r0, #0
 800742a:	dd07      	ble.n	800743c <initialise_semihosting_exts+0x28>
 800742c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007430:	f003 0201 	and.w	r2, r3, #1
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	602a      	str	r2, [r5, #0]
 800743a:	6023      	str	r3, [r4, #0]
 800743c:	b003      	add	sp, #12
 800743e:	bd30      	pop	{r4, r5, pc}
 8007440:	20000010 	.word	0x20000010
 8007444:	20000014 	.word	0x20000014

08007448 <_has_ext_stdout_stderr>:
 8007448:	b510      	push	{r4, lr}
 800744a:	4c04      	ldr	r4, [pc, #16]	; (800745c <_has_ext_stdout_stderr+0x14>)
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	da01      	bge.n	8007456 <_has_ext_stdout_stderr+0xe>
 8007452:	f7ff ffdf 	bl	8007414 <initialise_semihosting_exts>
 8007456:	6820      	ldr	r0, [r4, #0]
 8007458:	bd10      	pop	{r4, pc}
 800745a:	bf00      	nop
 800745c:	20000014 	.word	0x20000014

08007460 <initialise_monitor_handles>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	b085      	sub	sp, #20
 8007466:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007518 <initialise_monitor_handles+0xb8>
 800746a:	f8cd 9004 	str.w	r9, [sp, #4]
 800746e:	2303      	movs	r3, #3
 8007470:	2400      	movs	r4, #0
 8007472:	9303      	str	r3, [sp, #12]
 8007474:	af01      	add	r7, sp, #4
 8007476:	9402      	str	r4, [sp, #8]
 8007478:	2501      	movs	r5, #1
 800747a:	4628      	mov	r0, r5
 800747c:	4639      	mov	r1, r7
 800747e:	beab      	bkpt	0x00ab
 8007480:	4605      	mov	r5, r0
 8007482:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800751c <initialise_monitor_handles+0xbc>
 8007486:	4623      	mov	r3, r4
 8007488:	4c20      	ldr	r4, [pc, #128]	; (800750c <initialise_monitor_handles+0xac>)
 800748a:	f8c8 5000 	str.w	r5, [r8]
 800748e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007492:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007496:	3301      	adds	r3, #1
 8007498:	2b14      	cmp	r3, #20
 800749a:	d1fa      	bne.n	8007492 <initialise_monitor_handles+0x32>
 800749c:	f7ff ffd4 	bl	8007448 <_has_ext_stdout_stderr>
 80074a0:	4d1b      	ldr	r5, [pc, #108]	; (8007510 <initialise_monitor_handles+0xb0>)
 80074a2:	b1d0      	cbz	r0, 80074da <initialise_monitor_handles+0x7a>
 80074a4:	f04f 0a03 	mov.w	sl, #3
 80074a8:	2304      	movs	r3, #4
 80074aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80074ae:	2601      	movs	r6, #1
 80074b0:	f8cd a00c 	str.w	sl, [sp, #12]
 80074b4:	9302      	str	r3, [sp, #8]
 80074b6:	4630      	mov	r0, r6
 80074b8:	4639      	mov	r1, r7
 80074ba:	beab      	bkpt	0x00ab
 80074bc:	4683      	mov	fp, r0
 80074be:	4b15      	ldr	r3, [pc, #84]	; (8007514 <initialise_monitor_handles+0xb4>)
 80074c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80074c4:	f8c3 b000 	str.w	fp, [r3]
 80074c8:	2308      	movs	r3, #8
 80074ca:	f8cd a00c 	str.w	sl, [sp, #12]
 80074ce:	9302      	str	r3, [sp, #8]
 80074d0:	4630      	mov	r0, r6
 80074d2:	4639      	mov	r1, r7
 80074d4:	beab      	bkpt	0x00ab
 80074d6:	4606      	mov	r6, r0
 80074d8:	602e      	str	r6, [r5, #0]
 80074da:	682b      	ldr	r3, [r5, #0]
 80074dc:	3301      	adds	r3, #1
 80074de:	bf02      	ittt	eq
 80074e0:	4b0c      	ldreq	r3, [pc, #48]	; (8007514 <initialise_monitor_handles+0xb4>)
 80074e2:	681b      	ldreq	r3, [r3, #0]
 80074e4:	602b      	streq	r3, [r5, #0]
 80074e6:	2600      	movs	r6, #0
 80074e8:	f8d8 3000 	ldr.w	r3, [r8]
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	6066      	str	r6, [r4, #4]
 80074f0:	f7ff ffaa 	bl	8007448 <_has_ext_stdout_stderr>
 80074f4:	b130      	cbz	r0, 8007504 <initialise_monitor_handles+0xa4>
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <initialise_monitor_handles+0xb4>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007504:	b005      	add	sp, #20
 8007506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750a:	bf00      	nop
 800750c:	200006d8 	.word	0x200006d8
 8007510:	200006cc 	.word	0x200006cc
 8007514:	200006d4 	.word	0x200006d4
 8007518:	080086c6 	.word	0x080086c6
 800751c:	200006d0 	.word	0x200006d0

08007520 <_isatty>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	f7ff fd77 	bl	8007014 <findslot>
 8007526:	2509      	movs	r5, #9
 8007528:	4604      	mov	r4, r0
 800752a:	b920      	cbnz	r0, 8007536 <_isatty+0x16>
 800752c:	f000 f814 	bl	8007558 <__errno>
 8007530:	6005      	str	r5, [r0, #0]
 8007532:	4620      	mov	r0, r4
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	4628      	mov	r0, r5
 8007538:	4621      	mov	r1, r4
 800753a:	beab      	bkpt	0x00ab
 800753c:	4604      	mov	r4, r0
 800753e:	2c01      	cmp	r4, #1
 8007540:	d0f7      	beq.n	8007532 <_isatty+0x12>
 8007542:	f000 f809 	bl	8007558 <__errno>
 8007546:	2400      	movs	r4, #0
 8007548:	4605      	mov	r5, r0
 800754a:	2613      	movs	r6, #19
 800754c:	4630      	mov	r0, r6
 800754e:	4621      	mov	r1, r4
 8007550:	beab      	bkpt	0x00ab
 8007552:	4606      	mov	r6, r0
 8007554:	602e      	str	r6, [r5, #0]
 8007556:	e7ec      	b.n	8007532 <_isatty+0x12>

08007558 <__errno>:
 8007558:	4b01      	ldr	r3, [pc, #4]	; (8007560 <__errno+0x8>)
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	20000018 	.word	0x20000018

08007564 <std>:
 8007564:	2300      	movs	r3, #0
 8007566:	b510      	push	{r4, lr}
 8007568:	4604      	mov	r4, r0
 800756a:	e9c0 3300 	strd	r3, r3, [r0]
 800756e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007572:	6083      	str	r3, [r0, #8]
 8007574:	8181      	strh	r1, [r0, #12]
 8007576:	6643      	str	r3, [r0, #100]	; 0x64
 8007578:	81c2      	strh	r2, [r0, #14]
 800757a:	6183      	str	r3, [r0, #24]
 800757c:	4619      	mov	r1, r3
 800757e:	2208      	movs	r2, #8
 8007580:	305c      	adds	r0, #92	; 0x5c
 8007582:	f000 f90c 	bl	800779e <memset>
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <std+0x38>)
 8007588:	6263      	str	r3, [r4, #36]	; 0x24
 800758a:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <std+0x3c>)
 800758c:	62a3      	str	r3, [r4, #40]	; 0x28
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <std+0x40>)
 8007590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <std+0x44>)
 8007594:	6224      	str	r4, [r4, #32]
 8007596:	6323      	str	r3, [r4, #48]	; 0x30
 8007598:	bd10      	pop	{r4, pc}
 800759a:	bf00      	nop
 800759c:	08007a15 	.word	0x08007a15
 80075a0:	08007a37 	.word	0x08007a37
 80075a4:	08007a6f 	.word	0x08007a6f
 80075a8:	08007a93 	.word	0x08007a93

080075ac <_cleanup_r>:
 80075ac:	4901      	ldr	r1, [pc, #4]	; (80075b4 <_cleanup_r+0x8>)
 80075ae:	f000 b8af 	b.w	8007710 <_fwalk_reent>
 80075b2:	bf00      	nop
 80075b4:	08007d6d 	.word	0x08007d6d

080075b8 <__sfmoreglue>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	2268      	movs	r2, #104	; 0x68
 80075bc:	1e4d      	subs	r5, r1, #1
 80075be:	4355      	muls	r5, r2
 80075c0:	460e      	mov	r6, r1
 80075c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075c6:	f000 f913 	bl	80077f0 <_malloc_r>
 80075ca:	4604      	mov	r4, r0
 80075cc:	b140      	cbz	r0, 80075e0 <__sfmoreglue+0x28>
 80075ce:	2100      	movs	r1, #0
 80075d0:	e9c0 1600 	strd	r1, r6, [r0]
 80075d4:	300c      	adds	r0, #12
 80075d6:	60a0      	str	r0, [r4, #8]
 80075d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075dc:	f000 f8df 	bl	800779e <memset>
 80075e0:	4620      	mov	r0, r4
 80075e2:	bd70      	pop	{r4, r5, r6, pc}

080075e4 <__sfp_lock_acquire>:
 80075e4:	4801      	ldr	r0, [pc, #4]	; (80075ec <__sfp_lock_acquire+0x8>)
 80075e6:	f000 b8d8 	b.w	800779a <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	20000779 	.word	0x20000779

080075f0 <__sfp_lock_release>:
 80075f0:	4801      	ldr	r0, [pc, #4]	; (80075f8 <__sfp_lock_release+0x8>)
 80075f2:	f000 b8d3 	b.w	800779c <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	20000779 	.word	0x20000779

080075fc <__sinit_lock_acquire>:
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <__sinit_lock_acquire+0x8>)
 80075fe:	f000 b8cc 	b.w	800779a <__retarget_lock_acquire_recursive>
 8007602:	bf00      	nop
 8007604:	2000077a 	.word	0x2000077a

08007608 <__sinit_lock_release>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__sinit_lock_release+0x8>)
 800760a:	f000 b8c7 	b.w	800779c <__retarget_lock_release_recursive>
 800760e:	bf00      	nop
 8007610:	2000077a 	.word	0x2000077a

08007614 <__sinit>:
 8007614:	b510      	push	{r4, lr}
 8007616:	4604      	mov	r4, r0
 8007618:	f7ff fff0 	bl	80075fc <__sinit_lock_acquire>
 800761c:	69a3      	ldr	r3, [r4, #24]
 800761e:	b11b      	cbz	r3, 8007628 <__sinit+0x14>
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	f7ff bff0 	b.w	8007608 <__sinit_lock_release>
 8007628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800762c:	6523      	str	r3, [r4, #80]	; 0x50
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <__sinit+0x68>)
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <__sinit+0x6c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	62a2      	str	r2, [r4, #40]	; 0x28
 8007636:	42a3      	cmp	r3, r4
 8007638:	bf04      	itt	eq
 800763a:	2301      	moveq	r3, #1
 800763c:	61a3      	streq	r3, [r4, #24]
 800763e:	4620      	mov	r0, r4
 8007640:	f000 f820 	bl	8007684 <__sfp>
 8007644:	6060      	str	r0, [r4, #4]
 8007646:	4620      	mov	r0, r4
 8007648:	f000 f81c 	bl	8007684 <__sfp>
 800764c:	60a0      	str	r0, [r4, #8]
 800764e:	4620      	mov	r0, r4
 8007650:	f000 f818 	bl	8007684 <__sfp>
 8007654:	2200      	movs	r2, #0
 8007656:	60e0      	str	r0, [r4, #12]
 8007658:	2104      	movs	r1, #4
 800765a:	6860      	ldr	r0, [r4, #4]
 800765c:	f7ff ff82 	bl	8007564 <std>
 8007660:	68a0      	ldr	r0, [r4, #8]
 8007662:	2201      	movs	r2, #1
 8007664:	2109      	movs	r1, #9
 8007666:	f7ff ff7d 	bl	8007564 <std>
 800766a:	68e0      	ldr	r0, [r4, #12]
 800766c:	2202      	movs	r2, #2
 800766e:	2112      	movs	r1, #18
 8007670:	f7ff ff78 	bl	8007564 <std>
 8007674:	2301      	movs	r3, #1
 8007676:	61a3      	str	r3, [r4, #24]
 8007678:	e7d2      	b.n	8007620 <__sinit+0xc>
 800767a:	bf00      	nop
 800767c:	0800872c 	.word	0x0800872c
 8007680:	080075ad 	.word	0x080075ad

08007684 <__sfp>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	4607      	mov	r7, r0
 8007688:	f7ff ffac 	bl	80075e4 <__sfp_lock_acquire>
 800768c:	4b1e      	ldr	r3, [pc, #120]	; (8007708 <__sfp+0x84>)
 800768e:	681e      	ldr	r6, [r3, #0]
 8007690:	69b3      	ldr	r3, [r6, #24]
 8007692:	b913      	cbnz	r3, 800769a <__sfp+0x16>
 8007694:	4630      	mov	r0, r6
 8007696:	f7ff ffbd 	bl	8007614 <__sinit>
 800769a:	3648      	adds	r6, #72	; 0x48
 800769c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	d503      	bpl.n	80076ac <__sfp+0x28>
 80076a4:	6833      	ldr	r3, [r6, #0]
 80076a6:	b30b      	cbz	r3, 80076ec <__sfp+0x68>
 80076a8:	6836      	ldr	r6, [r6, #0]
 80076aa:	e7f7      	b.n	800769c <__sfp+0x18>
 80076ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076b0:	b9d5      	cbnz	r5, 80076e8 <__sfp+0x64>
 80076b2:	4b16      	ldr	r3, [pc, #88]	; (800770c <__sfp+0x88>)
 80076b4:	60e3      	str	r3, [r4, #12]
 80076b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076ba:	6665      	str	r5, [r4, #100]	; 0x64
 80076bc:	f000 f86c 	bl	8007798 <__retarget_lock_init_recursive>
 80076c0:	f7ff ff96 	bl	80075f0 <__sfp_lock_release>
 80076c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076cc:	6025      	str	r5, [r4, #0]
 80076ce:	61a5      	str	r5, [r4, #24]
 80076d0:	2208      	movs	r2, #8
 80076d2:	4629      	mov	r1, r5
 80076d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076d8:	f000 f861 	bl	800779e <memset>
 80076dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076e4:	4620      	mov	r0, r4
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e8:	3468      	adds	r4, #104	; 0x68
 80076ea:	e7d9      	b.n	80076a0 <__sfp+0x1c>
 80076ec:	2104      	movs	r1, #4
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7ff ff62 	bl	80075b8 <__sfmoreglue>
 80076f4:	4604      	mov	r4, r0
 80076f6:	6030      	str	r0, [r6, #0]
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d1d5      	bne.n	80076a8 <__sfp+0x24>
 80076fc:	f7ff ff78 	bl	80075f0 <__sfp_lock_release>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	e7ee      	b.n	80076e4 <__sfp+0x60>
 8007706:	bf00      	nop
 8007708:	0800872c 	.word	0x0800872c
 800770c:	ffff0001 	.word	0xffff0001

08007710 <_fwalk_reent>:
 8007710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007714:	4606      	mov	r6, r0
 8007716:	4688      	mov	r8, r1
 8007718:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800771c:	2700      	movs	r7, #0
 800771e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007722:	f1b9 0901 	subs.w	r9, r9, #1
 8007726:	d505      	bpl.n	8007734 <_fwalk_reent+0x24>
 8007728:	6824      	ldr	r4, [r4, #0]
 800772a:	2c00      	cmp	r4, #0
 800772c:	d1f7      	bne.n	800771e <_fwalk_reent+0xe>
 800772e:	4638      	mov	r0, r7
 8007730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007734:	89ab      	ldrh	r3, [r5, #12]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d907      	bls.n	800774a <_fwalk_reent+0x3a>
 800773a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800773e:	3301      	adds	r3, #1
 8007740:	d003      	beq.n	800774a <_fwalk_reent+0x3a>
 8007742:	4629      	mov	r1, r5
 8007744:	4630      	mov	r0, r6
 8007746:	47c0      	blx	r8
 8007748:	4307      	orrs	r7, r0
 800774a:	3568      	adds	r5, #104	; 0x68
 800774c:	e7e9      	b.n	8007722 <_fwalk_reent+0x12>
	...

08007750 <__libc_init_array>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	4d0d      	ldr	r5, [pc, #52]	; (8007788 <__libc_init_array+0x38>)
 8007754:	4c0d      	ldr	r4, [pc, #52]	; (800778c <__libc_init_array+0x3c>)
 8007756:	1b64      	subs	r4, r4, r5
 8007758:	10a4      	asrs	r4, r4, #2
 800775a:	2600      	movs	r6, #0
 800775c:	42a6      	cmp	r6, r4
 800775e:	d109      	bne.n	8007774 <__libc_init_array+0x24>
 8007760:	4d0b      	ldr	r5, [pc, #44]	; (8007790 <__libc_init_array+0x40>)
 8007762:	4c0c      	ldr	r4, [pc, #48]	; (8007794 <__libc_init_array+0x44>)
 8007764:	f000 ff30 	bl	80085c8 <_init>
 8007768:	1b64      	subs	r4, r4, r5
 800776a:	10a4      	asrs	r4, r4, #2
 800776c:	2600      	movs	r6, #0
 800776e:	42a6      	cmp	r6, r4
 8007770:	d105      	bne.n	800777e <__libc_init_array+0x2e>
 8007772:	bd70      	pop	{r4, r5, r6, pc}
 8007774:	f855 3b04 	ldr.w	r3, [r5], #4
 8007778:	4798      	blx	r3
 800777a:	3601      	adds	r6, #1
 800777c:	e7ee      	b.n	800775c <__libc_init_array+0xc>
 800777e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007782:	4798      	blx	r3
 8007784:	3601      	adds	r6, #1
 8007786:	e7f2      	b.n	800776e <__libc_init_array+0x1e>
 8007788:	0800876c 	.word	0x0800876c
 800778c:	0800876c 	.word	0x0800876c
 8007790:	0800876c 	.word	0x0800876c
 8007794:	08008770 	.word	0x08008770

08007798 <__retarget_lock_init_recursive>:
 8007798:	4770      	bx	lr

0800779a <__retarget_lock_acquire_recursive>:
 800779a:	4770      	bx	lr

0800779c <__retarget_lock_release_recursive>:
 800779c:	4770      	bx	lr

0800779e <memset>:
 800779e:	4402      	add	r2, r0
 80077a0:	4603      	mov	r3, r0
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d100      	bne.n	80077a8 <memset+0xa>
 80077a6:	4770      	bx	lr
 80077a8:	f803 1b01 	strb.w	r1, [r3], #1
 80077ac:	e7f9      	b.n	80077a2 <memset+0x4>
	...

080077b0 <sbrk_aligned>:
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	4e0e      	ldr	r6, [pc, #56]	; (80077ec <sbrk_aligned+0x3c>)
 80077b4:	460c      	mov	r4, r1
 80077b6:	6831      	ldr	r1, [r6, #0]
 80077b8:	4605      	mov	r5, r0
 80077ba:	b911      	cbnz	r1, 80077c2 <sbrk_aligned+0x12>
 80077bc:	f000 f91a 	bl	80079f4 <_sbrk_r>
 80077c0:	6030      	str	r0, [r6, #0]
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	f000 f915 	bl	80079f4 <_sbrk_r>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d00a      	beq.n	80077e4 <sbrk_aligned+0x34>
 80077ce:	1cc4      	adds	r4, r0, #3
 80077d0:	f024 0403 	bic.w	r4, r4, #3
 80077d4:	42a0      	cmp	r0, r4
 80077d6:	d007      	beq.n	80077e8 <sbrk_aligned+0x38>
 80077d8:	1a21      	subs	r1, r4, r0
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f90a 	bl	80079f4 <_sbrk_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d101      	bne.n	80077e8 <sbrk_aligned+0x38>
 80077e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077e8:	4620      	mov	r0, r4
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	20000780 	.word	0x20000780

080077f0 <_malloc_r>:
 80077f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f4:	1ccd      	adds	r5, r1, #3
 80077f6:	f025 0503 	bic.w	r5, r5, #3
 80077fa:	3508      	adds	r5, #8
 80077fc:	2d0c      	cmp	r5, #12
 80077fe:	bf38      	it	cc
 8007800:	250c      	movcc	r5, #12
 8007802:	2d00      	cmp	r5, #0
 8007804:	4607      	mov	r7, r0
 8007806:	db01      	blt.n	800780c <_malloc_r+0x1c>
 8007808:	42a9      	cmp	r1, r5
 800780a:	d905      	bls.n	8007818 <_malloc_r+0x28>
 800780c:	230c      	movs	r3, #12
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	2600      	movs	r6, #0
 8007812:	4630      	mov	r0, r6
 8007814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007818:	4e2e      	ldr	r6, [pc, #184]	; (80078d4 <_malloc_r+0xe4>)
 800781a:	f000 fb5b 	bl	8007ed4 <__malloc_lock>
 800781e:	6833      	ldr	r3, [r6, #0]
 8007820:	461c      	mov	r4, r3
 8007822:	bb34      	cbnz	r4, 8007872 <_malloc_r+0x82>
 8007824:	4629      	mov	r1, r5
 8007826:	4638      	mov	r0, r7
 8007828:	f7ff ffc2 	bl	80077b0 <sbrk_aligned>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	4604      	mov	r4, r0
 8007830:	d14d      	bne.n	80078ce <_malloc_r+0xde>
 8007832:	6834      	ldr	r4, [r6, #0]
 8007834:	4626      	mov	r6, r4
 8007836:	2e00      	cmp	r6, #0
 8007838:	d140      	bne.n	80078bc <_malloc_r+0xcc>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	4631      	mov	r1, r6
 800783e:	4638      	mov	r0, r7
 8007840:	eb04 0803 	add.w	r8, r4, r3
 8007844:	f000 f8d6 	bl	80079f4 <_sbrk_r>
 8007848:	4580      	cmp	r8, r0
 800784a:	d13a      	bne.n	80078c2 <_malloc_r+0xd2>
 800784c:	6821      	ldr	r1, [r4, #0]
 800784e:	3503      	adds	r5, #3
 8007850:	1a6d      	subs	r5, r5, r1
 8007852:	f025 0503 	bic.w	r5, r5, #3
 8007856:	3508      	adds	r5, #8
 8007858:	2d0c      	cmp	r5, #12
 800785a:	bf38      	it	cc
 800785c:	250c      	movcc	r5, #12
 800785e:	4629      	mov	r1, r5
 8007860:	4638      	mov	r0, r7
 8007862:	f7ff ffa5 	bl	80077b0 <sbrk_aligned>
 8007866:	3001      	adds	r0, #1
 8007868:	d02b      	beq.n	80078c2 <_malloc_r+0xd2>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	442b      	add	r3, r5
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	e00e      	b.n	8007890 <_malloc_r+0xa0>
 8007872:	6822      	ldr	r2, [r4, #0]
 8007874:	1b52      	subs	r2, r2, r5
 8007876:	d41e      	bmi.n	80078b6 <_malloc_r+0xc6>
 8007878:	2a0b      	cmp	r2, #11
 800787a:	d916      	bls.n	80078aa <_malloc_r+0xba>
 800787c:	1961      	adds	r1, r4, r5
 800787e:	42a3      	cmp	r3, r4
 8007880:	6025      	str	r5, [r4, #0]
 8007882:	bf18      	it	ne
 8007884:	6059      	strne	r1, [r3, #4]
 8007886:	6863      	ldr	r3, [r4, #4]
 8007888:	bf08      	it	eq
 800788a:	6031      	streq	r1, [r6, #0]
 800788c:	5162      	str	r2, [r4, r5]
 800788e:	604b      	str	r3, [r1, #4]
 8007890:	4638      	mov	r0, r7
 8007892:	f104 060b 	add.w	r6, r4, #11
 8007896:	f000 fb23 	bl	8007ee0 <__malloc_unlock>
 800789a:	f026 0607 	bic.w	r6, r6, #7
 800789e:	1d23      	adds	r3, r4, #4
 80078a0:	1af2      	subs	r2, r6, r3
 80078a2:	d0b6      	beq.n	8007812 <_malloc_r+0x22>
 80078a4:	1b9b      	subs	r3, r3, r6
 80078a6:	50a3      	str	r3, [r4, r2]
 80078a8:	e7b3      	b.n	8007812 <_malloc_r+0x22>
 80078aa:	6862      	ldr	r2, [r4, #4]
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	bf0c      	ite	eq
 80078b0:	6032      	streq	r2, [r6, #0]
 80078b2:	605a      	strne	r2, [r3, #4]
 80078b4:	e7ec      	b.n	8007890 <_malloc_r+0xa0>
 80078b6:	4623      	mov	r3, r4
 80078b8:	6864      	ldr	r4, [r4, #4]
 80078ba:	e7b2      	b.n	8007822 <_malloc_r+0x32>
 80078bc:	4634      	mov	r4, r6
 80078be:	6876      	ldr	r6, [r6, #4]
 80078c0:	e7b9      	b.n	8007836 <_malloc_r+0x46>
 80078c2:	230c      	movs	r3, #12
 80078c4:	603b      	str	r3, [r7, #0]
 80078c6:	4638      	mov	r0, r7
 80078c8:	f000 fb0a 	bl	8007ee0 <__malloc_unlock>
 80078cc:	e7a1      	b.n	8007812 <_malloc_r+0x22>
 80078ce:	6025      	str	r5, [r4, #0]
 80078d0:	e7de      	b.n	8007890 <_malloc_r+0xa0>
 80078d2:	bf00      	nop
 80078d4:	2000077c 	.word	0x2000077c

080078d8 <iprintf>:
 80078d8:	b40f      	push	{r0, r1, r2, r3}
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <iprintf+0x2c>)
 80078dc:	b513      	push	{r0, r1, r4, lr}
 80078de:	681c      	ldr	r4, [r3, #0]
 80078e0:	b124      	cbz	r4, 80078ec <iprintf+0x14>
 80078e2:	69a3      	ldr	r3, [r4, #24]
 80078e4:	b913      	cbnz	r3, 80078ec <iprintf+0x14>
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7ff fe94 	bl	8007614 <__sinit>
 80078ec:	ab05      	add	r3, sp, #20
 80078ee:	9a04      	ldr	r2, [sp, #16]
 80078f0:	68a1      	ldr	r1, [r4, #8]
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 fb6f 	bl	8007fd8 <_vfiprintf_r>
 80078fa:	b002      	add	sp, #8
 80078fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007900:	b004      	add	sp, #16
 8007902:	4770      	bx	lr
 8007904:	20000018 	.word	0x20000018

08007908 <_puts_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	460e      	mov	r6, r1
 800790c:	4605      	mov	r5, r0
 800790e:	b118      	cbz	r0, 8007918 <_puts_r+0x10>
 8007910:	6983      	ldr	r3, [r0, #24]
 8007912:	b90b      	cbnz	r3, 8007918 <_puts_r+0x10>
 8007914:	f7ff fe7e 	bl	8007614 <__sinit>
 8007918:	69ab      	ldr	r3, [r5, #24]
 800791a:	68ac      	ldr	r4, [r5, #8]
 800791c:	b913      	cbnz	r3, 8007924 <_puts_r+0x1c>
 800791e:	4628      	mov	r0, r5
 8007920:	f7ff fe78 	bl	8007614 <__sinit>
 8007924:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <_puts_r+0xd0>)
 8007926:	429c      	cmp	r4, r3
 8007928:	d120      	bne.n	800796c <_puts_r+0x64>
 800792a:	686c      	ldr	r4, [r5, #4]
 800792c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800792e:	07db      	lsls	r3, r3, #31
 8007930:	d405      	bmi.n	800793e <_puts_r+0x36>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	0598      	lsls	r0, r3, #22
 8007936:	d402      	bmi.n	800793e <_puts_r+0x36>
 8007938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800793a:	f7ff ff2e 	bl	800779a <__retarget_lock_acquire_recursive>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	0719      	lsls	r1, r3, #28
 8007942:	d51d      	bpl.n	8007980 <_puts_r+0x78>
 8007944:	6923      	ldr	r3, [r4, #16]
 8007946:	b1db      	cbz	r3, 8007980 <_puts_r+0x78>
 8007948:	3e01      	subs	r6, #1
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007950:	3b01      	subs	r3, #1
 8007952:	60a3      	str	r3, [r4, #8]
 8007954:	bb39      	cbnz	r1, 80079a6 <_puts_r+0x9e>
 8007956:	2b00      	cmp	r3, #0
 8007958:	da38      	bge.n	80079cc <_puts_r+0xc4>
 800795a:	4622      	mov	r2, r4
 800795c:	210a      	movs	r1, #10
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f89c 	bl	8007a9c <__swbuf_r>
 8007964:	3001      	adds	r0, #1
 8007966:	d011      	beq.n	800798c <_puts_r+0x84>
 8007968:	250a      	movs	r5, #10
 800796a:	e011      	b.n	8007990 <_puts_r+0x88>
 800796c:	4b1b      	ldr	r3, [pc, #108]	; (80079dc <_puts_r+0xd4>)
 800796e:	429c      	cmp	r4, r3
 8007970:	d101      	bne.n	8007976 <_puts_r+0x6e>
 8007972:	68ac      	ldr	r4, [r5, #8]
 8007974:	e7da      	b.n	800792c <_puts_r+0x24>
 8007976:	4b1a      	ldr	r3, [pc, #104]	; (80079e0 <_puts_r+0xd8>)
 8007978:	429c      	cmp	r4, r3
 800797a:	bf08      	it	eq
 800797c:	68ec      	ldreq	r4, [r5, #12]
 800797e:	e7d5      	b.n	800792c <_puts_r+0x24>
 8007980:	4621      	mov	r1, r4
 8007982:	4628      	mov	r0, r5
 8007984:	f000 f8ee 	bl	8007b64 <__swsetup_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	d0dd      	beq.n	8007948 <_puts_r+0x40>
 800798c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007992:	07da      	lsls	r2, r3, #31
 8007994:	d405      	bmi.n	80079a2 <_puts_r+0x9a>
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	059b      	lsls	r3, r3, #22
 800799a:	d402      	bmi.n	80079a2 <_puts_r+0x9a>
 800799c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800799e:	f7ff fefd 	bl	800779c <__retarget_lock_release_recursive>
 80079a2:	4628      	mov	r0, r5
 80079a4:	bd70      	pop	{r4, r5, r6, pc}
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da04      	bge.n	80079b4 <_puts_r+0xac>
 80079aa:	69a2      	ldr	r2, [r4, #24]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	dc06      	bgt.n	80079be <_puts_r+0xb6>
 80079b0:	290a      	cmp	r1, #10
 80079b2:	d004      	beq.n	80079be <_puts_r+0xb6>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	7019      	strb	r1, [r3, #0]
 80079bc:	e7c5      	b.n	800794a <_puts_r+0x42>
 80079be:	4622      	mov	r2, r4
 80079c0:	4628      	mov	r0, r5
 80079c2:	f000 f86b 	bl	8007a9c <__swbuf_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	d1bf      	bne.n	800794a <_puts_r+0x42>
 80079ca:	e7df      	b.n	800798c <_puts_r+0x84>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	250a      	movs	r5, #10
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	6022      	str	r2, [r4, #0]
 80079d4:	701d      	strb	r5, [r3, #0]
 80079d6:	e7db      	b.n	8007990 <_puts_r+0x88>
 80079d8:	080086ec 	.word	0x080086ec
 80079dc:	0800870c 	.word	0x0800870c
 80079e0:	080086cc 	.word	0x080086cc

080079e4 <puts>:
 80079e4:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <puts+0xc>)
 80079e6:	4601      	mov	r1, r0
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	f7ff bf8d 	b.w	8007908 <_puts_r>
 80079ee:	bf00      	nop
 80079f0:	20000018 	.word	0x20000018

080079f4 <_sbrk_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d06      	ldr	r5, [pc, #24]	; (8007a10 <_sbrk_r+0x1c>)
 80079f8:	2300      	movs	r3, #0
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	f7fa fde6 	bl	80025d0 <_sbrk>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_sbrk_r+0x1a>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_sbrk_r+0x1a>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	20000784 	.word	0x20000784

08007a14 <__sread>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	460c      	mov	r4, r1
 8007a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1c:	f000 fda0 	bl	8008560 <_read_r>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	bfab      	itete	ge
 8007a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a26:	89a3      	ldrhlt	r3, [r4, #12]
 8007a28:	181b      	addge	r3, r3, r0
 8007a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a2e:	bfac      	ite	ge
 8007a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a32:	81a3      	strhlt	r3, [r4, #12]
 8007a34:	bd10      	pop	{r4, pc}

08007a36 <__swrite>:
 8007a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3a:	461f      	mov	r7, r3
 8007a3c:	898b      	ldrh	r3, [r1, #12]
 8007a3e:	05db      	lsls	r3, r3, #23
 8007a40:	4605      	mov	r5, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	4616      	mov	r6, r2
 8007a46:	d505      	bpl.n	8007a54 <__swrite+0x1e>
 8007a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f000 f9c8 	bl	8007de4 <_lseek_r>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a5e:	81a3      	strh	r3, [r4, #12]
 8007a60:	4632      	mov	r2, r6
 8007a62:	463b      	mov	r3, r7
 8007a64:	4628      	mov	r0, r5
 8007a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6a:	f000 b869 	b.w	8007b40 <_write_r>

08007a6e <__sseek>:
 8007a6e:	b510      	push	{r4, lr}
 8007a70:	460c      	mov	r4, r1
 8007a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a76:	f000 f9b5 	bl	8007de4 <_lseek_r>
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	bf15      	itete	ne
 8007a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a8a:	81a3      	strheq	r3, [r4, #12]
 8007a8c:	bf18      	it	ne
 8007a8e:	81a3      	strhne	r3, [r4, #12]
 8007a90:	bd10      	pop	{r4, pc}

08007a92 <__sclose>:
 8007a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a96:	f000 b8d3 	b.w	8007c40 <_close_r>
	...

08007a9c <__swbuf_r>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	460e      	mov	r6, r1
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	b118      	cbz	r0, 8007aae <__swbuf_r+0x12>
 8007aa6:	6983      	ldr	r3, [r0, #24]
 8007aa8:	b90b      	cbnz	r3, 8007aae <__swbuf_r+0x12>
 8007aaa:	f7ff fdb3 	bl	8007614 <__sinit>
 8007aae:	4b21      	ldr	r3, [pc, #132]	; (8007b34 <__swbuf_r+0x98>)
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	d12b      	bne.n	8007b0c <__swbuf_r+0x70>
 8007ab4:	686c      	ldr	r4, [r5, #4]
 8007ab6:	69a3      	ldr	r3, [r4, #24]
 8007ab8:	60a3      	str	r3, [r4, #8]
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	071a      	lsls	r2, r3, #28
 8007abe:	d52f      	bpl.n	8007b20 <__swbuf_r+0x84>
 8007ac0:	6923      	ldr	r3, [r4, #16]
 8007ac2:	b36b      	cbz	r3, 8007b20 <__swbuf_r+0x84>
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	6820      	ldr	r0, [r4, #0]
 8007ac8:	1ac0      	subs	r0, r0, r3
 8007aca:	6963      	ldr	r3, [r4, #20]
 8007acc:	b2f6      	uxtb	r6, r6
 8007ace:	4283      	cmp	r3, r0
 8007ad0:	4637      	mov	r7, r6
 8007ad2:	dc04      	bgt.n	8007ade <__swbuf_r+0x42>
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f000 f948 	bl	8007d6c <_fflush_r>
 8007adc:	bb30      	cbnz	r0, 8007b2c <__swbuf_r+0x90>
 8007ade:	68a3      	ldr	r3, [r4, #8]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	60a3      	str	r3, [r4, #8]
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	6022      	str	r2, [r4, #0]
 8007aea:	701e      	strb	r6, [r3, #0]
 8007aec:	6963      	ldr	r3, [r4, #20]
 8007aee:	3001      	adds	r0, #1
 8007af0:	4283      	cmp	r3, r0
 8007af2:	d004      	beq.n	8007afe <__swbuf_r+0x62>
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	07db      	lsls	r3, r3, #31
 8007af8:	d506      	bpl.n	8007b08 <__swbuf_r+0x6c>
 8007afa:	2e0a      	cmp	r6, #10
 8007afc:	d104      	bne.n	8007b08 <__swbuf_r+0x6c>
 8007afe:	4621      	mov	r1, r4
 8007b00:	4628      	mov	r0, r5
 8007b02:	f000 f933 	bl	8007d6c <_fflush_r>
 8007b06:	b988      	cbnz	r0, 8007b2c <__swbuf_r+0x90>
 8007b08:	4638      	mov	r0, r7
 8007b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <__swbuf_r+0x9c>)
 8007b0e:	429c      	cmp	r4, r3
 8007b10:	d101      	bne.n	8007b16 <__swbuf_r+0x7a>
 8007b12:	68ac      	ldr	r4, [r5, #8]
 8007b14:	e7cf      	b.n	8007ab6 <__swbuf_r+0x1a>
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <__swbuf_r+0xa0>)
 8007b18:	429c      	cmp	r4, r3
 8007b1a:	bf08      	it	eq
 8007b1c:	68ec      	ldreq	r4, [r5, #12]
 8007b1e:	e7ca      	b.n	8007ab6 <__swbuf_r+0x1a>
 8007b20:	4621      	mov	r1, r4
 8007b22:	4628      	mov	r0, r5
 8007b24:	f000 f81e 	bl	8007b64 <__swsetup_r>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d0cb      	beq.n	8007ac4 <__swbuf_r+0x28>
 8007b2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007b30:	e7ea      	b.n	8007b08 <__swbuf_r+0x6c>
 8007b32:	bf00      	nop
 8007b34:	080086ec 	.word	0x080086ec
 8007b38:	0800870c 	.word	0x0800870c
 8007b3c:	080086cc 	.word	0x080086cc

08007b40 <_write_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d07      	ldr	r5, [pc, #28]	; (8007b60 <_write_r+0x20>)
 8007b44:	4604      	mov	r4, r0
 8007b46:	4608      	mov	r0, r1
 8007b48:	4611      	mov	r1, r2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	602a      	str	r2, [r5, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f7ff fb07 	bl	8007162 <_write>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d102      	bne.n	8007b5e <_write_r+0x1e>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	b103      	cbz	r3, 8007b5e <_write_r+0x1e>
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	20000784 	.word	0x20000784

08007b64 <__swsetup_r>:
 8007b64:	4b32      	ldr	r3, [pc, #200]	; (8007c30 <__swsetup_r+0xcc>)
 8007b66:	b570      	push	{r4, r5, r6, lr}
 8007b68:	681d      	ldr	r5, [r3, #0]
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	b125      	cbz	r5, 8007b7a <__swsetup_r+0x16>
 8007b70:	69ab      	ldr	r3, [r5, #24]
 8007b72:	b913      	cbnz	r3, 8007b7a <__swsetup_r+0x16>
 8007b74:	4628      	mov	r0, r5
 8007b76:	f7ff fd4d 	bl	8007614 <__sinit>
 8007b7a:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <__swsetup_r+0xd0>)
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	d10f      	bne.n	8007ba0 <__swsetup_r+0x3c>
 8007b80:	686c      	ldr	r4, [r5, #4]
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b88:	0719      	lsls	r1, r3, #28
 8007b8a:	d42c      	bmi.n	8007be6 <__swsetup_r+0x82>
 8007b8c:	06dd      	lsls	r5, r3, #27
 8007b8e:	d411      	bmi.n	8007bb4 <__swsetup_r+0x50>
 8007b90:	2309      	movs	r3, #9
 8007b92:	6033      	str	r3, [r6, #0]
 8007b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b9e:	e03e      	b.n	8007c1e <__swsetup_r+0xba>
 8007ba0:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <__swsetup_r+0xd4>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d101      	bne.n	8007baa <__swsetup_r+0x46>
 8007ba6:	68ac      	ldr	r4, [r5, #8]
 8007ba8:	e7eb      	b.n	8007b82 <__swsetup_r+0x1e>
 8007baa:	4b24      	ldr	r3, [pc, #144]	; (8007c3c <__swsetup_r+0xd8>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	bf08      	it	eq
 8007bb0:	68ec      	ldreq	r4, [r5, #12]
 8007bb2:	e7e6      	b.n	8007b82 <__swsetup_r+0x1e>
 8007bb4:	0758      	lsls	r0, r3, #29
 8007bb6:	d512      	bpl.n	8007bde <__swsetup_r+0x7a>
 8007bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bba:	b141      	cbz	r1, 8007bce <__swsetup_r+0x6a>
 8007bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc0:	4299      	cmp	r1, r3
 8007bc2:	d002      	beq.n	8007bca <__swsetup_r+0x66>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 f991 	bl	8007eec <_free_r>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f043 0308 	orr.w	r3, r3, #8
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	b94b      	cbnz	r3, 8007bfe <__swsetup_r+0x9a>
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf4:	d003      	beq.n	8007bfe <__swsetup_r+0x9a>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 f92b 	bl	8007e54 <__smakebuf_r>
 8007bfe:	89a0      	ldrh	r0, [r4, #12]
 8007c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c04:	f010 0301 	ands.w	r3, r0, #1
 8007c08:	d00a      	beq.n	8007c20 <__swsetup_r+0xbc>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	6963      	ldr	r3, [r4, #20]
 8007c10:	425b      	negs	r3, r3
 8007c12:	61a3      	str	r3, [r4, #24]
 8007c14:	6923      	ldr	r3, [r4, #16]
 8007c16:	b943      	cbnz	r3, 8007c2a <__swsetup_r+0xc6>
 8007c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c1c:	d1ba      	bne.n	8007b94 <__swsetup_r+0x30>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	0781      	lsls	r1, r0, #30
 8007c22:	bf58      	it	pl
 8007c24:	6963      	ldrpl	r3, [r4, #20]
 8007c26:	60a3      	str	r3, [r4, #8]
 8007c28:	e7f4      	b.n	8007c14 <__swsetup_r+0xb0>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e7f7      	b.n	8007c1e <__swsetup_r+0xba>
 8007c2e:	bf00      	nop
 8007c30:	20000018 	.word	0x20000018
 8007c34:	080086ec 	.word	0x080086ec
 8007c38:	0800870c 	.word	0x0800870c
 8007c3c:	080086cc 	.word	0x080086cc

08007c40 <_close_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d06      	ldr	r5, [pc, #24]	; (8007c5c <_close_r+0x1c>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	f7ff faba 	bl	80071c4 <_close>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_close_r+0x1a>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_close_r+0x1a>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	20000784 	.word	0x20000784

08007c60 <__sflush_r>:
 8007c60:	898a      	ldrh	r2, [r1, #12]
 8007c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c66:	4605      	mov	r5, r0
 8007c68:	0710      	lsls	r0, r2, #28
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	d458      	bmi.n	8007d20 <__sflush_r+0xc0>
 8007c6e:	684b      	ldr	r3, [r1, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	dc05      	bgt.n	8007c80 <__sflush_r+0x20>
 8007c74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dc02      	bgt.n	8007c80 <__sflush_r+0x20>
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c82:	2e00      	cmp	r6, #0
 8007c84:	d0f9      	beq.n	8007c7a <__sflush_r+0x1a>
 8007c86:	2300      	movs	r3, #0
 8007c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c8c:	682f      	ldr	r7, [r5, #0]
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	d032      	beq.n	8007cf8 <__sflush_r+0x98>
 8007c92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	075a      	lsls	r2, r3, #29
 8007c98:	d505      	bpl.n	8007ca6 <__sflush_r+0x46>
 8007c9a:	6863      	ldr	r3, [r4, #4]
 8007c9c:	1ac0      	subs	r0, r0, r3
 8007c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ca0:	b10b      	cbz	r3, 8007ca6 <__sflush_r+0x46>
 8007ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ca4:	1ac0      	subs	r0, r0, r3
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4602      	mov	r2, r0
 8007caa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cac:	6a21      	ldr	r1, [r4, #32]
 8007cae:	4628      	mov	r0, r5
 8007cb0:	47b0      	blx	r6
 8007cb2:	1c43      	adds	r3, r0, #1
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	d106      	bne.n	8007cc6 <__sflush_r+0x66>
 8007cb8:	6829      	ldr	r1, [r5, #0]
 8007cba:	291d      	cmp	r1, #29
 8007cbc:	d82c      	bhi.n	8007d18 <__sflush_r+0xb8>
 8007cbe:	4a2a      	ldr	r2, [pc, #168]	; (8007d68 <__sflush_r+0x108>)
 8007cc0:	40ca      	lsrs	r2, r1
 8007cc2:	07d6      	lsls	r6, r2, #31
 8007cc4:	d528      	bpl.n	8007d18 <__sflush_r+0xb8>
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	6062      	str	r2, [r4, #4]
 8007cca:	04d9      	lsls	r1, r3, #19
 8007ccc:	6922      	ldr	r2, [r4, #16]
 8007cce:	6022      	str	r2, [r4, #0]
 8007cd0:	d504      	bpl.n	8007cdc <__sflush_r+0x7c>
 8007cd2:	1c42      	adds	r2, r0, #1
 8007cd4:	d101      	bne.n	8007cda <__sflush_r+0x7a>
 8007cd6:	682b      	ldr	r3, [r5, #0]
 8007cd8:	b903      	cbnz	r3, 8007cdc <__sflush_r+0x7c>
 8007cda:	6560      	str	r0, [r4, #84]	; 0x54
 8007cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cde:	602f      	str	r7, [r5, #0]
 8007ce0:	2900      	cmp	r1, #0
 8007ce2:	d0ca      	beq.n	8007c7a <__sflush_r+0x1a>
 8007ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	d002      	beq.n	8007cf2 <__sflush_r+0x92>
 8007cec:	4628      	mov	r0, r5
 8007cee:	f000 f8fd 	bl	8007eec <_free_r>
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	6360      	str	r0, [r4, #52]	; 0x34
 8007cf6:	e7c1      	b.n	8007c7c <__sflush_r+0x1c>
 8007cf8:	6a21      	ldr	r1, [r4, #32]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b0      	blx	r6
 8007d00:	1c41      	adds	r1, r0, #1
 8007d02:	d1c7      	bne.n	8007c94 <__sflush_r+0x34>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0c4      	beq.n	8007c94 <__sflush_r+0x34>
 8007d0a:	2b1d      	cmp	r3, #29
 8007d0c:	d001      	beq.n	8007d12 <__sflush_r+0xb2>
 8007d0e:	2b16      	cmp	r3, #22
 8007d10:	d101      	bne.n	8007d16 <__sflush_r+0xb6>
 8007d12:	602f      	str	r7, [r5, #0]
 8007d14:	e7b1      	b.n	8007c7a <__sflush_r+0x1a>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	e7ad      	b.n	8007c7c <__sflush_r+0x1c>
 8007d20:	690f      	ldr	r7, [r1, #16]
 8007d22:	2f00      	cmp	r7, #0
 8007d24:	d0a9      	beq.n	8007c7a <__sflush_r+0x1a>
 8007d26:	0793      	lsls	r3, r2, #30
 8007d28:	680e      	ldr	r6, [r1, #0]
 8007d2a:	bf08      	it	eq
 8007d2c:	694b      	ldreq	r3, [r1, #20]
 8007d2e:	600f      	str	r7, [r1, #0]
 8007d30:	bf18      	it	ne
 8007d32:	2300      	movne	r3, #0
 8007d34:	eba6 0807 	sub.w	r8, r6, r7
 8007d38:	608b      	str	r3, [r1, #8]
 8007d3a:	f1b8 0f00 	cmp.w	r8, #0
 8007d3e:	dd9c      	ble.n	8007c7a <__sflush_r+0x1a>
 8007d40:	6a21      	ldr	r1, [r4, #32]
 8007d42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d44:	4643      	mov	r3, r8
 8007d46:	463a      	mov	r2, r7
 8007d48:	4628      	mov	r0, r5
 8007d4a:	47b0      	blx	r6
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	dc06      	bgt.n	8007d5e <__sflush_r+0xfe>
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d56:	81a3      	strh	r3, [r4, #12]
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d5c:	e78e      	b.n	8007c7c <__sflush_r+0x1c>
 8007d5e:	4407      	add	r7, r0
 8007d60:	eba8 0800 	sub.w	r8, r8, r0
 8007d64:	e7e9      	b.n	8007d3a <__sflush_r+0xda>
 8007d66:	bf00      	nop
 8007d68:	20400001 	.word	0x20400001

08007d6c <_fflush_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	690b      	ldr	r3, [r1, #16]
 8007d70:	4605      	mov	r5, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	b913      	cbnz	r3, 8007d7c <_fflush_r+0x10>
 8007d76:	2500      	movs	r5, #0
 8007d78:	4628      	mov	r0, r5
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	b118      	cbz	r0, 8007d86 <_fflush_r+0x1a>
 8007d7e:	6983      	ldr	r3, [r0, #24]
 8007d80:	b90b      	cbnz	r3, 8007d86 <_fflush_r+0x1a>
 8007d82:	f7ff fc47 	bl	8007614 <__sinit>
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <_fflush_r+0x6c>)
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	d11b      	bne.n	8007dc4 <_fflush_r+0x58>
 8007d8c:	686c      	ldr	r4, [r5, #4]
 8007d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0ef      	beq.n	8007d76 <_fflush_r+0xa>
 8007d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d98:	07d0      	lsls	r0, r2, #31
 8007d9a:	d404      	bmi.n	8007da6 <_fflush_r+0x3a>
 8007d9c:	0599      	lsls	r1, r3, #22
 8007d9e:	d402      	bmi.n	8007da6 <_fflush_r+0x3a>
 8007da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007da2:	f7ff fcfa 	bl	800779a <__retarget_lock_acquire_recursive>
 8007da6:	4628      	mov	r0, r5
 8007da8:	4621      	mov	r1, r4
 8007daa:	f7ff ff59 	bl	8007c60 <__sflush_r>
 8007dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007db0:	07da      	lsls	r2, r3, #31
 8007db2:	4605      	mov	r5, r0
 8007db4:	d4e0      	bmi.n	8007d78 <_fflush_r+0xc>
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	059b      	lsls	r3, r3, #22
 8007dba:	d4dd      	bmi.n	8007d78 <_fflush_r+0xc>
 8007dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dbe:	f7ff fced 	bl	800779c <__retarget_lock_release_recursive>
 8007dc2:	e7d9      	b.n	8007d78 <_fflush_r+0xc>
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <_fflush_r+0x70>)
 8007dc6:	429c      	cmp	r4, r3
 8007dc8:	d101      	bne.n	8007dce <_fflush_r+0x62>
 8007dca:	68ac      	ldr	r4, [r5, #8]
 8007dcc:	e7df      	b.n	8007d8e <_fflush_r+0x22>
 8007dce:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <_fflush_r+0x74>)
 8007dd0:	429c      	cmp	r4, r3
 8007dd2:	bf08      	it	eq
 8007dd4:	68ec      	ldreq	r4, [r5, #12]
 8007dd6:	e7da      	b.n	8007d8e <_fflush_r+0x22>
 8007dd8:	080086ec 	.word	0x080086ec
 8007ddc:	0800870c 	.word	0x0800870c
 8007de0:	080086cc 	.word	0x080086cc

08007de4 <_lseek_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d07      	ldr	r5, [pc, #28]	; (8007e04 <_lseek_r+0x20>)
 8007de8:	4604      	mov	r4, r0
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7ff f9a3 	bl	800713e <_lseek>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_lseek_r+0x1e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_lseek_r+0x1e>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	20000784 	.word	0x20000784

08007e08 <__swhatbuf_r>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	460e      	mov	r6, r1
 8007e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e10:	2900      	cmp	r1, #0
 8007e12:	b096      	sub	sp, #88	; 0x58
 8007e14:	4614      	mov	r4, r2
 8007e16:	461d      	mov	r5, r3
 8007e18:	da08      	bge.n	8007e2c <__swhatbuf_r+0x24>
 8007e1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	602a      	str	r2, [r5, #0]
 8007e22:	061a      	lsls	r2, r3, #24
 8007e24:	d410      	bmi.n	8007e48 <__swhatbuf_r+0x40>
 8007e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e2a:	e00e      	b.n	8007e4a <__swhatbuf_r+0x42>
 8007e2c:	466a      	mov	r2, sp
 8007e2e:	f000 fba9 	bl	8008584 <_fstat_r>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	dbf1      	blt.n	8007e1a <__swhatbuf_r+0x12>
 8007e36:	9a01      	ldr	r2, [sp, #4]
 8007e38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e40:	425a      	negs	r2, r3
 8007e42:	415a      	adcs	r2, r3
 8007e44:	602a      	str	r2, [r5, #0]
 8007e46:	e7ee      	b.n	8007e26 <__swhatbuf_r+0x1e>
 8007e48:	2340      	movs	r3, #64	; 0x40
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	b016      	add	sp, #88	; 0x58
 8007e50:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e54 <__smakebuf_r>:
 8007e54:	898b      	ldrh	r3, [r1, #12]
 8007e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e58:	079d      	lsls	r5, r3, #30
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	d507      	bpl.n	8007e70 <__smakebuf_r+0x1c>
 8007e60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	2301      	movs	r3, #1
 8007e6a:	6163      	str	r3, [r4, #20]
 8007e6c:	b002      	add	sp, #8
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	ab01      	add	r3, sp, #4
 8007e72:	466a      	mov	r2, sp
 8007e74:	f7ff ffc8 	bl	8007e08 <__swhatbuf_r>
 8007e78:	9900      	ldr	r1, [sp, #0]
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f7ff fcb7 	bl	80077f0 <_malloc_r>
 8007e82:	b948      	cbnz	r0, 8007e98 <__smakebuf_r+0x44>
 8007e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e88:	059a      	lsls	r2, r3, #22
 8007e8a:	d4ef      	bmi.n	8007e6c <__smakebuf_r+0x18>
 8007e8c:	f023 0303 	bic.w	r3, r3, #3
 8007e90:	f043 0302 	orr.w	r3, r3, #2
 8007e94:	81a3      	strh	r3, [r4, #12]
 8007e96:	e7e3      	b.n	8007e60 <__smakebuf_r+0xc>
 8007e98:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <__smakebuf_r+0x7c>)
 8007e9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	6020      	str	r0, [r4, #0]
 8007ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea4:	81a3      	strh	r3, [r4, #12]
 8007ea6:	9b00      	ldr	r3, [sp, #0]
 8007ea8:	6163      	str	r3, [r4, #20]
 8007eaa:	9b01      	ldr	r3, [sp, #4]
 8007eac:	6120      	str	r0, [r4, #16]
 8007eae:	b15b      	cbz	r3, 8007ec8 <__smakebuf_r+0x74>
 8007eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f000 fb77 	bl	80085a8 <_isatty_r>
 8007eba:	b128      	cbz	r0, 8007ec8 <__smakebuf_r+0x74>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	f043 0301 	orr.w	r3, r3, #1
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	89a0      	ldrh	r0, [r4, #12]
 8007eca:	4305      	orrs	r5, r0
 8007ecc:	81a5      	strh	r5, [r4, #12]
 8007ece:	e7cd      	b.n	8007e6c <__smakebuf_r+0x18>
 8007ed0:	080075ad 	.word	0x080075ad

08007ed4 <__malloc_lock>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__malloc_lock+0x8>)
 8007ed6:	f7ff bc60 	b.w	800779a <__retarget_lock_acquire_recursive>
 8007eda:	bf00      	nop
 8007edc:	20000778 	.word	0x20000778

08007ee0 <__malloc_unlock>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	; (8007ee8 <__malloc_unlock+0x8>)
 8007ee2:	f7ff bc5b 	b.w	800779c <__retarget_lock_release_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	20000778 	.word	0x20000778

08007eec <_free_r>:
 8007eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	d044      	beq.n	8007f7c <_free_r+0x90>
 8007ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef6:	9001      	str	r0, [sp, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f1a1 0404 	sub.w	r4, r1, #4
 8007efe:	bfb8      	it	lt
 8007f00:	18e4      	addlt	r4, r4, r3
 8007f02:	f7ff ffe7 	bl	8007ed4 <__malloc_lock>
 8007f06:	4a1e      	ldr	r2, [pc, #120]	; (8007f80 <_free_r+0x94>)
 8007f08:	9801      	ldr	r0, [sp, #4]
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	b933      	cbnz	r3, 8007f1c <_free_r+0x30>
 8007f0e:	6063      	str	r3, [r4, #4]
 8007f10:	6014      	str	r4, [r2, #0]
 8007f12:	b003      	add	sp, #12
 8007f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f18:	f7ff bfe2 	b.w	8007ee0 <__malloc_unlock>
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	d908      	bls.n	8007f32 <_free_r+0x46>
 8007f20:	6825      	ldr	r5, [r4, #0]
 8007f22:	1961      	adds	r1, r4, r5
 8007f24:	428b      	cmp	r3, r1
 8007f26:	bf01      	itttt	eq
 8007f28:	6819      	ldreq	r1, [r3, #0]
 8007f2a:	685b      	ldreq	r3, [r3, #4]
 8007f2c:	1949      	addeq	r1, r1, r5
 8007f2e:	6021      	streq	r1, [r4, #0]
 8007f30:	e7ed      	b.n	8007f0e <_free_r+0x22>
 8007f32:	461a      	mov	r2, r3
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	b10b      	cbz	r3, 8007f3c <_free_r+0x50>
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d9fa      	bls.n	8007f32 <_free_r+0x46>
 8007f3c:	6811      	ldr	r1, [r2, #0]
 8007f3e:	1855      	adds	r5, r2, r1
 8007f40:	42a5      	cmp	r5, r4
 8007f42:	d10b      	bne.n	8007f5c <_free_r+0x70>
 8007f44:	6824      	ldr	r4, [r4, #0]
 8007f46:	4421      	add	r1, r4
 8007f48:	1854      	adds	r4, r2, r1
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	6011      	str	r1, [r2, #0]
 8007f4e:	d1e0      	bne.n	8007f12 <_free_r+0x26>
 8007f50:	681c      	ldr	r4, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	6053      	str	r3, [r2, #4]
 8007f56:	4421      	add	r1, r4
 8007f58:	6011      	str	r1, [r2, #0]
 8007f5a:	e7da      	b.n	8007f12 <_free_r+0x26>
 8007f5c:	d902      	bls.n	8007f64 <_free_r+0x78>
 8007f5e:	230c      	movs	r3, #12
 8007f60:	6003      	str	r3, [r0, #0]
 8007f62:	e7d6      	b.n	8007f12 <_free_r+0x26>
 8007f64:	6825      	ldr	r5, [r4, #0]
 8007f66:	1961      	adds	r1, r4, r5
 8007f68:	428b      	cmp	r3, r1
 8007f6a:	bf04      	itt	eq
 8007f6c:	6819      	ldreq	r1, [r3, #0]
 8007f6e:	685b      	ldreq	r3, [r3, #4]
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	bf04      	itt	eq
 8007f74:	1949      	addeq	r1, r1, r5
 8007f76:	6021      	streq	r1, [r4, #0]
 8007f78:	6054      	str	r4, [r2, #4]
 8007f7a:	e7ca      	b.n	8007f12 <_free_r+0x26>
 8007f7c:	b003      	add	sp, #12
 8007f7e:	bd30      	pop	{r4, r5, pc}
 8007f80:	2000077c 	.word	0x2000077c

08007f84 <__sfputc_r>:
 8007f84:	6893      	ldr	r3, [r2, #8]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	b410      	push	{r4}
 8007f8c:	6093      	str	r3, [r2, #8]
 8007f8e:	da08      	bge.n	8007fa2 <__sfputc_r+0x1e>
 8007f90:	6994      	ldr	r4, [r2, #24]
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	db01      	blt.n	8007f9a <__sfputc_r+0x16>
 8007f96:	290a      	cmp	r1, #10
 8007f98:	d103      	bne.n	8007fa2 <__sfputc_r+0x1e>
 8007f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f9e:	f7ff bd7d 	b.w	8007a9c <__swbuf_r>
 8007fa2:	6813      	ldr	r3, [r2, #0]
 8007fa4:	1c58      	adds	r0, r3, #1
 8007fa6:	6010      	str	r0, [r2, #0]
 8007fa8:	7019      	strb	r1, [r3, #0]
 8007faa:	4608      	mov	r0, r1
 8007fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <__sfputs_r>:
 8007fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	460f      	mov	r7, r1
 8007fb8:	4614      	mov	r4, r2
 8007fba:	18d5      	adds	r5, r2, r3
 8007fbc:	42ac      	cmp	r4, r5
 8007fbe:	d101      	bne.n	8007fc4 <__sfputs_r+0x12>
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e007      	b.n	8007fd4 <__sfputs_r+0x22>
 8007fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc8:	463a      	mov	r2, r7
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f7ff ffda 	bl	8007f84 <__sfputc_r>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d1f3      	bne.n	8007fbc <__sfputs_r+0xa>
 8007fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fd8 <_vfiprintf_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	460d      	mov	r5, r1
 8007fde:	b09d      	sub	sp, #116	; 0x74
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	4698      	mov	r8, r3
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	b118      	cbz	r0, 8007ff0 <_vfiprintf_r+0x18>
 8007fe8:	6983      	ldr	r3, [r0, #24]
 8007fea:	b90b      	cbnz	r3, 8007ff0 <_vfiprintf_r+0x18>
 8007fec:	f7ff fb12 	bl	8007614 <__sinit>
 8007ff0:	4b89      	ldr	r3, [pc, #548]	; (8008218 <_vfiprintf_r+0x240>)
 8007ff2:	429d      	cmp	r5, r3
 8007ff4:	d11b      	bne.n	800802e <_vfiprintf_r+0x56>
 8007ff6:	6875      	ldr	r5, [r6, #4]
 8007ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ffa:	07d9      	lsls	r1, r3, #31
 8007ffc:	d405      	bmi.n	800800a <_vfiprintf_r+0x32>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	059a      	lsls	r2, r3, #22
 8008002:	d402      	bmi.n	800800a <_vfiprintf_r+0x32>
 8008004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008006:	f7ff fbc8 	bl	800779a <__retarget_lock_acquire_recursive>
 800800a:	89ab      	ldrh	r3, [r5, #12]
 800800c:	071b      	lsls	r3, r3, #28
 800800e:	d501      	bpl.n	8008014 <_vfiprintf_r+0x3c>
 8008010:	692b      	ldr	r3, [r5, #16]
 8008012:	b9eb      	cbnz	r3, 8008050 <_vfiprintf_r+0x78>
 8008014:	4629      	mov	r1, r5
 8008016:	4630      	mov	r0, r6
 8008018:	f7ff fda4 	bl	8007b64 <__swsetup_r>
 800801c:	b1c0      	cbz	r0, 8008050 <_vfiprintf_r+0x78>
 800801e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008020:	07dc      	lsls	r4, r3, #31
 8008022:	d50e      	bpl.n	8008042 <_vfiprintf_r+0x6a>
 8008024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008028:	b01d      	add	sp, #116	; 0x74
 800802a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802e:	4b7b      	ldr	r3, [pc, #492]	; (800821c <_vfiprintf_r+0x244>)
 8008030:	429d      	cmp	r5, r3
 8008032:	d101      	bne.n	8008038 <_vfiprintf_r+0x60>
 8008034:	68b5      	ldr	r5, [r6, #8]
 8008036:	e7df      	b.n	8007ff8 <_vfiprintf_r+0x20>
 8008038:	4b79      	ldr	r3, [pc, #484]	; (8008220 <_vfiprintf_r+0x248>)
 800803a:	429d      	cmp	r5, r3
 800803c:	bf08      	it	eq
 800803e:	68f5      	ldreq	r5, [r6, #12]
 8008040:	e7da      	b.n	8007ff8 <_vfiprintf_r+0x20>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	0598      	lsls	r0, r3, #22
 8008046:	d4ed      	bmi.n	8008024 <_vfiprintf_r+0x4c>
 8008048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800804a:	f7ff fba7 	bl	800779c <__retarget_lock_release_recursive>
 800804e:	e7e9      	b.n	8008024 <_vfiprintf_r+0x4c>
 8008050:	2300      	movs	r3, #0
 8008052:	9309      	str	r3, [sp, #36]	; 0x24
 8008054:	2320      	movs	r3, #32
 8008056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800805a:	f8cd 800c 	str.w	r8, [sp, #12]
 800805e:	2330      	movs	r3, #48	; 0x30
 8008060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008224 <_vfiprintf_r+0x24c>
 8008064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008068:	f04f 0901 	mov.w	r9, #1
 800806c:	4623      	mov	r3, r4
 800806e:	469a      	mov	sl, r3
 8008070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008074:	b10a      	cbz	r2, 800807a <_vfiprintf_r+0xa2>
 8008076:	2a25      	cmp	r2, #37	; 0x25
 8008078:	d1f9      	bne.n	800806e <_vfiprintf_r+0x96>
 800807a:	ebba 0b04 	subs.w	fp, sl, r4
 800807e:	d00b      	beq.n	8008098 <_vfiprintf_r+0xc0>
 8008080:	465b      	mov	r3, fp
 8008082:	4622      	mov	r2, r4
 8008084:	4629      	mov	r1, r5
 8008086:	4630      	mov	r0, r6
 8008088:	f7ff ff93 	bl	8007fb2 <__sfputs_r>
 800808c:	3001      	adds	r0, #1
 800808e:	f000 80aa 	beq.w	80081e6 <_vfiprintf_r+0x20e>
 8008092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008094:	445a      	add	r2, fp
 8008096:	9209      	str	r2, [sp, #36]	; 0x24
 8008098:	f89a 3000 	ldrb.w	r3, [sl]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 80a2 	beq.w	80081e6 <_vfiprintf_r+0x20e>
 80080a2:	2300      	movs	r3, #0
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ac:	f10a 0a01 	add.w	sl, sl, #1
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	9307      	str	r3, [sp, #28]
 80080b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080b8:	931a      	str	r3, [sp, #104]	; 0x68
 80080ba:	4654      	mov	r4, sl
 80080bc:	2205      	movs	r2, #5
 80080be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c2:	4858      	ldr	r0, [pc, #352]	; (8008224 <_vfiprintf_r+0x24c>)
 80080c4:	f7f8 f8c4 	bl	8000250 <memchr>
 80080c8:	9a04      	ldr	r2, [sp, #16]
 80080ca:	b9d8      	cbnz	r0, 8008104 <_vfiprintf_r+0x12c>
 80080cc:	06d1      	lsls	r1, r2, #27
 80080ce:	bf44      	itt	mi
 80080d0:	2320      	movmi	r3, #32
 80080d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d6:	0713      	lsls	r3, r2, #28
 80080d8:	bf44      	itt	mi
 80080da:	232b      	movmi	r3, #43	; 0x2b
 80080dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e0:	f89a 3000 	ldrb.w	r3, [sl]
 80080e4:	2b2a      	cmp	r3, #42	; 0x2a
 80080e6:	d015      	beq.n	8008114 <_vfiprintf_r+0x13c>
 80080e8:	9a07      	ldr	r2, [sp, #28]
 80080ea:	4654      	mov	r4, sl
 80080ec:	2000      	movs	r0, #0
 80080ee:	f04f 0c0a 	mov.w	ip, #10
 80080f2:	4621      	mov	r1, r4
 80080f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080f8:	3b30      	subs	r3, #48	; 0x30
 80080fa:	2b09      	cmp	r3, #9
 80080fc:	d94e      	bls.n	800819c <_vfiprintf_r+0x1c4>
 80080fe:	b1b0      	cbz	r0, 800812e <_vfiprintf_r+0x156>
 8008100:	9207      	str	r2, [sp, #28]
 8008102:	e014      	b.n	800812e <_vfiprintf_r+0x156>
 8008104:	eba0 0308 	sub.w	r3, r0, r8
 8008108:	fa09 f303 	lsl.w	r3, r9, r3
 800810c:	4313      	orrs	r3, r2
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	46a2      	mov	sl, r4
 8008112:	e7d2      	b.n	80080ba <_vfiprintf_r+0xe2>
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	1d19      	adds	r1, r3, #4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	9103      	str	r1, [sp, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	bfbb      	ittet	lt
 8008120:	425b      	neglt	r3, r3
 8008122:	f042 0202 	orrlt.w	r2, r2, #2
 8008126:	9307      	strge	r3, [sp, #28]
 8008128:	9307      	strlt	r3, [sp, #28]
 800812a:	bfb8      	it	lt
 800812c:	9204      	strlt	r2, [sp, #16]
 800812e:	7823      	ldrb	r3, [r4, #0]
 8008130:	2b2e      	cmp	r3, #46	; 0x2e
 8008132:	d10c      	bne.n	800814e <_vfiprintf_r+0x176>
 8008134:	7863      	ldrb	r3, [r4, #1]
 8008136:	2b2a      	cmp	r3, #42	; 0x2a
 8008138:	d135      	bne.n	80081a6 <_vfiprintf_r+0x1ce>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	1d1a      	adds	r2, r3, #4
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	9203      	str	r2, [sp, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	bfb8      	it	lt
 8008146:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800814a:	3402      	adds	r4, #2
 800814c:	9305      	str	r3, [sp, #20]
 800814e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008234 <_vfiprintf_r+0x25c>
 8008152:	7821      	ldrb	r1, [r4, #0]
 8008154:	2203      	movs	r2, #3
 8008156:	4650      	mov	r0, sl
 8008158:	f7f8 f87a 	bl	8000250 <memchr>
 800815c:	b140      	cbz	r0, 8008170 <_vfiprintf_r+0x198>
 800815e:	2340      	movs	r3, #64	; 0x40
 8008160:	eba0 000a 	sub.w	r0, r0, sl
 8008164:	fa03 f000 	lsl.w	r0, r3, r0
 8008168:	9b04      	ldr	r3, [sp, #16]
 800816a:	4303      	orrs	r3, r0
 800816c:	3401      	adds	r4, #1
 800816e:	9304      	str	r3, [sp, #16]
 8008170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008174:	482c      	ldr	r0, [pc, #176]	; (8008228 <_vfiprintf_r+0x250>)
 8008176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800817a:	2206      	movs	r2, #6
 800817c:	f7f8 f868 	bl	8000250 <memchr>
 8008180:	2800      	cmp	r0, #0
 8008182:	d03f      	beq.n	8008204 <_vfiprintf_r+0x22c>
 8008184:	4b29      	ldr	r3, [pc, #164]	; (800822c <_vfiprintf_r+0x254>)
 8008186:	bb1b      	cbnz	r3, 80081d0 <_vfiprintf_r+0x1f8>
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	3307      	adds	r3, #7
 800818c:	f023 0307 	bic.w	r3, r3, #7
 8008190:	3308      	adds	r3, #8
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008196:	443b      	add	r3, r7
 8008198:	9309      	str	r3, [sp, #36]	; 0x24
 800819a:	e767      	b.n	800806c <_vfiprintf_r+0x94>
 800819c:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a0:	460c      	mov	r4, r1
 80081a2:	2001      	movs	r0, #1
 80081a4:	e7a5      	b.n	80080f2 <_vfiprintf_r+0x11a>
 80081a6:	2300      	movs	r3, #0
 80081a8:	3401      	adds	r4, #1
 80081aa:	9305      	str	r3, [sp, #20]
 80081ac:	4619      	mov	r1, r3
 80081ae:	f04f 0c0a 	mov.w	ip, #10
 80081b2:	4620      	mov	r0, r4
 80081b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b8:	3a30      	subs	r2, #48	; 0x30
 80081ba:	2a09      	cmp	r2, #9
 80081bc:	d903      	bls.n	80081c6 <_vfiprintf_r+0x1ee>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0c5      	beq.n	800814e <_vfiprintf_r+0x176>
 80081c2:	9105      	str	r1, [sp, #20]
 80081c4:	e7c3      	b.n	800814e <_vfiprintf_r+0x176>
 80081c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ca:	4604      	mov	r4, r0
 80081cc:	2301      	movs	r3, #1
 80081ce:	e7f0      	b.n	80081b2 <_vfiprintf_r+0x1da>
 80081d0:	ab03      	add	r3, sp, #12
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	462a      	mov	r2, r5
 80081d6:	4b16      	ldr	r3, [pc, #88]	; (8008230 <_vfiprintf_r+0x258>)
 80081d8:	a904      	add	r1, sp, #16
 80081da:	4630      	mov	r0, r6
 80081dc:	f3af 8000 	nop.w
 80081e0:	4607      	mov	r7, r0
 80081e2:	1c78      	adds	r0, r7, #1
 80081e4:	d1d6      	bne.n	8008194 <_vfiprintf_r+0x1bc>
 80081e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081e8:	07d9      	lsls	r1, r3, #31
 80081ea:	d405      	bmi.n	80081f8 <_vfiprintf_r+0x220>
 80081ec:	89ab      	ldrh	r3, [r5, #12]
 80081ee:	059a      	lsls	r2, r3, #22
 80081f0:	d402      	bmi.n	80081f8 <_vfiprintf_r+0x220>
 80081f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081f4:	f7ff fad2 	bl	800779c <__retarget_lock_release_recursive>
 80081f8:	89ab      	ldrh	r3, [r5, #12]
 80081fa:	065b      	lsls	r3, r3, #25
 80081fc:	f53f af12 	bmi.w	8008024 <_vfiprintf_r+0x4c>
 8008200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008202:	e711      	b.n	8008028 <_vfiprintf_r+0x50>
 8008204:	ab03      	add	r3, sp, #12
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	462a      	mov	r2, r5
 800820a:	4b09      	ldr	r3, [pc, #36]	; (8008230 <_vfiprintf_r+0x258>)
 800820c:	a904      	add	r1, sp, #16
 800820e:	4630      	mov	r0, r6
 8008210:	f000 f880 	bl	8008314 <_printf_i>
 8008214:	e7e4      	b.n	80081e0 <_vfiprintf_r+0x208>
 8008216:	bf00      	nop
 8008218:	080086ec 	.word	0x080086ec
 800821c:	0800870c 	.word	0x0800870c
 8008220:	080086cc 	.word	0x080086cc
 8008224:	08008730 	.word	0x08008730
 8008228:	0800873a 	.word	0x0800873a
 800822c:	00000000 	.word	0x00000000
 8008230:	08007fb3 	.word	0x08007fb3
 8008234:	08008736 	.word	0x08008736

08008238 <_printf_common>:
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	4616      	mov	r6, r2
 800823e:	4699      	mov	r9, r3
 8008240:	688a      	ldr	r2, [r1, #8]
 8008242:	690b      	ldr	r3, [r1, #16]
 8008244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008248:	4293      	cmp	r3, r2
 800824a:	bfb8      	it	lt
 800824c:	4613      	movlt	r3, r2
 800824e:	6033      	str	r3, [r6, #0]
 8008250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008254:	4607      	mov	r7, r0
 8008256:	460c      	mov	r4, r1
 8008258:	b10a      	cbz	r2, 800825e <_printf_common+0x26>
 800825a:	3301      	adds	r3, #1
 800825c:	6033      	str	r3, [r6, #0]
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	0699      	lsls	r1, r3, #26
 8008262:	bf42      	ittt	mi
 8008264:	6833      	ldrmi	r3, [r6, #0]
 8008266:	3302      	addmi	r3, #2
 8008268:	6033      	strmi	r3, [r6, #0]
 800826a:	6825      	ldr	r5, [r4, #0]
 800826c:	f015 0506 	ands.w	r5, r5, #6
 8008270:	d106      	bne.n	8008280 <_printf_common+0x48>
 8008272:	f104 0a19 	add.w	sl, r4, #25
 8008276:	68e3      	ldr	r3, [r4, #12]
 8008278:	6832      	ldr	r2, [r6, #0]
 800827a:	1a9b      	subs	r3, r3, r2
 800827c:	42ab      	cmp	r3, r5
 800827e:	dc26      	bgt.n	80082ce <_printf_common+0x96>
 8008280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008284:	1e13      	subs	r3, r2, #0
 8008286:	6822      	ldr	r2, [r4, #0]
 8008288:	bf18      	it	ne
 800828a:	2301      	movne	r3, #1
 800828c:	0692      	lsls	r2, r2, #26
 800828e:	d42b      	bmi.n	80082e8 <_printf_common+0xb0>
 8008290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008294:	4649      	mov	r1, r9
 8008296:	4638      	mov	r0, r7
 8008298:	47c0      	blx	r8
 800829a:	3001      	adds	r0, #1
 800829c:	d01e      	beq.n	80082dc <_printf_common+0xa4>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	68e5      	ldr	r5, [r4, #12]
 80082a2:	6832      	ldr	r2, [r6, #0]
 80082a4:	f003 0306 	and.w	r3, r3, #6
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	bf08      	it	eq
 80082ac:	1aad      	subeq	r5, r5, r2
 80082ae:	68a3      	ldr	r3, [r4, #8]
 80082b0:	6922      	ldr	r2, [r4, #16]
 80082b2:	bf0c      	ite	eq
 80082b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082b8:	2500      	movne	r5, #0
 80082ba:	4293      	cmp	r3, r2
 80082bc:	bfc4      	itt	gt
 80082be:	1a9b      	subgt	r3, r3, r2
 80082c0:	18ed      	addgt	r5, r5, r3
 80082c2:	2600      	movs	r6, #0
 80082c4:	341a      	adds	r4, #26
 80082c6:	42b5      	cmp	r5, r6
 80082c8:	d11a      	bne.n	8008300 <_printf_common+0xc8>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e008      	b.n	80082e0 <_printf_common+0xa8>
 80082ce:	2301      	movs	r3, #1
 80082d0:	4652      	mov	r2, sl
 80082d2:	4649      	mov	r1, r9
 80082d4:	4638      	mov	r0, r7
 80082d6:	47c0      	blx	r8
 80082d8:	3001      	adds	r0, #1
 80082da:	d103      	bne.n	80082e4 <_printf_common+0xac>
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e4:	3501      	adds	r5, #1
 80082e6:	e7c6      	b.n	8008276 <_printf_common+0x3e>
 80082e8:	18e1      	adds	r1, r4, r3
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	2030      	movs	r0, #48	; 0x30
 80082ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082f2:	4422      	add	r2, r4
 80082f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082fc:	3302      	adds	r3, #2
 80082fe:	e7c7      	b.n	8008290 <_printf_common+0x58>
 8008300:	2301      	movs	r3, #1
 8008302:	4622      	mov	r2, r4
 8008304:	4649      	mov	r1, r9
 8008306:	4638      	mov	r0, r7
 8008308:	47c0      	blx	r8
 800830a:	3001      	adds	r0, #1
 800830c:	d0e6      	beq.n	80082dc <_printf_common+0xa4>
 800830e:	3601      	adds	r6, #1
 8008310:	e7d9      	b.n	80082c6 <_printf_common+0x8e>
	...

08008314 <_printf_i>:
 8008314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	7e0f      	ldrb	r7, [r1, #24]
 800831a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800831c:	2f78      	cmp	r7, #120	; 0x78
 800831e:	4691      	mov	r9, r2
 8008320:	4680      	mov	r8, r0
 8008322:	460c      	mov	r4, r1
 8008324:	469a      	mov	sl, r3
 8008326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800832a:	d807      	bhi.n	800833c <_printf_i+0x28>
 800832c:	2f62      	cmp	r7, #98	; 0x62
 800832e:	d80a      	bhi.n	8008346 <_printf_i+0x32>
 8008330:	2f00      	cmp	r7, #0
 8008332:	f000 80d8 	beq.w	80084e6 <_printf_i+0x1d2>
 8008336:	2f58      	cmp	r7, #88	; 0x58
 8008338:	f000 80a3 	beq.w	8008482 <_printf_i+0x16e>
 800833c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008344:	e03a      	b.n	80083bc <_printf_i+0xa8>
 8008346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800834a:	2b15      	cmp	r3, #21
 800834c:	d8f6      	bhi.n	800833c <_printf_i+0x28>
 800834e:	a101      	add	r1, pc, #4	; (adr r1, 8008354 <_printf_i+0x40>)
 8008350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008354:	080083ad 	.word	0x080083ad
 8008358:	080083c1 	.word	0x080083c1
 800835c:	0800833d 	.word	0x0800833d
 8008360:	0800833d 	.word	0x0800833d
 8008364:	0800833d 	.word	0x0800833d
 8008368:	0800833d 	.word	0x0800833d
 800836c:	080083c1 	.word	0x080083c1
 8008370:	0800833d 	.word	0x0800833d
 8008374:	0800833d 	.word	0x0800833d
 8008378:	0800833d 	.word	0x0800833d
 800837c:	0800833d 	.word	0x0800833d
 8008380:	080084cd 	.word	0x080084cd
 8008384:	080083f1 	.word	0x080083f1
 8008388:	080084af 	.word	0x080084af
 800838c:	0800833d 	.word	0x0800833d
 8008390:	0800833d 	.word	0x0800833d
 8008394:	080084ef 	.word	0x080084ef
 8008398:	0800833d 	.word	0x0800833d
 800839c:	080083f1 	.word	0x080083f1
 80083a0:	0800833d 	.word	0x0800833d
 80083a4:	0800833d 	.word	0x0800833d
 80083a8:	080084b7 	.word	0x080084b7
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	1d1a      	adds	r2, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	602a      	str	r2, [r5, #0]
 80083b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083bc:	2301      	movs	r3, #1
 80083be:	e0a3      	b.n	8008508 <_printf_i+0x1f4>
 80083c0:	6820      	ldr	r0, [r4, #0]
 80083c2:	6829      	ldr	r1, [r5, #0]
 80083c4:	0606      	lsls	r6, r0, #24
 80083c6:	f101 0304 	add.w	r3, r1, #4
 80083ca:	d50a      	bpl.n	80083e2 <_printf_i+0xce>
 80083cc:	680e      	ldr	r6, [r1, #0]
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	2e00      	cmp	r6, #0
 80083d2:	da03      	bge.n	80083dc <_printf_i+0xc8>
 80083d4:	232d      	movs	r3, #45	; 0x2d
 80083d6:	4276      	negs	r6, r6
 80083d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083dc:	485e      	ldr	r0, [pc, #376]	; (8008558 <_printf_i+0x244>)
 80083de:	230a      	movs	r3, #10
 80083e0:	e019      	b.n	8008416 <_printf_i+0x102>
 80083e2:	680e      	ldr	r6, [r1, #0]
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083ea:	bf18      	it	ne
 80083ec:	b236      	sxthne	r6, r6
 80083ee:	e7ef      	b.n	80083d0 <_printf_i+0xbc>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	6820      	ldr	r0, [r4, #0]
 80083f4:	1d19      	adds	r1, r3, #4
 80083f6:	6029      	str	r1, [r5, #0]
 80083f8:	0601      	lsls	r1, r0, #24
 80083fa:	d501      	bpl.n	8008400 <_printf_i+0xec>
 80083fc:	681e      	ldr	r6, [r3, #0]
 80083fe:	e002      	b.n	8008406 <_printf_i+0xf2>
 8008400:	0646      	lsls	r6, r0, #25
 8008402:	d5fb      	bpl.n	80083fc <_printf_i+0xe8>
 8008404:	881e      	ldrh	r6, [r3, #0]
 8008406:	4854      	ldr	r0, [pc, #336]	; (8008558 <_printf_i+0x244>)
 8008408:	2f6f      	cmp	r7, #111	; 0x6f
 800840a:	bf0c      	ite	eq
 800840c:	2308      	moveq	r3, #8
 800840e:	230a      	movne	r3, #10
 8008410:	2100      	movs	r1, #0
 8008412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008416:	6865      	ldr	r5, [r4, #4]
 8008418:	60a5      	str	r5, [r4, #8]
 800841a:	2d00      	cmp	r5, #0
 800841c:	bfa2      	ittt	ge
 800841e:	6821      	ldrge	r1, [r4, #0]
 8008420:	f021 0104 	bicge.w	r1, r1, #4
 8008424:	6021      	strge	r1, [r4, #0]
 8008426:	b90e      	cbnz	r6, 800842c <_printf_i+0x118>
 8008428:	2d00      	cmp	r5, #0
 800842a:	d04d      	beq.n	80084c8 <_printf_i+0x1b4>
 800842c:	4615      	mov	r5, r2
 800842e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008432:	fb03 6711 	mls	r7, r3, r1, r6
 8008436:	5dc7      	ldrb	r7, [r0, r7]
 8008438:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800843c:	4637      	mov	r7, r6
 800843e:	42bb      	cmp	r3, r7
 8008440:	460e      	mov	r6, r1
 8008442:	d9f4      	bls.n	800842e <_printf_i+0x11a>
 8008444:	2b08      	cmp	r3, #8
 8008446:	d10b      	bne.n	8008460 <_printf_i+0x14c>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	07de      	lsls	r6, r3, #31
 800844c:	d508      	bpl.n	8008460 <_printf_i+0x14c>
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	6861      	ldr	r1, [r4, #4]
 8008452:	4299      	cmp	r1, r3
 8008454:	bfde      	ittt	le
 8008456:	2330      	movle	r3, #48	; 0x30
 8008458:	f805 3c01 	strble.w	r3, [r5, #-1]
 800845c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008460:	1b52      	subs	r2, r2, r5
 8008462:	6122      	str	r2, [r4, #16]
 8008464:	f8cd a000 	str.w	sl, [sp]
 8008468:	464b      	mov	r3, r9
 800846a:	aa03      	add	r2, sp, #12
 800846c:	4621      	mov	r1, r4
 800846e:	4640      	mov	r0, r8
 8008470:	f7ff fee2 	bl	8008238 <_printf_common>
 8008474:	3001      	adds	r0, #1
 8008476:	d14c      	bne.n	8008512 <_printf_i+0x1fe>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800847c:	b004      	add	sp, #16
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	4835      	ldr	r0, [pc, #212]	; (8008558 <_printf_i+0x244>)
 8008484:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008488:	6829      	ldr	r1, [r5, #0]
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008490:	6029      	str	r1, [r5, #0]
 8008492:	061d      	lsls	r5, r3, #24
 8008494:	d514      	bpl.n	80084c0 <_printf_i+0x1ac>
 8008496:	07df      	lsls	r7, r3, #31
 8008498:	bf44      	itt	mi
 800849a:	f043 0320 	orrmi.w	r3, r3, #32
 800849e:	6023      	strmi	r3, [r4, #0]
 80084a0:	b91e      	cbnz	r6, 80084aa <_printf_i+0x196>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	f023 0320 	bic.w	r3, r3, #32
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	2310      	movs	r3, #16
 80084ac:	e7b0      	b.n	8008410 <_printf_i+0xfc>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f043 0320 	orr.w	r3, r3, #32
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	2378      	movs	r3, #120	; 0x78
 80084b8:	4828      	ldr	r0, [pc, #160]	; (800855c <_printf_i+0x248>)
 80084ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084be:	e7e3      	b.n	8008488 <_printf_i+0x174>
 80084c0:	0659      	lsls	r1, r3, #25
 80084c2:	bf48      	it	mi
 80084c4:	b2b6      	uxthmi	r6, r6
 80084c6:	e7e6      	b.n	8008496 <_printf_i+0x182>
 80084c8:	4615      	mov	r5, r2
 80084ca:	e7bb      	b.n	8008444 <_printf_i+0x130>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	6826      	ldr	r6, [r4, #0]
 80084d0:	6961      	ldr	r1, [r4, #20]
 80084d2:	1d18      	adds	r0, r3, #4
 80084d4:	6028      	str	r0, [r5, #0]
 80084d6:	0635      	lsls	r5, r6, #24
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	d501      	bpl.n	80084e0 <_printf_i+0x1cc>
 80084dc:	6019      	str	r1, [r3, #0]
 80084de:	e002      	b.n	80084e6 <_printf_i+0x1d2>
 80084e0:	0670      	lsls	r0, r6, #25
 80084e2:	d5fb      	bpl.n	80084dc <_printf_i+0x1c8>
 80084e4:	8019      	strh	r1, [r3, #0]
 80084e6:	2300      	movs	r3, #0
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	4615      	mov	r5, r2
 80084ec:	e7ba      	b.n	8008464 <_printf_i+0x150>
 80084ee:	682b      	ldr	r3, [r5, #0]
 80084f0:	1d1a      	adds	r2, r3, #4
 80084f2:	602a      	str	r2, [r5, #0]
 80084f4:	681d      	ldr	r5, [r3, #0]
 80084f6:	6862      	ldr	r2, [r4, #4]
 80084f8:	2100      	movs	r1, #0
 80084fa:	4628      	mov	r0, r5
 80084fc:	f7f7 fea8 	bl	8000250 <memchr>
 8008500:	b108      	cbz	r0, 8008506 <_printf_i+0x1f2>
 8008502:	1b40      	subs	r0, r0, r5
 8008504:	6060      	str	r0, [r4, #4]
 8008506:	6863      	ldr	r3, [r4, #4]
 8008508:	6123      	str	r3, [r4, #16]
 800850a:	2300      	movs	r3, #0
 800850c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008510:	e7a8      	b.n	8008464 <_printf_i+0x150>
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	462a      	mov	r2, r5
 8008516:	4649      	mov	r1, r9
 8008518:	4640      	mov	r0, r8
 800851a:	47d0      	blx	sl
 800851c:	3001      	adds	r0, #1
 800851e:	d0ab      	beq.n	8008478 <_printf_i+0x164>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	079b      	lsls	r3, r3, #30
 8008524:	d413      	bmi.n	800854e <_printf_i+0x23a>
 8008526:	68e0      	ldr	r0, [r4, #12]
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	4298      	cmp	r0, r3
 800852c:	bfb8      	it	lt
 800852e:	4618      	movlt	r0, r3
 8008530:	e7a4      	b.n	800847c <_printf_i+0x168>
 8008532:	2301      	movs	r3, #1
 8008534:	4632      	mov	r2, r6
 8008536:	4649      	mov	r1, r9
 8008538:	4640      	mov	r0, r8
 800853a:	47d0      	blx	sl
 800853c:	3001      	adds	r0, #1
 800853e:	d09b      	beq.n	8008478 <_printf_i+0x164>
 8008540:	3501      	adds	r5, #1
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	9903      	ldr	r1, [sp, #12]
 8008546:	1a5b      	subs	r3, r3, r1
 8008548:	42ab      	cmp	r3, r5
 800854a:	dcf2      	bgt.n	8008532 <_printf_i+0x21e>
 800854c:	e7eb      	b.n	8008526 <_printf_i+0x212>
 800854e:	2500      	movs	r5, #0
 8008550:	f104 0619 	add.w	r6, r4, #25
 8008554:	e7f5      	b.n	8008542 <_printf_i+0x22e>
 8008556:	bf00      	nop
 8008558:	08008741 	.word	0x08008741
 800855c:	08008752 	.word	0x08008752

08008560 <_read_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d07      	ldr	r5, [pc, #28]	; (8008580 <_read_r+0x20>)
 8008564:	4604      	mov	r4, r0
 8008566:	4608      	mov	r0, r1
 8008568:	4611      	mov	r1, r2
 800856a:	2200      	movs	r2, #0
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f7fe fd8d 	bl	800708e <_read>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_read_r+0x1e>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_read_r+0x1e>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20000784 	.word	0x20000784

08008584 <_fstat_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	; (80085a4 <_fstat_r+0x20>)
 8008588:	2300      	movs	r3, #0
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	f7fe fe5e 	bl	8007252 <_fstat>
 8008596:	1c43      	adds	r3, r0, #1
 8008598:	d102      	bne.n	80085a0 <_fstat_r+0x1c>
 800859a:	682b      	ldr	r3, [r5, #0]
 800859c:	b103      	cbz	r3, 80085a0 <_fstat_r+0x1c>
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
 80085a2:	bf00      	nop
 80085a4:	20000784 	.word	0x20000784

080085a8 <_isatty_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d06      	ldr	r5, [pc, #24]	; (80085c4 <_isatty_r+0x1c>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	602b      	str	r3, [r5, #0]
 80085b4:	f7fe ffb4 	bl	8007520 <_isatty>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d102      	bne.n	80085c2 <_isatty_r+0x1a>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	b103      	cbz	r3, 80085c2 <_isatty_r+0x1a>
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	20000784 	.word	0x20000784

080085c8 <_init>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	bf00      	nop
 80085cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ce:	bc08      	pop	{r3}
 80085d0:	469e      	mov	lr, r3
 80085d2:	4770      	bx	lr

080085d4 <_fini>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	bf00      	nop
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr
