
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f8  080070f8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080070f8  080070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007100  08007100  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007104  08007104  00017104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000018  08007120  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08007120  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017be1  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297c  00000000  00000000  00037c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029428  00000000  00000000  0003ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a285  00000000  00000000  000660d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104727  00000000  00000000  0008035d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005590  00000000  00000000  00184ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000018 	.word	0x20000018
 8000214:	00000000 	.word	0x00000000
 8000218:	080070c8 	.word	0x080070c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000001c 	.word	0x2000001c
 8000234:	080070c8 	.word	0x080070c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 800053c:	b480      	push	{r7}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	607a      	str	r2, [r7, #4]
 8000556:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000558:	2301      	movs	r3, #1
 800055a:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 800055c:	e025      	b.n	80005aa <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d109      	bne.n	800057a <cobsEncode+0x3e>
            FinishBlock(code);
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	7efa      	ldrb	r2, [r7, #27]
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	607a      	str	r2, [r7, #4]
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	2301      	movs	r3, #1
 8000576:	76fb      	strb	r3, [r7, #27]
 8000578:	e014      	b.n	80005a4 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 8000586:	7efb      	ldrb	r3, [r7, #27]
 8000588:	3301      	adds	r3, #1
 800058a:	76fb      	strb	r3, [r7, #27]
 800058c:	7efb      	ldrb	r3, [r7, #27]
 800058e:	2bff      	cmp	r3, #255	; 0xff
 8000590:	d108      	bne.n	80005a4 <cobsEncode+0x68>
                FinishBlock(code);
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	7efa      	ldrb	r2, [r7, #27]
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	607a      	str	r2, [r7, #4]
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	2301      	movs	r3, #1
 80005a2:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3d5      	bcc.n	800055e <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	7efa      	ldrb	r2, [r7, #27]
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	2301      	movs	r3, #1
 80005c2:	76fb      	strb	r3, [r7, #27]
}
 80005c4:	bf00      	nop
 80005c6:	3724      	adds	r7, #36	; 0x24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d01c      	beq.n	800061e <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3321      	adds	r3, #33	; 0x21
 80005e8:	461a      	mov	r2, r3
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	68b8      	ldr	r0, [r7, #8]
 80005ee:	f7ff ffa5 	bl	800053c <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	b29b      	uxth	r3, r3
 8000610:	3302      	adds	r3, #2
 8000612:	b29a      	uxth	r2, r3
 8000614:	2303      	movs	r3, #3
 8000616:	f005 ffbb 	bl	8006590 <HAL_UART_Transmit>
 800061a:	4603      	mov	r3, r0
 800061c:	e000      	b.n	8000620 <ertc_dlog_send+0x50>
	}

	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1c59      	adds	r1, r3, #1
 800063a:	2303      	movs	r3, #3
 800063c:	2201      	movs	r2, #1
 800063e:	f006 f82a 	bl	8006696 <HAL_UART_Receive>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d112      	bne.n	800066e <ertc_dlog_update+0x46>
		switch (logger->rxbuff[0]) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	2b41      	cmp	r3, #65	; 0x41
 800064e:	d002      	beq.n	8000656 <ertc_dlog_update+0x2e>
 8000650:	2b42      	cmp	r3, #66	; 0x42
 8000652:	d004      	beq.n	800065e <ertc_dlog_update+0x36>
 8000654:	e007      	b.n	8000666 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
				break;
 800065c:	e008      	b.n	8000670 <ertc_dlog_update+0x48>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
				break;
 8000664:	e004      	b.n	8000670 <ertc_dlog_update+0x48>
			default:
				logger->tx_enable = false;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	e000      	b.n	8000670 <ertc_dlog_update+0x48>
		}
	}
 800066e:	bf00      	nop
	return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	0000      	movs	r0, r0
 800067c:	0000      	movs	r0, r0
	...

08000680 <HAL_TIM_PeriodElapsedCallback>:
	float x1, x2 , y1, y2;
} data;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4aa4      	ldr	r2, [pc, #656]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800068e:	4293      	cmp	r3, r2
 8000690:	f040 818e 	bne.w	80009b0 <HAL_TIM_PeriodElapsedCallback+0x330>

		uint32_t TIM3_CurrentCount , TIM4_CurrentCount;
		int32_t TIM3_DiffCount , TIM4_DiffCount;
		static uint32_t TIM3_PreviousCount = 0, TIM4_PreviousCount = 0;

		TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 8000694:	4ba3      	ldr	r3, [pc, #652]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	61fb      	str	r3, [r7, #28]
		TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 800069c:	4ba2      	ldr	r3, [pc, #648]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	61bb      	str	r3, [r7, #24]


		/*  evaluate increment of TIM3 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 80006a4:	4b9f      	ldr	r3, [pc, #636]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f003 0310 	and.w	r3, r3, #16
 80006ae:	2b10      	cmp	r3, #16
 80006b0:	d112      	bne.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			/* check for counter underflow */
			if (TIM3_CurrentCount <= TIM3_PreviousCount)
 80006b2:	4b9e      	ldr	r3, [pc, #632]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	69fa      	ldr	r2, [r7, #28]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d805      	bhi.n	80006c8 <HAL_TIM_PeriodElapsedCallback+0x48>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80006bc:	4b9b      	ldr	r3, [pc, #620]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	69fa      	ldr	r2, [r7, #28]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
 80006c6:	e019      	b.n	80006fc <HAL_TIM_PeriodElapsedCallback+0x7c>
			else
				TIM3_DiffCount = -((TIM3_ARR_VALUE+1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 80006c8:	4b98      	ldr	r3, [pc, #608]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	69fa      	ldr	r2, [r7, #28]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
 80006d6:	e011      	b.n	80006fc <HAL_TIM_PeriodElapsedCallback+0x7c>
		}
		else
		{
		/* check for counter overflow */
			if (TIM3_CurrentCount >= TIM3_PreviousCount)
 80006d8:	4b94      	ldr	r3, [pc, #592]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	69fa      	ldr	r2, [r7, #28]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d305      	bcc.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x6e>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80006e2:	4b92      	ldr	r3, [pc, #584]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	69fa      	ldr	r2, [r7, #28]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
 80006ec:	e006      	b.n	80006fc <HAL_TIM_PeriodElapsedCallback+0x7c>
			else
				TIM3_DiffCount = ((TIM3_ARR_VALUE+1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 80006ee:	4b8f      	ldr	r3, [pc, #572]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	69fa      	ldr	r2, [r7, #28]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
		}

		TIM3_PreviousCount = TIM3_CurrentCount;
 80006fc:	4a8b      	ldr	r2, [pc, #556]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	6013      	str	r3, [r2, #0]
	    // 3. compute the motor speed, in [rpm] for example

		float current_rpm_1 = ((float)TIM3_DiffCount/(2.0*1920.0))*(60.0/TS );
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800070c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000710:	ed9f 5b7d 	vldr	d5, [pc, #500]	; 8000908 <HAL_TIM_PeriodElapsedCallback+0x288>
 8000714:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000718:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8000910 <HAL_TIM_PeriodElapsedCallback+0x290>
 800071c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000720:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000724:	edc7 7a05 	vstr	s15, [r7, #20]
	    tracking_error_1 = reference_rpm - current_rpm_1;
 8000728:	4b81      	ldr	r3, [pc, #516]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800072a:	ed93 7a00 	vldr	s14, [r3]
 800072e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000736:	4b7f      	ldr	r3, [pc, #508]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000738:	edc3 7a00 	vstr	s15, [r3]




		/*  evaluate increment of TIM4 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 800073c:	4b7a      	ldr	r3, [pc, #488]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	2b10      	cmp	r3, #16
 8000748:	d112      	bne.n	8000770 <HAL_TIM_PeriodElapsedCallback+0xf0>
		{
			/* check for counter underflow */
			if (TIM4_CurrentCount <= TIM4_PreviousCount)
 800074a:	4b7b      	ldr	r3, [pc, #492]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	69ba      	ldr	r2, [r7, #24]
 8000750:	429a      	cmp	r2, r3
 8000752:	d805      	bhi.n	8000760 <HAL_TIM_PeriodElapsedCallback+0xe0>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000754:	4b78      	ldr	r3, [pc, #480]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	623b      	str	r3, [r7, #32]
 800075e:	e019      	b.n	8000794 <HAL_TIM_PeriodElapsedCallback+0x114>
			else
				TIM4_DiffCount = -((TIM4_ARR_VALUE+1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 8000760:	4b75      	ldr	r3, [pc, #468]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	69ba      	ldr	r2, [r7, #24]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 800076c:	623b      	str	r3, [r7, #32]
 800076e:	e011      	b.n	8000794 <HAL_TIM_PeriodElapsedCallback+0x114>
		}
		else
		{
		/* check for counter overflow */
			if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8000770:	4b71      	ldr	r3, [pc, #452]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	429a      	cmp	r2, r3
 8000778:	d305      	bcc.n	8000786 <HAL_TIM_PeriodElapsedCallback+0x106>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 800077a:	4b6f      	ldr	r3, [pc, #444]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	69ba      	ldr	r2, [r7, #24]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	623b      	str	r3, [r7, #32]
 8000784:	e006      	b.n	8000794 <HAL_TIM_PeriodElapsedCallback+0x114>
			else
				TIM4_DiffCount = ((TIM4_ARR_VALUE+1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 8000786:	4b6c      	ldr	r3, [pc, #432]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	69ba      	ldr	r2, [r7, #24]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8000792:	623b      	str	r3, [r7, #32]
		}

		TIM4_PreviousCount = TIM4_CurrentCount;
 8000794:	4a68      	ldr	r2, [pc, #416]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	6013      	str	r3, [r2, #0]

		float current_rpm_2 = ((float)TIM4_DiffCount/(2.0*1920.0))*(60.0/TS );
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	ee07 3a90 	vmov	s15, r3
 80007a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007a8:	ed9f 5b57 	vldr	d5, [pc, #348]	; 8000908 <HAL_TIM_PeriodElapsedCallback+0x288>
 80007ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007b0:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000910 <HAL_TIM_PeriodElapsedCallback+0x290>
 80007b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007bc:	edc7 7a04 	vstr	s15, [r7, #16]
	    tracking_error_2 = reference_rpm - current_rpm_2;
 80007c0:	4b5b      	ldr	r3, [pc, #364]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80007c2:	ed93 7a00 	vldr	s14, [r3]
 80007c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80007ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007ce:	4b5b      	ldr	r3, [pc, #364]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80007d0:	edc3 7a00 	vstr	s15, [r3]
	    /* 4. compute the tracking error
	    * 5. compute the proportional term
	    * 6. compute the integral term (simplest way is to use forward Euler method) * u_int=u_int+Ki*TS*err
	    * 7. calculate the PI signal and set the pwm of the motor properly
	    */
	     controller_return_1 = PI_controller(tracking_error_1);
 80007d4:	4b57      	ldr	r3, [pc, #348]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	eeb0 0a67 	vmov.f32	s0, s15
 80007de:	f000 f8fb 	bl	80009d8 <PI_controller>
 80007e2:	eef0 7a40 	vmov.f32	s15, s0
 80007e6:	4b56      	ldr	r3, [pc, #344]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80007e8:	edc3 7a00 	vstr	s15, [r3]
	     controller_return_2 = PI_controller(tracking_error_2);
 80007ec:	4b53      	ldr	r3, [pc, #332]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80007ee:	edd3 7a00 	vldr	s15, [r3]
 80007f2:	eeb0 0a67 	vmov.f32	s0, s15
 80007f6:	f000 f8ef 	bl	80009d8 <PI_controller>
 80007fa:	eef0 7a40 	vmov.f32	s15, s0
 80007fe:	4b51      	ldr	r3, [pc, #324]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000800:	edc3 7a00 	vstr	s15, [r3]

	     motor_V_1 = controller_return_1;
 8000804:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a4f      	ldr	r2, [pc, #316]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800080a:	6013      	str	r3, [r2, #0]
	     motor_V_2 = controller_return_2;
 800080c:	4b4d      	ldr	r3, [pc, #308]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a4e      	ldr	r2, [pc, #312]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000812:	6013      	str	r3, [r2, #0]


	     //anti windup
	    if(motor_V_1 > 4)
 8000814:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000816:	edd3 7a00 	vldr	s15, [r3]
 800081a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800081e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000826:	dd03      	ble.n	8000830 <HAL_TIM_PeriodElapsedCallback+0x1b0>
	    	motor_V_1 = 4;
 8000828:	4b47      	ldr	r3, [pc, #284]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800082a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800082e:	601a      	str	r2, [r3, #0]
	    if(motor_V_1 < -4)
 8000830:	4b45      	ldr	r3, [pc, #276]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800083a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000842:	d502      	bpl.n	800084a <HAL_TIM_PeriodElapsedCallback+0x1ca>
	    	motor_V_1 = -4;
 8000844:	4b40      	ldr	r3, [pc, #256]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000846:	4a42      	ldr	r2, [pc, #264]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000848:	601a      	str	r2, [r3, #0]

	    if(motor_V_2 > 4)
 800084a:	4b40      	ldr	r3, [pc, #256]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800084c:	edd3 7a00 	vldr	s15, [r3]
 8000850:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085c:	dd03      	ble.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x1e6>
	    	motor_V_2 = 4;
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000860:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000864:	601a      	str	r2, [r3, #0]
	    if(motor_V_2 < -4)
 8000866:	4b39      	ldr	r3, [pc, #228]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8000870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	d502      	bpl.n	8000880 <HAL_TIM_PeriodElapsedCallback+0x200>
	    	motor_V_2 = -4;
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800087c:	4a34      	ldr	r2, [pc, #208]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800087e:	601a      	str	r2, [r3, #0]


	    int32_t duty_1 = V2DUTY*motor_V_1;
 8000880:	4b31      	ldr	r3, [pc, #196]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000882:	edd3 7a00 	vldr	s15, [r3]
 8000886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800088a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000918 <HAL_TIM_PeriodElapsedCallback+0x298>
 800088e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000892:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000896:	ee17 3a90 	vmov	r3, s15
 800089a:	60fb      	str	r3, [r7, #12]
	    // command a motor
		/* calculate duty properly */
		if (duty_1 >= 0) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	db08      	blt.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x234>

			// rotate forward
			// alternate between forward and coast
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty_1);
 80008a2:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2200      	movs	r2, #0
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
 80008b2:	e008      	b.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x246>
			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, TIM8_ARR_VALUE - duty_1);

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2200      	movs	r2, #0
 80008ba:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty_1);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	425a      	negs	r2, r3
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38





	    int32_t duty_2 = V2DUTY*motor_V_2;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80008c8:	edd3 7a00 	vldr	s15, [r3]
 80008cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000918 <HAL_TIM_PeriodElapsedCallback+0x298>
 80008d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008dc:	ee17 3a90 	vmov	r3, s15
 80008e0:	60bb      	str	r3, [r7, #8]
	    // command a motor
		/* calculate duty properly */
		if (duty_2 >= 0) {
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db37      	blt.n	8000958 <HAL_TIM_PeriodElapsedCallback+0x2d8>
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)duty_2);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);


			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f240 128f 	movw	r2, #399	; 0x18f
 80008f0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, TIM8_ARR_VALUE - duty_2);
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f240 138f 	movw	r3, #399	; 0x18f
 80008f8:	1a9b      	subs	r3, r3, r2
 80008fa:	4a16      	ldr	r2, [pc, #88]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80008fc:	6812      	ldr	r2, [r2, #0]
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	e033      	b.n	800096a <HAL_TIM_PeriodElapsedCallback+0x2ea>
 8000902:	bf00      	nop
 8000904:	f3af 8000 	nop.w
 8000908:	00000000 	.word	0x00000000
 800090c:	40ae0000 	.word	0x40ae0000
 8000910:	00000000 	.word	0x00000000
 8000914:	40b77000 	.word	0x40b77000
 8000918:	00000000 	.word	0x00000000
 800091c:	40490000 	.word	0x40490000
 8000920:	40001000 	.word	0x40001000
 8000924:	20000220 	.word	0x20000220
 8000928:	2000026c 	.word	0x2000026c
 800092c:	20000794 	.word	0x20000794
 8000930:	20000000 	.word	0x20000000
 8000934:	20000764 	.word	0x20000764
 8000938:	20000798 	.word	0x20000798
 800093c:	20000770 	.word	0x20000770
 8000940:	2000075c 	.word	0x2000075c
 8000944:	20000768 	.word	0x20000768
 8000948:	20000760 	.word	0x20000760
 800094c:	2000076c 	.word	0x2000076c
 8000950:	c0800000 	.word	0xc0800000
 8000954:	20000350 	.word	0x20000350

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2200      	movs	r2, #0
 800095e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)-duty_2);
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	425a      	negs	r2, r3
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	641a      	str	r2, [r3, #64]	; 0x40
		}
     	/*	Prepare data packet */
		data.w1 = reference_rpm;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000970:	6013      	str	r3, [r2, #0]
		data.w2 = current_rpm_1;
 8000972:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	6053      	str	r3, [r2, #4]
		data.u1 = tracking_error_1;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800097e:	6093      	str	r3, [r2, #8]
		data.u2 = controller_return_1;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000986:	60d3      	str	r3, [r2, #12]


		data.x1 = reference_rpm;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800098e:	6113      	str	r3, [r2, #16]
		data.x2 = current_rpm_2;
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	6153      	str	r3, [r2, #20]
		data.y1 = tracking_error_2;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800099c:	6193      	str	r3, [r2, #24]
		data.y2 = controller_return_2;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80009a4:	61d3      	str	r3, [r2, #28]

		ertc_dlog_send(&logger, &data, sizeof(data));
 80009a6:	2220      	movs	r2, #32
 80009a8:	4905      	ldr	r1, [pc, #20]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80009aa:	480a      	ldr	r0, [pc, #40]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80009ac:	f7ff fe10 	bl	80005d0 <ertc_dlog_send>
	}
}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000350 	.word	0x20000350
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000774 	.word	0x20000774
 80009c4:	20000764 	.word	0x20000764
 80009c8:	2000075c 	.word	0x2000075c
 80009cc:	20000770 	.word	0x20000770
 80009d0:	20000768 	.word	0x20000768
 80009d4:	20000690 	.word	0x20000690

080009d8 <PI_controller>:

float Kp = 0.34;
float KI = 0.2;


float PI_controller (float error){
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	ed87 0a01 	vstr	s0, [r7, #4]
	float P = Kp * error;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <PI_controller+0x78>)
 80009e4:	edd3 7a00 	vldr	s15, [r3]
 80009e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80009ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f0:	edc7 7a03 	vstr	s15, [r7, #12]
	static float I = 0;
	I = I + error * KI * TS;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <PI_controller+0x7c>)
 80009f6:	edd3 7a00 	vldr	s15, [r3]
 80009fa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <PI_controller+0x80>)
 8000a00:	ed93 7a00 	vldr	s14, [r3]
 8000a04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a10:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000a48 <PI_controller+0x70>
 8000a14:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a1c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <PI_controller+0x7c>)
 8000a22:	edc3 7a00 	vstr	s15, [r3]
	return P + I;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <PI_controller+0x7c>)
 8000a28:	ed93 7a00 	vldr	s14, [r3]
 8000a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a30:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000a34:	eeb0 0a67 	vmov.f32	s0, s15
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	f3af 8000 	nop.w
 8000a48:	47ae147b 	.word	0x47ae147b
 8000a4c:	3f847ae1 	.word	0x3f847ae1
 8000a50:	20000004 	.word	0x20000004
 8000a54:	2000079c 	.word	0x2000079c
 8000a58:	20000008 	.word	0x20000008

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a60:	f001 fdc7 	bl	80025f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a64:	f000 f884 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a68:	f000 fedc 	bl	8001824 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a6c:	f000 feaa 	bl	80017c4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000a70:	f000 f8f0 	bl	8000c54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a74:	f000 f940 	bl	8000cf8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a78:	f000 f97e 	bl	8000d78 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000a7c:	f000 f9bc 	bl	8000df8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000a80:	f000 f9f8 	bl	8000e74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a84:	f000 fac6 	bl	8001014 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a88:	f000 fb5e 	bl	8001148 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a8c:	f000 fbb2 	bl	80011f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a90:	f000 fc06 	bl	80012a0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a94:	f000 fcb4 	bl	8001400 <MX_TIM8_Init>
  MX_UART4_Init();
 8000a98:	f000 fdd4 	bl	8001644 <MX_UART4_Init>
  MX_UART5_Init();
 8000a9c:	f000 fe02 	bl	80016a4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000aa0:	f000 fe30 	bl	8001704 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000aa4:	f000 fe5e 	bl	8001764 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000aa8:	f000 fd7c 	bl	80015a4 <MX_TIM9_Init>
  MX_TIM6_Init();
 8000aac:	f000 fc70 	bl	8001390 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  logger.uart_handle = huart3; // for serial
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <main+0xf4>)
 8000ab2:	4a28      	ldr	r2, [pc, #160]	; (8000b54 <main+0xf8>)
 8000ab4:	3344      	adds	r3, #68	; 0x44
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	2288      	movs	r2, #136	; 0x88
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 faee 	bl	800709c <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	4824      	ldr	r0, [pc, #144]	; (8000b58 <main+0xfc>)
 8000ac6:	f002 fb67 	bl	8003198 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ace:	f001 fded 	bl	80026ac <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ad2:	213c      	movs	r1, #60	; 0x3c
 8000ad4:	4821      	ldr	r0, [pc, #132]	; (8000b5c <main+0x100>)
 8000ad6:	f004 fa31 	bl	8004f3c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000ada:	213c      	movs	r1, #60	; 0x3c
 8000adc:	4820      	ldr	r0, [pc, #128]	; (8000b60 <main+0x104>)
 8000ade:	f004 fa2d 	bl	8004f3c <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	481f      	ldr	r0, [pc, #124]	; (8000b64 <main+0x108>)
 8000ae6:	f004 f827 	bl	8004b38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000aea:	2104      	movs	r1, #4
 8000aec:	481d      	ldr	r0, [pc, #116]	; (8000b64 <main+0x108>)
 8000aee:	f004 f823 	bl	8004b38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000af2:	2108      	movs	r1, #8
 8000af4:	481b      	ldr	r0, [pc, #108]	; (8000b64 <main+0x108>)
 8000af6:	f004 f81f 	bl	8004b38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000afa:	210c      	movs	r1, #12
 8000afc:	4819      	ldr	r0, [pc, #100]	; (8000b64 <main+0x108>)
 8000afe:	f004 f81b 	bl	8004b38 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <main+0x10c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <main+0x10c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <main+0x10c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2200      	movs	r2, #0
 8000b18:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <main+0x10c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b22:	2100      	movs	r1, #0
 8000b24:	4810      	ldr	r0, [pc, #64]	; (8000b68 <main+0x10c>)
 8000b26:	f004 f807 	bl	8004b38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	480e      	ldr	r0, [pc, #56]	; (8000b68 <main+0x10c>)
 8000b2e:	f004 f803 	bl	8004b38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000b32:	2108      	movs	r1, #8
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <main+0x10c>)
 8000b36:	f003 ffff 	bl	8004b38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000b3a:	210c      	movs	r1, #12
 8000b3c:	480a      	ldr	r0, [pc, #40]	; (8000b68 <main+0x10c>)
 8000b3e:	f003 fffb 	bl	8004b38 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 8000b42:	480a      	ldr	r0, [pc, #40]	; (8000b6c <main+0x110>)
 8000b44:	f003 fec8 	bl	80048d8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 8000b48:	4801      	ldr	r0, [pc, #4]	; (8000b50 <main+0xf4>)
 8000b4a:	f7ff fd6d 	bl	8000628 <ertc_dlog_update>
 8000b4e:	e7fb      	b.n	8000b48 <main+0xec>
 8000b50:	20000690 	.word	0x20000690
 8000b54:	20000608 	.word	0x20000608
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	20000220 	.word	0x20000220
 8000b60:	2000026c 	.word	0x2000026c
 8000b64:	20000188 	.word	0x20000188
 8000b68:	20000350 	.word	0x20000350
 8000b6c:	20000304 	.word	0x20000304

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b094      	sub	sp, #80	; 0x50
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	2234      	movs	r2, #52	; 0x34
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f006 fa9a 	bl	80070b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b94:	f002 fc42 	bl	800341c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <SystemClock_Config+0xdc>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	4a2b      	ldr	r2, [pc, #172]	; (8000c4c <SystemClock_Config+0xdc>)
 8000b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <SystemClock_Config+0xdc>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <SystemClock_Config+0xe0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb8:	4a25      	ldr	r2, [pc, #148]	; (8000c50 <SystemClock_Config+0xe0>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <SystemClock_Config+0xe0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be0:	2304      	movs	r3, #4
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000be4:	2360      	movs	r3, #96	; 0x60
 8000be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 fc6f 	bl	80034dc <HAL_RCC_OscConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c04:	f000 ff40 	bl	8001a88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c08:	f002 fc18 	bl	800343c <HAL_PWREx_EnableOverDrive>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c12:	f000 ff39 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	2103      	movs	r1, #3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 ff00 	bl	8003a38 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c3e:	f000 ff23 	bl	8001a88 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3750      	adds	r7, #80	; 0x50
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_ADC1_Init+0x98>)
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <MX_ADC1_Init+0x9c>)
 8000c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_ADC1_Init+0x98>)
 8000c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_ADC1_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_ADC1_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_ADC1_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_ADC1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_ADC1_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_ADC1_Init+0x98>)
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <MX_ADC1_Init+0xa0>)
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_ADC1_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_ADC1_Init+0x98>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_ADC1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_ADC1_Init+0x98>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_ADC1_Init+0x98>)
 8000cb6:	f001 fd1d 	bl	80026f4 <HAL_ADC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cc0:	f000 fee2 	bl	8001a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_ADC1_Init+0x98>)
 8000cd6:	f001 fd51 	bl	800277c <HAL_ADC_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ce0:	f000 fed2 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000034 	.word	0x20000034
 8000cf0:	40012000 	.word	0x40012000
 8000cf4:	0f000001 	.word	0x0f000001

08000cf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <MX_I2C1_Init+0x78>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <MX_I2C1_Init+0x7c>)
 8000d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d34:	f002 fa4a 	bl	80031cc <HAL_I2C_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d3e:	f000 fea3 	bl	8001a88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d46:	f002 fad1 	bl	80032ec <HAL_I2CEx_ConfigAnalogFilter>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d50:	f000 fe9a 	bl	8001a88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d58:	f002 fb13 	bl	8003382 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 fe91 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000007c 	.word	0x2000007c
 8000d70:	40005400 	.word	0x40005400
 8000d74:	20303e5d 	.word	0x20303e5d

08000d78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_I2C2_Init+0x74>)
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_I2C2_Init+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_I2C2_Init+0x74>)
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <MX_I2C2_Init+0x7c>)
 8000d86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_I2C2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_I2C2_Init+0x74>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_I2C2_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_I2C2_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C2_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C2_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C2_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_I2C2_Init+0x74>)
 8000db4:	f002 fa0a 	bl	80031cc <HAL_I2C_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dbe:	f000 fe63 	bl	8001a88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <MX_I2C2_Init+0x74>)
 8000dc6:	f002 fa91 	bl	80032ec <HAL_I2CEx_ConfigAnalogFilter>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dd0:	f000 fe5a 	bl	8001a88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_I2C2_Init+0x74>)
 8000dd8:	f002 fad3 	bl	8003382 <HAL_I2CEx_ConfigDigitalFilter>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 fe51 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000d0 	.word	0x200000d0
 8000df0:	40005800 	.word	0x40005800
 8000df4:	20303e5d 	.word	0x20303e5d

08000df8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <MX_SPI1_Init+0x78>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e46:	2207      	movs	r2, #7
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e52:	2208      	movs	r2, #8
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e58:	f003 fc3c 	bl	80046d4 <HAL_SPI_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 fe11 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000124 	.word	0x20000124
 8000e70:	40013000 	.word	0x40013000

08000e74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b09a      	sub	sp, #104	; 0x68
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	222c      	movs	r2, #44	; 0x2c
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f006 f902 	bl	80070b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb4:	4b55      	ldr	r3, [pc, #340]	; (800100c <MX_TIM1_Init+0x198>)
 8000eb6:	4a56      	ldr	r2, [pc, #344]	; (8001010 <MX_TIM1_Init+0x19c>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eba:	4b54      	ldr	r3, [pc, #336]	; (800100c <MX_TIM1_Init+0x198>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b52      	ldr	r3, [pc, #328]	; (800100c <MX_TIM1_Init+0x198>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000ec6:	4b51      	ldr	r3, [pc, #324]	; (800100c <MX_TIM1_Init+0x198>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b4f      	ldr	r3, [pc, #316]	; (800100c <MX_TIM1_Init+0x198>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <MX_TIM1_Init+0x198>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b4c      	ldr	r3, [pc, #304]	; (800100c <MX_TIM1_Init+0x198>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ede:	484b      	ldr	r0, [pc, #300]	; (800100c <MX_TIM1_Init+0x198>)
 8000ee0:	f003 fca3 	bl	800482a <HAL_TIM_Base_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000eea:	f000 fdcd 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ef4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4844      	ldr	r0, [pc, #272]	; (800100c <MX_TIM1_Init+0x198>)
 8000efc:	f004 fbf6 	bl	80056ec <HAL_TIM_ConfigClockSource>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f06:	f000 fdbf 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000f0a:	4840      	ldr	r0, [pc, #256]	; (800100c <MX_TIM1_Init+0x198>)
 8000f0c:	f003 fd5c 	bl	80049c8 <HAL_TIM_OC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f16:	f000 fdb7 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4837      	ldr	r0, [pc, #220]	; (800100c <MX_TIM1_Init+0x198>)
 8000f2e:	f005 f9b7 	bl	80062a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000f38:	f000 fda6 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000f3c:	2350      	movs	r3, #80	; 0x50
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f44:	2302      	movs	r3, #2
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	482a      	ldr	r0, [pc, #168]	; (800100c <MX_TIM1_Init+0x198>)
 8000f62:	f004 f999 	bl	8005298 <HAL_TIM_OC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f6c:	f000 fd8c 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f74:	2204      	movs	r2, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4824      	ldr	r0, [pc, #144]	; (800100c <MX_TIM1_Init+0x198>)
 8000f7a:	f004 f98d 	bl	8005298 <HAL_TIM_OC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000f84:	f000 fd80 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <MX_TIM1_Init+0x198>)
 8000f92:	f004 f981 	bl	8005298 <HAL_TIM_OC_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000f9c:	f000 fd74 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4818      	ldr	r0, [pc, #96]	; (800100c <MX_TIM1_Init+0x198>)
 8000faa:	f004 f975 	bl	8005298 <HAL_TIM_OC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000fb4:	f000 fd68 	bl	8001a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM1_Init+0x198>)
 8000fee:	f005 f9e5 	bl	80063bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000ff8:	f000 fd46 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM1_Init+0x198>)
 8000ffe:	f001 f805 	bl	800200c <HAL_TIM_MspPostInit>

}
 8001002:	bf00      	nop
 8001004:	3768      	adds	r7, #104	; 0x68
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000188 	.word	0x20000188
 8001010:	40010000 	.word	0x40010000

08001014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b092      	sub	sp, #72	; 0x48
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001054:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <MX_TIM2_Init+0x130>)
 8001056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <MX_TIM2_Init+0x130>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <MX_TIM2_Init+0x130>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001068:	4b36      	ldr	r3, [pc, #216]	; (8001144 <MX_TIM2_Init+0x130>)
 800106a:	f04f 32ff 	mov.w	r2, #4294967295
 800106e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <MX_TIM2_Init+0x130>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b33      	ldr	r3, [pc, #204]	; (8001144 <MX_TIM2_Init+0x130>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800107c:	4831      	ldr	r0, [pc, #196]	; (8001144 <MX_TIM2_Init+0x130>)
 800107e:	f003 fbd4 	bl	800482a <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001088:	f000 fcfe 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001092:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001096:	4619      	mov	r1, r3
 8001098:	482a      	ldr	r0, [pc, #168]	; (8001144 <MX_TIM2_Init+0x130>)
 800109a:	f004 fb27 	bl	80056ec <HAL_TIM_ConfigClockSource>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010a4:	f000 fcf0 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010a8:	4826      	ldr	r0, [pc, #152]	; (8001144 <MX_TIM2_Init+0x130>)
 80010aa:	f003 fcee 	bl	8004a8a <HAL_TIM_PWM_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80010b4:	f000 fce8 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010b8:	4822      	ldr	r0, [pc, #136]	; (8001144 <MX_TIM2_Init+0x130>)
 80010ba:	f003 fe37 	bl	8004d2c <HAL_TIM_IC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010c4:	f000 fce0 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d4:	4619      	mov	r1, r3
 80010d6:	481b      	ldr	r0, [pc, #108]	; (8001144 <MX_TIM2_Init+0x130>)
 80010d8:	f005 f8e2 	bl	80062a0 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80010e2:	f000 fcd1 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e6:	2360      	movs	r3, #96	; 0x60
 80010e8:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	2200      	movs	r2, #0
 80010fc:	4619      	mov	r1, r3
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <MX_TIM2_Init+0x130>)
 8001100:	f004 f9e0 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800110a:	f000 fcbd 	bl	8001a88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	2208      	movs	r2, #8
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <MX_TIM2_Init+0x130>)
 8001126:	f004 f931 	bl	800538c <HAL_TIM_IC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001130:	f000 fcaa 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <MX_TIM2_Init+0x130>)
 8001136:	f000 ff69 	bl	800200c <HAL_TIM_MspPostInit>

}
 800113a:	bf00      	nop
 800113c:	3748      	adds	r7, #72	; 0x48
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200001d4 	.word	0x200001d4

08001148 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	; 0x30
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2224      	movs	r2, #36	; 0x24
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f005 ffae 	bl	80070b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_TIM3_Init+0xa4>)
 8001168:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <MX_TIM3_Init+0xa8>)
 800116a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_TIM3_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_TIM3_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_TIM3_Init+0xa4>)
 800117a:	f640 62ff 	movw	r2, #3839	; 0xeff
 800117e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_TIM3_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_TIM3_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800118c:	2303      	movs	r3, #3
 800118e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001194:	2301      	movs	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800119c:	230f      	movs	r3, #15
 800119e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80011ac:	230f      	movs	r3, #15
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_TIM3_Init+0xa4>)
 80011b8:	f003 fe1a 	bl	8004df0 <HAL_TIM_Encoder_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80011c2:	f000 fc61 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_TIM3_Init+0xa4>)
 80011d4:	f005 f864 	bl	80062a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80011de:	f000 fc53 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3730      	adds	r7, #48	; 0x30
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000220 	.word	0x20000220
 80011f0:	40000400 	.word	0x40000400

080011f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	; 0x30
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2224      	movs	r2, #36	; 0x24
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f005 ff58 	bl	80070b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_TIM4_Init+0xa4>)
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <MX_TIM4_Init+0xa8>)
 8001216:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_TIM4_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_TIM4_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_TIM4_Init+0xa4>)
 8001226:	f640 62ff 	movw	r2, #3839	; 0xeff
 800122a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_TIM4_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_TIM4_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001238:	2303      	movs	r3, #3
 800123a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001240:	2301      	movs	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001248:	230f      	movs	r3, #15
 800124a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001250:	2301      	movs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001258:	230f      	movs	r3, #15
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_TIM4_Init+0xa4>)
 8001264:	f003 fdc4 	bl	8004df0 <HAL_TIM_Encoder_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800126e:	f000 fc0b 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_TIM4_Init+0xa4>)
 8001280:	f005 f80e 	bl	80062a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800128a:	f000 fbfd 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3730      	adds	r7, #48	; 0x30
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000026c 	.word	0x2000026c
 800129c:	40000800 	.word	0x40000800

080012a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c0:	463b      	mov	r3, r7
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_TIM5_Init+0xe8>)
 80012d4:	4a2d      	ldr	r2, [pc, #180]	; (800138c <MX_TIM5_Init+0xec>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <MX_TIM5_Init+0xe8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_TIM5_Init+0xe8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <MX_TIM5_Init+0xe8>)
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <MX_TIM5_Init+0xe8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <MX_TIM5_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012f8:	4823      	ldr	r0, [pc, #140]	; (8001388 <MX_TIM5_Init+0xe8>)
 80012fa:	f003 fa96 	bl	800482a <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001304:	f000 fbc0 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	4619      	mov	r1, r3
 8001314:	481c      	ldr	r0, [pc, #112]	; (8001388 <MX_TIM5_Init+0xe8>)
 8001316:	f004 f9e9 	bl	80056ec <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001320:	f000 fbb2 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001324:	4818      	ldr	r0, [pc, #96]	; (8001388 <MX_TIM5_Init+0xe8>)
 8001326:	f003 fbb0 	bl	8004a8a <HAL_TIM_PWM_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001330:	f000 fbaa 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_TIM5_Init+0xe8>)
 8001344:	f004 ffac 	bl	80062a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800134e:	f000 fb9b 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001352:	2360      	movs	r3, #96	; 0x60
 8001354:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	4619      	mov	r1, r3
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM5_Init+0xe8>)
 800136a:	f004 f8ab 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001374:	f000 fb88 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM5_Init+0xe8>)
 800137a:	f000 fe47 	bl	800200c <HAL_TIM_MspPostInit>

}
 800137e:	bf00      	nop
 8001380:	3738      	adds	r7, #56	; 0x38
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200002b8 	.word	0x200002b8
 800138c:	40000c00 	.word	0x40000c00

08001390 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_TIM6_Init+0x68>)
 80013a2:	4a16      	ldr	r2, [pc, #88]	; (80013fc <MX_TIM6_Init+0x6c>)
 80013a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_TIM6_Init+0x68>)
 80013a8:	f240 32bf 	movw	r2, #959	; 0x3bf
 80013ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_TIM6_Init+0x68>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_TIM6_Init+0x68>)
 80013b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_TIM6_Init+0x68>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_TIM6_Init+0x68>)
 80013c4:	f003 fa31 	bl	800482a <HAL_TIM_Base_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80013ce:	f000 fb5b 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_TIM6_Init+0x68>)
 80013e0:	f004 ff5e 	bl	80062a0 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80013ea:	f000 fb4d 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000304 	.word	0x20000304
 80013fc:	40001000 	.word	0x40001000

08001400 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b09a      	sub	sp, #104	; 0x68
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001420:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	615a      	str	r2, [r3, #20]
 8001432:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	222c      	movs	r2, #44	; 0x2c
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f005 fe3c 	bl	80070b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <MX_TIM8_Init+0x19c>)
 8001442:	4a57      	ldr	r2, [pc, #348]	; (80015a0 <MX_TIM8_Init+0x1a0>)
 8001444:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001446:	4b55      	ldr	r3, [pc, #340]	; (800159c <MX_TIM8_Init+0x19c>)
 8001448:	f240 32bf 	movw	r2, #959	; 0x3bf
 800144c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b53      	ldr	r3, [pc, #332]	; (800159c <MX_TIM8_Init+0x19c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001454:	4b51      	ldr	r3, [pc, #324]	; (800159c <MX_TIM8_Init+0x19c>)
 8001456:	f240 128f 	movw	r2, #399	; 0x18f
 800145a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b4f      	ldr	r3, [pc, #316]	; (800159c <MX_TIM8_Init+0x19c>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001462:	4b4e      	ldr	r3, [pc, #312]	; (800159c <MX_TIM8_Init+0x19c>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b4c      	ldr	r3, [pc, #304]	; (800159c <MX_TIM8_Init+0x19c>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800146e:	484b      	ldr	r0, [pc, #300]	; (800159c <MX_TIM8_Init+0x19c>)
 8001470:	f003 f9db 	bl	800482a <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800147a:	f000 fb05 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001484:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001488:	4619      	mov	r1, r3
 800148a:	4844      	ldr	r0, [pc, #272]	; (800159c <MX_TIM8_Init+0x19c>)
 800148c:	f004 f92e 	bl	80056ec <HAL_TIM_ConfigClockSource>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001496:	f000 faf7 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800149a:	4840      	ldr	r0, [pc, #256]	; (800159c <MX_TIM8_Init+0x19c>)
 800149c:	f003 faf5 	bl	8004a8a <HAL_TIM_PWM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80014a6:	f000 faef 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ba:	4619      	mov	r1, r3
 80014bc:	4837      	ldr	r0, [pc, #220]	; (800159c <MX_TIM8_Init+0x19c>)
 80014be:	f004 feef 	bl	80062a0 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80014c8:	f000 fade 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014cc:	2360      	movs	r3, #96	; 0x60
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d4:	2300      	movs	r3, #0
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d8:	2300      	movs	r3, #0
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	482a      	ldr	r0, [pc, #168]	; (800159c <MX_TIM8_Init+0x19c>)
 80014f2:	f003 ffe7 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80014fc:	f000 fac4 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001500:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001504:	2204      	movs	r2, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4824      	ldr	r0, [pc, #144]	; (800159c <MX_TIM8_Init+0x19c>)
 800150a:	f003 ffdb 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001514:	f000 fab8 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800151c:	2208      	movs	r2, #8
 800151e:	4619      	mov	r1, r3
 8001520:	481e      	ldr	r0, [pc, #120]	; (800159c <MX_TIM8_Init+0x19c>)
 8001522:	f003 ffcf 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 800152c:	f000 faac 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001530:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001534:	220c      	movs	r2, #12
 8001536:	4619      	mov	r1, r3
 8001538:	4818      	ldr	r0, [pc, #96]	; (800159c <MX_TIM8_Init+0x19c>)
 800153a:	f003 ffc3 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001544:	f000 faa0 	bl	8001a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800156a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <MX_TIM8_Init+0x19c>)
 800157e:	f004 ff1d 	bl	80063bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001588:	f000 fa7e 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <MX_TIM8_Init+0x19c>)
 800158e:	f000 fd3d 	bl	800200c <HAL_TIM_MspPostInit>

}
 8001592:	bf00      	nop
 8001594:	3768      	adds	r7, #104	; 0x68
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000350 	.word	0x20000350
 80015a0:	40010400 	.word	0x40010400

080015a4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_TIM9_Init+0x98>)
 80015be:	4a20      	ldr	r2, [pc, #128]	; (8001640 <MX_TIM9_Init+0x9c>)
 80015c0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <MX_TIM9_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_TIM9_Init+0x98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <MX_TIM9_Init+0x98>)
 80015d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_TIM9_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_TIM9_Init+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80015e2:	4816      	ldr	r0, [pc, #88]	; (800163c <MX_TIM9_Init+0x98>)
 80015e4:	f003 fa51 	bl	8004a8a <HAL_TIM_PWM_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80015ee:	f000 fa4b 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f2:	2360      	movs	r3, #96	; 0x60
 80015f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_TIM9_Init+0x98>)
 800160a:	f003 ff5b 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001614:	f000 fa38 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2204      	movs	r2, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <MX_TIM9_Init+0x98>)
 8001620:	f003 ff50 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800162a:	f000 fa2d 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <MX_TIM9_Init+0x98>)
 8001630:	f000 fcec 	bl	800200c <HAL_TIM_MspPostInit>

}
 8001634:	bf00      	nop
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000039c 	.word	0x2000039c
 8001640:	40014000 	.word	0x40014000

08001644 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_UART4_Init+0x58>)
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <MX_UART4_Init+0x5c>)
 800164c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_UART4_Init+0x58>)
 8001650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001654:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_UART4_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_UART4_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_UART4_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_UART4_Init+0x58>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_UART4_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_UART4_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_UART4_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_UART4_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_UART4_Init+0x58>)
 8001688:	f004 ff34 	bl	80064f4 <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001692:	f000 f9f9 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200003e8 	.word	0x200003e8
 80016a0:	40004c00 	.word	0x40004c00

080016a4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_UART5_Init+0x58>)
 80016aa:	4a15      	ldr	r2, [pc, #84]	; (8001700 <MX_UART5_Init+0x5c>)
 80016ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_UART5_Init+0x58>)
 80016b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_UART5_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_UART5_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_UART5_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_UART5_Init+0x58>)
 80016ca:	220c      	movs	r2, #12
 80016cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_UART5_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_UART5_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_UART5_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_UART5_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_UART5_Init+0x58>)
 80016e8:	f004 ff04 	bl	80064f4 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80016f2:	f000 f9c9 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000470 	.word	0x20000470
 8001700:	40005000 	.word	0x40005000

08001704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_USART1_UART_Init+0x58>)
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <MX_USART1_UART_Init+0x5c>)
 800170c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_USART1_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART1_UART_Init+0x58>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART1_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART1_UART_Init+0x58>)
 8001748:	f004 fed4 	bl	80064f4 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001752:	f000 f999 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200004f8 	.word	0x200004f8
 8001760:	40011000 	.word	0x40011000

08001764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <MX_USART2_UART_Init+0x58>)
 800176c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 8001770:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <MX_USART2_UART_Init+0x5c>)
 8001772:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 8001788:	220c      	movs	r2, #12
 800178a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_USART2_UART_Init+0x54>)
 80017a6:	f004 fea5 	bl	80064f4 <HAL_UART_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80017b0:	f000 f96a 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000580 	.word	0x20000580
 80017bc:	40004400 	.word	0x40004400
 80017c0:	000f4240 	.word	0x000f4240

080017c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_USART3_UART_Init+0x58>)
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <MX_USART3_UART_Init+0x5c>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_USART3_UART_Init+0x58>)
 80017d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART3_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_USART3_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART3_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART3_UART_Init+0x58>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART3_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART3_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART3_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART3_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART3_UART_Init+0x58>)
 8001808:	f004 fe74 	bl	80064f4 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001812:	f000 f939 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000608 	.word	0x20000608
 8001820:	40004800 	.word	0x40004800

08001824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	; 0x38
 8001828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800183a:	4b8c      	ldr	r3, [pc, #560]	; (8001a6c <MX_GPIO_Init+0x248>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a8b      	ldr	r2, [pc, #556]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	623b      	str	r3, [r7, #32]
 8001850:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	4b86      	ldr	r3, [pc, #536]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a85      	ldr	r2, [pc, #532]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b83      	ldr	r3, [pc, #524]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800186a:	4b80      	ldr	r3, [pc, #512]	; (8001a6c <MX_GPIO_Init+0x248>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a7f      	ldr	r2, [pc, #508]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001870:	f043 0320 	orr.w	r3, r3, #32
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b7d      	ldr	r3, [pc, #500]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001882:	4b7a      	ldr	r3, [pc, #488]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a79      	ldr	r2, [pc, #484]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <MX_GPIO_Init+0x248>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b74      	ldr	r3, [pc, #464]	; (8001a6c <MX_GPIO_Init+0x248>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a73      	ldr	r2, [pc, #460]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b71      	ldr	r3, [pc, #452]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	4b6e      	ldr	r3, [pc, #440]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a6d      	ldr	r2, [pc, #436]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b6b      	ldr	r3, [pc, #428]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	4b68      	ldr	r3, [pc, #416]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a67      	ldr	r2, [pc, #412]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b65      	ldr	r3, [pc, #404]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e2:	4b62      	ldr	r3, [pc, #392]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a61      	ldr	r2, [pc, #388]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b5f      	ldr	r3, [pc, #380]	; (8001a6c <MX_GPIO_Init+0x248>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2118      	movs	r1, #24
 80018fe:	485c      	ldr	r0, [pc, #368]	; (8001a70 <MX_GPIO_Init+0x24c>)
 8001900:	f001 fc4a 	bl	8003198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	f244 0181 	movw	r1, #16513	; 0x4081
 800190a:	485a      	ldr	r0, [pc, #360]	; (8001a74 <MX_GPIO_Init+0x250>)
 800190c:	f001 fc44 	bl	8003198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	4858      	ldr	r0, [pc, #352]	; (8001a78 <MX_GPIO_Init+0x254>)
 8001916:	f001 fc3f 	bl	8003198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 800191a:	2318      	movs	r3, #24
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	484f      	ldr	r0, [pc, #316]	; (8001a70 <MX_GPIO_Init+0x24c>)
 8001932:	f001 fa85 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001936:	f643 731c 	movw	r3, #16156	; 0x3f1c
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194a:	4619      	mov	r1, r3
 800194c:	484b      	ldr	r0, [pc, #300]	; (8001a7c <MX_GPIO_Init+0x258>)
 800194e:	f001 fa77 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001952:	2332      	movs	r3, #50	; 0x32
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001962:	230b      	movs	r3, #11
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196a:	4619      	mov	r1, r3
 800196c:	4844      	ldr	r0, [pc, #272]	; (8001a80 <MX_GPIO_Init+0x25c>)
 800196e:	f001 fa67 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001972:	2386      	movs	r3, #134	; 0x86
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001982:	230b      	movs	r3, #11
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	483d      	ldr	r0, [pc, #244]	; (8001a84 <MX_GPIO_Init+0x260>)
 800198e:	f001 fa57 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001992:	f244 0381 	movw	r3, #16513	; 0x4081
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	4832      	ldr	r0, [pc, #200]	; (8001a74 <MX_GPIO_Init+0x250>)
 80019ac:	f001 fa48 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c2:	230b      	movs	r3, #11
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4829      	ldr	r0, [pc, #164]	; (8001a74 <MX_GPIO_Init+0x250>)
 80019ce:	f001 fa37 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4823      	ldr	r0, [pc, #140]	; (8001a78 <MX_GPIO_Init+0x254>)
 80019ea:	f001 fa29 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	481d      	ldr	r0, [pc, #116]	; (8001a78 <MX_GPIO_Init+0x254>)
 8001a02:	f001 fa1d 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4818      	ldr	r0, [pc, #96]	; (8001a84 <MX_GPIO_Init+0x260>)
 8001a24:	f001 fa0c 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4811      	ldr	r0, [pc, #68]	; (8001a84 <MX_GPIO_Init+0x260>)
 8001a3e:	f001 f9ff 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a54:	230b      	movs	r3, #11
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_GPIO_Init+0x254>)
 8001a60:	f001 f9ee 	bl	8002e40 <HAL_GPIO_Init>

}
 8001a64:	bf00      	nop
 8001a66:	3738      	adds	r7, #56	; 0x38
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40021800 	.word	0x40021800
 8001a7c:	40021400 	.word	0x40021400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020000 	.word	0x40020000

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <Error_Handler+0x8>
	...

08001a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_MspInit+0x44>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_MspInit+0x44>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_MspInit+0x44>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_MspInit+0x44>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_MspInit+0x44>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_MspInit+0x44>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_ADC_MspInit+0x74>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d123      	bne.n	8001b46 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_ADC_MspInit+0x78>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_ADC_MspInit+0x78>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_ADC_MspInit+0x78>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_ADC_MspInit+0x78>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_ADC_MspInit+0x78>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_ADC_MspInit+0x78>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001b2e:	2308      	movs	r3, #8
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b32:	2303      	movs	r3, #3
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_ADC_MspInit+0x7c>)
 8001b42:	f001 f97d 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40012000 	.word	0x40012000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000

08001b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0b0      	sub	sp, #192	; 0xc0
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	2290      	movs	r2, #144	; 0x90
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 fa9b 	bl	80070b8 <memset>
  if(hi2c->Instance==I2C1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a44      	ldr	r2, [pc, #272]	; (8001c98 <HAL_I2C_MspInit+0x13c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d13e      	bne.n	8001c0a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b90:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 f971 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001ba8:	f7ff ff6e 	bl	8001a88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4a3a      	ldr	r2, [pc, #232]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bde:	2304      	movs	r3, #4
 8001be0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001be8:	4619      	mov	r1, r3
 8001bea:	482d      	ldr	r0, [pc, #180]	; (8001ca0 <HAL_I2C_MspInit+0x144>)
 8001bec:	f001 f928 	bl	8002e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c08:	e041      	b.n	8001c8e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <HAL_I2C_MspInit+0x148>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d13c      	bne.n	8001c8e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c18:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 f92d 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001c30:	f7ff ff2a 	bl	8001a88 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001c3a:	f043 0320 	orr.w	r3, r3, #32
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c52:	2312      	movs	r3, #18
 8001c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c64:	2304      	movs	r3, #4
 8001c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <HAL_I2C_MspInit+0x14c>)
 8001c72:	f001 f8e5 	bl	8002e40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_I2C_MspInit+0x140>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
}
 8001c8e:	bf00      	nop
 8001c90:	37c0      	adds	r7, #192	; 0xc0
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40005400 	.word	0x40005400
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40005800 	.word	0x40005800
 8001ca8:	40021400 	.word	0x40021400

08001cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <HAL_SPI_MspInit+0xec>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d160      	bne.n	8001d90 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a32      	ldr	r2, [pc, #200]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_SPI_MspInit+0xf0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d2e:	2320      	movs	r3, #32
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d3e:	2305      	movs	r3, #5
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	4815      	ldr	r0, [pc, #84]	; (8001da0 <HAL_SPI_MspInit+0xf4>)
 8001d4a:	f001 f879 	bl	8002e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d5e:	2305      	movs	r3, #5
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	480e      	ldr	r0, [pc, #56]	; (8001da4 <HAL_SPI_MspInit+0xf8>)
 8001d6a:	f001 f869 	bl	8002e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d80:	2305      	movs	r3, #5
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4807      	ldr	r0, [pc, #28]	; (8001da8 <HAL_SPI_MspInit+0xfc>)
 8001d8c:	f001 f858 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3730      	adds	r7, #48	; 0x30
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40013000 	.word	0x40013000
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021800 	.word	0x40021800

08001dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a3f      	ldr	r2, [pc, #252]	; (8001ec8 <HAL_TIM_Base_MspInit+0x11c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10c      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001de6:	e06b      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df0:	d129      	bne.n	8001e46 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a35      	ldr	r2, [pc, #212]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a2f      	ldr	r2, [pc, #188]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e34:	2301      	movs	r3, #1
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4824      	ldr	r0, [pc, #144]	; (8001ed0 <HAL_TIM_Base_MspInit+0x124>)
 8001e40:	f000 fffe 	bl	8002e40 <HAL_GPIO_Init>
}
 8001e44:	e03c      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_TIM_Base_MspInit+0x128>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d10c      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]
}
 8001e68:	e02a      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <HAL_TIM_Base_MspInit+0x12c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d114      	bne.n	8001e9e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e7a:	f043 0310 	orr.w	r3, r3, #16
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2036      	movs	r0, #54	; 0x36
 8001e92:	f000 ff9e 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e96:	2036      	movs	r0, #54	; 0x36
 8001e98:	f000 ffb7 	bl	8002e0a <HAL_NVIC_EnableIRQ>
}
 8001e9c:	e010      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_TIM_Base_MspInit+0x130>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_TIM_Base_MspInit+0x120>)
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3738      	adds	r7, #56	; 0x38
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40000c00 	.word	0x40000c00
 8001ed8:	40001000 	.word	0x40001000
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2e      	ldr	r2, [pc, #184]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d128      	bne.n	8001f54 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f02:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001f32:	2330      	movs	r3, #48	; 0x30
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f42:	2302      	movs	r3, #2
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481c      	ldr	r0, [pc, #112]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f4e:	f000 ff77 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f52:	e02d      	b.n	8001fb0 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d128      	bne.n	8001fb0 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001f8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001fac:	f000 ff48 	bl	8002e40 <HAL_GPIO_Init>
}
 8001fb0:	bf00      	nop
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40020c00 	.word	0x40020c00

08001fcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_TIM_PWM_MspInit+0x38>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40014000 	.word	0x40014000
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_TIM_MspPostInit+0x178>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d11d      	bne.n	800206a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800202e:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a55      	ldr	r2, [pc, #340]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8002046:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002058:	2301      	movs	r3, #1
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4619      	mov	r1, r3
 8002062:	484a      	ldr	r0, [pc, #296]	; (800218c <HAL_TIM_MspPostInit+0x180>)
 8002064:	f000 feec 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002068:	e088      	b.n	800217c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d11d      	bne.n	80020b0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002074:	4b44      	ldr	r3, [pc, #272]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4a43      	ldr	r2, [pc, #268]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 800208c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800209e:	2301      	movs	r3, #1
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	4839      	ldr	r0, [pc, #228]	; (8002190 <HAL_TIM_MspPostInit+0x184>)
 80020aa:	f000 fec9 	bl	8002e40 <HAL_GPIO_Init>
}
 80020ae:	e065      	b.n	800217c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a37      	ldr	r2, [pc, #220]	; (8002194 <HAL_TIM_MspPostInit+0x188>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d11c      	bne.n	80020f4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a32      	ldr	r2, [pc, #200]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 80020d2:	2301      	movs	r3, #1
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020e2:	2302      	movs	r3, #2
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	4828      	ldr	r0, [pc, #160]	; (8002190 <HAL_TIM_MspPostInit+0x184>)
 80020ee:	f000 fea7 	bl	8002e40 <HAL_GPIO_Init>
}
 80020f2:	e043      	b.n	800217c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <HAL_TIM_MspPostInit+0x18c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11d      	bne.n	800213a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002116:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002128:	2303      	movs	r3, #3
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	481a      	ldr	r0, [pc, #104]	; (800219c <HAL_TIM_MspPostInit+0x190>)
 8002134:	f000 fe84 	bl	8002e40 <HAL_GPIO_Init>
}
 8002138:	e020      	b.n	800217c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <HAL_TIM_MspPostInit+0x194>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d11b      	bne.n	800217c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 800214a:	f043 0310 	orr.w	r3, r3, #16
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_TIM_MspPostInit+0x17c>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 800215c:	2360      	movs	r3, #96	; 0x60
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800216c:	2303      	movs	r3, #3
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_TIM_MspPostInit+0x180>)
 8002178:	f000 fe62 	bl	8002e40 <HAL_GPIO_Init>
}
 800217c:	bf00      	nop
 800217e:	3730      	adds	r7, #48	; 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40010000 	.word	0x40010000
 8002188:	40023800 	.word	0x40023800
 800218c:	40021000 	.word	0x40021000
 8002190:	40020000 	.word	0x40020000
 8002194:	40000c00 	.word	0x40000c00
 8002198:	40010400 	.word	0x40010400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40014000 	.word	0x40014000

080021a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0b6      	sub	sp, #216	; 0xd8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c0:	2290      	movs	r2, #144	; 0x90
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 ff77 	bl	80070b8 <memset>
  if(huart->Instance==UART4)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4aa0      	ldr	r2, [pc, #640]	; (8002450 <HAL_UART_MspInit+0x2ac>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d13e      	bne.n	8002252 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80021d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fe4d 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80021f0:	f7ff fc4a 	bl	8001a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021f4:	4b97      	ldr	r3, [pc, #604]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	4a96      	ldr	r2, [pc, #600]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 80021fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002200:	4b94      	ldr	r3, [pc, #592]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800220c:	4b91      	ldr	r3, [pc, #580]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	4a90      	ldr	r2, [pc, #576]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6313      	str	r3, [r2, #48]	; 0x30
 8002218:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002224:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800223e:	2308      	movs	r3, #8
 8002240:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002248:	4619      	mov	r1, r3
 800224a:	4883      	ldr	r0, [pc, #524]	; (8002458 <HAL_UART_MspInit+0x2b4>)
 800224c:	f000 fdf8 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002250:	e151      	b.n	80024f6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a81      	ldr	r2, [pc, #516]	; (800245c <HAL_UART_MspInit+0x2b8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d160      	bne.n	800231e <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800225c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002268:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800226c:	4618      	mov	r0, r3
 800226e:	f001 fe09 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002278:	f7ff fc06 	bl	8001a88 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800227c:	4b75      	ldr	r3, [pc, #468]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	4a74      	ldr	r2, [pc, #464]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002286:	6413      	str	r3, [r2, #64]	; 0x40
 8002288:	4b72      	ldr	r3, [pc, #456]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	4b6f      	ldr	r3, [pc, #444]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	4a6e      	ldr	r2, [pc, #440]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	6313      	str	r3, [r2, #48]	; 0x30
 80022a0:	4b6c      	ldr	r3, [pc, #432]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ac:	4b69      	ldr	r3, [pc, #420]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	4a68      	ldr	r2, [pc, #416]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	6313      	str	r3, [r2, #48]	; 0x30
 80022b8:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80022de:	2308      	movs	r3, #8
 80022e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022e8:	4619      	mov	r1, r3
 80022ea:	485d      	ldr	r0, [pc, #372]	; (8002460 <HAL_UART_MspInit+0x2bc>)
 80022ec:	f000 fda8 	bl	8002e40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800230a:	2308      	movs	r3, #8
 800230c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002310:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002314:	4619      	mov	r1, r3
 8002316:	4850      	ldr	r0, [pc, #320]	; (8002458 <HAL_UART_MspInit+0x2b4>)
 8002318:	f000 fd92 	bl	8002e40 <HAL_GPIO_Init>
}
 800231c:	e0eb      	b.n	80024f6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a50      	ldr	r2, [pc, #320]	; (8002464 <HAL_UART_MspInit+0x2c0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d151      	bne.n	80023cc <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002328:	2340      	movs	r3, #64	; 0x40
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800232c:	2300      	movs	r3, #0
 800232e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002334:	4618      	mov	r0, r3
 8002336:	f001 fda5 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002340:	f7ff fba2 	bl	8001a88 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002344:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	4a42      	ldr	r2, [pc, #264]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 800234a:	f043 0310 	orr.w	r3, r3, #16
 800234e:	6453      	str	r3, [r2, #68]	; 0x44
 8002350:	4b40      	ldr	r3, [pc, #256]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	6313      	str	r3, [r2, #48]	; 0x30
 8002368:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800238e:	2304      	movs	r3, #4
 8002390:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002394:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002398:	4619      	mov	r1, r3
 800239a:	4831      	ldr	r0, [pc, #196]	; (8002460 <HAL_UART_MspInit+0x2bc>)
 800239c:	f000 fd50 	bl	8002e40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023a0:	2340      	movs	r3, #64	; 0x40
 80023a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b8:	2307      	movs	r3, #7
 80023ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4826      	ldr	r0, [pc, #152]	; (8002460 <HAL_UART_MspInit+0x2bc>)
 80023c6:	f000 fd3b 	bl	8002e40 <HAL_GPIO_Init>
}
 80023ca:	e094      	b.n	80024f6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a25      	ldr	r2, [pc, #148]	; (8002468 <HAL_UART_MspInit+0x2c4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d14c      	bne.n	8002470 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023da:	2300      	movs	r3, #0
 80023dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023e2:	4618      	mov	r0, r3
 80023e4:	f001 fd4e 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 80023ee:	f7ff fb4b 	bl	8001a88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a11      	ldr	r2, [pc, #68]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002410:	f043 0308 	orr.w	r3, r3, #8
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_UART_MspInit+0x2b0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002422:	2360      	movs	r3, #96	; 0x60
 8002424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800243a:	2307      	movs	r3, #7
 800243c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002440:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002444:	4619      	mov	r1, r3
 8002446:	4809      	ldr	r0, [pc, #36]	; (800246c <HAL_UART_MspInit+0x2c8>)
 8002448:	f000 fcfa 	bl	8002e40 <HAL_GPIO_Init>
}
 800244c:	e053      	b.n	80024f6 <HAL_UART_MspInit+0x352>
 800244e:	bf00      	nop
 8002450:	40004c00 	.word	0x40004c00
 8002454:	40023800 	.word	0x40023800
 8002458:	40020800 	.word	0x40020800
 800245c:	40005000 	.word	0x40005000
 8002460:	40020400 	.word	0x40020400
 8002464:	40011000 	.word	0x40011000
 8002468:	40004400 	.word	0x40004400
 800246c:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a22      	ldr	r2, [pc, #136]	; (8002500 <HAL_UART_MspInit+0x35c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d13d      	bne.n	80024f6 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800247a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002486:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fcfa 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002496:	f7ff faf7 	bl	8001a88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_UART_MspInit+0x360>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_UART_MspInit+0x360>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <HAL_UART_MspInit+0x360>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_UART_MspInit+0x360>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <HAL_UART_MspInit+0x360>)
 80024b8:	f043 0308 	orr.w	r3, r3, #8
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_UART_MspInit+0x360>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e4:	2307      	movs	r3, #7
 80024e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <HAL_UART_MspInit+0x364>)
 80024f2:	f000 fca5 	bl	8002e40 <HAL_GPIO_Init>
}
 80024f6:	bf00      	nop
 80024f8:	37d8      	adds	r7, #216	; 0xd8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40004800 	.word	0x40004800
 8002504:	40023800 	.word	0x40023800
 8002508:	40020c00 	.word	0x40020c00

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <NMI_Handler+0x4>

08002512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <HardFault_Handler+0x4>

08002518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <MemManage_Handler+0x4>

0800251e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <BusFault_Handler+0x4>

08002524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <UsageFault_Handler+0x4>

0800252a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002558:	f000 f888 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <TIM6_DAC_IRQHandler+0x10>)
 8002566:	f002 fd77 	bl	8005058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000304 	.word	0x20000304

08002574 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <SystemInit+0x28>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <SystemInit+0x28>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <SystemInit+0x28>)
 800258a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800258e:	609a      	str	r2, [r3, #8]
#endif
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025a6:	e003      	b.n	80025b0 <LoopCopyDataInit>

080025a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025ae:	3104      	adds	r1, #4

080025b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025b0:	480b      	ldr	r0, [pc, #44]	; (80025e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025b8:	d3f6      	bcc.n	80025a8 <CopyDataInit>
  ldr  r2, =_sbss
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025bc:	e002      	b.n	80025c4 <LoopFillZerobss>

080025be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025c0:	f842 3b04 	str.w	r3, [r2], #4

080025c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025c8:	d3f9      	bcc.n	80025be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ca:	f7ff ffd3 	bl	8002574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ce:	f004 fd41 	bl	8007054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d2:	f7fe fa43 	bl	8000a5c <main>
  bx  lr    
 80025d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80025dc:	08007108 	.word	0x08007108
  ldr  r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025e4:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80025e8:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80025ec:	200007a4 	.word	0x200007a4

080025f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC_IRQHandler>

080025f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f6:	2003      	movs	r0, #3
 80025f8:	f000 fbe0 	bl	8002dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f000 f805 	bl	800260c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002602:	f7ff fa47 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_InitTick+0x54>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_InitTick+0x58>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002622:	fbb3 f3f1 	udiv	r3, r3, r1
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fbfb 	bl	8002e26 <HAL_SYSTICK_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e00e      	b.n	8002658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d80a      	bhi.n	8002656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002640:	2200      	movs	r2, #0
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f000 fbc3 	bl	8002dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_InitTick+0x5c>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2000000c 	.word	0x2000000c
 8002664:	20000014 	.word	0x20000014
 8002668:	20000010 	.word	0x20000010

0800266c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000014 	.word	0x20000014
 8002690:	200007a0 	.word	0x200007a0

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	200007a0 	.word	0x200007a0

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff ffee 	bl	8002694 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d005      	beq.n	80026d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_Delay+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d2:	bf00      	nop
 80026d4:	f7ff ffde 	bl	8002694 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8f7      	bhi.n	80026d4 <HAL_Delay+0x28>
  {
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000014 	.word	0x20000014

080026f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e031      	b.n	800276e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff f9e2 	bl	8001adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_ADC_Init+0x84>)
 8002738:	4013      	ands	r3, r2
 800273a:	f043 0202 	orr.w	r2, r3, #2
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f970 	bl	8002a28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
 800275e:	e001      	b.n	8002764 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	ffffeefd 	.word	0xffffeefd

0800277c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x1c>
 8002794:	2302      	movs	r3, #2
 8002796:	e136      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x28a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	d93a      	bls.n	800281e <HAL_ADC_ConfigChannel+0xa2>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027b0:	d035      	beq.n	800281e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68d9      	ldr	r1, [r3, #12]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	3b1e      	subs	r3, #30
 80027c8:	2207      	movs	r2, #7
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	400a      	ands	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a8d      	ldr	r2, [pc, #564]	; (8002a14 <HAL_ADC_ConfigChannel+0x298>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10a      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68d9      	ldr	r1, [r3, #12]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	061a      	lsls	r2, r3, #24
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027f6:	e035      	b.n	8002864 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68d9      	ldr	r1, [r3, #12]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	4603      	mov	r3, r0
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4403      	add	r3, r0
 8002810:	3b1e      	subs	r3, #30
 8002812:	409a      	lsls	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281c:	e022      	b.n	8002864 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6919      	ldr	r1, [r3, #16]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	2207      	movs	r2, #7
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43da      	mvns	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	400a      	ands	r2, r1
 8002840:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6919      	ldr	r1, [r3, #16]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	4603      	mov	r3, r0
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4403      	add	r3, r0
 800285a:	409a      	lsls	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b06      	cmp	r3, #6
 800286a:	d824      	bhi.n	80028b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b05      	subs	r3, #5
 800287e:	221f      	movs	r2, #31
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43da      	mvns	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	400a      	ands	r2, r1
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	4618      	mov	r0, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b05      	subs	r3, #5
 80028a8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34
 80028b4:	e04c      	b.n	8002950 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d824      	bhi.n	8002908 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3b23      	subs	r3, #35	; 0x23
 80028d0:	221f      	movs	r2, #31
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	400a      	ands	r2, r1
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b23      	subs	r3, #35	; 0x23
 80028fa:	fa00 f203 	lsl.w	r2, r0, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
 8002906:	e023      	b.n	8002950 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	3b41      	subs	r3, #65	; 0x41
 800291a:	221f      	movs	r2, #31
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43da      	mvns	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	400a      	ands	r2, r1
 8002928:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	4618      	mov	r0, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b41      	subs	r3, #65	; 0x41
 8002944:	fa00 f203 	lsl.w	r2, r0, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <HAL_ADC_ConfigChannel+0x29c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10a      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1f4>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002962:	d105      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 800296a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800296e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <HAL_ADC_ConfigChannel+0x29c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10f      	bne.n	800299a <HAL_ADC_ConfigChannel+0x21e>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b12      	cmp	r3, #18
 8002980:	d10b      	bne.n	800299a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 8002988:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800298c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800298e:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 8002994:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002998:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_ADC_ConfigChannel+0x29c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d12b      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x280>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_ADC_ConfigChannel+0x298>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x23a>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b11      	cmp	r3, #17
 80029b4:	d122      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029b6:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 80029bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029c0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a0>)
 80029c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <HAL_ADC_ConfigChannel+0x298>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_ADC_ConfigChannel+0x2a4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <HAL_ADC_ConfigChannel+0x2a8>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0c9a      	lsrs	r2, r3, #18
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029ee:	e002      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f9      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	10000012 	.word	0x10000012
 8002a18:	40012000 	.word	0x40012000
 8002a1c:	40012300 	.word	0x40012300
 8002a20:	2000000c 	.word	0x2000000c
 8002a24:	431bde83 	.word	0x431bde83

08002a28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a30:	4b78      	ldr	r3, [pc, #480]	; (8002c14 <ADC_Init+0x1ec>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a77      	ldr	r2, [pc, #476]	; (8002c14 <ADC_Init+0x1ec>)
 8002a36:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a3a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a3c:	4b75      	ldr	r3, [pc, #468]	; (8002c14 <ADC_Init+0x1ec>)
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4973      	ldr	r1, [pc, #460]	; (8002c14 <ADC_Init+0x1ec>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	021a      	lsls	r2, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	4a58      	ldr	r2, [pc, #352]	; (8002c18 <ADC_Init+0x1f0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e00f      	b.n	8002b22 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0202 	bic.w	r2, r2, #2
 8002b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	005a      	lsls	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	035a      	lsls	r2, r3, #13
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	e007      	b.n	8002b98 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	051a      	lsls	r2, r3, #20
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bda:	025a      	lsls	r2, r3, #9
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6899      	ldr	r1, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	029a      	lsls	r2, r3, #10
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40012300 	.word	0x40012300
 8002c18:	0f000001 	.word	0x0f000001

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <__NVIC_SetPriorityGrouping+0x40>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4a:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <__NVIC_SetPriorityGrouping+0x40>)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60d3      	str	r3, [r2, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00
 8002c60:	05fa0000 	.word	0x05fa0000

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4907      	ldr	r1, [pc, #28]	; (8002cb8 <__NVIC_EnableIRQ+0x38>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	db0a      	blt.n	8002ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	490c      	ldr	r1, [pc, #48]	; (8002d08 <__NVIC_SetPriority+0x4c>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce4:	e00a      	b.n	8002cfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4908      	ldr	r1, [pc, #32]	; (8002d0c <__NVIC_SetPriority+0x50>)
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	0112      	lsls	r2, r2, #4
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	761a      	strb	r2, [r3, #24]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f1c3 0307 	rsb	r3, r3, #7
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf28      	it	cs
 8002d2e:	2304      	movcs	r3, #4
 8002d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d902      	bls.n	8002d40 <NVIC_EncodePriority+0x30>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3b03      	subs	r3, #3
 8002d3e:	e000      	b.n	8002d42 <NVIC_EncodePriority+0x32>
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	401a      	ands	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43d9      	mvns	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	4313      	orrs	r3, r2
         );
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d88:	d301      	bcc.n	8002d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <SysTick_Config+0x40>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d96:	210f      	movs	r1, #15
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f7ff ff8e 	bl	8002cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <SysTick_Config+0x40>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <SysTick_Config+0x40>)
 8002da8:	2207      	movs	r2, #7
 8002daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff29 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de4:	f7ff ff3e 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f7ff ff8e 	bl	8002d10 <NVIC_EncodePriority>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff5d 	bl	8002cbc <__NVIC_SetPriority>
}
 8002e02:	bf00      	nop
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff31 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffa2 	bl	8002d78 <SysTick_Config>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	e175      	b.n	800314c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e60:	2201      	movs	r2, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	f040 8164 	bne.w	8003146 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d005      	beq.n	8002e96 <HAL_GPIO_Init+0x56>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d130      	bne.n	8002ef8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ecc:	2201      	movs	r2, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 0201 	and.w	r2, r3, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d017      	beq.n	8002f34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d123      	bne.n	8002f88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	08da      	lsrs	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3208      	adds	r2, #8
 8002f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	220f      	movs	r2, #15
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	08da      	lsrs	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3208      	adds	r2, #8
 8002f82:	69b9      	ldr	r1, [r7, #24]
 8002f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0203 	and.w	r2, r3, #3
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80be 	beq.w	8003146 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fca:	4b66      	ldr	r3, [pc, #408]	; (8003164 <HAL_GPIO_Init+0x324>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a65      	ldr	r2, [pc, #404]	; (8003164 <HAL_GPIO_Init+0x324>)
 8002fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b63      	ldr	r3, [pc, #396]	; (8003164 <HAL_GPIO_Init+0x324>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fe2:	4a61      	ldr	r2, [pc, #388]	; (8003168 <HAL_GPIO_Init+0x328>)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	3302      	adds	r3, #2
 8002fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	220f      	movs	r2, #15
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_GPIO_Init+0x32c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d037      	beq.n	800307e <HAL_GPIO_Init+0x23e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a57      	ldr	r2, [pc, #348]	; (8003170 <HAL_GPIO_Init+0x330>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d031      	beq.n	800307a <HAL_GPIO_Init+0x23a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a56      	ldr	r2, [pc, #344]	; (8003174 <HAL_GPIO_Init+0x334>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d02b      	beq.n	8003076 <HAL_GPIO_Init+0x236>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a55      	ldr	r2, [pc, #340]	; (8003178 <HAL_GPIO_Init+0x338>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d025      	beq.n	8003072 <HAL_GPIO_Init+0x232>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a54      	ldr	r2, [pc, #336]	; (800317c <HAL_GPIO_Init+0x33c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01f      	beq.n	800306e <HAL_GPIO_Init+0x22e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a53      	ldr	r2, [pc, #332]	; (8003180 <HAL_GPIO_Init+0x340>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d019      	beq.n	800306a <HAL_GPIO_Init+0x22a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_GPIO_Init+0x344>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_GPIO_Init+0x226>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a51      	ldr	r2, [pc, #324]	; (8003188 <HAL_GPIO_Init+0x348>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00d      	beq.n	8003062 <HAL_GPIO_Init+0x222>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a50      	ldr	r2, [pc, #320]	; (800318c <HAL_GPIO_Init+0x34c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <HAL_GPIO_Init+0x21e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4f      	ldr	r2, [pc, #316]	; (8003190 <HAL_GPIO_Init+0x350>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_GPIO_Init+0x21a>
 8003056:	2309      	movs	r3, #9
 8003058:	e012      	b.n	8003080 <HAL_GPIO_Init+0x240>
 800305a:	230a      	movs	r3, #10
 800305c:	e010      	b.n	8003080 <HAL_GPIO_Init+0x240>
 800305e:	2308      	movs	r3, #8
 8003060:	e00e      	b.n	8003080 <HAL_GPIO_Init+0x240>
 8003062:	2307      	movs	r3, #7
 8003064:	e00c      	b.n	8003080 <HAL_GPIO_Init+0x240>
 8003066:	2306      	movs	r3, #6
 8003068:	e00a      	b.n	8003080 <HAL_GPIO_Init+0x240>
 800306a:	2305      	movs	r3, #5
 800306c:	e008      	b.n	8003080 <HAL_GPIO_Init+0x240>
 800306e:	2304      	movs	r3, #4
 8003070:	e006      	b.n	8003080 <HAL_GPIO_Init+0x240>
 8003072:	2303      	movs	r3, #3
 8003074:	e004      	b.n	8003080 <HAL_GPIO_Init+0x240>
 8003076:	2302      	movs	r3, #2
 8003078:	e002      	b.n	8003080 <HAL_GPIO_Init+0x240>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_GPIO_Init+0x240>
 800307e:	2300      	movs	r3, #0
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	f002 0203 	and.w	r2, r2, #3
 8003086:	0092      	lsls	r2, r2, #2
 8003088:	4093      	lsls	r3, r2
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003090:	4935      	ldr	r1, [pc, #212]	; (8003168 <HAL_GPIO_Init+0x328>)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	3302      	adds	r3, #2
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_GPIO_Init+0x354>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030c2:	4a34      	ldr	r2, [pc, #208]	; (8003194 <HAL_GPIO_Init+0x354>)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <HAL_GPIO_Init+0x354>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030ec:	4a29      	ldr	r2, [pc, #164]	; (8003194 <HAL_GPIO_Init+0x354>)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030f2:	4b28      	ldr	r3, [pc, #160]	; (8003194 <HAL_GPIO_Init+0x354>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003116:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <HAL_GPIO_Init+0x354>)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_GPIO_Init+0x354>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_GPIO_Init+0x354>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3301      	adds	r3, #1
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2b0f      	cmp	r3, #15
 8003150:	f67f ae86 	bls.w	8002e60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3724      	adds	r7, #36	; 0x24
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	40013800 	.word	0x40013800
 800316c:	40020000 	.word	0x40020000
 8003170:	40020400 	.word	0x40020400
 8003174:	40020800 	.word	0x40020800
 8003178:	40020c00 	.word	0x40020c00
 800317c:	40021000 	.word	0x40021000
 8003180:	40021400 	.word	0x40021400
 8003184:	40021800 	.word	0x40021800
 8003188:	40021c00 	.word	0x40021c00
 800318c:	40022000 	.word	0x40022000
 8003190:	40022400 	.word	0x40022400
 8003194:	40013c00 	.word	0x40013c00

08003198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	807b      	strh	r3, [r7, #2]
 80031a4:	4613      	mov	r3, r2
 80031a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031a8:	787b      	ldrb	r3, [r7, #1]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ae:	887a      	ldrh	r2, [r7, #2]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031b4:	e003      	b.n	80031be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031b6:	887b      	ldrh	r3, [r7, #2]
 80031b8:	041a      	lsls	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	619a      	str	r2, [r3, #24]
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07f      	b.n	80032de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe fcb2 	bl	8001b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	; 0x24
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800321c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800322c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	e006      	b.n	8003254 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003252:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d104      	bne.n	8003266 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003264:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_I2C_Init+0x11c>)
 8003272:	430b      	orrs	r3, r1
 8003274:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003284:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69d9      	ldr	r1, [r3, #28]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	02008000 	.word	0x02008000

080032ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d138      	bne.n	8003374 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800330c:	2302      	movs	r3, #2
 800330e:	e032      	b.n	8003376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800333e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b20      	cmp	r3, #32
 8003396:	d139      	bne.n	800340c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e033      	b.n	800340e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2224      	movs	r2, #36	; 0x24
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	e000      	b.n	800340e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800340c:	2302      	movs	r3, #2
  }
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	6013      	str	r3, [r2, #0]
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40007000 	.word	0x40007000

0800343c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800345e:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800346a:	f7ff f913 	bl	8002694 <HAL_GetTick>
 800346e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003470:	e009      	b.n	8003486 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003472:	f7ff f90f 	bl	8002694 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003480:	d901      	bls.n	8003486 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e022      	b.n	80034cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003492:	d1ee      	bne.n	8003472 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003494:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0f      	ldr	r2, [pc, #60]	; (80034d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800349a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a0:	f7ff f8f8 	bl	8002694 <HAL_GetTick>
 80034a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034a6:	e009      	b.n	80034bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034a8:	f7ff f8f4 	bl	8002694 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b6:	d901      	bls.n	80034bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e007      	b.n	80034cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c8:	d1ee      	bne.n	80034a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40007000 	.word	0x40007000

080034dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034e4:	2300      	movs	r3, #0
 80034e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e29b      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8087 	beq.w	800360e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003500:	4b96      	ldr	r3, [pc, #600]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b04      	cmp	r3, #4
 800350a:	d00c      	beq.n	8003526 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350c:	4b93      	ldr	r3, [pc, #588]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d112      	bne.n	800353e <HAL_RCC_OscConfig+0x62>
 8003518:	4b90      	ldr	r3, [pc, #576]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003524:	d10b      	bne.n	800353e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003526:	4b8d      	ldr	r3, [pc, #564]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d06c      	beq.n	800360c <HAL_RCC_OscConfig+0x130>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d168      	bne.n	800360c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e275      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x7a>
 8003548:	4b84      	ldr	r3, [pc, #528]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a83      	ldr	r2, [pc, #524]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800354e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e02e      	b.n	80035b4 <HAL_RCC_OscConfig+0xd8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x9c>
 800355e:	4b7f      	ldr	r3, [pc, #508]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7e      	ldr	r2, [pc, #504]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b7c      	ldr	r3, [pc, #496]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7b      	ldr	r2, [pc, #492]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0xd8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0xc0>
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a75      	ldr	r2, [pc, #468]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b73      	ldr	r3, [pc, #460]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a72      	ldr	r2, [pc, #456]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0xd8>
 800359c:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_RCC_OscConfig+0x280>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b6c      	ldr	r3, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x280>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6b      	ldr	r2, [pc, #428]	; (800375c <HAL_RCC_OscConfig+0x280>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7ff f86a 	bl	8002694 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7ff f866 	bl	8002694 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e229      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_RCC_OscConfig+0x280>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0xe8>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7ff f856 	bl	8002694 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ec:	f7ff f852 	bl	8002694 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e215      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x110>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d069      	beq.n	80036ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800361a:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003626:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b08      	cmp	r3, #8
 8003630:	d11c      	bne.n	800366c <HAL_RCC_OscConfig+0x190>
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d116      	bne.n	800366c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_RCC_OscConfig+0x17a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d001      	beq.n	8003656 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e1e9      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	493d      	ldr	r1, [pc, #244]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	e040      	b.n	80036ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003674:	4b39      	ldr	r3, [pc, #228]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a38      	ldr	r2, [pc, #224]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7ff f808 	bl	8002694 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003688:	f7ff f804 	bl	8002694 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e1c7      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369a:	4b30      	ldr	r3, [pc, #192]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b2d      	ldr	r3, [pc, #180]	; (800375c <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4929      	ldr	r1, [pc, #164]	; (800375c <HAL_RCC_OscConfig+0x280>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
 80036ba:	e018      	b.n	80036ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <HAL_RCC_OscConfig+0x280>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a26      	ldr	r2, [pc, #152]	; (800375c <HAL_RCC_OscConfig+0x280>)
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe ffe4 	bl	8002694 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d0:	f7fe ffe0 	bl	8002694 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1a3      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d038      	beq.n	800376c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d019      	beq.n	8003736 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003706:	4a15      	ldr	r2, [pc, #84]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fe ffc1 	bl	8002694 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003716:	f7fe ffbd 	bl	8002694 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e180      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x23a>
 8003734:	e01a      	b.n	800376c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_OscConfig+0x280>)
 8003738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373a:	4a08      	ldr	r2, [pc, #32]	; (800375c <HAL_RCC_OscConfig+0x280>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fe ffa7 	bl	8002694 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374a:	f7fe ffa3 	bl	8002694 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d903      	bls.n	8003760 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e166      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
 800375c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	4b92      	ldr	r3, [pc, #584]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ee      	bne.n	800374a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80a4 	beq.w	80038c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b8c      	ldr	r3, [pc, #560]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	4b89      	ldr	r3, [pc, #548]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a88      	ldr	r2, [pc, #544]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b86      	ldr	r3, [pc, #536]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a2:	4b83      	ldr	r3, [pc, #524]	; (80039b0 <HAL_RCC_OscConfig+0x4d4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037ae:	4b80      	ldr	r3, [pc, #512]	; (80039b0 <HAL_RCC_OscConfig+0x4d4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7f      	ldr	r2, [pc, #508]	; (80039b0 <HAL_RCC_OscConfig+0x4d4>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fe ff6b 	bl	8002694 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe ff67 	bl	8002694 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b64      	cmp	r3, #100	; 0x64
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e12a      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d4:	4b76      	ldr	r3, [pc, #472]	; (80039b0 <HAL_RCC_OscConfig+0x4d4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x31a>
 80037e8:	4b70      	ldr	r3, [pc, #448]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a6f      	ldr	r2, [pc, #444]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	e02d      	b.n	8003852 <HAL_RCC_OscConfig+0x376>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x33c>
 80037fe:	4b6b      	ldr	r3, [pc, #428]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a6a      	ldr	r2, [pc, #424]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	4b68      	ldr	r3, [pc, #416]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a67      	ldr	r2, [pc, #412]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	e01c      	b.n	8003852 <HAL_RCC_OscConfig+0x376>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b05      	cmp	r3, #5
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0x35e>
 8003820:	4b62      	ldr	r3, [pc, #392]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a61      	ldr	r2, [pc, #388]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	4b5f      	ldr	r3, [pc, #380]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a5e      	ldr	r2, [pc, #376]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
 8003838:	e00b      	b.n	8003852 <HAL_RCC_OscConfig+0x376>
 800383a:	4b5c      	ldr	r3, [pc, #368]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a5b      	ldr	r2, [pc, #364]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
 8003846:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d015      	beq.n	8003886 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fe ff1b 	bl	8002694 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe ff17 	bl	8002694 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0d8      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCC_OscConfig+0x386>
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7fe ff05 	bl	8002694 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe ff01 	bl	8002694 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0c2      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a3c      	ldr	r2, [pc, #240]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80ae 	beq.w	8003a28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038cc:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d06d      	beq.n	80039b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d14b      	bne.n	8003978 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e0:	4b32      	ldr	r3, [pc, #200]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a31      	ldr	r2, [pc, #196]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 80038e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fe fed2 	bl	8002694 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fe fece 	bl	8002694 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e091      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	019b      	lsls	r3, r3, #6
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	071b      	lsls	r3, r3, #28
 800393e:	491b      	ldr	r1, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe fea0 	bl	8002694 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7fe fe9c 	bl	8002694 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e05f      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x47c>
 8003976:	e057      	b.n	8003a28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 800397e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe fe86 	bl	8002694 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe fe82 	bl	8002694 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e045      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x4b0>
 80039aa:	e03d      	b.n	8003a28 <HAL_RCC_OscConfig+0x54c>
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039b4:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <HAL_RCC_OscConfig+0x558>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d030      	beq.n	8003a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d129      	bne.n	8003a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d122      	bne.n	8003a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039e4:	4013      	ands	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d119      	bne.n	8003a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	3b01      	subs	r3, #1
 80039fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d10f      	bne.n	8003a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800

08003a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0d0      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b6a      	ldr	r3, [pc, #424]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d910      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b67      	ldr	r3, [pc, #412]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 020f 	bic.w	r2, r3, #15
 8003a66:	4965      	ldr	r1, [pc, #404]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b63      	ldr	r3, [pc, #396]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0b8      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a98:	4b59      	ldr	r3, [pc, #356]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a58      	ldr	r2, [pc, #352]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab0:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	494d      	ldr	r1, [pc, #308]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d040      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d115      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e07f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e073      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b3d      	ldr	r3, [pc, #244]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e06b      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1a:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4936      	ldr	r1, [pc, #216]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2c:	f7fe fdb2 	bl	8002694 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7fe fdae 	bl	8002694 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e053      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 020c 	and.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1eb      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d210      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 020f 	bic.w	r2, r3, #15
 8003b72:	4922      	ldr	r1, [pc, #136]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e032      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4916      	ldr	r1, [pc, #88]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	490e      	ldr	r1, [pc, #56]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bca:	f000 f821 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	490a      	ldr	r1, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x1cc>)
 8003bdc:	5ccb      	ldrb	r3, [r1, r3]
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1d0>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_ClockConfig+0x1d4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fd0e 	bl	800260c <HAL_InitTick>

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023c00 	.word	0x40023c00
 8003c00:	40023800 	.word	0x40023800
 8003c04:	080070e0 	.word	0x080070e0
 8003c08:	2000000c 	.word	0x2000000c
 8003c0c:	20000010 	.word	0x20000010

08003c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b094      	sub	sp, #80	; 0x50
 8003c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c20:	2300      	movs	r3, #0
 8003c22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c28:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d00d      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x40>
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	f200 80e1 	bhi.w	8003dfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x34>
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d003      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c42:	e0db      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b73      	ldr	r3, [pc, #460]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c48:	e0db      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c4a:	4b73      	ldr	r3, [pc, #460]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c4e:	e0d8      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c50:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d063      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c66:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	099b      	lsrs	r3, r3, #6
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c78:	633b      	str	r3, [r7, #48]	; 0x30
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c82:	4622      	mov	r2, r4
 8003c84:	462b      	mov	r3, r5
 8003c86:	f04f 0000 	mov.w	r0, #0
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	0159      	lsls	r1, r3, #5
 8003c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c94:	0150      	lsls	r0, r2, #5
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	1a51      	subs	r1, r2, r1
 8003c9e:	6139      	str	r1, [r7, #16]
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	018b      	lsls	r3, r1, #6
 8003cb8:	4651      	mov	r1, sl
 8003cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	018a      	lsls	r2, r1, #6
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	ebb2 0801 	subs.w	r8, r2, r1
 8003cc8:	4659      	mov	r1, fp
 8003cca:	eb63 0901 	sbc.w	r9, r3, r1
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce2:	4690      	mov	r8, r2
 8003ce4:	4699      	mov	r9, r3
 8003ce6:	4623      	mov	r3, r4
 8003ce8:	eb18 0303 	adds.w	r3, r8, r3
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	462b      	mov	r3, r5
 8003cf0:	eb49 0303 	adc.w	r3, r9, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d02:	4629      	mov	r1, r5
 8003d04:	024b      	lsls	r3, r1, #9
 8003d06:	4621      	mov	r1, r4
 8003d08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	024a      	lsls	r2, r1, #9
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d16:	2200      	movs	r2, #0
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d20:	f7fc fa8a 	bl	8000238 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d2c:	e058      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	2200      	movs	r2, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	4611      	mov	r1, r2
 8003d3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
 8003d44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	f04f 0000 	mov.w	r0, #0
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	0159      	lsls	r1, r3, #5
 8003d56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5a:	0150      	lsls	r0, r2, #5
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4641      	mov	r1, r8
 8003d62:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d66:	4649      	mov	r1, r9
 8003d68:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d80:	ebb2 040a 	subs.w	r4, r2, sl
 8003d84:	eb63 050b 	sbc.w	r5, r3, fp
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	00eb      	lsls	r3, r5, #3
 8003d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d96:	00e2      	lsls	r2, r4, #3
 8003d98:	4614      	mov	r4, r2
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	4643      	mov	r3, r8
 8003d9e:	18e3      	adds	r3, r4, r3
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	464b      	mov	r3, r9
 8003da4:	eb45 0303 	adc.w	r3, r5, r3
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db6:	4629      	mov	r1, r5
 8003db8:	028b      	lsls	r3, r1, #10
 8003dba:	4621      	mov	r1, r4
 8003dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	028a      	lsls	r2, r1, #10
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	61fa      	str	r2, [r7, #28]
 8003dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd4:	f7fc fa30 	bl	8000238 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	3301      	adds	r3, #1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dfa:	e002      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3750      	adds	r7, #80	; 0x50
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	007a1200 	.word	0x007a1200

08003e1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	2000000c 	.word	0x2000000c

08003e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e38:	f7ff fff0 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0a9b      	lsrs	r3, r3, #10
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	080070f0 	.word	0x080070f0

08003e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e60:	f7ff ffdc 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0b5b      	lsrs	r3, r3, #13
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4903      	ldr	r1, [pc, #12]	; (8003e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	080070f0 	.word	0x080070f0

08003e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d012      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003eac:	4b69      	ldr	r3, [pc, #420]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a68      	ldr	r2, [pc, #416]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eb6:	6093      	str	r3, [r2, #8]
 8003eb8:	4b66      	ldr	r3, [pc, #408]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec0:	4964      	ldr	r1, [pc, #400]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d017      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ede:	4b5d      	ldr	r3, [pc, #372]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	4959      	ldr	r1, [pc, #356]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efc:	d101      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f1a:	4b4e      	ldr	r3, [pc, #312]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	494a      	ldr	r1, [pc, #296]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f56:	2301      	movs	r3, #1
 8003f58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 808b 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f68:	4b3a      	ldr	r3, [pc, #232]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	4a39      	ldr	r2, [pc, #228]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f72:	6413      	str	r3, [r2, #64]	; 0x40
 8003f74:	4b37      	ldr	r3, [pc, #220]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f80:	4b35      	ldr	r3, [pc, #212]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a34      	ldr	r2, [pc, #208]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8c:	f7fe fb82 	bl	8002694 <HAL_GetTick>
 8003f90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f94:	f7fe fb7e 	bl	8002694 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e38f      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fb2:	4b28      	ldr	r3, [pc, #160]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d035      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d02e      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fda:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ff2:	4a18      	ldr	r2, [pc, #96]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d114      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fe fb46 	bl	8002694 <HAL_GetTick>
 8004008:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400a:	e00a      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400c:	f7fe fb42 	bl	8002694 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f241 3288 	movw	r2, #5000	; 0x1388
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e351      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0ee      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800403a:	d111      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800404a:	400b      	ands	r3, r1
 800404c:	4901      	ldr	r1, [pc, #4]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
 8004052:	e00b      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004054:	40023800 	.word	0x40023800
 8004058:	40007000 	.word	0x40007000
 800405c:	0ffffcff 	.word	0x0ffffcff
 8004060:	4bac      	ldr	r3, [pc, #688]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4aab      	ldr	r2, [pc, #684]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004066:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800406a:	6093      	str	r3, [r2, #8]
 800406c:	4ba9      	ldr	r3, [pc, #676]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004078:	49a6      	ldr	r1, [pc, #664]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407a:	4313      	orrs	r3, r2
 800407c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800408a:	4ba2      	ldr	r3, [pc, #648]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004090:	4aa0      	ldr	r2, [pc, #640]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004096:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800409a:	4b9e      	ldr	r3, [pc, #632]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	499b      	ldr	r1, [pc, #620]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b8:	4b96      	ldr	r3, [pc, #600]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c6:	4993      	ldr	r1, [pc, #588]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040da:	4b8e      	ldr	r3, [pc, #568]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e8:	498a      	ldr	r1, [pc, #552]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040fc:	4b85      	ldr	r3, [pc, #532]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410a:	4982      	ldr	r1, [pc, #520]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800411e:	4b7d      	ldr	r3, [pc, #500]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	4979      	ldr	r1, [pc, #484]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004140:	4b74      	ldr	r3, [pc, #464]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	4971      	ldr	r1, [pc, #452]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004162:	4b6c      	ldr	r3, [pc, #432]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f023 020c 	bic.w	r2, r3, #12
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004170:	4968      	ldr	r1, [pc, #416]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004184:	4b63      	ldr	r3, [pc, #396]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	4960      	ldr	r1, [pc, #384]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041a6:	4b5b      	ldr	r3, [pc, #364]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b4:	4957      	ldr	r1, [pc, #348]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041c8:	4b52      	ldr	r3, [pc, #328]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	494f      	ldr	r1, [pc, #316]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041ea:	4b4a      	ldr	r3, [pc, #296]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	4946      	ldr	r1, [pc, #280]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800420c:	4b41      	ldr	r3, [pc, #260]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	493e      	ldr	r1, [pc, #248]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800422e:	4b39      	ldr	r3, [pc, #228]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	4935      	ldr	r1, [pc, #212]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004250:	4b30      	ldr	r3, [pc, #192]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425e:	492d      	ldr	r1, [pc, #180]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d011      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004272:	4b28      	ldr	r3, [pc, #160]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004280:	4924      	ldr	r1, [pc, #144]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004290:	d101      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004292:	2301      	movs	r3, #1
 8004294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c0:	4914      	ldr	r1, [pc, #80]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00b      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042d4:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e4:	490b      	ldr	r1, [pc, #44]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00f      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004308:	4902      	ldr	r1, [pc, #8]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004324:	4b8a      	ldr	r3, [pc, #552]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	4986      	ldr	r1, [pc, #536]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004348:	4b81      	ldr	r3, [pc, #516]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004358:	497d      	ldr	r1, [pc, #500]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d006      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80d6 	beq.w	8004520 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004374:	4b76      	ldr	r3, [pc, #472]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a75      	ldr	r2, [pc, #468]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800437e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004380:	f7fe f988 	bl	8002694 <HAL_GetTick>
 8004384:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004388:	f7fe f984 	bl	8002694 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e195      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800439a:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d021      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d11d      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043ba:	4b65      	ldr	r3, [pc, #404]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043c8:	4b61      	ldr	r3, [pc, #388]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	0e1b      	lsrs	r3, r3, #24
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	019a      	lsls	r2, r3, #6
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	071b      	lsls	r3, r3, #28
 80043ee:	4958      	ldr	r1, [pc, #352]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d004      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02e      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004420:	d129      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004422:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004430:	4b47      	ldr	r3, [pc, #284]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004436:	0f1b      	lsrs	r3, r3, #28
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	019a      	lsls	r2, r3, #6
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	061b      	lsls	r3, r3, #24
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	493e      	ldr	r1, [pc, #248]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800445e:	4b3c      	ldr	r3, [pc, #240]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004464:	f023 021f 	bic.w	r2, r3, #31
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	3b01      	subs	r3, #1
 800446e:	4938      	ldr	r1, [pc, #224]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01d      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004482:	4b33      	ldr	r3, [pc, #204]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004488:	0e1b      	lsrs	r3, r3, #24
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004490:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004496:	0f1b      	lsrs	r3, r3, #28
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	019a      	lsls	r2, r3, #6
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	431a      	orrs	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	061b      	lsls	r3, r3, #24
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	071b      	lsls	r3, r3, #28
 80044b6:	4926      	ldr	r1, [pc, #152]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d011      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	019a      	lsls	r2, r3, #6
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	061b      	lsls	r3, r3, #24
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	071b      	lsls	r3, r3, #28
 80044e6:	491a      	ldr	r1, [pc, #104]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ee:	4b18      	ldr	r3, [pc, #96]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fa:	f7fe f8cb 	bl	8002694 <HAL_GetTick>
 80044fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004502:	f7fe f8c7 	bl	8002694 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b64      	cmp	r3, #100	; 0x64
 800450e:	d901      	bls.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e0d8      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b01      	cmp	r3, #1
 8004524:	f040 80ce 	bne.w	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a08      	ldr	r2, [pc, #32]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fe f8ae 	bl	8002694 <HAL_GetTick>
 8004538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800453a:	e00b      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800453c:	f7fe f8aa 	bl	8002694 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d904      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e0bb      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004554:	4b5e      	ldr	r3, [pc, #376]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800455c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004560:	d0ec      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800457e:	2b00      	cmp	r3, #0
 8004580:	d02e      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d12a      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800458a:	4b51      	ldr	r3, [pc, #324]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004598:	4b4d      	ldr	r3, [pc, #308]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	0f1b      	lsrs	r3, r3, #28
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	019a      	lsls	r2, r3, #6
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	041b      	lsls	r3, r3, #16
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	061b      	lsls	r3, r3, #24
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	071b      	lsls	r3, r3, #28
 80045be:	4944      	ldr	r1, [pc, #272]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045c6:	4b42      	ldr	r3, [pc, #264]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	3b01      	subs	r3, #1
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	493d      	ldr	r1, [pc, #244]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d022      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f4:	d11d      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045f6:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	0e1b      	lsrs	r3, r3, #24
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004604:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	0f1b      	lsrs	r3, r3, #28
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	019a      	lsls	r2, r3, #6
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	431a      	orrs	r2, r3
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	061b      	lsls	r3, r3, #24
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	071b      	lsls	r3, r3, #28
 800462a:	4929      	ldr	r1, [pc, #164]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d028      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800463e:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	0e1b      	lsrs	r3, r3, #24
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800464c:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	0c1b      	lsrs	r3, r3, #16
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	019a      	lsls	r2, r3, #6
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	431a      	orrs	r2, r3
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	071b      	lsls	r3, r3, #28
 8004672:	4917      	ldr	r1, [pc, #92]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	4911      	ldr	r1, [pc, #68]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0e      	ldr	r2, [pc, #56]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469c:	f7fd fffa 	bl	8002694 <HAL_GetTick>
 80046a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046a4:	f7fd fff6 	bl	8002694 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	; 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e007      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c2:	d1ef      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800

080046d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e09d      	b.n	8004822 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d108      	bne.n	8004700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f6:	d009      	beq.n	800470c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	61da      	str	r2, [r3, #28]
 80046fe:	e005      	b.n	800470c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd fac0 	bl	8001cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004742:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800474c:	d902      	bls.n	8004754 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	e002      	b.n	800475a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004758:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004762:	d007      	beq.n	8004774 <HAL_SPI_Init+0xa0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800476c:	d002      	beq.n	8004774 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	ea42 0103 	orr.w	r1, r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	f003 0204 	and.w	r2, r3, #4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047f0:	ea42 0103 	orr.w	r1, r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004810:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e049      	b.n	80048d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fd faab 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f001 f831 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e054      	b.n	800499a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d022      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d01d      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a22      	ldr	r2, [pc, #136]	; (80049ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d018      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1f      	ldr	r2, [pc, #124]	; (80049b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00e      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <HAL_TIM_Base_Start_IT+0xe4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d115      	bne.n	8004984 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_TIM_Base_Start_IT+0xec>)
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b06      	cmp	r3, #6
 8004968:	d015      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0xbe>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d011      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004982:	e008      	b.n	8004996 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e000      	b.n	8004998 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40001800 	.word	0x40001800
 80049c4:	00010007 	.word	0x00010007

080049c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e049      	b.n	8004a6e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f841 	bl	8004a76 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 ff62 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e049      	b.n	8004b30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fd fa8b 	bl	8001fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f000 ff01 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <HAL_TIM_PWM_Start+0x24>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e03c      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d109      	bne.n	8004b76 <HAL_TIM_PWM_Start+0x3e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e02f      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d109      	bne.n	8004b90 <HAL_TIM_PWM_Start+0x58>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e022      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b0c      	cmp	r3, #12
 8004b94:	d109      	bne.n	8004baa <HAL_TIM_PWM_Start+0x72>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	bf14      	ite	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	2300      	moveq	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	e015      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d109      	bne.n	8004bc4 <HAL_TIM_PWM_Start+0x8c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e008      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e092      	b.n	8004d04 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_PWM_Start+0xb6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bec:	e023      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_PWM_Start+0xc6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bfc:	e01b      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0xd6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c0c:	e013      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0xe6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c1c:	e00b      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Start+0xf6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c2c:	e003      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 fb08 	bl	8006254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a30      	ldr	r2, [pc, #192]	; (8004d0c <HAL_TIM_PWM_Start+0x1d4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x120>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2f      	ldr	r2, [pc, #188]	; (8004d10 <HAL_TIM_PWM_Start+0x1d8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <HAL_TIM_PWM_Start+0x124>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_TIM_PWM_Start+0x126>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a25      	ldr	r2, [pc, #148]	; (8004d0c <HAL_TIM_PWM_Start+0x1d4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x18a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d01d      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x18a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <HAL_TIM_PWM_Start+0x1dc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x18a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a20      	ldr	r2, [pc, #128]	; (8004d18 <HAL_TIM_PWM_Start+0x1e0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x18a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <HAL_TIM_PWM_Start+0x1e4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x18a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a19      	ldr	r2, [pc, #100]	; (8004d10 <HAL_TIM_PWM_Start+0x1d8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x18a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <HAL_TIM_PWM_Start+0x1e8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x18a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <HAL_TIM_PWM_Start+0x1ec>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d115      	bne.n	8004cee <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <HAL_TIM_PWM_Start+0x1f0>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b06      	cmp	r3, #6
 8004cd2:	d015      	beq.n	8004d00 <HAL_TIM_PWM_Start+0x1c8>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cda:	d011      	beq.n	8004d00 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cec:	e008      	b.n	8004d00 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e000      	b.n	8004d02 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40001800 	.word	0x40001800
 8004d28:	00010007 	.word	0x00010007

08004d2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e049      	b.n	8004dd2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f841 	bl	8004dda <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f000 fdb0 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e08f      	b.n	8004f24 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7fd f861 	bl	8001ee0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6899      	ldr	r1, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	4b3e      	ldr	r3, [pc, #248]	; (8004f2c <HAL_TIM_Encoder_Init+0x13c>)
 8004e32:	400b      	ands	r3, r1
 8004e34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f000 fd45 	bl	80058d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_TIM_Encoder_Init+0x140>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <HAL_TIM_Encoder_Init+0x144>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <HAL_TIM_Encoder_Init+0x148>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	011a      	lsls	r2, r3, #4
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	031b      	lsls	r3, r3, #12
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	fffebff8 	.word	0xfffebff8
 8004f30:	fffffcfc 	.word	0xfffffcfc
 8004f34:	fffff3f3 	.word	0xfffff3f3
 8004f38:	ffff0f0f 	.word	0xffff0f0f

08004f3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d110      	bne.n	8004f8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d102      	bne.n	8004f78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f72:	7b7b      	ldrb	r3, [r7, #13]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d001      	beq.n	8004f7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e069      	b.n	8005050 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8c:	e031      	b.n	8004ff2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d110      	bne.n	8004fb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f94:	7bbb      	ldrb	r3, [r7, #14]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d102      	bne.n	8004fa0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f9a:	7b3b      	ldrb	r3, [r7, #12]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d001      	beq.n	8004fa4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e055      	b.n	8005050 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb4:	e01d      	b.n	8004ff2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d108      	bne.n	8004fce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d105      	bne.n	8004fce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fc2:	7b7b      	ldrb	r3, [r7, #13]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d102      	bne.n	8004fce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fc8:	7b3b      	ldrb	r3, [r7, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d001      	beq.n	8004fd2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e03e      	b.n	8005050 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2202      	movs	r2, #2
 8004fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_TIM_Encoder_Start+0xc4>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d008      	beq.n	8005010 <HAL_TIM_Encoder_Start+0xd4>
 8004ffe:	e00f      	b.n	8005020 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2201      	movs	r2, #1
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f001 f923 	bl	8006254 <TIM_CCxChannelCmd>
      break;
 800500e:	e016      	b.n	800503e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2201      	movs	r2, #1
 8005016:	2104      	movs	r1, #4
 8005018:	4618      	mov	r0, r3
 800501a:	f001 f91b 	bl	8006254 <TIM_CCxChannelCmd>
      break;
 800501e:	e00e      	b.n	800503e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2201      	movs	r2, #1
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f001 f913 	bl	8006254 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2201      	movs	r2, #1
 8005034:	2104      	movs	r1, #4
 8005036:	4618      	mov	r0, r3
 8005038:	f001 f90c 	bl	8006254 <TIM_CCxChannelCmd>
      break;
 800503c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d122      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b02      	cmp	r3, #2
 800507a:	d11b      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0202 	mvn.w	r2, #2
 8005084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fbfa 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 80050a0:	e005      	b.n	80050ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fbec 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fbfd 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d122      	bne.n	8005108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d11b      	bne.n	8005108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0204 	mvn.w	r2, #4
 80050d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fbd0 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fbc2 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fbd3 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b08      	cmp	r3, #8
 8005114:	d122      	bne.n	800515c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b08      	cmp	r3, #8
 8005122:	d11b      	bne.n	800515c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0208 	mvn.w	r2, #8
 800512c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2204      	movs	r2, #4
 8005132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fba6 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fb98 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fba9 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b10      	cmp	r3, #16
 8005168:	d122      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b10      	cmp	r3, #16
 8005176:	d11b      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0210 	mvn.w	r2, #16
 8005180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2208      	movs	r2, #8
 8005186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fb7c 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fb6e 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb7f 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10e      	bne.n	80051dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d107      	bne.n	80051dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0201 	mvn.w	r2, #1
 80051d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fb fa52 	bl	8000680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b80      	cmp	r3, #128	; 0x80
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b80      	cmp	r3, #128	; 0x80
 80051f6:	d107      	bne.n	8005208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f001 f962 	bl	80064cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005216:	d10e      	bne.n	8005236 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d107      	bne.n	8005236 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800522e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f001 f955 	bl	80064e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d10e      	bne.n	8005262 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d107      	bne.n	8005262 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800525a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fb2d 	bl	80058bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b20      	cmp	r3, #32
 800526e:	d10e      	bne.n	800528e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b20      	cmp	r3, #32
 800527c:	d107      	bne.n	800528e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f06f 0220 	mvn.w	r2, #32
 8005286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 f915 	bl	80064b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e066      	b.n	8005384 <HAL_TIM_OC_ConfigChannel+0xec>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b14      	cmp	r3, #20
 80052c2:	d857      	bhi.n	8005374 <HAL_TIM_OC_ConfigChannel+0xdc>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	08005321 	.word	0x08005321
 80052d0:	08005375 	.word	0x08005375
 80052d4:	08005375 	.word	0x08005375
 80052d8:	08005375 	.word	0x08005375
 80052dc:	0800532f 	.word	0x0800532f
 80052e0:	08005375 	.word	0x08005375
 80052e4:	08005375 	.word	0x08005375
 80052e8:	08005375 	.word	0x08005375
 80052ec:	0800533d 	.word	0x0800533d
 80052f0:	08005375 	.word	0x08005375
 80052f4:	08005375 	.word	0x08005375
 80052f8:	08005375 	.word	0x08005375
 80052fc:	0800534b 	.word	0x0800534b
 8005300:	08005375 	.word	0x08005375
 8005304:	08005375 	.word	0x08005375
 8005308:	08005375 	.word	0x08005375
 800530c:	08005359 	.word	0x08005359
 8005310:	08005375 	.word	0x08005375
 8005314:	08005375 	.word	0x08005375
 8005318:	08005375 	.word	0x08005375
 800531c:	08005367 	.word	0x08005367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fb72 	bl	8005a10 <TIM_OC1_SetConfig>
      break;
 800532c:	e025      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fbdd 	bl	8005af4 <TIM_OC2_SetConfig>
      break;
 800533a:	e01e      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fc4e 	bl	8005be4 <TIM_OC3_SetConfig>
      break;
 8005348:	e017      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fcbd 	bl	8005cd0 <TIM_OC4_SetConfig>
      break;
 8005356:	e010      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fd0e 	bl	8005d80 <TIM_OC5_SetConfig>
      break;
 8005364:	e009      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fd59 	bl	8005e24 <TIM_OC6_SetConfig>
      break;
 8005372:	e002      	b.n	800537a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
      break;
 8005378:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005382:	7dfb      	ldrb	r3, [r7, #23]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e088      	b.n	80054bc <HAL_TIM_IC_ConfigChannel+0x130>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f000 fd80 	bl	8005ecc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 020c 	bic.w	r2, r2, #12
 80053da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6999      	ldr	r1, [r3, #24]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	619a      	str	r2, [r3, #24]
 80053ee:	e060      	b.n	80054b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d11c      	bne.n	8005430 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f000 fe04 	bl	8006012 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699a      	ldr	r2, [r3, #24]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005418:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6999      	ldr	r1, [r3, #24]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	021a      	lsls	r2, r3, #8
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	619a      	str	r2, [r3, #24]
 800542e:	e040      	b.n	80054b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b08      	cmp	r3, #8
 8005434:	d11b      	bne.n	800546e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6819      	ldr	r1, [r3, #0]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f000 fe51 	bl	80060ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 020c 	bic.w	r2, r2, #12
 8005458:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69d9      	ldr	r1, [r3, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	61da      	str	r2, [r3, #28]
 800546c:	e021      	b.n	80054b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b0c      	cmp	r3, #12
 8005472:	d11c      	bne.n	80054ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6819      	ldr	r1, [r3, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f000 fe6e 	bl	8006164 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005496:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69d9      	ldr	r1, [r3, #28]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	021a      	lsls	r2, r3, #8
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	61da      	str	r2, [r3, #28]
 80054ac:	e001      	b.n	80054b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0ff      	b.n	80056e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b14      	cmp	r3, #20
 80054ee:	f200 80f0 	bhi.w	80056d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	080056d3 	.word	0x080056d3
 8005500:	080056d3 	.word	0x080056d3
 8005504:	080056d3 	.word	0x080056d3
 8005508:	0800558d 	.word	0x0800558d
 800550c:	080056d3 	.word	0x080056d3
 8005510:	080056d3 	.word	0x080056d3
 8005514:	080056d3 	.word	0x080056d3
 8005518:	080055cf 	.word	0x080055cf
 800551c:	080056d3 	.word	0x080056d3
 8005520:	080056d3 	.word	0x080056d3
 8005524:	080056d3 	.word	0x080056d3
 8005528:	0800560f 	.word	0x0800560f
 800552c:	080056d3 	.word	0x080056d3
 8005530:	080056d3 	.word	0x080056d3
 8005534:	080056d3 	.word	0x080056d3
 8005538:	08005651 	.word	0x08005651
 800553c:	080056d3 	.word	0x080056d3
 8005540:	080056d3 	.word	0x080056d3
 8005544:	080056d3 	.word	0x080056d3
 8005548:	08005691 	.word	0x08005691
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fa5c 	bl	8005a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0208 	orr.w	r2, r2, #8
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0204 	bic.w	r2, r2, #4
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	619a      	str	r2, [r3, #24]
      break;
 800558a:	e0a5      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 faae 	bl	8005af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6999      	ldr	r1, [r3, #24]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	021a      	lsls	r2, r3, #8
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	619a      	str	r2, [r3, #24]
      break;
 80055cc:	e084      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fb05 	bl	8005be4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0208 	orr.w	r2, r2, #8
 80055e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0204 	bic.w	r2, r2, #4
 80055f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	61da      	str	r2, [r3, #28]
      break;
 800560c:	e064      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fb5b 	bl	8005cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69d9      	ldr	r1, [r3, #28]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	021a      	lsls	r2, r3, #8
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	61da      	str	r2, [r3, #28]
      break;
 800564e:	e043      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fb92 	bl	8005d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0208 	orr.w	r2, r2, #8
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0204 	bic.w	r2, r2, #4
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800568e:	e023      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fbc4 	bl	8005e24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	021a      	lsls	r2, r3, #8
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056d0:	e002      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]
      break;
 80056d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop

080056ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_TIM_ConfigClockSource+0x1c>
 8005704:	2302      	movs	r3, #2
 8005706:	e0b4      	b.n	8005872 <HAL_TIM_ConfigClockSource+0x186>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	4b56      	ldr	r3, [pc, #344]	; (800587c <HAL_TIM_ConfigClockSource+0x190>)
 8005724:	4013      	ands	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005740:	d03e      	beq.n	80057c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005746:	f200 8087 	bhi.w	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 800574a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574e:	f000 8086 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x172>
 8005752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005756:	d87f      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005758:	2b70      	cmp	r3, #112	; 0x70
 800575a:	d01a      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0xa6>
 800575c:	2b70      	cmp	r3, #112	; 0x70
 800575e:	d87b      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	2b60      	cmp	r3, #96	; 0x60
 8005762:	d050      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x11a>
 8005764:	2b60      	cmp	r3, #96	; 0x60
 8005766:	d877      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005768:	2b50      	cmp	r3, #80	; 0x50
 800576a:	d03c      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0xfa>
 800576c:	2b50      	cmp	r3, #80	; 0x50
 800576e:	d873      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d058      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x13a>
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d86f      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005778:	2b30      	cmp	r3, #48	; 0x30
 800577a:	d064      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x15a>
 800577c:	2b30      	cmp	r3, #48	; 0x30
 800577e:	d86b      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005780:	2b20      	cmp	r3, #32
 8005782:	d060      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x15a>
 8005784:	2b20      	cmp	r3, #32
 8005786:	d867      	bhi.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d05c      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x15a>
 800578c:	2b10      	cmp	r3, #16
 800578e:	d05a      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x15a>
 8005790:	e062      	b.n	8005858 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6899      	ldr	r1, [r3, #8]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f000 fd37 	bl	8006214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	609a      	str	r2, [r3, #8]
      break;
 80057be:	e04f      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	6899      	ldr	r1, [r3, #8]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f000 fd20 	bl	8006214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057e2:	609a      	str	r2, [r3, #8]
      break;
 80057e4:	e03c      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6859      	ldr	r1, [r3, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f000 fbde 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2150      	movs	r1, #80	; 0x50
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fced 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005804:	e02c      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6859      	ldr	r1, [r3, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	461a      	mov	r2, r3
 8005814:	f000 fc3a 	bl	800608c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2160      	movs	r1, #96	; 0x60
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fcdd 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005824:	e01c      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	461a      	mov	r2, r3
 8005834:	f000 fbbe 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2140      	movs	r1, #64	; 0x40
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fccd 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005844:	e00c      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f000 fcc4 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005856:	e003      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
      break;
 800585c:	e000      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800585e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	fffeff88 	.word	0xfffeff88

08005880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a40      	ldr	r2, [pc, #256]	; (80059e4 <TIM_Base_SetConfig+0x114>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ee:	d00f      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3d      	ldr	r2, [pc, #244]	; (80059e8 <TIM_Base_SetConfig+0x118>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a3c      	ldr	r2, [pc, #240]	; (80059ec <TIM_Base_SetConfig+0x11c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a3b      	ldr	r2, [pc, #236]	; (80059f0 <TIM_Base_SetConfig+0x120>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a3a      	ldr	r2, [pc, #232]	; (80059f4 <TIM_Base_SetConfig+0x124>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d108      	bne.n	8005922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2f      	ldr	r2, [pc, #188]	; (80059e4 <TIM_Base_SetConfig+0x114>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d02b      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005930:	d027      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2c      	ldr	r2, [pc, #176]	; (80059e8 <TIM_Base_SetConfig+0x118>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d023      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2b      	ldr	r2, [pc, #172]	; (80059ec <TIM_Base_SetConfig+0x11c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01f      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <TIM_Base_SetConfig+0x120>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01b      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <TIM_Base_SetConfig+0x124>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d017      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a28      	ldr	r2, [pc, #160]	; (80059f8 <TIM_Base_SetConfig+0x128>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a27      	ldr	r2, [pc, #156]	; (80059fc <TIM_Base_SetConfig+0x12c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00f      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <TIM_Base_SetConfig+0x130>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00b      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a25      	ldr	r2, [pc, #148]	; (8005a04 <TIM_Base_SetConfig+0x134>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <TIM_Base_SetConfig+0x138>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a23      	ldr	r2, [pc, #140]	; (8005a0c <TIM_Base_SetConfig+0x13c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d108      	bne.n	8005994 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <TIM_Base_SetConfig+0x114>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_Base_SetConfig+0xf8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a0c      	ldr	r2, [pc, #48]	; (80059f4 <TIM_Base_SetConfig+0x124>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d103      	bne.n	80059d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	615a      	str	r2, [r3, #20]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800
 8005a04:	40001800 	.word	0x40001800
 8005a08:	40001c00 	.word	0x40001c00
 8005a0c:	40002000 	.word	0x40002000

08005a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f023 0201 	bic.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ae8 <TIM_OC1_SetConfig+0xd8>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0302 	bic.w	r3, r3, #2
 8005a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a21      	ldr	r2, [pc, #132]	; (8005aec <TIM_OC1_SetConfig+0xdc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_OC1_SetConfig+0x64>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <TIM_OC1_SetConfig+0xe0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d10c      	bne.n	8005a8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0308 	bic.w	r3, r3, #8
 8005a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a16      	ldr	r2, [pc, #88]	; (8005aec <TIM_OC1_SetConfig+0xdc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC1_SetConfig+0x8e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <TIM_OC1_SetConfig+0xe0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d111      	bne.n	8005ac2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	621a      	str	r2, [r3, #32]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	fffeff8f 	.word	0xfffeff8f
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400

08005af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0210 	bic.w	r2, r3, #16
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <TIM_OC2_SetConfig+0xe4>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0320 	bic.w	r3, r3, #32
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <TIM_OC2_SetConfig+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC2_SetConfig+0x68>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a22      	ldr	r2, [pc, #136]	; (8005be0 <TIM_OC2_SetConfig+0xec>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10d      	bne.n	8005b78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <TIM_OC2_SetConfig+0xe8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC2_SetConfig+0x94>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <TIM_OC2_SetConfig+0xec>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d113      	bne.n	8005bb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	feff8fff 	.word	0xfeff8fff
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40010400 	.word	0x40010400

08005be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <TIM_OC3_SetConfig+0xe0>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <TIM_OC3_SetConfig+0xe4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_OC3_SetConfig+0x66>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a21      	ldr	r2, [pc, #132]	; (8005ccc <TIM_OC3_SetConfig+0xe8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10d      	bne.n	8005c66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <TIM_OC3_SetConfig+0xe4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_OC3_SetConfig+0x92>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a16      	ldr	r2, [pc, #88]	; (8005ccc <TIM_OC3_SetConfig+0xe8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d113      	bne.n	8005c9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	621a      	str	r2, [r3, #32]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	fffeff8f 	.word	0xfffeff8f
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40010400 	.word	0x40010400

08005cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <TIM_OC4_SetConfig+0xa4>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <TIM_OC4_SetConfig+0xa8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC4_SetConfig+0x68>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <TIM_OC4_SetConfig+0xac>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d109      	bne.n	8005d4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	feff8fff 	.word	0xfeff8fff
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40010400 	.word	0x40010400

08005d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <TIM_OC5_SetConfig+0x98>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <TIM_OC5_SetConfig+0x9c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_OC5_SetConfig+0x5e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a11      	ldr	r2, [pc, #68]	; (8005e20 <TIM_OC5_SetConfig+0xa0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d109      	bne.n	8005df2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	fffeff8f 	.word	0xfffeff8f
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ec0 <TIM_OC6_SetConfig+0x9c>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	051b      	lsls	r3, r3, #20
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <TIM_OC6_SetConfig+0xa0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_OC6_SetConfig+0x60>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <TIM_OC6_SetConfig+0xa4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d109      	bne.n	8005e98 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	029b      	lsls	r3, r3, #10
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	feff8fff 	.word	0xfeff8fff
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40010400 	.word	0x40010400

08005ecc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 0201 	bic.w	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a28      	ldr	r2, [pc, #160]	; (8005f98 <TIM_TI1_SetConfig+0xcc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01b      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d017      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a25      	ldr	r2, [pc, #148]	; (8005f9c <TIM_TI1_SetConfig+0xd0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4a24      	ldr	r2, [pc, #144]	; (8005fa0 <TIM_TI1_SetConfig+0xd4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00f      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4a23      	ldr	r2, [pc, #140]	; (8005fa4 <TIM_TI1_SetConfig+0xd8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a22      	ldr	r2, [pc, #136]	; (8005fa8 <TIM_TI1_SetConfig+0xdc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a21      	ldr	r2, [pc, #132]	; (8005fac <TIM_TI1_SetConfig+0xe0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <TIM_TI1_SetConfig+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <TIM_TI1_SetConfig+0x6a>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <TIM_TI1_SetConfig+0x6c>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e003      	b.n	8005f56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f023 030a 	bic.w	r3, r3, #10
 8005f70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f003 030a 	and.w	r3, r3, #10
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40010400 	.word	0x40010400
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40001800 	.word	0x40001800

08005fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f023 0201 	bic.w	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 030a 	bic.w	r3, r3, #10
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f023 0210 	bic.w	r2, r3, #16
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	031b      	lsls	r3, r3, #12
 8006056:	b29b      	uxth	r3, r3
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006064:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	621a      	str	r2, [r3, #32]
}
 8006080:	bf00      	nop
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f023 0210 	bic.w	r2, r3, #16
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	031b      	lsls	r3, r3, #12
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 0303 	bic.w	r3, r3, #3
 8006118:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006128:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	b2db      	uxtb	r3, r3
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800613c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006190:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	031b      	lsls	r3, r3, #12
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	031b      	lsls	r3, r3, #12
 80061bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f043 0307 	orr.w	r3, r3, #7
 8006200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800622e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	431a      	orrs	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4313      	orrs	r3, r2
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	609a      	str	r2, [r3, #8]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2201      	movs	r2, #1
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1a      	ldr	r2, [r3, #32]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	43db      	mvns	r3, r3
 8006276:	401a      	ands	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	fa01 f303 	lsl.w	r3, r1, r3
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e06d      	b.n	8006394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a30      	ldr	r2, [pc, #192]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a2f      	ldr	r2, [pc, #188]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d108      	bne.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006304:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d022      	beq.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632a:	d01d      	beq.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d018      	beq.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1c      	ldr	r2, [pc, #112]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d013      	beq.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00e      	beq.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a15      	ldr	r2, [pc, #84]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d009      	beq.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a16      	ldr	r2, [pc, #88]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d004      	beq.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d10c      	bne.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800636e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	4313      	orrs	r3, r2
 8006378:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40000800 	.word	0x40000800
 80063b0:	40000c00 	.word	0x40000c00
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40001800 	.word	0x40001800

080063bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e065      	b.n	80064a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	041b      	lsls	r3, r3, #16
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d115      	bne.n	8006492 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	051b      	lsls	r3, r3, #20
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40010400 	.word	0x40010400

080064b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e040      	b.n	8006588 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fb fe44 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2224      	movs	r2, #36	; 0x24
 8006520:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f974 	bl	8006820 <UART_SetConfig>
 8006538:	4603      	mov	r3, r0
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e022      	b.n	8006588 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fbcc 	bl	8006ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc53 	bl	8006e2c <UART_CheckIdleState>
 8006586:	4603      	mov	r3, r0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d171      	bne.n	800668c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_UART_Transmit+0x24>
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e06a      	b.n	800668e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2221      	movs	r2, #33	; 0x21
 80065c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065c6:	f7fc f865 	bl	8002694 <HAL_GetTick>
 80065ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e4:	d108      	bne.n	80065f8 <HAL_UART_Transmit+0x68>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	e003      	b.n	8006600 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065fc:	2300      	movs	r3, #0
 80065fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006600:	e02c      	b.n	800665c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2200      	movs	r2, #0
 800660a:	2180      	movs	r1, #128	; 0x80
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fc5a 	bl	8006ec6 <UART_WaitOnFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e038      	b.n	800668e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006630:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	3302      	adds	r3, #2
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e007      	b.n	800664a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	781a      	ldrb	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	3301      	adds	r3, #1
 8006648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1cc      	bne.n	8006602 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2200      	movs	r2, #0
 8006670:	2140      	movs	r1, #64	; 0x40
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fc27 	bl	8006ec6 <UART_WaitOnFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e005      	b.n	800668e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	e000      	b.n	800668e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800668c:	2302      	movs	r3, #2
  }
}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b08a      	sub	sp, #40	; 0x28
 800669a:	af02      	add	r7, sp, #8
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	f040 80b1 	bne.w	8006814 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <HAL_UART_Receive+0x28>
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e0a9      	b.n	8006816 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2222      	movs	r2, #34	; 0x22
 80066ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066d8:	f7fb ffdc 	bl	8002694 <HAL_GetTick>
 80066dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	88fa      	ldrh	r2, [r7, #6]
 80066e2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	88fa      	ldrh	r2, [r7, #6]
 80066ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f6:	d10e      	bne.n	8006716 <HAL_UART_Receive+0x80>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d105      	bne.n	800670c <HAL_UART_Receive+0x76>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800670a:	e02d      	b.n	8006768 <HAL_UART_Receive+0xd2>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	22ff      	movs	r2, #255	; 0xff
 8006710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006714:	e028      	b.n	8006768 <HAL_UART_Receive+0xd2>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10d      	bne.n	800673a <HAL_UART_Receive+0xa4>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <HAL_UART_Receive+0x9a>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	22ff      	movs	r2, #255	; 0xff
 800672a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800672e:	e01b      	b.n	8006768 <HAL_UART_Receive+0xd2>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	227f      	movs	r2, #127	; 0x7f
 8006734:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006738:	e016      	b.n	8006768 <HAL_UART_Receive+0xd2>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006742:	d10d      	bne.n	8006760 <HAL_UART_Receive+0xca>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <HAL_UART_Receive+0xc0>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	227f      	movs	r2, #127	; 0x7f
 8006750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006754:	e008      	b.n	8006768 <HAL_UART_Receive+0xd2>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	223f      	movs	r2, #63	; 0x3f
 800675a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800675e:	e003      	b.n	8006768 <HAL_UART_Receive+0xd2>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800676e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006778:	d108      	bne.n	800678c <HAL_UART_Receive+0xf6>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d104      	bne.n	800678c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	e003      	b.n	8006794 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006790:	2300      	movs	r3, #0
 8006792:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006794:	e032      	b.n	80067fc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2200      	movs	r2, #0
 800679e:	2120      	movs	r1, #32
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fb90 	bl	8006ec6 <UART_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e032      	b.n	8006816 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10c      	bne.n	80067d0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	b29a      	uxth	r2, r3
 80067be:	8a7b      	ldrh	r3, [r7, #18]
 80067c0:	4013      	ands	r3, r2
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	3302      	adds	r3, #2
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	e00c      	b.n	80067ea <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	8a7b      	ldrh	r3, [r7, #18]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	4013      	ands	r3, r2
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1c6      	bne.n	8006796 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	e000      	b.n	8006816 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006814:	2302      	movs	r3, #2
  }
}
 8006816:	4618      	mov	r0, r3
 8006818:	3720      	adds	r7, #32
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4ba6      	ldr	r3, [pc, #664]	; (8006ae4 <UART_SetConfig+0x2c4>)
 800684c:	4013      	ands	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	6979      	ldr	r1, [r7, #20]
 8006854:	430b      	orrs	r3, r1
 8006856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	430a      	orrs	r2, r1
 8006890:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a94      	ldr	r2, [pc, #592]	; (8006ae8 <UART_SetConfig+0x2c8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d120      	bne.n	80068de <UART_SetConfig+0xbe>
 800689c:	4b93      	ldr	r3, [pc, #588]	; (8006aec <UART_SetConfig+0x2cc>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d816      	bhi.n	80068d8 <UART_SetConfig+0xb8>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x90>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	080068cd 	.word	0x080068cd
 80068b8:	080068c7 	.word	0x080068c7
 80068bc:	080068d3 	.word	0x080068d3
 80068c0:	2301      	movs	r3, #1
 80068c2:	77fb      	strb	r3, [r7, #31]
 80068c4:	e150      	b.n	8006b68 <UART_SetConfig+0x348>
 80068c6:	2302      	movs	r3, #2
 80068c8:	77fb      	strb	r3, [r7, #31]
 80068ca:	e14d      	b.n	8006b68 <UART_SetConfig+0x348>
 80068cc:	2304      	movs	r3, #4
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e14a      	b.n	8006b68 <UART_SetConfig+0x348>
 80068d2:	2308      	movs	r3, #8
 80068d4:	77fb      	strb	r3, [r7, #31]
 80068d6:	e147      	b.n	8006b68 <UART_SetConfig+0x348>
 80068d8:	2310      	movs	r3, #16
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	e144      	b.n	8006b68 <UART_SetConfig+0x348>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a83      	ldr	r2, [pc, #524]	; (8006af0 <UART_SetConfig+0x2d0>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d132      	bne.n	800694e <UART_SetConfig+0x12e>
 80068e8:	4b80      	ldr	r3, [pc, #512]	; (8006aec <UART_SetConfig+0x2cc>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	f003 030c 	and.w	r3, r3, #12
 80068f2:	2b0c      	cmp	r3, #12
 80068f4:	d828      	bhi.n	8006948 <UART_SetConfig+0x128>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0xdc>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	08006931 	.word	0x08006931
 8006900:	08006949 	.word	0x08006949
 8006904:	08006949 	.word	0x08006949
 8006908:	08006949 	.word	0x08006949
 800690c:	0800693d 	.word	0x0800693d
 8006910:	08006949 	.word	0x08006949
 8006914:	08006949 	.word	0x08006949
 8006918:	08006949 	.word	0x08006949
 800691c:	08006937 	.word	0x08006937
 8006920:	08006949 	.word	0x08006949
 8006924:	08006949 	.word	0x08006949
 8006928:	08006949 	.word	0x08006949
 800692c:	08006943 	.word	0x08006943
 8006930:	2300      	movs	r3, #0
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e118      	b.n	8006b68 <UART_SetConfig+0x348>
 8006936:	2302      	movs	r3, #2
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e115      	b.n	8006b68 <UART_SetConfig+0x348>
 800693c:	2304      	movs	r3, #4
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e112      	b.n	8006b68 <UART_SetConfig+0x348>
 8006942:	2308      	movs	r3, #8
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e10f      	b.n	8006b68 <UART_SetConfig+0x348>
 8006948:	2310      	movs	r3, #16
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e10c      	b.n	8006b68 <UART_SetConfig+0x348>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a68      	ldr	r2, [pc, #416]	; (8006af4 <UART_SetConfig+0x2d4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d120      	bne.n	800699a <UART_SetConfig+0x17a>
 8006958:	4b64      	ldr	r3, [pc, #400]	; (8006aec <UART_SetConfig+0x2cc>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006962:	2b30      	cmp	r3, #48	; 0x30
 8006964:	d013      	beq.n	800698e <UART_SetConfig+0x16e>
 8006966:	2b30      	cmp	r3, #48	; 0x30
 8006968:	d814      	bhi.n	8006994 <UART_SetConfig+0x174>
 800696a:	2b20      	cmp	r3, #32
 800696c:	d009      	beq.n	8006982 <UART_SetConfig+0x162>
 800696e:	2b20      	cmp	r3, #32
 8006970:	d810      	bhi.n	8006994 <UART_SetConfig+0x174>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <UART_SetConfig+0x15c>
 8006976:	2b10      	cmp	r3, #16
 8006978:	d006      	beq.n	8006988 <UART_SetConfig+0x168>
 800697a:	e00b      	b.n	8006994 <UART_SetConfig+0x174>
 800697c:	2300      	movs	r3, #0
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e0f2      	b.n	8006b68 <UART_SetConfig+0x348>
 8006982:	2302      	movs	r3, #2
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e0ef      	b.n	8006b68 <UART_SetConfig+0x348>
 8006988:	2304      	movs	r3, #4
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e0ec      	b.n	8006b68 <UART_SetConfig+0x348>
 800698e:	2308      	movs	r3, #8
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e0e9      	b.n	8006b68 <UART_SetConfig+0x348>
 8006994:	2310      	movs	r3, #16
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e0e6      	b.n	8006b68 <UART_SetConfig+0x348>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a56      	ldr	r2, [pc, #344]	; (8006af8 <UART_SetConfig+0x2d8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d120      	bne.n	80069e6 <UART_SetConfig+0x1c6>
 80069a4:	4b51      	ldr	r3, [pc, #324]	; (8006aec <UART_SetConfig+0x2cc>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069ae:	2bc0      	cmp	r3, #192	; 0xc0
 80069b0:	d013      	beq.n	80069da <UART_SetConfig+0x1ba>
 80069b2:	2bc0      	cmp	r3, #192	; 0xc0
 80069b4:	d814      	bhi.n	80069e0 <UART_SetConfig+0x1c0>
 80069b6:	2b80      	cmp	r3, #128	; 0x80
 80069b8:	d009      	beq.n	80069ce <UART_SetConfig+0x1ae>
 80069ba:	2b80      	cmp	r3, #128	; 0x80
 80069bc:	d810      	bhi.n	80069e0 <UART_SetConfig+0x1c0>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <UART_SetConfig+0x1a8>
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d006      	beq.n	80069d4 <UART_SetConfig+0x1b4>
 80069c6:	e00b      	b.n	80069e0 <UART_SetConfig+0x1c0>
 80069c8:	2300      	movs	r3, #0
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e0cc      	b.n	8006b68 <UART_SetConfig+0x348>
 80069ce:	2302      	movs	r3, #2
 80069d0:	77fb      	strb	r3, [r7, #31]
 80069d2:	e0c9      	b.n	8006b68 <UART_SetConfig+0x348>
 80069d4:	2304      	movs	r3, #4
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e0c6      	b.n	8006b68 <UART_SetConfig+0x348>
 80069da:	2308      	movs	r3, #8
 80069dc:	77fb      	strb	r3, [r7, #31]
 80069de:	e0c3      	b.n	8006b68 <UART_SetConfig+0x348>
 80069e0:	2310      	movs	r3, #16
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e0c0      	b.n	8006b68 <UART_SetConfig+0x348>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a44      	ldr	r2, [pc, #272]	; (8006afc <UART_SetConfig+0x2dc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d125      	bne.n	8006a3c <UART_SetConfig+0x21c>
 80069f0:	4b3e      	ldr	r3, [pc, #248]	; (8006aec <UART_SetConfig+0x2cc>)
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069fe:	d017      	beq.n	8006a30 <UART_SetConfig+0x210>
 8006a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a04:	d817      	bhi.n	8006a36 <UART_SetConfig+0x216>
 8006a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0a:	d00b      	beq.n	8006a24 <UART_SetConfig+0x204>
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a10:	d811      	bhi.n	8006a36 <UART_SetConfig+0x216>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <UART_SetConfig+0x1fe>
 8006a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1a:	d006      	beq.n	8006a2a <UART_SetConfig+0x20a>
 8006a1c:	e00b      	b.n	8006a36 <UART_SetConfig+0x216>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e0a1      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a24:	2302      	movs	r3, #2
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e09e      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a2a:	2304      	movs	r3, #4
 8006a2c:	77fb      	strb	r3, [r7, #31]
 8006a2e:	e09b      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a30:	2308      	movs	r3, #8
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e098      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a36:	2310      	movs	r3, #16
 8006a38:	77fb      	strb	r3, [r7, #31]
 8006a3a:	e095      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a2f      	ldr	r2, [pc, #188]	; (8006b00 <UART_SetConfig+0x2e0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d125      	bne.n	8006a92 <UART_SetConfig+0x272>
 8006a46:	4b29      	ldr	r3, [pc, #164]	; (8006aec <UART_SetConfig+0x2cc>)
 8006a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a54:	d017      	beq.n	8006a86 <UART_SetConfig+0x266>
 8006a56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a5a:	d817      	bhi.n	8006a8c <UART_SetConfig+0x26c>
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a60:	d00b      	beq.n	8006a7a <UART_SetConfig+0x25a>
 8006a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a66:	d811      	bhi.n	8006a8c <UART_SetConfig+0x26c>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <UART_SetConfig+0x254>
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a70:	d006      	beq.n	8006a80 <UART_SetConfig+0x260>
 8006a72:	e00b      	b.n	8006a8c <UART_SetConfig+0x26c>
 8006a74:	2301      	movs	r3, #1
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e076      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e073      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a80:	2304      	movs	r3, #4
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e070      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a86:	2308      	movs	r3, #8
 8006a88:	77fb      	strb	r3, [r7, #31]
 8006a8a:	e06d      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	77fb      	strb	r3, [r7, #31]
 8006a90:	e06a      	b.n	8006b68 <UART_SetConfig+0x348>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <UART_SetConfig+0x2e4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d138      	bne.n	8006b0e <UART_SetConfig+0x2ee>
 8006a9c:	4b13      	ldr	r3, [pc, #76]	; (8006aec <UART_SetConfig+0x2cc>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006aa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aaa:	d017      	beq.n	8006adc <UART_SetConfig+0x2bc>
 8006aac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ab0:	d82a      	bhi.n	8006b08 <UART_SetConfig+0x2e8>
 8006ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab6:	d00b      	beq.n	8006ad0 <UART_SetConfig+0x2b0>
 8006ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006abc:	d824      	bhi.n	8006b08 <UART_SetConfig+0x2e8>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <UART_SetConfig+0x2aa>
 8006ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac6:	d006      	beq.n	8006ad6 <UART_SetConfig+0x2b6>
 8006ac8:	e01e      	b.n	8006b08 <UART_SetConfig+0x2e8>
 8006aca:	2300      	movs	r3, #0
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e04b      	b.n	8006b68 <UART_SetConfig+0x348>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e048      	b.n	8006b68 <UART_SetConfig+0x348>
 8006ad6:	2304      	movs	r3, #4
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e045      	b.n	8006b68 <UART_SetConfig+0x348>
 8006adc:	2308      	movs	r3, #8
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e042      	b.n	8006b68 <UART_SetConfig+0x348>
 8006ae2:	bf00      	nop
 8006ae4:	efff69f3 	.word	0xefff69f3
 8006ae8:	40011000 	.word	0x40011000
 8006aec:	40023800 	.word	0x40023800
 8006af0:	40004400 	.word	0x40004400
 8006af4:	40004800 	.word	0x40004800
 8006af8:	40004c00 	.word	0x40004c00
 8006afc:	40005000 	.word	0x40005000
 8006b00:	40011400 	.word	0x40011400
 8006b04:	40007800 	.word	0x40007800
 8006b08:	2310      	movs	r3, #16
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e02c      	b.n	8006b68 <UART_SetConfig+0x348>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a72      	ldr	r2, [pc, #456]	; (8006cdc <UART_SetConfig+0x4bc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d125      	bne.n	8006b64 <UART_SetConfig+0x344>
 8006b18:	4b71      	ldr	r3, [pc, #452]	; (8006ce0 <UART_SetConfig+0x4c0>)
 8006b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b26:	d017      	beq.n	8006b58 <UART_SetConfig+0x338>
 8006b28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b2c:	d817      	bhi.n	8006b5e <UART_SetConfig+0x33e>
 8006b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b32:	d00b      	beq.n	8006b4c <UART_SetConfig+0x32c>
 8006b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b38:	d811      	bhi.n	8006b5e <UART_SetConfig+0x33e>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <UART_SetConfig+0x326>
 8006b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b42:	d006      	beq.n	8006b52 <UART_SetConfig+0x332>
 8006b44:	e00b      	b.n	8006b5e <UART_SetConfig+0x33e>
 8006b46:	2300      	movs	r3, #0
 8006b48:	77fb      	strb	r3, [r7, #31]
 8006b4a:	e00d      	b.n	8006b68 <UART_SetConfig+0x348>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e00a      	b.n	8006b68 <UART_SetConfig+0x348>
 8006b52:	2304      	movs	r3, #4
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e007      	b.n	8006b68 <UART_SetConfig+0x348>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e004      	b.n	8006b68 <UART_SetConfig+0x348>
 8006b5e:	2310      	movs	r3, #16
 8006b60:	77fb      	strb	r3, [r7, #31]
 8006b62:	e001      	b.n	8006b68 <UART_SetConfig+0x348>
 8006b64:	2310      	movs	r3, #16
 8006b66:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b70:	d15b      	bne.n	8006c2a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b72:	7ffb      	ldrb	r3, [r7, #31]
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d828      	bhi.n	8006bca <UART_SetConfig+0x3aa>
 8006b78:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <UART_SetConfig+0x360>)
 8006b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7e:	bf00      	nop
 8006b80:	08006ba5 	.word	0x08006ba5
 8006b84:	08006bad 	.word	0x08006bad
 8006b88:	08006bb5 	.word	0x08006bb5
 8006b8c:	08006bcb 	.word	0x08006bcb
 8006b90:	08006bbb 	.word	0x08006bbb
 8006b94:	08006bcb 	.word	0x08006bcb
 8006b98:	08006bcb 	.word	0x08006bcb
 8006b9c:	08006bcb 	.word	0x08006bcb
 8006ba0:	08006bc3 	.word	0x08006bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba4:	f7fd f946 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8006ba8:	61b8      	str	r0, [r7, #24]
        break;
 8006baa:	e013      	b.n	8006bd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bac:	f7fd f956 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8006bb0:	61b8      	str	r0, [r7, #24]
        break;
 8006bb2:	e00f      	b.n	8006bd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb4:	4b4b      	ldr	r3, [pc, #300]	; (8006ce4 <UART_SetConfig+0x4c4>)
 8006bb6:	61bb      	str	r3, [r7, #24]
        break;
 8006bb8:	e00c      	b.n	8006bd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bba:	f7fd f829 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8006bbe:	61b8      	str	r0, [r7, #24]
        break;
 8006bc0:	e008      	b.n	8006bd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc6:	61bb      	str	r3, [r7, #24]
        break;
 8006bc8:	e004      	b.n	8006bd4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d074      	beq.n	8006cc4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	005a      	lsls	r2, r3, #1
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	441a      	add	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2b0f      	cmp	r3, #15
 8006bf4:	d916      	bls.n	8006c24 <UART_SetConfig+0x404>
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfc:	d212      	bcs.n	8006c24 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f023 030f 	bic.w	r3, r3, #15
 8006c06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	89fb      	ldrh	r3, [r7, #14]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	89fa      	ldrh	r2, [r7, #14]
 8006c20:	60da      	str	r2, [r3, #12]
 8006c22:	e04f      	b.n	8006cc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	77bb      	strb	r3, [r7, #30]
 8006c28:	e04c      	b.n	8006cc4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c2a:	7ffb      	ldrb	r3, [r7, #31]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d828      	bhi.n	8006c82 <UART_SetConfig+0x462>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x418>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c6d 	.word	0x08006c6d
 8006c44:	08006c83 	.word	0x08006c83
 8006c48:	08006c73 	.word	0x08006c73
 8006c4c:	08006c83 	.word	0x08006c83
 8006c50:	08006c83 	.word	0x08006c83
 8006c54:	08006c83 	.word	0x08006c83
 8006c58:	08006c7b 	.word	0x08006c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c5c:	f7fd f8ea 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8006c60:	61b8      	str	r0, [r7, #24]
        break;
 8006c62:	e013      	b.n	8006c8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c64:	f7fd f8fa 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8006c68:	61b8      	str	r0, [r7, #24]
        break;
 8006c6a:	e00f      	b.n	8006c8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ce4 <UART_SetConfig+0x4c4>)
 8006c6e:	61bb      	str	r3, [r7, #24]
        break;
 8006c70:	e00c      	b.n	8006c8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c72:	f7fc ffcd 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8006c76:	61b8      	str	r0, [r7, #24]
        break;
 8006c78:	e008      	b.n	8006c8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7e:	61bb      	str	r3, [r7, #24]
        break;
 8006c80:	e004      	b.n	8006c8c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	77bb      	strb	r3, [r7, #30]
        break;
 8006c8a:	bf00      	nop
    }

    if (pclk != 0U)
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d018      	beq.n	8006cc4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	085a      	lsrs	r2, r3, #1
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	441a      	add	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b0f      	cmp	r3, #15
 8006caa:	d909      	bls.n	8006cc0 <UART_SetConfig+0x4a0>
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb2:	d205      	bcs.n	8006cc0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60da      	str	r2, [r3, #12]
 8006cbe:	e001      	b.n	8006cc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006cd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3720      	adds	r7, #32
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40007c00 	.word	0x40007c00
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	00f42400 	.word	0x00f42400

08006ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01a      	beq.n	8006dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de6:	d10a      	bne.n	8006dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	605a      	str	r2, [r3, #4]
  }
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e3c:	f7fb fc2a 	bl	8002694 <HAL_GetTick>
 8006e40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d10e      	bne.n	8006e6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f831 	bl	8006ec6 <UART_WaitOnFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e027      	b.n	8006ebe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d10e      	bne.n	8006e9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f81b 	bl	8006ec6 <UART_WaitOnFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e011      	b.n	8006ebe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b09c      	sub	sp, #112	; 0x70
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	603b      	str	r3, [r7, #0]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed6:	e0a7      	b.n	8007028 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ede:	f000 80a3 	beq.w	8007028 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee2:	f7fb fbd7 	bl	8002694 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d302      	bcc.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d13f      	bne.n	8006f78 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e6      	bne.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	663b      	str	r3, [r7, #96]	; 0x60
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e068      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d050      	beq.n	8007028 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f94:	d148      	bne.n	8007028 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e6      	bne.n	8006fa0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f023 0301 	bic.w	r3, r3, #1
 8006fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ff2:	623a      	str	r2, [r7, #32]
 8006ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	69f9      	ldr	r1, [r7, #28]
 8006ff8:	6a3a      	ldr	r2, [r7, #32]
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e5      	bne.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e010      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69da      	ldr	r2, [r3, #28]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4013      	ands	r3, r2
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	429a      	cmp	r2, r3
 8007036:	bf0c      	ite	eq
 8007038:	2301      	moveq	r3, #1
 800703a:	2300      	movne	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	429a      	cmp	r2, r3
 8007044:	f43f af48 	beq.w	8006ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3770      	adds	r7, #112	; 0x70
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4d0d      	ldr	r5, [pc, #52]	; (800708c <__libc_init_array+0x38>)
 8007058:	4c0d      	ldr	r4, [pc, #52]	; (8007090 <__libc_init_array+0x3c>)
 800705a:	1b64      	subs	r4, r4, r5
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	2600      	movs	r6, #0
 8007060:	42a6      	cmp	r6, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	4d0b      	ldr	r5, [pc, #44]	; (8007094 <__libc_init_array+0x40>)
 8007066:	4c0c      	ldr	r4, [pc, #48]	; (8007098 <__libc_init_array+0x44>)
 8007068:	f000 f82e 	bl	80070c8 <_init>
 800706c:	1b64      	subs	r4, r4, r5
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	2600      	movs	r6, #0
 8007072:	42a6      	cmp	r6, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f855 3b04 	ldr.w	r3, [r5], #4
 800707c:	4798      	blx	r3
 800707e:	3601      	adds	r6, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f855 3b04 	ldr.w	r3, [r5], #4
 8007086:	4798      	blx	r3
 8007088:	3601      	adds	r6, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	08007100 	.word	0x08007100
 8007090:	08007100 	.word	0x08007100
 8007094:	08007100 	.word	0x08007100
 8007098:	08007104 	.word	0x08007104

0800709c <memcpy>:
 800709c:	440a      	add	r2, r1
 800709e:	4291      	cmp	r1, r2
 80070a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a4:	d100      	bne.n	80070a8 <memcpy+0xc>
 80070a6:	4770      	bx	lr
 80070a8:	b510      	push	{r4, lr}
 80070aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b2:	4291      	cmp	r1, r2
 80070b4:	d1f9      	bne.n	80070aa <memcpy+0xe>
 80070b6:	bd10      	pop	{r4, pc}

080070b8 <memset>:
 80070b8:	4402      	add	r2, r0
 80070ba:	4603      	mov	r3, r0
 80070bc:	4293      	cmp	r3, r2
 80070be:	d100      	bne.n	80070c2 <memset+0xa>
 80070c0:	4770      	bx	lr
 80070c2:	f803 1b01 	strb.w	r1, [r3], #1
 80070c6:	e7f9      	b.n	80070bc <memset+0x4>

080070c8 <_init>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr

080070d4 <_fini>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr
