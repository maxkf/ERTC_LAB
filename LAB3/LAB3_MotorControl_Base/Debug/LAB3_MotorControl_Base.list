
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc0  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed0  08006ed0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed8  08006ed8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  20000014  08006ef4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  08006ef4  00020774  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ad4  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296b  00000000  00000000  00037b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029428  00000000  00000000  0003cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1e4  00000000  00000000  00065fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104671  00000000  00000000  0008019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018480d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000558c  00000000  00000000  00184860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	08006ea0 	.word	0x08006ea0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	08006ea0 	.word	0x08006ea0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 800053c:	b480      	push	{r7}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	607a      	str	r2, [r7, #4]
 8000556:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000558:	2301      	movs	r3, #1
 800055a:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 800055c:	e025      	b.n	80005aa <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d109      	bne.n	800057a <cobsEncode+0x3e>
            FinishBlock(code);
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	7efa      	ldrb	r2, [r7, #27]
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	607a      	str	r2, [r7, #4]
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	2301      	movs	r3, #1
 8000576:	76fb      	strb	r3, [r7, #27]
 8000578:	e014      	b.n	80005a4 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 8000586:	7efb      	ldrb	r3, [r7, #27]
 8000588:	3301      	adds	r3, #1
 800058a:	76fb      	strb	r3, [r7, #27]
 800058c:	7efb      	ldrb	r3, [r7, #27]
 800058e:	2bff      	cmp	r3, #255	; 0xff
 8000590:	d108      	bne.n	80005a4 <cobsEncode+0x68>
                FinishBlock(code);
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	7efa      	ldrb	r2, [r7, #27]
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	607a      	str	r2, [r7, #4]
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	2301      	movs	r3, #1
 80005a2:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3d5      	bcc.n	800055e <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	7efa      	ldrb	r2, [r7, #27]
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	2301      	movs	r3, #1
 80005c2:	76fb      	strb	r3, [r7, #27]
}
 80005c4:	bf00      	nop
 80005c6:	3724      	adds	r7, #36	; 0x24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d01c      	beq.n	800061e <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3321      	adds	r3, #33	; 0x21
 80005e8:	461a      	mov	r2, r3
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	68b8      	ldr	r0, [r7, #8]
 80005ee:	f7ff ffa5 	bl	800053c <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	b29b      	uxth	r3, r3
 8000610:	3302      	adds	r3, #2
 8000612:	b29a      	uxth	r2, r3
 8000614:	2303      	movs	r3, #3
 8000616:	f005 fea7 	bl	8006368 <HAL_UART_Transmit>
 800061a:	4603      	mov	r3, r0
 800061c:	e000      	b.n	8000620 <ertc_dlog_send+0x50>
	}

	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1c59      	adds	r1, r3, #1
 800063a:	2303      	movs	r3, #3
 800063c:	2201      	movs	r2, #1
 800063e:	f005 ff16 	bl	800646e <HAL_UART_Receive>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d112      	bne.n	800066e <ertc_dlog_update+0x46>
		switch (logger->rxbuff[0]) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	2b41      	cmp	r3, #65	; 0x41
 800064e:	d002      	beq.n	8000656 <ertc_dlog_update+0x2e>
 8000650:	2b42      	cmp	r3, #66	; 0x42
 8000652:	d004      	beq.n	800065e <ertc_dlog_update+0x36>
 8000654:	e007      	b.n	8000666 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
				break;
 800065c:	e008      	b.n	8000670 <ertc_dlog_update+0x48>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
				break;
 8000664:	e004      	b.n	8000670 <ertc_dlog_update+0x48>
			default:
				logger->tx_enable = false;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	e000      	b.n	8000670 <ertc_dlog_update+0x48>
		}
	}
 800066e:	bf00      	nop
	return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	0000      	movs	r0, r0
 800067c:	0000      	movs	r0, r0
	...

08000680 <HAL_TIM_PeriodElapsedCallback>:
	float u1, u2;
} data;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	uint32_t TIM3_CurrentCount;
	    int32_t TIM3_DiffCount;
	    static uint32_t TIM3_PreviousCount = 0;

	    TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 8000688:	4b3f      	ldr	r3, [pc, #252]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068e:	613b      	str	r3, [r7, #16]

	    /*  evaluate increment of TIM3 counter from previous count  */
	    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	2b10      	cmp	r3, #16
 800069c:	d112      	bne.n	80006c4 <HAL_TIM_PeriodElapsedCallback+0x44>
	    {
	        /* check for counter underflow */
	        if (TIM3_CurrentCount <= TIM3_PreviousCount)
 800069e:	4b3b      	ldr	r3, [pc, #236]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d805      	bhi.n	80006b4 <HAL_TIM_PeriodElapsedCallback+0x34>
	            TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80006a8:	4b38      	ldr	r3, [pc, #224]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e019      	b.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x68>
	        else
	            TIM3_DiffCount = -((TIM3_ARR_VALUE+1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e011      	b.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x68>
	    }
	    else
	    {
	    /* check for counter overflow */
	        if (TIM3_CurrentCount >= TIM3_PreviousCount)
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d305      	bcc.n	80006da <HAL_TIM_PeriodElapsedCallback+0x5a>
	            TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	e006      	b.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x68>
	        else
	            TIM3_DiffCount = ((TIM3_ARR_VALUE+1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80006e6:	617b      	str	r3, [r7, #20]
	    }

	    TIM3_PreviousCount = TIM3_CurrentCount;
 80006e8:	4a28      	ldr	r2, [pc, #160]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	6013      	str	r3, [r2, #0]

	    float control_signal = PI_controller(TIM3_DiffCount);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	ee07 3a90 	vmov	s15, r3
 80006f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f8:	eeb0 0a67 	vmov.f32	s0, s15
 80006fc:	f000 f858 	bl	80007b0 <PI_controller>
 8000700:	ed87 0a03 	vstr	s0, [r7, #12]

	    // command a motor

	    uint32_t duty;
	    /* calculate duty properly */
	    if (duty <= 0) {
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10c      	bne.n	8000724 <HAL_TIM_PeriodElapsedCallback+0xa4>
	    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty);
	        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);


	        /* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
	    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f240 128f 	movw	r2, #399	; 0x18f
 8000712:	635a      	str	r2, [r3, #52]	; 0x34
	        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, TIM8_ARR_VALUE - duty);
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	68b9      	ldr	r1, [r7, #8]
 800071a:	f240 138f 	movw	r3, #399	; 0x18f
 800071e:	1a5b      	subs	r3, r3, r1
 8000720:	6393      	str	r3, [r2, #56]	; 0x38
 8000722:	e008      	b.n	8000736 <HAL_TIM_PeriodElapsedCallback+0xb6>

	    } else { // rotate backward
	        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
	        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty);
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	4252      	negs	r2, r2
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
	    //command a motor



	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d11b      	bne.n	8000778 <HAL_TIM_PeriodElapsedCallback+0xf8>
	    * 7. calculate the PI signal and set the pwm of the motor properly
	    */


     	/*	Prepare data packet */
		data.w1 = 10;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000744:	601a      	str	r2, [r3, #0]
		data.w2 += 1.085;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000748:	edd3 7a01 	vldr	s15, [r3, #4]
 800074c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000750:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000780 <HAL_TIM_PeriodElapsedCallback+0x100>
 8000754:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000758:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800075e:	edc3 7a01 	vstr	s15, [r3, #4]
		data.u1 = -3.14;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000766:	609a      	str	r2, [r3, #8]
		data.u2 = 0.555683;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800076c:	60da      	str	r2, [r3, #12]

		ertc_dlog_send(&logger, &data, sizeof(data));
 800076e:	2210      	movs	r2, #16
 8000770:	4909      	ldr	r1, [pc, #36]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000774:	f7ff ff2c 	bl	80005d0 <ertc_dlog_send>
	}
}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	f5c28f5c 	.word	0xf5c28f5c
 8000784:	3ff15c28 	.word	0x3ff15c28
 8000788:	2000021c 	.word	0x2000021c
 800078c:	20000768 	.word	0x20000768
 8000790:	2000034c 	.word	0x2000034c
 8000794:	40001000 	.word	0x40001000
 8000798:	20000758 	.word	0x20000758
 800079c:	41200000 	.word	0x41200000
 80007a0:	c048f5c3 	.word	0xc048f5c3
 80007a4:	3f0e413e 	.word	0x3f0e413e
 80007a8:	2000068c 	.word	0x2000068c
 80007ac:	00000000 	.word	0x00000000

080007b0 <PI_controller>:

float Kp = 1;
float KI = 1;


float PI_controller (float error){
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	ed87 0a01 	vstr	s0, [r7, #4]
	float P = Kp * error;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <PI_controller+0x78>)
 80007bc:	edd3 7a00 	vldr	s15, [r3]
 80007c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80007c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007c8:	edc7 7a03 	vstr	s15, [r7, #12]
	static float I = 0;
	I = I + error * KI * TS;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <PI_controller+0x7c>)
 80007ce:	edd3 7a00 	vldr	s15, [r3]
 80007d2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <PI_controller+0x80>)
 80007d8:	ed93 7a00 	vldr	s14, [r3]
 80007dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80007e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007e8:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000820 <PI_controller+0x70>
 80007ec:	ee27 7b05 	vmul.f64	d7, d7, d5
 80007f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <PI_controller+0x7c>)
 80007fa:	edc3 7a00 	vstr	s15, [r3]
	return P + I;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <PI_controller+0x7c>)
 8000800:	ed93 7a00 	vldr	s14, [r3]
 8000804:	edd7 7a03 	vldr	s15, [r7, #12]
 8000808:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800080c:	eeb0 0a67 	vmov.f32	s0, s15
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	f3af 8000 	nop.w
 8000820:	47ae147b 	.word	0x47ae147b
 8000824:	3f847ae1 	.word	0x3f847ae1
 8000828:	20000000 	.word	0x20000000
 800082c:	2000076c 	.word	0x2000076c
 8000830:	20000004 	.word	0x20000004

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f001 fdc7 	bl	80023ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f884 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 fedc 	bl	80015fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000844:	f000 feaa 	bl	800159c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000848:	f000 f8f0 	bl	8000a2c <MX_ADC1_Init>
  MX_I2C1_Init();
 800084c:	f000 f940 	bl	8000ad0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000850:	f000 f97e 	bl	8000b50 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000854:	f000 f9bc 	bl	8000bd0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000858:	f000 f9f8 	bl	8000c4c <MX_TIM1_Init>
  MX_TIM2_Init();
 800085c:	f000 fac6 	bl	8000dec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000860:	f000 fb5e 	bl	8000f20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000864:	f000 fbb2 	bl	8000fcc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000868:	f000 fc06 	bl	8001078 <MX_TIM5_Init>
  MX_TIM8_Init();
 800086c:	f000 fcb4 	bl	80011d8 <MX_TIM8_Init>
  MX_UART4_Init();
 8000870:	f000 fdd4 	bl	800141c <MX_UART4_Init>
  MX_UART5_Init();
 8000874:	f000 fe02 	bl	800147c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000878:	f000 fe30 	bl	80014dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800087c:	f000 fe5e 	bl	800153c <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000880:	f000 fd7c 	bl	800137c <MX_TIM9_Init>
  MX_TIM6_Init();
 8000884:	f000 fc70 	bl	8001168 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  logger.uart_handle = huart3; // for serial
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <main+0xf4>)
 800088a:	4a28      	ldr	r2, [pc, #160]	; (800092c <main+0xf8>)
 800088c:	3344      	adds	r3, #68	; 0x44
 800088e:	4611      	mov	r1, r2
 8000890:	2288      	movs	r2, #136	; 0x88
 8000892:	4618      	mov	r0, r3
 8000894:	f006 faee 	bl	8006e74 <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	4824      	ldr	r0, [pc, #144]	; (8000930 <main+0xfc>)
 800089e:	f002 fb67 	bl	8002f70 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 80008a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a6:	f001 fded 	bl	8002484 <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80008aa:	213c      	movs	r1, #60	; 0x3c
 80008ac:	4821      	ldr	r0, [pc, #132]	; (8000934 <main+0x100>)
 80008ae:	f004 fa31 	bl	8004d14 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80008b2:	213c      	movs	r1, #60	; 0x3c
 80008b4:	4820      	ldr	r0, [pc, #128]	; (8000938 <main+0x104>)
 80008b6:	f004 fa2d 	bl	8004d14 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008ba:	2100      	movs	r1, #0
 80008bc:	481f      	ldr	r0, [pc, #124]	; (800093c <main+0x108>)
 80008be:	f004 f827 	bl	8004910 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008c2:	2104      	movs	r1, #4
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <main+0x108>)
 80008c6:	f004 f823 	bl	8004910 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80008ca:	2108      	movs	r1, #8
 80008cc:	481b      	ldr	r0, [pc, #108]	; (800093c <main+0x108>)
 80008ce:	f004 f81f 	bl	8004910 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80008d2:	210c      	movs	r1, #12
 80008d4:	4819      	ldr	r0, [pc, #100]	; (800093c <main+0x108>)
 80008d6:	f004 f81b 	bl	8004910 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <main+0x10c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2200      	movs	r2, #0
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <main+0x10c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <main+0x10c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2200      	movs	r2, #0
 80008f0:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <main+0x10c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2200      	movs	r2, #0
 80008f8:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80008fa:	2100      	movs	r1, #0
 80008fc:	4810      	ldr	r0, [pc, #64]	; (8000940 <main+0x10c>)
 80008fe:	f004 f807 	bl	8004910 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000902:	2104      	movs	r1, #4
 8000904:	480e      	ldr	r0, [pc, #56]	; (8000940 <main+0x10c>)
 8000906:	f004 f803 	bl	8004910 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800090a:	2108      	movs	r1, #8
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <main+0x10c>)
 800090e:	f003 ffff 	bl	8004910 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000912:	210c      	movs	r1, #12
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <main+0x10c>)
 8000916:	f003 fffb 	bl	8004910 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <main+0x110>)
 800091c:	f003 fec8 	bl	80046b0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 8000920:	4801      	ldr	r0, [pc, #4]	; (8000928 <main+0xf4>)
 8000922:	f7ff fe81 	bl	8000628 <ertc_dlog_update>
 8000926:	e7fb      	b.n	8000920 <main+0xec>
 8000928:	2000068c 	.word	0x2000068c
 800092c:	20000604 	.word	0x20000604
 8000930:	40021000 	.word	0x40021000
 8000934:	2000021c 	.word	0x2000021c
 8000938:	20000268 	.word	0x20000268
 800093c:	20000184 	.word	0x20000184
 8000940:	2000034c 	.word	0x2000034c
 8000944:	20000300 	.word	0x20000300

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	; 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2234      	movs	r2, #52	; 0x34
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f006 fa9a 	bl	8006e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800096c:	f002 fc42 	bl	80031f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000970:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <SystemClock_Config+0xdc>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	4a2b      	ldr	r2, [pc, #172]	; (8000a24 <SystemClock_Config+0xdc>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	; 0x40
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <SystemClock_Config+0xdc>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <SystemClock_Config+0xe0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000990:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <SystemClock_Config+0xe0>)
 8000992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <SystemClock_Config+0xe0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	2302      	movs	r3, #2
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009bc:	2360      	movs	r3, #96	; 0x60
 80009be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fc6f 	bl	80032b4 <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009dc:	f000 ff40 	bl	8001860 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009e0:	f002 fc18 	bl	8003214 <HAL_PWREx_EnableOverDrive>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009ea:	f000 ff39 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ee:	230f      	movs	r3, #15
 80009f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f2:	2302      	movs	r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2103      	movs	r1, #3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 ff00 	bl	8003810 <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a16:	f000 ff23 	bl	8001860 <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3750      	adds	r7, #80	; 0x50
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a40:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <MX_ADC1_Init+0x9c>)
 8000a42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <MX_ADC1_Init+0xa0>)
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000a8e:	f001 fd1d 	bl	80024cc <HAL_ADC_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a98:	f000 fee2 	bl	8001860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_ADC1_Init+0x98>)
 8000aae:	f001 fd51 	bl	8002554 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ab8:	f000 fed2 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000030 	.word	0x20000030
 8000ac8:	40012000 	.word	0x40012000
 8000acc:	0f000001 	.word	0x0f000001

08000ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <MX_I2C1_Init+0x78>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000adc:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <MX_I2C1_Init+0x7c>)
 8000ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0a:	480e      	ldr	r0, [pc, #56]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000b0c:	f002 fa4a 	bl	8002fa4 <HAL_I2C_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b16:	f000 fea3 	bl	8001860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000b1e:	f002 fad1 	bl	80030c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b28:	f000 fe9a 	bl	8001860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_I2C1_Init+0x74>)
 8000b30:	f002 fb13 	bl	800315a <HAL_I2CEx_ConfigDigitalFilter>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b3a:	f000 fe91 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000078 	.word	0x20000078
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	20303e5d 	.word	0x20303e5d

08000b50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_I2C2_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <MX_I2C2_Init+0x7c>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b8c:	f002 fa0a 	bl	8002fa4 <HAL_I2C_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b96:	f000 fe63 	bl	8001860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b9e:	f002 fa91 	bl	80030c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ba8:	f000 fe5a 	bl	8001860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000bb0:	f002 fad3 	bl	800315a <HAL_I2CEx_ConfigDigitalFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fe51 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000cc 	.word	0x200000cc
 8000bc8:	40005800 	.word	0x40005800
 8000bcc:	20303e5d 	.word	0x20303e5d

08000bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <MX_SPI1_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c1e:	2207      	movs	r2, #7
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c30:	f003 fc3c 	bl	80044ac <HAL_SPI_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 fe11 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000120 	.word	0x20000120
 8000c48:	40013000 	.word	0x40013000

08000c4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09a      	sub	sp, #104	; 0x68
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
 8000c7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	222c      	movs	r2, #44	; 0x2c
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f006 f902 	bl	8006e90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c8c:	4b55      	ldr	r3, [pc, #340]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000c8e:	4a56      	ldr	r2, [pc, #344]	; (8000de8 <MX_TIM1_Init+0x19c>)
 8000c90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c92:	4b54      	ldr	r3, [pc, #336]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b52      	ldr	r3, [pc, #328]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000c9e:	4b51      	ldr	r3, [pc, #324]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca4:	4b4f      	ldr	r3, [pc, #316]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000caa:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb0:	4b4c      	ldr	r3, [pc, #304]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb6:	484b      	ldr	r0, [pc, #300]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000cb8:	f003 fca3 	bl	8004602 <HAL_TIM_Base_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000cc2:	f000 fdcd 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cca:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ccc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4844      	ldr	r0, [pc, #272]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000cd4:	f004 fbf6 	bl	80054c4 <HAL_TIM_ConfigClockSource>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cde:	f000 fdbf 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ce2:	4840      	ldr	r0, [pc, #256]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000ce4:	f003 fd5c 	bl	80047a0 <HAL_TIM_OC_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cee:	f000 fdb7 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d02:	4619      	mov	r1, r3
 8000d04:	4837      	ldr	r0, [pc, #220]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000d06:	f005 f9b7 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000d10:	f000 fda6 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000d14:	2350      	movs	r3, #80	; 0x50
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	482a      	ldr	r0, [pc, #168]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000d3a:	f004 f999 	bl	8005070 <HAL_TIM_OC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000d44:	f000 fd8c 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4824      	ldr	r0, [pc, #144]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000d52:	f004 f98d 	bl	8005070 <HAL_TIM_OC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000d5c:	f000 fd80 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d64:	2208      	movs	r2, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	481e      	ldr	r0, [pc, #120]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000d6a:	f004 f981 	bl	8005070 <HAL_TIM_OC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000d74:	f000 fd74 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d7c:	220c      	movs	r2, #12
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000d82:	f004 f975 	bl	8005070 <HAL_TIM_OC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000d8c:	f000 fd68 	bl	8001860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000dc6:	f005 f9e5 	bl	8006194 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000dd0:	f000 fd46 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM1_Init+0x198>)
 8000dd6:	f001 f805 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3768      	adds	r7, #104	; 0x68
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000184 	.word	0x20000184
 8000de8:	40010000 	.word	0x40010000

08000dec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b092      	sub	sp, #72	; 0x48
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e2c:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e34:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e42:	f04f 32ff 	mov.w	r2, #4294967295
 8000e46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e54:	4831      	ldr	r0, [pc, #196]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e56:	f003 fbd4 	bl	8004602 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e60:	f000 fcfe 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482a      	ldr	r0, [pc, #168]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e72:	f004 fb27 	bl	80054c4 <HAL_TIM_ConfigClockSource>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e7c:	f000 fcf0 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e80:	4826      	ldr	r0, [pc, #152]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e82:	f003 fcee 	bl	8004862 <HAL_TIM_PWM_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000e8c:	f000 fce8 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e90:	4822      	ldr	r0, [pc, #136]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000e92:	f003 fe37 	bl	8004b04 <HAL_TIM_IC_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e9c:	f000 fce0 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	481b      	ldr	r0, [pc, #108]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000eb0:	f005 f8e2 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000eba:	f000 fcd1 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ebe:	2360      	movs	r3, #96	; 0x60
 8000ec0:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000ed8:	f004 f9e0 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000ee2:	f000 fcbd 	bl	8001860 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eea:	2301      	movs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2208      	movs	r2, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000efe:	f004 f931 	bl	8005164 <HAL_TIM_IC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000f08:	f000 fcaa 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM2_Init+0x130>)
 8000f0e:	f000 ff69 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3748      	adds	r7, #72	; 0x48
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200001d0 	.word	0x200001d0

08000f20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2224      	movs	r2, #36	; 0x24
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 ffae 	bl	8006e90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_TIM3_Init+0xa4>)
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <MX_TIM3_Init+0xa8>)
 8000f42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_TIM3_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <MX_TIM3_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_TIM3_Init+0xa4>)
 8000f52:	f640 62ff 	movw	r2, #3839	; 0xeff
 8000f56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_TIM3_Init+0xa4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_TIM3_Init+0xa4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f64:	2303      	movs	r3, #3
 8000f66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000f74:	230f      	movs	r3, #15
 8000f76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000f84:	230f      	movs	r3, #15
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_TIM3_Init+0xa4>)
 8000f90:	f003 fe1a 	bl	8004bc8 <HAL_TIM_Encoder_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f9a:	f000 fc61 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <MX_TIM3_Init+0xa4>)
 8000fac:	f005 f864 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000fb6:	f000 fc53 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	3730      	adds	r7, #48	; 0x30
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000021c 	.word	0x2000021c
 8000fc8:	40000400 	.word	0x40000400

08000fcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2224      	movs	r2, #36	; 0x24
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f005 ff58 	bl	8006e90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_TIM4_Init+0xa4>)
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <MX_TIM4_Init+0xa8>)
 8000fee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_TIM4_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_TIM4_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_TIM4_Init+0xa4>)
 8000ffe:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001002:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_TIM4_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_TIM4_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001010:	2303      	movs	r3, #3
 8001012:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001020:	230f      	movs	r3, #15
 8001022:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001030:	230f      	movs	r3, #15
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_TIM4_Init+0xa4>)
 800103c:	f003 fdc4 	bl	8004bc8 <HAL_TIM_Encoder_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001046:	f000 fc0b 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_TIM4_Init+0xa4>)
 8001058:	f005 f80e 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001062:	f000 fbfd 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	; 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000268 	.word	0x20000268
 8001074:	40000800 	.word	0x40000800

08001078 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010ac:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <MX_TIM5_Init+0xec>)
 80010ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010be:	f04f 32ff 	mov.w	r2, #4294967295
 80010c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010d0:	4823      	ldr	r0, [pc, #140]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010d2:	f003 fa96 	bl	8004602 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80010dc:	f000 fbc0 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010ee:	f004 f9e9 	bl	80054c4 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80010f8:	f000 fbb2 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010fe:	f003 fbb0 	bl	8004862 <HAL_TIM_PWM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001108:	f000 fbaa 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_TIM5_Init+0xe8>)
 800111c:	f004 ffac 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001126:	f000 fb9b 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_TIM5_Init+0xe8>)
 8001142:	f004 f8ab 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800114c:	f000 fb88 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <MX_TIM5_Init+0xe8>)
 8001152:	f000 fe47 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 8001156:	bf00      	nop
 8001158:	3738      	adds	r7, #56	; 0x38
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200002b4 	.word	0x200002b4
 8001164:	40000c00 	.word	0x40000c00

08001168 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_TIM6_Init+0x68>)
 800117a:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <MX_TIM6_Init+0x6c>)
 800117c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_TIM6_Init+0x68>)
 8001180:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001184:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_TIM6_Init+0x68>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_TIM6_Init+0x68>)
 800118e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001192:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_TIM6_Init+0x68>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_TIM6_Init+0x68>)
 800119c:	f003 fa31 	bl	8004602 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011a6:	f000 fb5b 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_TIM6_Init+0x68>)
 80011b8:	f004 ff5e 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80011c2:	f000 fb4d 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000300 	.word	0x20000300
 80011d4:	40001000 	.word	0x40001000

080011d8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09a      	sub	sp, #104	; 0x68
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	222c      	movs	r2, #44	; 0x2c
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f005 fe3c 	bl	8006e90 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001218:	4b56      	ldr	r3, [pc, #344]	; (8001374 <MX_TIM8_Init+0x19c>)
 800121a:	4a57      	ldr	r2, [pc, #348]	; (8001378 <MX_TIM8_Init+0x1a0>)
 800121c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 800121e:	4b55      	ldr	r3, [pc, #340]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001220:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001224:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 800122c:	4b51      	ldr	r3, [pc, #324]	; (8001374 <MX_TIM8_Init+0x19c>)
 800122e:	f240 128f 	movw	r2, #399	; 0x18f
 8001232:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800123a:	4b4e      	ldr	r3, [pc, #312]	; (8001374 <MX_TIM8_Init+0x19c>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001246:	484b      	ldr	r0, [pc, #300]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001248:	f003 f9db 	bl	8004602 <HAL_TIM_Base_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001252:	f000 fb05 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800125c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001260:	4619      	mov	r1, r3
 8001262:	4844      	ldr	r0, [pc, #272]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001264:	f004 f92e 	bl	80054c4 <HAL_TIM_ConfigClockSource>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800126e:	f000 faf7 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001272:	4840      	ldr	r0, [pc, #256]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001274:	f003 faf5 	bl	8004862 <HAL_TIM_PWM_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800127e:	f000 faef 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800128e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001292:	4619      	mov	r1, r3
 8001294:	4837      	ldr	r0, [pc, #220]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001296:	f004 feef 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80012a0:	f000 fade 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a4:	2360      	movs	r3, #96	; 0x60
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	482a      	ldr	r0, [pc, #168]	; (8001374 <MX_TIM8_Init+0x19c>)
 80012ca:	f003 ffe7 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80012d4:	f000 fac4 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012dc:	2204      	movs	r2, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4824      	ldr	r0, [pc, #144]	; (8001374 <MX_TIM8_Init+0x19c>)
 80012e2:	f003 ffdb 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80012ec:	f000 fab8 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f4:	2208      	movs	r2, #8
 80012f6:	4619      	mov	r1, r3
 80012f8:	481e      	ldr	r0, [pc, #120]	; (8001374 <MX_TIM8_Init+0x19c>)
 80012fa:	f003 ffcf 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001304:	f000 faac 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800130c:	220c      	movs	r2, #12
 800130e:	4619      	mov	r1, r3
 8001310:	4818      	ldr	r0, [pc, #96]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001312:	f003 ffc3 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 800131c:	f000 faa0 	bl	8001860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001338:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001356:	f004 ff1d 	bl	8006194 <HAL_TIMEx_ConfigBreakDeadTime>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001360:	f000 fa7e 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM8_Init+0x19c>)
 8001366:	f000 fd3d 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3768      	adds	r7, #104	; 0x68
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000034c 	.word	0x2000034c
 8001378:	40010400 	.word	0x40010400

0800137c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <MX_TIM9_Init+0x98>)
 8001396:	4a20      	ldr	r2, [pc, #128]	; (8001418 <MX_TIM9_Init+0x9c>)
 8001398:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_TIM9_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_TIM9_Init+0x98>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_TIM9_Init+0x98>)
 80013a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ac:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_TIM9_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_TIM9_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80013ba:	4816      	ldr	r0, [pc, #88]	; (8001414 <MX_TIM9_Init+0x98>)
 80013bc:	f003 fa51 	bl	8004862 <HAL_TIM_PWM_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80013c6:	f000 fa4b 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	2360      	movs	r3, #96	; 0x60
 80013cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <MX_TIM9_Init+0x98>)
 80013e2:	f003 ff5b 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80013ec:	f000 fa38 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2204      	movs	r2, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM9_Init+0x98>)
 80013f8:	f003 ff50 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001402:	f000 fa2d 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001406:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM9_Init+0x98>)
 8001408:	f000 fcec 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000398 	.word	0x20000398
 8001418:	40014000 	.word	0x40014000

0800141c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_UART4_Init+0x58>)
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <MX_UART4_Init+0x5c>)
 8001424:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_UART4_Init+0x58>)
 8001428:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800142c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_UART4_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_UART4_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_UART4_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_UART4_Init+0x58>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_UART4_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_UART4_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_UART4_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_UART4_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_UART4_Init+0x58>)
 8001460:	f004 ff34 	bl	80062cc <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 f9f9 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200003e4 	.word	0x200003e4
 8001478:	40004c00 	.word	0x40004c00

0800147c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_UART5_Init+0x58>)
 8001482:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <MX_UART5_Init+0x5c>)
 8001484:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_UART5_Init+0x58>)
 8001488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800148c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_UART5_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_UART5_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_UART5_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_UART5_Init+0x58>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_UART5_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_UART5_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_UART5_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_UART5_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_UART5_Init+0x58>)
 80014c0:	f004 ff04 	bl	80062cc <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80014ca:	f000 f9c9 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000046c 	.word	0x2000046c
 80014d8:	40005000 	.word	0x40005000

080014dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <MX_USART1_UART_Init+0x5c>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART1_UART_Init+0x58>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART1_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART1_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART1_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART1_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART1_UART_Init+0x58>)
 8001520:	f004 fed4 	bl	80062cc <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800152a:	f000 f999 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200004f4 	.word	0x200004f4
 8001538:	40011000 	.word	0x40011000

0800153c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_USART2_UART_Init+0x54>)
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_USART2_UART_Init+0x54>)
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <MX_USART2_UART_Init+0x5c>)
 800154a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_USART2_UART_Init+0x54>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_USART2_UART_Init+0x54>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <MX_USART2_UART_Init+0x54>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_USART2_UART_Init+0x54>)
 8001560:	220c      	movs	r2, #12
 8001562:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <MX_USART2_UART_Init+0x54>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_USART2_UART_Init+0x54>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_USART2_UART_Init+0x54>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_USART2_UART_Init+0x54>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_USART2_UART_Init+0x54>)
 800157e:	f004 fea5 	bl	80062cc <HAL_UART_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001588:	f000 f96a 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000057c 	.word	0x2000057c
 8001594:	40004400 	.word	0x40004400
 8001598:	000f4240 	.word	0x000f4240

0800159c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <MX_USART3_UART_Init+0x5c>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART3_UART_Init+0x58>)
 80015e0:	f004 fe74 	bl	80062cc <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015ea:	f000 f939 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000604 	.word	0x20000604
 80015f8:	40004800 	.word	0x40004800

080015fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001612:	4b8c      	ldr	r3, [pc, #560]	; (8001844 <MX_GPIO_Init+0x248>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a8b      	ldr	r2, [pc, #556]	; (8001844 <MX_GPIO_Init+0x248>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b89      	ldr	r3, [pc, #548]	; (8001844 <MX_GPIO_Init+0x248>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	4b86      	ldr	r3, [pc, #536]	; (8001844 <MX_GPIO_Init+0x248>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a85      	ldr	r2, [pc, #532]	; (8001844 <MX_GPIO_Init+0x248>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b83      	ldr	r3, [pc, #524]	; (8001844 <MX_GPIO_Init+0x248>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	4b80      	ldr	r3, [pc, #512]	; (8001844 <MX_GPIO_Init+0x248>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a7f      	ldr	r2, [pc, #508]	; (8001844 <MX_GPIO_Init+0x248>)
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b7d      	ldr	r3, [pc, #500]	; (8001844 <MX_GPIO_Init+0x248>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165a:	4b7a      	ldr	r3, [pc, #488]	; (8001844 <MX_GPIO_Init+0x248>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a79      	ldr	r2, [pc, #484]	; (8001844 <MX_GPIO_Init+0x248>)
 8001660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b77      	ldr	r3, [pc, #476]	; (8001844 <MX_GPIO_Init+0x248>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b74      	ldr	r3, [pc, #464]	; (8001844 <MX_GPIO_Init+0x248>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a73      	ldr	r2, [pc, #460]	; (8001844 <MX_GPIO_Init+0x248>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b71      	ldr	r3, [pc, #452]	; (8001844 <MX_GPIO_Init+0x248>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b6e      	ldr	r3, [pc, #440]	; (8001844 <MX_GPIO_Init+0x248>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a6d      	ldr	r2, [pc, #436]	; (8001844 <MX_GPIO_Init+0x248>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b6b      	ldr	r3, [pc, #428]	; (8001844 <MX_GPIO_Init+0x248>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a2:	4b68      	ldr	r3, [pc, #416]	; (8001844 <MX_GPIO_Init+0x248>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a67      	ldr	r2, [pc, #412]	; (8001844 <MX_GPIO_Init+0x248>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b65      	ldr	r3, [pc, #404]	; (8001844 <MX_GPIO_Init+0x248>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ba:	4b62      	ldr	r3, [pc, #392]	; (8001844 <MX_GPIO_Init+0x248>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a61      	ldr	r2, [pc, #388]	; (8001844 <MX_GPIO_Init+0x248>)
 80016c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <MX_GPIO_Init+0x248>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2118      	movs	r1, #24
 80016d6:	485c      	ldr	r0, [pc, #368]	; (8001848 <MX_GPIO_Init+0x24c>)
 80016d8:	f001 fc4a 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f244 0181 	movw	r1, #16513	; 0x4081
 80016e2:	485a      	ldr	r0, [pc, #360]	; (800184c <MX_GPIO_Init+0x250>)
 80016e4:	f001 fc44 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2140      	movs	r1, #64	; 0x40
 80016ec:	4858      	ldr	r0, [pc, #352]	; (8001850 <MX_GPIO_Init+0x254>)
 80016ee:	f001 fc3f 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 80016f2:	2318      	movs	r3, #24
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	484f      	ldr	r0, [pc, #316]	; (8001848 <MX_GPIO_Init+0x24c>)
 800170a:	f001 fa85 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 800170e:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001714:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	484b      	ldr	r0, [pc, #300]	; (8001854 <MX_GPIO_Init+0x258>)
 8001726:	f001 fa77 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800172a:	2332      	movs	r3, #50	; 0x32
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800173a:	230b      	movs	r3, #11
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4844      	ldr	r0, [pc, #272]	; (8001858 <MX_GPIO_Init+0x25c>)
 8001746:	f001 fa67 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800174a:	2386      	movs	r3, #134	; 0x86
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800175a:	230b      	movs	r3, #11
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	483d      	ldr	r0, [pc, #244]	; (800185c <MX_GPIO_Init+0x260>)
 8001766:	f001 fa57 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800176a:	f244 0381 	movw	r3, #16513	; 0x4081
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4832      	ldr	r0, [pc, #200]	; (800184c <MX_GPIO_Init+0x250>)
 8001784:	f001 fa48 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800179a:	230b      	movs	r3, #11
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	4829      	ldr	r0, [pc, #164]	; (800184c <MX_GPIO_Init+0x250>)
 80017a6:	f001 fa37 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017aa:	2340      	movs	r3, #64	; 0x40
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017be:	4619      	mov	r1, r3
 80017c0:	4823      	ldr	r0, [pc, #140]	; (8001850 <MX_GPIO_Init+0x254>)
 80017c2:	f001 fa29 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	481d      	ldr	r0, [pc, #116]	; (8001850 <MX_GPIO_Init+0x254>)
 80017da:	f001 fa1d 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017de:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017f0:	230a      	movs	r3, #10
 80017f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f8:	4619      	mov	r1, r3
 80017fa:	4818      	ldr	r0, [pc, #96]	; (800185c <MX_GPIO_Init+0x260>)
 80017fc:	f001 fa0c 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <MX_GPIO_Init+0x260>)
 8001816:	f001 f9ff 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800181a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182c:	230b      	movs	r3, #11
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <MX_GPIO_Init+0x254>)
 8001838:	f001 f9ee 	bl	8002c18 <HAL_GPIO_Init>

}
 800183c:	bf00      	nop
 800183e:	3738      	adds	r7, #56	; 0x38
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	40021000 	.word	0x40021000
 800184c:	40020400 	.word	0x40020400
 8001850:	40021800 	.word	0x40021800
 8001854:	40021400 	.word	0x40021400
 8001858:	40020800 	.word	0x40020800
 800185c:	40020000 	.word	0x40020000

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x44>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_MspInit+0x44>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_MspInit+0x44>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x44>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x44>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x44>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a15      	ldr	r2, [pc, #84]	; (8001928 <HAL_ADC_MspInit+0x74>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d123      	bne.n	800191e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_ADC_MspInit+0x78>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a14      	ldr	r2, [pc, #80]	; (800192c <HAL_ADC_MspInit+0x78>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_ADC_MspInit+0x78>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_ADC_MspInit+0x78>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_ADC_MspInit+0x78>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_ADC_MspInit+0x78>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001906:	2308      	movs	r3, #8
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190a:	2303      	movs	r3, #3
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_ADC_MspInit+0x7c>)
 800191a:	f001 f97d 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40012000 	.word	0x40012000
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0b0      	sub	sp, #192	; 0xc0
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	2290      	movs	r2, #144	; 0x90
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f005 fa9b 	bl	8006e90 <memset>
  if(hi2c->Instance==I2C1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a44      	ldr	r2, [pc, #272]	; (8001a70 <HAL_I2C_MspInit+0x13c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d13e      	bne.n	80019e2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001968:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4618      	mov	r0, r3
 8001976:	f002 f971 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001980:	f7ff ff6e 	bl	8001860 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4a3a      	ldr	r2, [pc, #232]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	6313      	str	r3, [r2, #48]	; 0x30
 8001990:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800199c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a4:	2312      	movs	r3, #18
 80019a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b6:	2304      	movs	r3, #4
 80019b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019c0:	4619      	mov	r1, r3
 80019c2:	482d      	ldr	r0, [pc, #180]	; (8001a78 <HAL_I2C_MspInit+0x144>)
 80019c4:	f001 f928 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 80019ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019e0:	e041      	b.n	8001a66 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a25      	ldr	r2, [pc, #148]	; (8001a7c <HAL_I2C_MspInit+0x148>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d13c      	bne.n	8001a66 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 f92d 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001a08:	f7ff ff2a 	bl	8001860 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 8001a12:	f043 0320 	orr.w	r3, r3, #32
 8001a16:	6313      	str	r3, [r2, #48]	; 0x30
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a24:	2303      	movs	r3, #3
 8001a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2a:	2312      	movs	r3, #18
 8001a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a46:	4619      	mov	r1, r3
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <HAL_I2C_MspInit+0x14c>)
 8001a4a:	f001 f8e5 	bl	8002c18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 8001a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_I2C_MspInit+0x140>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
}
 8001a66:	bf00      	nop
 8001a68:	37c0      	adds	r7, #192	; 0xc0
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40005400 	.word	0x40005400
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40005800 	.word	0x40005800
 8001a80:	40021400 	.word	0x40021400

08001a84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d160      	bne.n	8001b68 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aa6:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b06:	2320      	movs	r3, #32
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b16:	2305      	movs	r3, #5
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4815      	ldr	r0, [pc, #84]	; (8001b78 <HAL_SPI_MspInit+0xf4>)
 8001b22:	f001 f879 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b36:	2305      	movs	r3, #5
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480e      	ldr	r0, [pc, #56]	; (8001b7c <HAL_SPI_MspInit+0xf8>)
 8001b42:	f001 f869 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b58:	2305      	movs	r3, #5
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	4807      	ldr	r0, [pc, #28]	; (8001b80 <HAL_SPI_MspInit+0xfc>)
 8001b64:	f001 f858 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3730      	adds	r7, #48	; 0x30
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40013000 	.word	0x40013000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021800 	.word	0x40021800

08001b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a3f      	ldr	r2, [pc, #252]	; (8001ca0 <HAL_TIM_Base_MspInit+0x11c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a3e      	ldr	r2, [pc, #248]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001bbe:	e06b      	b.n	8001c98 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc8:	d129      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a35      	ldr	r2, [pc, #212]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	4824      	ldr	r0, [pc, #144]	; (8001ca8 <HAL_TIM_Base_MspInit+0x124>)
 8001c18:	f000 fffe 	bl	8002c18 <HAL_GPIO_Init>
}
 8001c1c:	e03c      	b.n	8001c98 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_TIM_Base_MspInit+0x128>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10c      	bne.n	8001c42 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	6413      	str	r3, [r2, #64]	; 0x40
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]
}
 8001c40:	e02a      	b.n	8001c98 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <HAL_TIM_Base_MspInit+0x12c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d114      	bne.n	8001c76 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2101      	movs	r1, #1
 8001c68:	2036      	movs	r0, #54	; 0x36
 8001c6a:	f000 ff9e 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c6e:	2036      	movs	r0, #54	; 0x36
 8001c70:	f000 ffb7 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 8001c74:	e010      	b.n	8001c98 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_TIM_Base_MspInit+0x130>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d10b      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_TIM_Base_MspInit+0x120>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3738      	adds	r7, #56	; 0x38
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40000c00 	.word	0x40000c00
 8001cb0:	40001000 	.word	0x40001000
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	; 0x30
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d128      	bne.n	8001d2c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cda:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a2d      	ldr	r2, [pc, #180]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a27      	ldr	r2, [pc, #156]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001d0a:	2330      	movs	r3, #48	; 0x30
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	481c      	ldr	r0, [pc, #112]	; (8001d98 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d26:	f000 ff77 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d2a:	e02d      	b.n	8001d88 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xe4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d128      	bne.n	8001d88 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001d66:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	4807      	ldr	r0, [pc, #28]	; (8001da0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d84:	f000 ff48 	bl	8002c18 <HAL_GPIO_Init>
}
 8001d88:	bf00      	nop
 8001d8a:	3730      	adds	r7, #48	; 0x30
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40000400 	.word	0x40000400
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40000800 	.word	0x40000800
 8001da0:	40020c00 	.word	0x40020c00

08001da4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_TIM_PWM_MspInit+0x38>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10b      	bne.n	8001dce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40014000 	.word	0x40014000
 8001de0:	40023800 	.word	0x40023800

08001de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a56      	ldr	r2, [pc, #344]	; (8001f5c <HAL_TIM_MspPostInit+0x178>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d11d      	bne.n	8001e42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e06:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a55      	ldr	r2, [pc, #340]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001e0c:	f043 0310 	orr.w	r3, r3, #16
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001e1e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	484a      	ldr	r0, [pc, #296]	; (8001f64 <HAL_TIM_MspPostInit+0x180>)
 8001e3c:	f000 feec 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001e40:	e088      	b.n	8001f54 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4a:	d11d      	bne.n	8001e88 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a43      	ldr	r2, [pc, #268]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4839      	ldr	r0, [pc, #228]	; (8001f68 <HAL_TIM_MspPostInit+0x184>)
 8001e82:	f000 fec9 	bl	8002c18 <HAL_GPIO_Init>
}
 8001e86:	e065      	b.n	8001f54 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a37      	ldr	r2, [pc, #220]	; (8001f6c <HAL_TIM_MspPostInit+0x188>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d11c      	bne.n	8001ecc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a32      	ldr	r2, [pc, #200]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4828      	ldr	r0, [pc, #160]	; (8001f68 <HAL_TIM_MspPostInit+0x184>)
 8001ec6:	f000 fea7 	bl	8002c18 <HAL_GPIO_Init>
}
 8001eca:	e043      	b.n	8001f54 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_TIM_MspPostInit+0x18c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d11d      	bne.n	8001f12 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8001eee:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f00:	2303      	movs	r3, #3
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	481a      	ldr	r0, [pc, #104]	; (8001f74 <HAL_TIM_MspPostInit+0x190>)
 8001f0c:	f000 fe84 	bl	8002c18 <HAL_GPIO_Init>
}
 8001f10:	e020      	b.n	8001f54 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <HAL_TIM_MspPostInit+0x194>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d11b      	bne.n	8001f54 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	6313      	str	r3, [r2, #48]	; 0x30
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_TIM_MspPostInit+0x17c>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8001f34:	2360      	movs	r3, #96	; 0x60
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f44:	2303      	movs	r3, #3
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <HAL_TIM_MspPostInit+0x180>)
 8001f50:	f000 fe62 	bl	8002c18 <HAL_GPIO_Init>
}
 8001f54:	bf00      	nop
 8001f56:	3730      	adds	r7, #48	; 0x30
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40000c00 	.word	0x40000c00
 8001f70:	40010400 	.word	0x40010400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40014000 	.word	0x40014000

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0b6      	sub	sp, #216	; 0xd8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f98:	2290      	movs	r2, #144	; 0x90
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 ff77 	bl	8006e90 <memset>
  if(huart->Instance==UART4)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4aa0      	ldr	r2, [pc, #640]	; (8002228 <HAL_UART_MspInit+0x2ac>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d13e      	bne.n	800202a <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 fe4d 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001fc8:	f7ff fc4a 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fcc:	4b97      	ldr	r3, [pc, #604]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a96      	ldr	r2, [pc, #600]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8001fd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b94      	ldr	r3, [pc, #592]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe4:	4b91      	ldr	r3, [pc, #580]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4a90      	ldr	r2, [pc, #576]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff0:	4b8e      	ldr	r3, [pc, #568]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8001ffc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002016:	2308      	movs	r3, #8
 8002018:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002020:	4619      	mov	r1, r3
 8002022:	4883      	ldr	r0, [pc, #524]	; (8002230 <HAL_UART_MspInit+0x2b4>)
 8002024:	f000 fdf8 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002028:	e151      	b.n	80022ce <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a81      	ldr	r2, [pc, #516]	; (8002234 <HAL_UART_MspInit+0x2b8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d160      	bne.n	80020f6 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002040:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002044:	4618      	mov	r0, r3
 8002046:	f001 fe09 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002050:	f7ff fc06 	bl	8001860 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002054:	4b75      	ldr	r3, [pc, #468]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a74      	ldr	r2, [pc, #464]	; (800222c <HAL_UART_MspInit+0x2b0>)
 800205a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800205e:	6413      	str	r3, [r2, #64]	; 0x40
 8002060:	4b72      	ldr	r3, [pc, #456]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <HAL_UART_MspInit+0x2b0>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a6e      	ldr	r2, [pc, #440]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b6c      	ldr	r3, [pc, #432]	; (800222c <HAL_UART_MspInit+0x2b0>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002084:	4b69      	ldr	r3, [pc, #420]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	4a68      	ldr	r2, [pc, #416]	; (800222c <HAL_UART_MspInit+0x2b0>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6313      	str	r3, [r2, #48]	; 0x30
 8002090:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	623b      	str	r3, [r7, #32]
 800209a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800209c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020b6:	2308      	movs	r3, #8
 80020b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020c0:	4619      	mov	r1, r3
 80020c2:	485d      	ldr	r0, [pc, #372]	; (8002238 <HAL_UART_MspInit+0x2bc>)
 80020c4:	f000 fda8 	bl	8002c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020e2:	2308      	movs	r3, #8
 80020e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4850      	ldr	r0, [pc, #320]	; (8002230 <HAL_UART_MspInit+0x2b4>)
 80020f0:	f000 fd92 	bl	8002c18 <HAL_GPIO_Init>
}
 80020f4:	e0eb      	b.n	80022ce <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a50      	ldr	r2, [pc, #320]	; (800223c <HAL_UART_MspInit+0x2c0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d151      	bne.n	80021a4 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002100:	2340      	movs	r3, #64	; 0x40
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002104:	2300      	movs	r3, #0
 8002106:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002108:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800210c:	4618      	mov	r0, r3
 800210e:	f001 fda5 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002118:	f7ff fba2 	bl	8001860 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800211c:	4b43      	ldr	r3, [pc, #268]	; (800222c <HAL_UART_MspInit+0x2b0>)
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	4a42      	ldr	r2, [pc, #264]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8002122:	f043 0310 	orr.w	r3, r3, #16
 8002126:	6453      	str	r3, [r2, #68]	; 0x44
 8002128:	4b40      	ldr	r3, [pc, #256]	; (800222c <HAL_UART_MspInit+0x2b0>)
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	4a3c      	ldr	r2, [pc, #240]	; (800222c <HAL_UART_MspInit+0x2b0>)
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	6313      	str	r3, [r2, #48]	; 0x30
 8002140:	4b3a      	ldr	r3, [pc, #232]	; (800222c <HAL_UART_MspInit+0x2b0>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800214c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002150:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002166:	2304      	movs	r3, #4
 8002168:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002170:	4619      	mov	r1, r3
 8002172:	4831      	ldr	r0, [pc, #196]	; (8002238 <HAL_UART_MspInit+0x2bc>)
 8002174:	f000 fd50 	bl	8002c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002178:	2340      	movs	r3, #64	; 0x40
 800217a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002190:	2307      	movs	r3, #7
 8002192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800219a:	4619      	mov	r1, r3
 800219c:	4826      	ldr	r0, [pc, #152]	; (8002238 <HAL_UART_MspInit+0x2bc>)
 800219e:	f000 fd3b 	bl	8002c18 <HAL_GPIO_Init>
}
 80021a2:	e094      	b.n	80022ce <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <HAL_UART_MspInit+0x2c4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d14c      	bne.n	8002248 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fd4e 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_UART_MspInit+0x24e>
      Error_Handler();
 80021c6:	f7ff fb4b 	bl	8001860 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_UART_MspInit+0x2b0>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a17      	ldr	r2, [pc, #92]	; (800222c <HAL_UART_MspInit+0x2b0>)
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_UART_MspInit+0x2b0>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_UART_MspInit+0x2b0>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_UART_MspInit+0x2b0>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <HAL_UART_MspInit+0x2b0>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021fa:	2360      	movs	r3, #96	; 0x60
 80021fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002212:	2307      	movs	r3, #7
 8002214:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002218:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800221c:	4619      	mov	r1, r3
 800221e:	4809      	ldr	r0, [pc, #36]	; (8002244 <HAL_UART_MspInit+0x2c8>)
 8002220:	f000 fcfa 	bl	8002c18 <HAL_GPIO_Init>
}
 8002224:	e053      	b.n	80022ce <HAL_UART_MspInit+0x352>
 8002226:	bf00      	nop
 8002228:	40004c00 	.word	0x40004c00
 800222c:	40023800 	.word	0x40023800
 8002230:	40020800 	.word	0x40020800
 8002234:	40005000 	.word	0x40005000
 8002238:	40020400 	.word	0x40020400
 800223c:	40011000 	.word	0x40011000
 8002240:	40004400 	.word	0x40004400
 8002244:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_UART_MspInit+0x35c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d13d      	bne.n	80022ce <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002262:	4618      	mov	r0, r3
 8002264:	f001 fcfa 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800226e:	f7ff faf7 	bl	8001860 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_UART_MspInit+0x360>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a19      	ldr	r2, [pc, #100]	; (80022dc <HAL_UART_MspInit+0x360>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_UART_MspInit+0x360>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_UART_MspInit+0x360>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a13      	ldr	r2, [pc, #76]	; (80022dc <HAL_UART_MspInit+0x360>)
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_UART_MspInit+0x360>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022bc:	2307      	movs	r3, #7
 80022be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <HAL_UART_MspInit+0x364>)
 80022ca:	f000 fca5 	bl	8002c18 <HAL_GPIO_Init>
}
 80022ce:	bf00      	nop
 80022d0:	37d8      	adds	r7, #216	; 0xd8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40004800 	.word	0x40004800
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020c00 	.word	0x40020c00

080022e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <NMI_Handler+0x4>

080022ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <MemManage_Handler+0x4>

080022f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <BusFault_Handler+0x4>

080022fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <UsageFault_Handler+0x4>

08002302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002330:	f000 f888 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <TIM6_DAC_IRQHandler+0x10>)
 800233e:	f002 fd77 	bl	8004e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000300 	.word	0x20000300

0800234c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <SystemInit+0x28>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	4a07      	ldr	r2, [pc, #28]	; (8002374 <SystemInit+0x28>)
 8002358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800235c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <SystemInit+0x28>)
 8002362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002366:	609a      	str	r2, [r3, #8]
#endif
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800237c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800237e:	e003      	b.n	8002388 <LoopCopyDataInit>

08002380 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002382:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002384:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002386:	3104      	adds	r1, #4

08002388 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002388:	480b      	ldr	r0, [pc, #44]	; (80023b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800238c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800238e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002390:	d3f6      	bcc.n	8002380 <CopyDataInit>
  ldr  r2, =_sbss
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002394:	e002      	b.n	800239c <LoopFillZerobss>

08002396 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002396:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002398:	f842 3b04 	str.w	r3, [r2], #4

0800239c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800239e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023a0:	d3f9      	bcc.n	8002396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023a2:	f7ff ffd3 	bl	800234c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a6:	f004 fd41 	bl	8006e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023aa:	f7fe fa43 	bl	8000834 <main>
  bx  lr    
 80023ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80023b4:	08006ee0 	.word	0x08006ee0
  ldr  r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023bc:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80023c0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80023c4:	20000774 	.word	0x20000774

080023c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC_IRQHandler>

080023ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ce:	2003      	movs	r0, #3
 80023d0:	f000 fbe0 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f000 f805 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023da:	f7ff fa47 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x54>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fbfb 	bl	8002bfe <HAL_SYSTICK_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00e      	b.n	8002430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d80a      	bhi.n	800242e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 fbc3 	bl	8002baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_InitTick+0x5c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000008 	.word	0x20000008
 800243c:	20000010 	.word	0x20000010
 8002440:	2000000c 	.word	0x2000000c

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000010 	.word	0x20000010
 8002468:	20000770 	.word	0x20000770

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000770 	.word	0x20000770

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff ffee 	bl	800246c <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffde 	bl	800246c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000010 	.word	0x20000010

080024cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e031      	b.n	8002546 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff f9e2 	bl	80018b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_ADC_Init+0x84>)
 8002510:	4013      	ands	r3, r2
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f970 	bl	8002800 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	f043 0201 	orr.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
 8002536:	e001      	b.n	800253c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	ffffeefd 	.word	0xffffeefd

08002554 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x1c>
 800256c:	2302      	movs	r3, #2
 800256e:	e136      	b.n	80027de <HAL_ADC_ConfigChannel+0x28a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b09      	cmp	r3, #9
 800257e:	d93a      	bls.n	80025f6 <HAL_ADC_ConfigChannel+0xa2>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002588:	d035      	beq.n	80025f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68d9      	ldr	r1, [r3, #12]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	3b1e      	subs	r3, #30
 80025a0:	2207      	movs	r2, #7
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	400a      	ands	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a8d      	ldr	r2, [pc, #564]	; (80027ec <HAL_ADC_ConfigChannel+0x298>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10a      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68d9      	ldr	r1, [r3, #12]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	061a      	lsls	r2, r3, #24
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ce:	e035      	b.n	800263c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68d9      	ldr	r1, [r3, #12]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4403      	add	r3, r0
 80025e8:	3b1e      	subs	r3, #30
 80025ea:	409a      	lsls	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f4:	e022      	b.n	800263c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6919      	ldr	r1, [r3, #16]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	2207      	movs	r2, #7
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43da      	mvns	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	400a      	ands	r2, r1
 8002618:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6919      	ldr	r1, [r3, #16]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	4603      	mov	r3, r0
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4403      	add	r3, r0
 8002632:	409a      	lsls	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b06      	cmp	r3, #6
 8002642:	d824      	bhi.n	800268e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	3b05      	subs	r3, #5
 8002656:	221f      	movs	r2, #31
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43da      	mvns	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	400a      	ands	r2, r1
 8002664:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	4618      	mov	r0, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	3b05      	subs	r3, #5
 8002680:	fa00 f203 	lsl.w	r2, r0, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	635a      	str	r2, [r3, #52]	; 0x34
 800268c:	e04c      	b.n	8002728 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d824      	bhi.n	80026e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b23      	subs	r3, #35	; 0x23
 80026a8:	221f      	movs	r2, #31
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	400a      	ands	r2, r1
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3b23      	subs	r3, #35	; 0x23
 80026d2:	fa00 f203 	lsl.w	r2, r0, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
 80026de:	e023      	b.n	8002728 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	3b41      	subs	r3, #65	; 0x41
 80026f2:	221f      	movs	r2, #31
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	3b41      	subs	r3, #65	; 0x41
 800271c:	fa00 f203 	lsl.w	r2, r0, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <HAL_ADC_ConfigChannel+0x29c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d10a      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1f4>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800273a:	d105      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800273c:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a2c      	ldr	r2, [pc, #176]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002742:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002746:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a28      	ldr	r2, [pc, #160]	; (80027f0 <HAL_ADC_ConfigChannel+0x29c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10f      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x21e>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b12      	cmp	r3, #18
 8002758:	d10b      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a25      	ldr	r2, [pc, #148]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002760:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002764:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002766:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800276c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002770:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1e      	ldr	r2, [pc, #120]	; (80027f0 <HAL_ADC_ConfigChannel+0x29c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d12b      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x280>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <HAL_ADC_ConfigChannel+0x298>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <HAL_ADC_ConfigChannel+0x23a>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b11      	cmp	r3, #17
 800278c:	d122      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002794:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002798:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80027a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_ADC_ConfigChannel+0x298>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d111      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a11      	ldr	r2, [pc, #68]	; (80027fc <HAL_ADC_ConfigChannel+0x2a8>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0c9a      	lsrs	r2, r3, #18
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027c6:	e002      	b.n	80027ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f9      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	10000012 	.word	0x10000012
 80027f0:	40012000 	.word	0x40012000
 80027f4:	40012300 	.word	0x40012300
 80027f8:	20000008 	.word	0x20000008
 80027fc:	431bde83 	.word	0x431bde83

08002800 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002808:	4b78      	ldr	r3, [pc, #480]	; (80029ec <ADC_Init+0x1ec>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a77      	ldr	r2, [pc, #476]	; (80029ec <ADC_Init+0x1ec>)
 800280e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002812:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002814:	4b75      	ldr	r3, [pc, #468]	; (80029ec <ADC_Init+0x1ec>)
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4973      	ldr	r1, [pc, #460]	; (80029ec <ADC_Init+0x1ec>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	021a      	lsls	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	4a58      	ldr	r2, [pc, #352]	; (80029f0 <ADC_Init+0x1f0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6899      	ldr	r1, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	e00f      	b.n	80028fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0202 	bic.w	r2, r2, #2
 8002908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6899      	ldr	r1, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	005a      	lsls	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002936:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002946:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	3b01      	subs	r3, #1
 8002954:	035a      	lsls	r2, r3, #13
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	e007      	b.n	8002970 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	3b01      	subs	r3, #1
 800298c:	051a      	lsls	r2, r3, #20
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029b2:	025a      	lsls	r2, r3, #9
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6899      	ldr	r1, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	029a      	lsls	r2, r3, #10
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40012300 	.word	0x40012300
 80029f0:	0f000001 	.word	0x0f000001

080029f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <__NVIC_SetPriorityGrouping+0x40>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a10:	4013      	ands	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x40>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00
 8002a38:	05fa0000 	.word	0x05fa0000

08002a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <__NVIC_GetPriorityGrouping+0x18>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	f003 0307 	and.w	r3, r3, #7
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	db0b      	blt.n	8002a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4907      	ldr	r1, [pc, #28]	; (8002a90 <__NVIC_EnableIRQ+0x38>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2001      	movs	r0, #1
 8002a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	db0a      	blt.n	8002abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	490c      	ldr	r1, [pc, #48]	; (8002ae0 <__NVIC_SetPriority+0x4c>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002abc:	e00a      	b.n	8002ad4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <__NVIC_SetPriority+0x50>)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	3b04      	subs	r3, #4
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	761a      	strb	r2, [r3, #24]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000e100 	.word	0xe000e100
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f1c3 0307 	rsb	r3, r3, #7
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	bf28      	it	cs
 8002b06:	2304      	movcs	r3, #4
 8002b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d902      	bls.n	8002b18 <NVIC_EncodePriority+0x30>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3b03      	subs	r3, #3
 8002b16:	e000      	b.n	8002b1a <NVIC_EncodePriority+0x32>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43d9      	mvns	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	4313      	orrs	r3, r2
         );
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b60:	d301      	bcc.n	8002b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00f      	b.n	8002b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <SysTick_Config+0x40>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6e:	210f      	movs	r1, #15
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f7ff ff8e 	bl	8002a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <SysTick_Config+0x40>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <SysTick_Config+0x40>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010

08002b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff29 	bl	80029f4 <__NVIC_SetPriorityGrouping>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff3e 	bl	8002a3c <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff8e 	bl	8002ae8 <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5d 	bl	8002a94 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff31 	bl	8002a58 <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffa2 	bl	8002b50 <SysTick_Config>
 8002c0c:	4603      	mov	r3, r0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e175      	b.n	8002f24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	f040 8164 	bne.w	8002f1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d005      	beq.n	8002c6e <HAL_GPIO_Init+0x56>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d130      	bne.n	8002cd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	2203      	movs	r2, #3
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0201 	and.w	r2, r3, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d017      	beq.n	8002d0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d123      	bne.n	8002d60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	220f      	movs	r2, #15
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	69b9      	ldr	r1, [r7, #24]
 8002d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80be 	beq.w	8002f1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <HAL_GPIO_Init+0x324>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a65      	ldr	r2, [pc, #404]	; (8002f3c <HAL_GPIO_Init+0x324>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_GPIO_Init+0x324>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dba:	4a61      	ldr	r2, [pc, #388]	; (8002f40 <HAL_GPIO_Init+0x328>)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_GPIO_Init+0x32c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d037      	beq.n	8002e56 <HAL_GPIO_Init+0x23e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d031      	beq.n	8002e52 <HAL_GPIO_Init+0x23a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a56      	ldr	r2, [pc, #344]	; (8002f4c <HAL_GPIO_Init+0x334>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d02b      	beq.n	8002e4e <HAL_GPIO_Init+0x236>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a55      	ldr	r2, [pc, #340]	; (8002f50 <HAL_GPIO_Init+0x338>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d025      	beq.n	8002e4a <HAL_GPIO_Init+0x232>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a54      	ldr	r2, [pc, #336]	; (8002f54 <HAL_GPIO_Init+0x33c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01f      	beq.n	8002e46 <HAL_GPIO_Init+0x22e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a53      	ldr	r2, [pc, #332]	; (8002f58 <HAL_GPIO_Init+0x340>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d019      	beq.n	8002e42 <HAL_GPIO_Init+0x22a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_GPIO_Init+0x344>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_GPIO_Init+0x226>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a51      	ldr	r2, [pc, #324]	; (8002f60 <HAL_GPIO_Init+0x348>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00d      	beq.n	8002e3a <HAL_GPIO_Init+0x222>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a50      	ldr	r2, [pc, #320]	; (8002f64 <HAL_GPIO_Init+0x34c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <HAL_GPIO_Init+0x21e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4f      	ldr	r2, [pc, #316]	; (8002f68 <HAL_GPIO_Init+0x350>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_GPIO_Init+0x21a>
 8002e2e:	2309      	movs	r3, #9
 8002e30:	e012      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e32:	230a      	movs	r3, #10
 8002e34:	e010      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e36:	2308      	movs	r3, #8
 8002e38:	e00e      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	e00c      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e3e:	2306      	movs	r3, #6
 8002e40:	e00a      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e42:	2305      	movs	r3, #5
 8002e44:	e008      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e46:	2304      	movs	r3, #4
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e004      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e56:	2300      	movs	r3, #0
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f002 0203 	and.w	r2, r2, #3
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	4093      	lsls	r3, r2
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e68:	4935      	ldr	r1, [pc, #212]	; (8002f40 <HAL_GPIO_Init+0x328>)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <HAL_GPIO_Init+0x354>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9a:	4a34      	ldr	r2, [pc, #208]	; (8002f6c <HAL_GPIO_Init+0x354>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea0:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_GPIO_Init+0x354>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec4:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <HAL_GPIO_Init+0x354>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eca:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_GPIO_Init+0x354>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eee:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <HAL_GPIO_Init+0x354>)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_GPIO_Init+0x354>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f18:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <HAL_GPIO_Init+0x354>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	f67f ae86 	bls.w	8002c38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020c00 	.word	0x40020c00
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40021400 	.word	0x40021400
 8002f5c:	40021800 	.word	0x40021800
 8002f60:	40021c00 	.word	0x40021c00
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40022400 	.word	0x40022400
 8002f6c:	40013c00 	.word	0x40013c00

08002f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f80:	787b      	ldrb	r3, [r7, #1]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f8c:	e003      	b.n	8002f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	041a      	lsls	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	619a      	str	r2, [r3, #24]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e07f      	b.n	80030b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe fcb2 	bl	8001934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2224      	movs	r2, #36	; 0x24
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	e006      	b.n	800302c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800302a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d104      	bne.n	800303e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800303c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_I2C_Init+0x11c>)
 800304a:	430b      	orrs	r3, r1
 800304c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800305c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1a      	ldr	r2, [r3, #32]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	02008000 	.word	0x02008000

080030c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d138      	bne.n	800314c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e032      	b.n	800314e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003116:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b20      	cmp	r3, #32
 800316e:	d139      	bne.n	80031e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800317a:	2302      	movs	r3, #2
 800317c:	e033      	b.n	80031e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2224      	movs	r2, #36	; 0x24
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003202:	6013      	str	r3, [r2, #0]
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40007000 	.word	0x40007000

08003214 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	4a22      	ldr	r2, [pc, #136]	; (80032ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003228:	6413      	str	r3, [r2, #64]	; 0x40
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_PWREx_EnableOverDrive+0x98>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003242:	f7ff f913 	bl	800246c <HAL_GetTick>
 8003246:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003248:	e009      	b.n	800325e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800324a:	f7ff f90f 	bl	800246c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003258:	d901      	bls.n	800325e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e022      	b.n	80032a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800325e:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326a:	d1ee      	bne.n	800324a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800326c:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003276:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003278:	f7ff f8f8 	bl	800246c <HAL_GetTick>
 800327c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800327e:	e009      	b.n	8003294 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003280:	f7ff f8f4 	bl	800246c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800328e:	d901      	bls.n	8003294 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e007      	b.n	80032a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a0:	d1ee      	bne.n	8003280 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40007000 	.word	0x40007000

080032b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032bc:	2300      	movs	r3, #0
 80032be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e29b      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8087 	beq.w	80033e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d8:	4b96      	ldr	r3, [pc, #600]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d00c      	beq.n	80032fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e4:	4b93      	ldr	r3, [pc, #588]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d112      	bne.n	8003316 <HAL_RCC_OscConfig+0x62>
 80032f0:	4b90      	ldr	r3, [pc, #576]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fc:	d10b      	bne.n	8003316 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fe:	4b8d      	ldr	r3, [pc, #564]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d06c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x130>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d168      	bne.n	80033e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e275      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331e:	d106      	bne.n	800332e <HAL_RCC_OscConfig+0x7a>
 8003320:	4b84      	ldr	r3, [pc, #528]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a83      	ldr	r2, [pc, #524]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	e02e      	b.n	800338c <HAL_RCC_OscConfig+0xd8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x9c>
 8003336:	4b7f      	ldr	r3, [pc, #508]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a7e      	ldr	r2, [pc, #504]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 800333c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b7c      	ldr	r3, [pc, #496]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7b      	ldr	r2, [pc, #492]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e01d      	b.n	800338c <HAL_RCC_OscConfig+0xd8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0xc0>
 800335a:	4b76      	ldr	r3, [pc, #472]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a75      	ldr	r2, [pc, #468]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b73      	ldr	r3, [pc, #460]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a72      	ldr	r2, [pc, #456]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0xd8>
 8003374:	4b6f      	ldr	r3, [pc, #444]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a6e      	ldr	r2, [pc, #440]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 800337a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6b      	ldr	r2, [pc, #428]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7ff f86a 	bl	800246c <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800339c:	f7ff f866 	bl	800246c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e229      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b61      	ldr	r3, [pc, #388]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0xe8>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7ff f856 	bl	800246c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c4:	f7ff f852 	bl	800246c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e215      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	4b57      	ldr	r3, [pc, #348]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x110>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d069      	beq.n	80034c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033f2:	4b50      	ldr	r3, [pc, #320]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fe:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b08      	cmp	r3, #8
 8003408:	d11c      	bne.n	8003444 <HAL_RCC_OscConfig+0x190>
 800340a:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d116      	bne.n	8003444 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_RCC_OscConfig+0x17a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e1e9      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	493d      	ldr	r1, [pc, #244]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	e040      	b.n	80034c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d023      	beq.n	8003494 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800344c:	4b39      	ldr	r3, [pc, #228]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a38      	ldr	r2, [pc, #224]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7ff f808 	bl	800246c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003460:	f7ff f804 	bl	800246c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1c7      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	4b30      	ldr	r3, [pc, #192]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4929      	ldr	r1, [pc, #164]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
 8003492:	e018      	b.n	80034c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a26      	ldr	r2, [pc, #152]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe ffe4 	bl	800246c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fe ffe0 	bl	800246c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e1a3      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d038      	beq.n	8003544 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d019      	beq.n	800350e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 80034dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034de:	4a15      	ldr	r2, [pc, #84]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e6:	f7fe ffc1 	bl	800246c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fe ffbd 	bl	800246c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e180      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x23a>
 800350c:	e01a      	b.n	8003544 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_RCC_OscConfig+0x280>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351a:	f7fe ffa7 	bl	800246c <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003522:	f7fe ffa3 	bl	800246c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d903      	bls.n	8003538 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e166      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
 8003534:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003538:	4b92      	ldr	r3, [pc, #584]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 800353a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ee      	bne.n	8003522 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a4 	beq.w	800369a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003552:	4b8c      	ldr	r3, [pc, #560]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10d      	bne.n	800357a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	4b89      	ldr	r3, [pc, #548]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a88      	ldr	r2, [pc, #544]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b86      	ldr	r3, [pc, #536]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357a:	4b83      	ldr	r3, [pc, #524]	; (8003788 <HAL_RCC_OscConfig+0x4d4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d118      	bne.n	80035b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003586:	4b80      	ldr	r3, [pc, #512]	; (8003788 <HAL_RCC_OscConfig+0x4d4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7f      	ldr	r2, [pc, #508]	; (8003788 <HAL_RCC_OscConfig+0x4d4>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003592:	f7fe ff6b 	bl	800246c <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359a:	f7fe ff67 	bl	800246c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b64      	cmp	r3, #100	; 0x64
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e12a      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ac:	4b76      	ldr	r3, [pc, #472]	; (8003788 <HAL_RCC_OscConfig+0x4d4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x31a>
 80035c0:	4b70      	ldr	r3, [pc, #448]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a6f      	ldr	r2, [pc, #444]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
 80035cc:	e02d      	b.n	800362a <HAL_RCC_OscConfig+0x376>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x33c>
 80035d6:	4b6b      	ldr	r3, [pc, #428]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a6a      	ldr	r2, [pc, #424]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
 80035e2:	4b68      	ldr	r3, [pc, #416]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a67      	ldr	r2, [pc, #412]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
 80035ee:	e01c      	b.n	800362a <HAL_RCC_OscConfig+0x376>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d10c      	bne.n	8003612 <HAL_RCC_OscConfig+0x35e>
 80035f8:	4b62      	ldr	r3, [pc, #392]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	4a61      	ldr	r2, [pc, #388]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80035fe:	f043 0304 	orr.w	r3, r3, #4
 8003602:	6713      	str	r3, [r2, #112]	; 0x70
 8003604:	4b5f      	ldr	r3, [pc, #380]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	4a5e      	ldr	r2, [pc, #376]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	e00b      	b.n	800362a <HAL_RCC_OscConfig+0x376>
 8003612:	4b5c      	ldr	r3, [pc, #368]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	4a5b      	ldr	r2, [pc, #364]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6713      	str	r3, [r2, #112]	; 0x70
 800361e:	4b59      	ldr	r3, [pc, #356]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a58      	ldr	r2, [pc, #352]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003624:	f023 0304 	bic.w	r3, r3, #4
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d015      	beq.n	800365e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fe ff1b 	bl	800246c <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fe ff17 	bl	800246c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e0d8      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	4b4c      	ldr	r3, [pc, #304]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0ee      	beq.n	800363a <HAL_RCC_OscConfig+0x386>
 800365c:	e014      	b.n	8003688 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fe ff05 	bl	800246c <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7fe ff01 	bl	800246c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	; 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0c2      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367c:	4b41      	ldr	r3, [pc, #260]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ee      	bne.n	8003666 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a3c      	ldr	r2, [pc, #240]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80ae 	beq.w	8003800 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a4:	4b37      	ldr	r3, [pc, #220]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d06d      	beq.n	800378c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d14b      	bne.n	8003750 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b8:	4b32      	ldr	r3, [pc, #200]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a31      	ldr	r2, [pc, #196]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80036be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe fed2 	bl	800246c <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe fece 	bl	800246c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e091      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	3b01      	subs	r3, #1
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	071b      	lsls	r3, r3, #28
 8003716:	491b      	ldr	r1, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe fea0 	bl	800246c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003730:	f7fe fe9c 	bl	800246c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e05f      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x47c>
 800374e:	e057      	b.n	8003800 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe fe86 	bl	800246c <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003764:	f7fe fe82 	bl	800246c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e045      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003776:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_RCC_OscConfig+0x4d0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x4b0>
 8003782:	e03d      	b.n	8003800 <HAL_RCC_OscConfig+0x54c>
 8003784:	40023800 	.word	0x40023800
 8003788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800378c:	4b1f      	ldr	r3, [pc, #124]	; (800380c <HAL_RCC_OscConfig+0x558>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d030      	beq.n	80037fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d129      	bne.n	80037fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d122      	bne.n	80037fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d119      	bne.n	80037fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	3b01      	subs	r3, #1
 80037d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d10f      	bne.n	80037fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d107      	bne.n	80037fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800

08003810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0d0      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d910      	bls.n	8003858 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b67      	ldr	r3, [pc, #412]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 020f 	bic.w	r2, r3, #15
 800383e:	4965      	ldr	r1, [pc, #404]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0b8      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003870:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800387a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 800388e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	494d      	ldr	r1, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d040      	beq.n	8003934 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d115      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e073      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e06b      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4936      	ldr	r1, [pc, #216]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fe fdb2 	bl	800246c <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fe fdae 	bl	800246c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e053      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003934:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d210      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 020f 	bic.w	r2, r3, #15
 800394a:	4922      	ldr	r1, [pc, #136]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e032      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4916      	ldr	r1, [pc, #88]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	490e      	ldr	r1, [pc, #56]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039a2:	f000 f821 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	490a      	ldr	r1, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x1cc>)
 80039b4:	5ccb      	ldrb	r3, [r1, r3]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1d0>)
 80039bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x1d4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fd0e 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00
 80039d8:	40023800 	.word	0x40023800
 80039dc:	08006eb8 	.word	0x08006eb8
 80039e0:	20000008 	.word	0x20000008
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ec:	b094      	sub	sp, #80	; 0x50
 80039ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	647b      	str	r3, [r7, #68]	; 0x44
 80039f4:	2300      	movs	r3, #0
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f8:	2300      	movs	r3, #0
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a00:	4b79      	ldr	r3, [pc, #484]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d00d      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	f200 80e1 	bhi.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x34>
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a1a:	e0db      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b73      	ldr	r3, [pc, #460]	; (8003bec <HAL_RCC_GetSysClockFreq+0x204>)
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a20:	e0db      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a22:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a26:	e0d8      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a32:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d063      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	2200      	movs	r2, #0
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
 8003a52:	2300      	movs	r3, #0
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
 8003a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	f04f 0000 	mov.w	r0, #0
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	0159      	lsls	r1, r3, #5
 8003a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6c:	0150      	lsls	r0, r2, #5
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4621      	mov	r1, r4
 8003a74:	1a51      	subs	r1, r2, r1
 8003a76:	6139      	str	r1, [r7, #16]
 8003a78:	4629      	mov	r1, r5
 8003a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	018b      	lsls	r3, r1, #6
 8003a90:	4651      	mov	r1, sl
 8003a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a96:	4651      	mov	r1, sl
 8003a98:	018a      	lsls	r2, r1, #6
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb18 0303 	adds.w	r3, r8, r3
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	eb49 0303 	adc.w	r3, r9, r3
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ada:	4629      	mov	r1, r5
 8003adc:	024b      	lsls	r3, r1, #9
 8003ade:	4621      	mov	r1, r4
 8003ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	024a      	lsls	r2, r1, #9
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af8:	f7fc fb9e 	bl	8000238 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	e058      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	4611      	mov	r1, r2
 8003b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	f04f 0000 	mov.w	r0, #0
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	0159      	lsls	r1, r3, #5
 8003b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b32:	0150      	lsls	r0, r2, #5
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4641      	mov	r1, r8
 8003b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b58:	ebb2 040a 	subs.w	r4, r2, sl
 8003b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	00eb      	lsls	r3, r5, #3
 8003b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6e:	00e2      	lsls	r2, r4, #3
 8003b70:	4614      	mov	r4, r2
 8003b72:	461d      	mov	r5, r3
 8003b74:	4643      	mov	r3, r8
 8003b76:	18e3      	adds	r3, r4, r3
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	eb45 0303 	adc.w	r3, r5, r3
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	028b      	lsls	r3, r1, #10
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b98:	4621      	mov	r1, r4
 8003b9a:	028a      	lsls	r2, r1, #10
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	61fa      	str	r2, [r7, #28]
 8003ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bac:	f7fc fb44 	bl	8000238 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3750      	adds	r7, #80	; 0x50
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200

08003bf4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000008 	.word	0x20000008

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08006ec8 	.word	0x08006ec8

08003c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c38:	f7ff ffdc 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	08006ec8 	.word	0x08006ec8

08003c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d012      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c84:	4b69      	ldr	r3, [pc, #420]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a68      	ldr	r2, [pc, #416]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c8e:	6093      	str	r3, [r2, #8]
 8003c90:	4b66      	ldr	r3, [pc, #408]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	4964      	ldr	r1, [pc, #400]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d017      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	4959      	ldr	r1, [pc, #356]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd4:	d101      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d017      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cf2:	4b4e      	ldr	r3, [pc, #312]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	494a      	ldr	r1, [pc, #296]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d10:	d101      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d12:	2301      	movs	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 808b 	beq.w	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	4b3a      	ldr	r3, [pc, #232]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	4a39      	ldr	r2, [pc, #228]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4c:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d58:	4b35      	ldr	r3, [pc, #212]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a34      	ldr	r2, [pc, #208]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d64:	f7fe fb82 	bl	800246c <HAL_GetTick>
 8003d68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fe fb7e 	bl	800246c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e38f      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d7e:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d035      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d02e      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003da8:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003db2:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dca:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dd0:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d114      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fb46 	bl	800246c <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de2:	e00a      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fe fb42 	bl	800246c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e351      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ee      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e12:	d111      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e22:	400b      	ands	r3, r1
 8003e24:	4901      	ldr	r1, [pc, #4]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40007000 	.word	0x40007000
 8003e34:	0ffffcff 	.word	0x0ffffcff
 8003e38:	4bac      	ldr	r3, [pc, #688]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4aab      	ldr	r2, [pc, #684]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	4ba9      	ldr	r3, [pc, #676]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e50:	49a6      	ldr	r1, [pc, #664]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d010      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e62:	4ba2      	ldr	r3, [pc, #648]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e68:	4aa0      	ldr	r2, [pc, #640]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e72:	4b9e      	ldr	r3, [pc, #632]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	499b      	ldr	r1, [pc, #620]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e90:	4b96      	ldr	r3, [pc, #600]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e9e:	4993      	ldr	r1, [pc, #588]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eb2:	4b8e      	ldr	r3, [pc, #568]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec0:	498a      	ldr	r1, [pc, #552]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ed4:	4b85      	ldr	r3, [pc, #532]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee2:	4982      	ldr	r1, [pc, #520]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ef6:	4b7d      	ldr	r3, [pc, #500]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4979      	ldr	r1, [pc, #484]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f18:	4b74      	ldr	r3, [pc, #464]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f023 0203 	bic.w	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	4971      	ldr	r1, [pc, #452]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f3a:	4b6c      	ldr	r3, [pc, #432]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f023 020c 	bic.w	r2, r3, #12
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f48:	4968      	ldr	r1, [pc, #416]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f5c:	4b63      	ldr	r3, [pc, #396]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	4960      	ldr	r1, [pc, #384]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f7e:	4b5b      	ldr	r3, [pc, #364]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	4957      	ldr	r1, [pc, #348]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fa0:	4b52      	ldr	r3, [pc, #328]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	494f      	ldr	r1, [pc, #316]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003fc2:	4b4a      	ldr	r3, [pc, #296]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	4946      	ldr	r1, [pc, #280]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fe4:	4b41      	ldr	r3, [pc, #260]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	493e      	ldr	r1, [pc, #248]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004006:	4b39      	ldr	r3, [pc, #228]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004014:	4935      	ldr	r1, [pc, #212]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004036:	492d      	ldr	r1, [pc, #180]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800404a:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004058:	4924      	ldr	r1, [pc, #144]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004068:	d101      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800406a:	2301      	movs	r3, #1
 800406c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004098:	4914      	ldr	r1, [pc, #80]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040bc:	490b      	ldr	r1, [pc, #44]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00f      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e0:	4902      	ldr	r1, [pc, #8]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040e8:	e002      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00b      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040fc:	4b8a      	ldr	r3, [pc, #552]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004102:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	4986      	ldr	r1, [pc, #536]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004120:	4b81      	ldr	r3, [pc, #516]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004126:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004130:	497d      	ldr	r1, [pc, #500]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d006      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80d6 	beq.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800414c:	4b76      	ldr	r3, [pc, #472]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a75      	ldr	r2, [pc, #468]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004152:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004158:	f7fe f988 	bl	800246c <HAL_GetTick>
 800415c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004160:	f7fe f984 	bl	800246c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e195      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004172:	4b6d      	ldr	r3, [pc, #436]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d021      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004192:	4b65      	ldr	r3, [pc, #404]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041a0:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a6:	0e1b      	lsrs	r3, r3, #24
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	019a      	lsls	r2, r3, #6
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	071b      	lsls	r3, r3, #28
 80041c6:	4958      	ldr	r1, [pc, #352]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d02e      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f8:	d129      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041fa:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004208:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420e:	0f1b      	lsrs	r3, r3, #28
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	019a      	lsls	r2, r3, #6
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	061b      	lsls	r3, r3, #24
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	071b      	lsls	r3, r3, #28
 800422e:	493e      	ldr	r1, [pc, #248]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004236:	4b3c      	ldr	r3, [pc, #240]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800423c:	f023 021f 	bic.w	r2, r3, #31
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	3b01      	subs	r3, #1
 8004246:	4938      	ldr	r1, [pc, #224]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01d      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800425a:	4b33      	ldr	r3, [pc, #204]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800425c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004260:	0e1b      	lsrs	r3, r3, #24
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004268:	4b2f      	ldr	r3, [pc, #188]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426e:	0f1b      	lsrs	r3, r3, #28
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	019a      	lsls	r2, r3, #6
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	431a      	orrs	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	061b      	lsls	r3, r3, #24
 8004288:	431a      	orrs	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	071b      	lsls	r3, r3, #28
 800428e:	4926      	ldr	r1, [pc, #152]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d011      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	019a      	lsls	r2, r3, #6
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	041b      	lsls	r3, r3, #16
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	061b      	lsls	r3, r3, #24
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	491a      	ldr	r1, [pc, #104]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042c6:	4b18      	ldr	r3, [pc, #96]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fe f8cb 	bl	800246c <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042da:	f7fe f8c7 	bl	800246c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b64      	cmp	r3, #100	; 0x64
 80042e6:	d901      	bls.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e0d8      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ec:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	f040 80ce 	bne.w	800449c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a08      	ldr	r2, [pc, #32]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430c:	f7fe f8ae 	bl	800246c <HAL_GetTick>
 8004310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004312:	e00b      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004314:	f7fe f8aa 	bl	800246c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d904      	bls.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e0bb      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800432c:	4b5e      	ldr	r3, [pc, #376]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004338:	d0ec      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004356:	2b00      	cmp	r3, #0
 8004358:	d02e      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d12a      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004362:	4b51      	ldr	r3, [pc, #324]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004370:	4b4d      	ldr	r3, [pc, #308]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	0f1b      	lsrs	r3, r3, #28
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	019a      	lsls	r2, r3, #6
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	061b      	lsls	r3, r3, #24
 8004390:	431a      	orrs	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	071b      	lsls	r3, r3, #28
 8004396:	4944      	ldr	r1, [pc, #272]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800439e:	4b42      	ldr	r3, [pc, #264]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	3b01      	subs	r3, #1
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	493d      	ldr	r1, [pc, #244]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d022      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043cc:	d11d      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	0e1b      	lsrs	r3, r3, #24
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043dc:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	0f1b      	lsrs	r3, r3, #28
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	019a      	lsls	r2, r3, #6
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	431a      	orrs	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	061b      	lsls	r3, r3, #24
 80043fc:	431a      	orrs	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	071b      	lsls	r3, r3, #28
 8004402:	4929      	ldr	r1, [pc, #164]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d028      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004416:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	0e1b      	lsrs	r3, r3, #24
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004424:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	0c1b      	lsrs	r3, r3, #16
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	019a      	lsls	r2, r3, #6
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	431a      	orrs	r2, r3
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	061b      	lsls	r3, r3, #24
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	071b      	lsls	r3, r3, #28
 800444a:	4917      	ldr	r1, [pc, #92]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	4911      	ldr	r1, [pc, #68]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004474:	f7fd fffa 	bl	800246c <HAL_GetTick>
 8004478:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800447c:	f7fd fff6 	bl	800246c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e007      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449a:	d1ef      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800

080044ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e09d      	b.n	80045fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d108      	bne.n	80044d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ce:	d009      	beq.n	80044e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	61da      	str	r2, [r3, #28]
 80044d6:	e005      	b.n	80044e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fd fac0 	bl	8001a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800451a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004524:	d902      	bls.n	800452c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e002      	b.n	8004532 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800452c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004530:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800453a:	d007      	beq.n	800454c <HAL_SPI_Init+0xa0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004544:	d002      	beq.n	800454c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	ea42 0103 	orr.w	r1, r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	0c1b      	lsrs	r3, r3, #16
 80045a8:	f003 0204 	and.w	r2, r3, #4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045c8:	ea42 0103 	orr.w	r1, r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e049      	b.n	80046a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fd faab 	bl	8001b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f001 f831 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e054      	b.n	8004772 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a26      	ldr	r2, [pc, #152]	; (8004780 <HAL_TIM_Base_Start_IT+0xd0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f2:	d01d      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <HAL_TIM_Base_Start_IT+0xd4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a21      	ldr	r2, [pc, #132]	; (8004788 <HAL_TIM_Base_Start_IT+0xd8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1f      	ldr	r2, [pc, #124]	; (800478c <HAL_TIM_Base_Start_IT+0xdc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <HAL_TIM_Base_Start_IT+0xe0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <HAL_TIM_Base_Start_IT+0xe4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1b      	ldr	r2, [pc, #108]	; (8004798 <HAL_TIM_Base_Start_IT+0xe8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d115      	bne.n	800475c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_TIM_Base_Start_IT+0xec>)
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b06      	cmp	r3, #6
 8004740:	d015      	beq.n	800476e <HAL_TIM_Base_Start_IT+0xbe>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d011      	beq.n	800476e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	e008      	b.n	800476e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e000      	b.n	8004770 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40010000 	.word	0x40010000
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40010400 	.word	0x40010400
 8004794:	40014000 	.word	0x40014000
 8004798:	40001800 	.word	0x40001800
 800479c:	00010007 	.word	0x00010007

080047a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e049      	b.n	8004846 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f841 	bl	800484e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f000 ff62 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e049      	b.n	8004908 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7fd fa8b 	bl	8001da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f000 ff01 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_TIM_PWM_Start+0x24>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e03c      	b.n	80049ae <HAL_TIM_PWM_Start+0x9e>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b04      	cmp	r3, #4
 8004938:	d109      	bne.n	800494e <HAL_TIM_PWM_Start+0x3e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	e02f      	b.n	80049ae <HAL_TIM_PWM_Start+0x9e>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d109      	bne.n	8004968 <HAL_TIM_PWM_Start+0x58>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e022      	b.n	80049ae <HAL_TIM_PWM_Start+0x9e>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d109      	bne.n	8004982 <HAL_TIM_PWM_Start+0x72>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e015      	b.n	80049ae <HAL_TIM_PWM_Start+0x9e>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b10      	cmp	r3, #16
 8004986:	d109      	bne.n	800499c <HAL_TIM_PWM_Start+0x8c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e008      	b.n	80049ae <HAL_TIM_PWM_Start+0x9e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e092      	b.n	8004adc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Start+0xb6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c4:	e023      	b.n	8004a0e <HAL_TIM_PWM_Start+0xfe>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0xc6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d4:	e01b      	b.n	8004a0e <HAL_TIM_PWM_Start+0xfe>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start+0xd6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e4:	e013      	b.n	8004a0e <HAL_TIM_PWM_Start+0xfe>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Start+0xe6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049f4:	e00b      	b.n	8004a0e <HAL_TIM_PWM_Start+0xfe>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_PWM_Start+0xf6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a04:	e003      	b.n	8004a0e <HAL_TIM_PWM_Start+0xfe>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2201      	movs	r2, #1
 8004a14:	6839      	ldr	r1, [r7, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 fb08 	bl	800602c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a30      	ldr	r2, [pc, #192]	; (8004ae4 <HAL_TIM_PWM_Start+0x1d4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_TIM_PWM_Start+0x120>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ae8 <HAL_TIM_PWM_Start+0x1d8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIM_PWM_Start+0x124>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <HAL_TIM_PWM_Start+0x126>
 8004a34:	2300      	movs	r3, #0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a25      	ldr	r2, [pc, #148]	; (8004ae4 <HAL_TIM_PWM_Start+0x1d4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d022      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x18a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5c:	d01d      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x18a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a22      	ldr	r2, [pc, #136]	; (8004aec <HAL_TIM_PWM_Start+0x1dc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x18a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <HAL_TIM_PWM_Start+0x1e0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x18a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1f      	ldr	r2, [pc, #124]	; (8004af4 <HAL_TIM_PWM_Start+0x1e4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x18a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <HAL_TIM_PWM_Start+0x1d8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x18a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <HAL_TIM_PWM_Start+0x1e8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x18a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a19      	ldr	r2, [pc, #100]	; (8004afc <HAL_TIM_PWM_Start+0x1ec>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d115      	bne.n	8004ac6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <HAL_TIM_PWM_Start+0x1f0>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b06      	cmp	r3, #6
 8004aaa:	d015      	beq.n	8004ad8 <HAL_TIM_PWM_Start+0x1c8>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab2:	d011      	beq.n	8004ad8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac4:	e008      	b.n	8004ad8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e000      	b.n	8004ada <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40010400 	.word	0x40010400
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40001800 	.word	0x40001800
 8004b00:	00010007 	.word	0x00010007

08004b04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e049      	b.n	8004baa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f841 	bl	8004bb2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f000 fdb0 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e08f      	b.n	8004cfc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fd f861 	bl	8001cb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6899      	ldr	r1, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <HAL_TIM_Encoder_Init+0x13c>)
 8004c0a:	400b      	ands	r3, r1
 8004c0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f000 fd45 	bl	80056a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_TIM_Encoder_Init+0x140>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	4313      	orrs	r3, r2
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <HAL_TIM_Encoder_Init+0x144>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <HAL_TIM_Encoder_Init+0x148>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	4313      	orrs	r3, r2
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	011a      	lsls	r2, r3, #4
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	031b      	lsls	r3, r3, #12
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	4313      	orrs	r3, r2
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	fffebff8 	.word	0xfffebff8
 8004d08:	fffffcfc 	.word	0xfffffcfc
 8004d0c:	fffff3f3 	.word	0xfffff3f3
 8004d10:	ffff0f0f 	.word	0xffff0f0f

08004d14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d110      	bne.n	8004d66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d102      	bne.n	8004d50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d4a:	7b7b      	ldrb	r3, [r7, #13]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e069      	b.n	8004e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d64:	e031      	b.n	8004dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d110      	bne.n	8004d8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d6c:	7bbb      	ldrb	r3, [r7, #14]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d102      	bne.n	8004d78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d72:	7b3b      	ldrb	r3, [r7, #12]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d001      	beq.n	8004d7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e055      	b.n	8004e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d8c:	e01d      	b.n	8004dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d108      	bne.n	8004da6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d94:	7bbb      	ldrb	r3, [r7, #14]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d105      	bne.n	8004da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d9a:	7b7b      	ldrb	r3, [r7, #13]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004da0:	7b3b      	ldrb	r3, [r7, #12]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d001      	beq.n	8004daa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e03e      	b.n	8004e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_TIM_Encoder_Start+0xc4>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d008      	beq.n	8004de8 <HAL_TIM_Encoder_Start+0xd4>
 8004dd6:	e00f      	b.n	8004df8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	2100      	movs	r1, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f001 f923 	bl	800602c <TIM_CCxChannelCmd>
      break;
 8004de6:	e016      	b.n	8004e16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	2104      	movs	r1, #4
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 f91b 	bl	800602c <TIM_CCxChannelCmd>
      break;
 8004df6:	e00e      	b.n	8004e16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 f913 	bl	800602c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	2104      	movs	r1, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 f90c 	bl	800602c <TIM_CCxChannelCmd>
      break;
 8004e14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d122      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d11b      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0202 	mvn.w	r2, #2
 8004e5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fbfa 	bl	800566c <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fbec 	bl	8005658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fbfd 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d122      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d11b      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0204 	mvn.w	r2, #4
 8004eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fbd0 	bl	800566c <HAL_TIM_IC_CaptureCallback>
 8004ecc:	e005      	b.n	8004eda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fbc2 	bl	8005658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fbd3 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d122      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d11b      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0208 	mvn.w	r2, #8
 8004f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fba6 	bl	800566c <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fb98 	bl	8005658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fba9 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b10      	cmp	r3, #16
 8004f40:	d122      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d11b      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0210 	mvn.w	r2, #16
 8004f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fb7c 	bl	800566c <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fb6e 	bl	8005658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fb7f 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10e      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0201 	mvn.w	r2, #1
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fb fb66 	bl	8000680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d107      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f001 f962 	bl	80062a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fee:	d10e      	bne.n	800500e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 f955 	bl	80062b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d10e      	bne.n	800503a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d107      	bne.n	800503a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fb2d 	bl	8005694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b20      	cmp	r3, #32
 8005046:	d10e      	bne.n	8005066 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d107      	bne.n	8005066 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f06f 0220 	mvn.w	r2, #32
 800505e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 f915 	bl	8006290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_TIM_OC_ConfigChannel+0x1e>
 800508a:	2302      	movs	r3, #2
 800508c:	e066      	b.n	800515c <HAL_TIM_OC_ConfigChannel+0xec>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b14      	cmp	r3, #20
 800509a:	d857      	bhi.n	800514c <HAL_TIM_OC_ConfigChannel+0xdc>
 800509c:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	0800514d 	.word	0x0800514d
 80050ac:	0800514d 	.word	0x0800514d
 80050b0:	0800514d 	.word	0x0800514d
 80050b4:	08005107 	.word	0x08005107
 80050b8:	0800514d 	.word	0x0800514d
 80050bc:	0800514d 	.word	0x0800514d
 80050c0:	0800514d 	.word	0x0800514d
 80050c4:	08005115 	.word	0x08005115
 80050c8:	0800514d 	.word	0x0800514d
 80050cc:	0800514d 	.word	0x0800514d
 80050d0:	0800514d 	.word	0x0800514d
 80050d4:	08005123 	.word	0x08005123
 80050d8:	0800514d 	.word	0x0800514d
 80050dc:	0800514d 	.word	0x0800514d
 80050e0:	0800514d 	.word	0x0800514d
 80050e4:	08005131 	.word	0x08005131
 80050e8:	0800514d 	.word	0x0800514d
 80050ec:	0800514d 	.word	0x0800514d
 80050f0:	0800514d 	.word	0x0800514d
 80050f4:	0800513f 	.word	0x0800513f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fb72 	bl	80057e8 <TIM_OC1_SetConfig>
      break;
 8005104:	e025      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fbdd 	bl	80058cc <TIM_OC2_SetConfig>
      break;
 8005112:	e01e      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fc4e 	bl	80059bc <TIM_OC3_SetConfig>
      break;
 8005120:	e017      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fcbd 	bl	8005aa8 <TIM_OC4_SetConfig>
      break;
 800512e:	e010      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fd0e 	bl	8005b58 <TIM_OC5_SetConfig>
      break;
 800513c:	e009      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fd59 	bl	8005bfc <TIM_OC6_SetConfig>
      break;
 800514a:	e002      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
      break;
 8005150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_TIM_IC_ConfigChannel+0x1e>
 800517e:	2302      	movs	r3, #2
 8005180:	e088      	b.n	8005294 <HAL_TIM_IC_ConfigChannel+0x130>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d11b      	bne.n	80051c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6819      	ldr	r1, [r3, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f000 fd80 	bl	8005ca4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 020c 	bic.w	r2, r2, #12
 80051b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	619a      	str	r2, [r3, #24]
 80051c6:	e060      	b.n	800528a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d11c      	bne.n	8005208 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f000 fe04 	bl	8005dea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6999      	ldr	r1, [r3, #24]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	021a      	lsls	r2, r3, #8
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	619a      	str	r2, [r3, #24]
 8005206:	e040      	b.n	800528a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b08      	cmp	r3, #8
 800520c:	d11b      	bne.n	8005246 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	6819      	ldr	r1, [r3, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f000 fe51 	bl	8005ec4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69da      	ldr	r2, [r3, #28]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 020c 	bic.w	r2, r2, #12
 8005230:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69d9      	ldr	r1, [r3, #28]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	61da      	str	r2, [r3, #28]
 8005244:	e021      	b.n	800528a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d11c      	bne.n	8005286 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f000 fe6e 	bl	8005f3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69da      	ldr	r2, [r3, #28]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800526e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69d9      	ldr	r1, [r3, #28]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	021a      	lsls	r2, r3, #8
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	61da      	str	r2, [r3, #28]
 8005284:	e001      	b.n	800528a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e0ff      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b14      	cmp	r3, #20
 80052c6:	f200 80f0 	bhi.w	80054aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	08005325 	.word	0x08005325
 80052d4:	080054ab 	.word	0x080054ab
 80052d8:	080054ab 	.word	0x080054ab
 80052dc:	080054ab 	.word	0x080054ab
 80052e0:	08005365 	.word	0x08005365
 80052e4:	080054ab 	.word	0x080054ab
 80052e8:	080054ab 	.word	0x080054ab
 80052ec:	080054ab 	.word	0x080054ab
 80052f0:	080053a7 	.word	0x080053a7
 80052f4:	080054ab 	.word	0x080054ab
 80052f8:	080054ab 	.word	0x080054ab
 80052fc:	080054ab 	.word	0x080054ab
 8005300:	080053e7 	.word	0x080053e7
 8005304:	080054ab 	.word	0x080054ab
 8005308:	080054ab 	.word	0x080054ab
 800530c:	080054ab 	.word	0x080054ab
 8005310:	08005429 	.word	0x08005429
 8005314:	080054ab 	.word	0x080054ab
 8005318:	080054ab 	.word	0x080054ab
 800531c:	080054ab 	.word	0x080054ab
 8005320:	08005469 	.word	0x08005469
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fa5c 	bl	80057e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0208 	orr.w	r2, r2, #8
 800533e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0204 	bic.w	r2, r2, #4
 800534e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6999      	ldr	r1, [r3, #24]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	619a      	str	r2, [r3, #24]
      break;
 8005362:	e0a5      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 faae 	bl	80058cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	619a      	str	r2, [r3, #24]
      break;
 80053a4:	e084      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fb05 	bl	80059bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0208 	orr.w	r2, r2, #8
 80053c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0204 	bic.w	r2, r2, #4
 80053d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69d9      	ldr	r1, [r3, #28]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	61da      	str	r2, [r3, #28]
      break;
 80053e4:	e064      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fb5b 	bl	8005aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	021a      	lsls	r2, r3, #8
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	61da      	str	r2, [r3, #28]
      break;
 8005426:	e043      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fb92 	bl	8005b58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0208 	orr.w	r2, r2, #8
 8005442:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0204 	bic.w	r2, r2, #4
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005466:	e023      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fbc4 	bl	8005bfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005482:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	021a      	lsls	r2, r3, #8
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054a8:	e002      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
      break;
 80054ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop

080054c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_TIM_ConfigClockSource+0x1c>
 80054dc:	2302      	movs	r3, #2
 80054de:	e0b4      	b.n	800564a <HAL_TIM_ConfigClockSource+0x186>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	4b56      	ldr	r3, [pc, #344]	; (8005654 <HAL_TIM_ConfigClockSource+0x190>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005518:	d03e      	beq.n	8005598 <HAL_TIM_ConfigClockSource+0xd4>
 800551a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551e:	f200 8087 	bhi.w	8005630 <HAL_TIM_ConfigClockSource+0x16c>
 8005522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005526:	f000 8086 	beq.w	8005636 <HAL_TIM_ConfigClockSource+0x172>
 800552a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552e:	d87f      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b70      	cmp	r3, #112	; 0x70
 8005532:	d01a      	beq.n	800556a <HAL_TIM_ConfigClockSource+0xa6>
 8005534:	2b70      	cmp	r3, #112	; 0x70
 8005536:	d87b      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b60      	cmp	r3, #96	; 0x60
 800553a:	d050      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x11a>
 800553c:	2b60      	cmp	r3, #96	; 0x60
 800553e:	d877      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b50      	cmp	r3, #80	; 0x50
 8005542:	d03c      	beq.n	80055be <HAL_TIM_ConfigClockSource+0xfa>
 8005544:	2b50      	cmp	r3, #80	; 0x50
 8005546:	d873      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d058      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x13a>
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d86f      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b30      	cmp	r3, #48	; 0x30
 8005552:	d064      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x15a>
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d86b      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b20      	cmp	r3, #32
 800555a:	d060      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x15a>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d867      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d05c      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x15a>
 8005564:	2b10      	cmp	r3, #16
 8005566:	d05a      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x15a>
 8005568:	e062      	b.n	8005630 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6899      	ldr	r1, [r3, #8]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f000 fd37 	bl	8005fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800558c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	609a      	str	r2, [r3, #8]
      break;
 8005596:	e04f      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	6899      	ldr	r1, [r3, #8]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f000 fd20 	bl	8005fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ba:	609a      	str	r2, [r3, #8]
      break;
 80055bc:	e03c      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f000 fbde 	bl	8005d8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2150      	movs	r1, #80	; 0x50
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fced 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 80055dc:	e02c      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6859      	ldr	r1, [r3, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f000 fc3a 	bl	8005e64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2160      	movs	r1, #96	; 0x60
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fcdd 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 80055fc:	e01c      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6859      	ldr	r1, [r3, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	461a      	mov	r2, r3
 800560c:	f000 fbbe 	bl	8005d8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2140      	movs	r1, #64	; 0x40
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fccd 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 800561c:	e00c      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f000 fcc4 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 800562e:	e003      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
      break;
 8005634:	e000      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	fffeff88 	.word	0xfffeff88

08005658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a40      	ldr	r2, [pc, #256]	; (80057bc <TIM_Base_SetConfig+0x114>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d00f      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3d      	ldr	r2, [pc, #244]	; (80057c0 <TIM_Base_SetConfig+0x118>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3c      	ldr	r2, [pc, #240]	; (80057c4 <TIM_Base_SetConfig+0x11c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3b      	ldr	r2, [pc, #236]	; (80057c8 <TIM_Base_SetConfig+0x120>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3a      	ldr	r2, [pc, #232]	; (80057cc <TIM_Base_SetConfig+0x124>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d108      	bne.n	80056fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <TIM_Base_SetConfig+0x114>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02b      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d027      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2c      	ldr	r2, [pc, #176]	; (80057c0 <TIM_Base_SetConfig+0x118>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d023      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2b      	ldr	r2, [pc, #172]	; (80057c4 <TIM_Base_SetConfig+0x11c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01f      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2a      	ldr	r2, [pc, #168]	; (80057c8 <TIM_Base_SetConfig+0x120>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01b      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a29      	ldr	r2, [pc, #164]	; (80057cc <TIM_Base_SetConfig+0x124>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d017      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <TIM_Base_SetConfig+0x128>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <TIM_Base_SetConfig+0x12c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00f      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a26      	ldr	r2, [pc, #152]	; (80057d8 <TIM_Base_SetConfig+0x130>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00b      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a25      	ldr	r2, [pc, #148]	; (80057dc <TIM_Base_SetConfig+0x134>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <TIM_Base_SetConfig+0x138>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a23      	ldr	r2, [pc, #140]	; (80057e4 <TIM_Base_SetConfig+0x13c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d108      	bne.n	800576c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <TIM_Base_SetConfig+0x114>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_Base_SetConfig+0xf8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <TIM_Base_SetConfig+0x124>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d103      	bne.n	80057a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	615a      	str	r2, [r3, #20]
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40010400 	.word	0x40010400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800
 80057dc:	40001800 	.word	0x40001800
 80057e0:	40001c00 	.word	0x40001c00
 80057e4:	40002000 	.word	0x40002000

080057e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4b2b      	ldr	r3, [pc, #172]	; (80058c0 <TIM_OC1_SetConfig+0xd8>)
 8005814:	4013      	ands	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0303 	bic.w	r3, r3, #3
 800581e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f023 0302 	bic.w	r3, r3, #2
 8005830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <TIM_OC1_SetConfig+0xdc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_OC1_SetConfig+0x64>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a20      	ldr	r2, [pc, #128]	; (80058c8 <TIM_OC1_SetConfig+0xe0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10c      	bne.n	8005866 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0308 	bic.w	r3, r3, #8
 8005852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 0304 	bic.w	r3, r3, #4
 8005864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <TIM_OC1_SetConfig+0xdc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_OC1_SetConfig+0x8e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <TIM_OC1_SetConfig+0xe0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d111      	bne.n	800589a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800587c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	621a      	str	r2, [r3, #32]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	fffeff8f 	.word	0xfffeff8f
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400

080058cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f023 0210 	bic.w	r2, r3, #16
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <TIM_OC2_SetConfig+0xe4>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0320 	bic.w	r3, r3, #32
 8005916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a23      	ldr	r2, [pc, #140]	; (80059b4 <TIM_OC2_SetConfig+0xe8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC2_SetConfig+0x68>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <TIM_OC2_SetConfig+0xec>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10d      	bne.n	8005950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <TIM_OC2_SetConfig+0xe8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_OC2_SetConfig+0x94>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <TIM_OC2_SetConfig+0xec>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d113      	bne.n	8005988 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800596e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	feff8fff 	.word	0xfeff8fff
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40010400 	.word	0x40010400

080059bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <TIM_OC3_SetConfig+0xe0>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <TIM_OC3_SetConfig+0xe4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC3_SetConfig+0x66>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a21      	ldr	r2, [pc, #132]	; (8005aa4 <TIM_OC3_SetConfig+0xe8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10d      	bne.n	8005a3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a17      	ldr	r2, [pc, #92]	; (8005aa0 <TIM_OC3_SetConfig+0xe4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_OC3_SetConfig+0x92>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a16      	ldr	r2, [pc, #88]	; (8005aa4 <TIM_OC3_SetConfig+0xe8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d113      	bne.n	8005a76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	fffeff8f 	.word	0xfffeff8f
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40010400 	.word	0x40010400

08005aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4b1e      	ldr	r3, [pc, #120]	; (8005b4c <TIM_OC4_SetConfig+0xa4>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	031b      	lsls	r3, r3, #12
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <TIM_OC4_SetConfig+0xa8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_OC4_SetConfig+0x68>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a12      	ldr	r2, [pc, #72]	; (8005b54 <TIM_OC4_SetConfig+0xac>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d109      	bne.n	8005b24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	019b      	lsls	r3, r3, #6
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	621a      	str	r2, [r3, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	feff8fff 	.word	0xfeff8fff
 8005b50:	40010000 	.word	0x40010000
 8005b54:	40010400 	.word	0x40010400

08005b58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4b1b      	ldr	r3, [pc, #108]	; (8005bf0 <TIM_OC5_SetConfig+0x98>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a12      	ldr	r2, [pc, #72]	; (8005bf4 <TIM_OC5_SetConfig+0x9c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_OC5_SetConfig+0x5e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <TIM_OC5_SetConfig+0xa0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d109      	bne.n	8005bca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	621a      	str	r2, [r3, #32]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	fffeff8f 	.word	0xfffeff8f
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40010400 	.word	0x40010400

08005bfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <TIM_OC6_SetConfig+0x9c>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	051b      	lsls	r3, r3, #20
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <TIM_OC6_SetConfig+0xa0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_OC6_SetConfig+0x60>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <TIM_OC6_SetConfig+0xa4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d109      	bne.n	8005c70 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	029b      	lsls	r3, r3, #10
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	feff8fff 	.word	0xfeff8fff
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40010400 	.word	0x40010400

08005ca4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0201 	bic.w	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a28      	ldr	r2, [pc, #160]	; (8005d70 <TIM_TI1_SetConfig+0xcc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01b      	beq.n	8005d0a <TIM_TI1_SetConfig+0x66>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd8:	d017      	beq.n	8005d0a <TIM_TI1_SetConfig+0x66>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <TIM_TI1_SetConfig+0xd0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <TIM_TI1_SetConfig+0x66>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a24      	ldr	r2, [pc, #144]	; (8005d78 <TIM_TI1_SetConfig+0xd4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00f      	beq.n	8005d0a <TIM_TI1_SetConfig+0x66>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a23      	ldr	r2, [pc, #140]	; (8005d7c <TIM_TI1_SetConfig+0xd8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00b      	beq.n	8005d0a <TIM_TI1_SetConfig+0x66>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a22      	ldr	r2, [pc, #136]	; (8005d80 <TIM_TI1_SetConfig+0xdc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d007      	beq.n	8005d0a <TIM_TI1_SetConfig+0x66>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a21      	ldr	r2, [pc, #132]	; (8005d84 <TIM_TI1_SetConfig+0xe0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_TI1_SetConfig+0x66>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a20      	ldr	r2, [pc, #128]	; (8005d88 <TIM_TI1_SetConfig+0xe4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d101      	bne.n	8005d0e <TIM_TI1_SetConfig+0x6a>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <TIM_TI1_SetConfig+0x6c>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f023 0303 	bic.w	r3, r3, #3
 8005d1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	e003      	b.n	8005d2e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f023 030a 	bic.w	r3, r3, #10
 8005d48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f003 030a 	and.w	r3, r3, #10
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40010400 	.word	0x40010400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40001800 	.word	0x40001800

08005d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0201 	bic.w	r2, r3, #1
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f023 030a 	bic.w	r3, r3, #10
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b087      	sub	sp, #28
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f023 0210 	bic.w	r2, r3, #16
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	031b      	lsls	r3, r3, #12
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f023 0210 	bic.w	r2, r3, #16
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	031b      	lsls	r3, r3, #12
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	621a      	str	r2, [r3, #32]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f023 0303 	bic.w	r3, r3, #3
 8005ef0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	621a      	str	r2, [r3, #32]
}
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	031b      	lsls	r3, r3, #12
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	031b      	lsls	r3, r3, #12
 8005f94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f043 0307 	orr.w	r3, r3, #7
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	609a      	str	r2, [r3, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	021a      	lsls	r2, r3, #8
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	431a      	orrs	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4313      	orrs	r3, r2
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	2201      	movs	r2, #1
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a1a      	ldr	r2, [r3, #32]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	43db      	mvns	r3, r3
 800604e:	401a      	ands	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1a      	ldr	r2, [r3, #32]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	fa01 f303 	lsl.w	r3, r1, r3
 8006064:	431a      	orrs	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
}
 800606a:	bf00      	nop
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
	...

08006078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800608c:	2302      	movs	r3, #2
 800608e:	e06d      	b.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a30      	ldr	r2, [pc, #192]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2f      	ldr	r2, [pc, #188]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d108      	bne.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a20      	ldr	r2, [pc, #128]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d022      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006102:	d01d      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1d      	ldr	r2, [pc, #116]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d018      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1c      	ldr	r2, [pc, #112]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1a      	ldr	r2, [pc, #104]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a15      	ldr	r2, [pc, #84]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a15      	ldr	r2, [pc, #84]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10c      	bne.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4313      	orrs	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40010000 	.word	0x40010000
 800617c:	40010400 	.word	0x40010400
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40014000 	.word	0x40014000
 8006190:	40001800 	.word	0x40001800

08006194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e065      	b.n	800627c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a16      	ldr	r2, [pc, #88]	; (8006288 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a14      	ldr	r2, [pc, #80]	; (800628c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d115      	bne.n	800626a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	051b      	lsls	r3, r3, #20
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e040      	b.n	8006360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fb fe44 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0201 	bic.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f974 	bl	80065f8 <UART_SetConfig>
 8006310:	4603      	mov	r3, r0
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e022      	b.n	8006360 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fbcc 	bl	8006ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fc53 	bl	8006c04 <UART_CheckIdleState>
 800635e:	4603      	mov	r3, r0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af02      	add	r7, sp, #8
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800637c:	2b20      	cmp	r3, #32
 800637e:	d171      	bne.n	8006464 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_UART_Transmit+0x24>
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e06a      	b.n	8006466 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2221      	movs	r2, #33	; 0x21
 800639c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800639e:	f7fc f865 	bl	800246c <HAL_GetTick>
 80063a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	88fa      	ldrh	r2, [r7, #6]
 80063b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063bc:	d108      	bne.n	80063d0 <HAL_UART_Transmit+0x68>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	e003      	b.n	80063d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063d8:	e02c      	b.n	8006434 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	2180      	movs	r1, #128	; 0x80
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fc5a 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e038      	b.n	8006466 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10b      	bne.n	8006412 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006408:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	3302      	adds	r3, #2
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	e007      	b.n	8006422 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	781a      	ldrb	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	3301      	adds	r3, #1
 8006420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1cc      	bne.n	80063da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2200      	movs	r2, #0
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fc27 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e005      	b.n	8006466 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	e000      	b.n	8006466 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006464:	2302      	movs	r3, #2
  }
}
 8006466:	4618      	mov	r0, r3
 8006468:	3720      	adds	r7, #32
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b08a      	sub	sp, #40	; 0x28
 8006472:	af02      	add	r7, sp, #8
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006484:	2b20      	cmp	r3, #32
 8006486:	f040 80b1 	bne.w	80065ec <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_UART_Receive+0x28>
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e0a9      	b.n	80065ee <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2222      	movs	r2, #34	; 0x22
 80064a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b0:	f7fb ffdc 	bl	800246c <HAL_GetTick>
 80064b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	88fa      	ldrh	r2, [r7, #6]
 80064c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ce:	d10e      	bne.n	80064ee <HAL_UART_Receive+0x80>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d105      	bne.n	80064e4 <HAL_UART_Receive+0x76>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064e2:	e02d      	b.n	8006540 <HAL_UART_Receive+0xd2>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	22ff      	movs	r2, #255	; 0xff
 80064e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064ec:	e028      	b.n	8006540 <HAL_UART_Receive+0xd2>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10d      	bne.n	8006512 <HAL_UART_Receive+0xa4>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <HAL_UART_Receive+0x9a>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	22ff      	movs	r2, #255	; 0xff
 8006502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006506:	e01b      	b.n	8006540 <HAL_UART_Receive+0xd2>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	227f      	movs	r2, #127	; 0x7f
 800650c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006510:	e016      	b.n	8006540 <HAL_UART_Receive+0xd2>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800651a:	d10d      	bne.n	8006538 <HAL_UART_Receive+0xca>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <HAL_UART_Receive+0xc0>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	227f      	movs	r2, #127	; 0x7f
 8006528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800652c:	e008      	b.n	8006540 <HAL_UART_Receive+0xd2>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	223f      	movs	r2, #63	; 0x3f
 8006532:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006536:	e003      	b.n	8006540 <HAL_UART_Receive+0xd2>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006546:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006550:	d108      	bne.n	8006564 <HAL_UART_Receive+0xf6>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	e003      	b.n	800656c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800656c:	e032      	b.n	80065d4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2200      	movs	r2, #0
 8006576:	2120      	movs	r1, #32
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fb90 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e032      	b.n	80065ee <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10c      	bne.n	80065a8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	b29a      	uxth	r2, r3
 8006596:	8a7b      	ldrh	r3, [r7, #18]
 8006598:	4013      	ands	r3, r2
 800659a:	b29a      	uxth	r2, r3
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	3302      	adds	r3, #2
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	e00c      	b.n	80065c2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	8a7b      	ldrh	r3, [r7, #18]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	4013      	ands	r3, r2
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	3301      	adds	r3, #1
 80065c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1c6      	bne.n	800656e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e000      	b.n	80065ee <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80065ec:	2302      	movs	r3, #2
  }
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4ba6      	ldr	r3, [pc, #664]	; (80068bc <UART_SetConfig+0x2c4>)
 8006624:	4013      	ands	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6812      	ldr	r2, [r2, #0]
 800662a:	6979      	ldr	r1, [r7, #20]
 800662c:	430b      	orrs	r3, r1
 800662e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	430a      	orrs	r2, r1
 8006668:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a94      	ldr	r2, [pc, #592]	; (80068c0 <UART_SetConfig+0x2c8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d120      	bne.n	80066b6 <UART_SetConfig+0xbe>
 8006674:	4b93      	ldr	r3, [pc, #588]	; (80068c4 <UART_SetConfig+0x2cc>)
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	2b03      	cmp	r3, #3
 8006680:	d816      	bhi.n	80066b0 <UART_SetConfig+0xb8>
 8006682:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0x90>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	08006699 	.word	0x08006699
 800668c:	080066a5 	.word	0x080066a5
 8006690:	0800669f 	.word	0x0800669f
 8006694:	080066ab 	.word	0x080066ab
 8006698:	2301      	movs	r3, #1
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e150      	b.n	8006940 <UART_SetConfig+0x348>
 800669e:	2302      	movs	r3, #2
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e14d      	b.n	8006940 <UART_SetConfig+0x348>
 80066a4:	2304      	movs	r3, #4
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e14a      	b.n	8006940 <UART_SetConfig+0x348>
 80066aa:	2308      	movs	r3, #8
 80066ac:	77fb      	strb	r3, [r7, #31]
 80066ae:	e147      	b.n	8006940 <UART_SetConfig+0x348>
 80066b0:	2310      	movs	r3, #16
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e144      	b.n	8006940 <UART_SetConfig+0x348>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a83      	ldr	r2, [pc, #524]	; (80068c8 <UART_SetConfig+0x2d0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d132      	bne.n	8006726 <UART_SetConfig+0x12e>
 80066c0:	4b80      	ldr	r3, [pc, #512]	; (80068c4 <UART_SetConfig+0x2cc>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b0c      	cmp	r3, #12
 80066cc:	d828      	bhi.n	8006720 <UART_SetConfig+0x128>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <UART_SetConfig+0xdc>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	08006709 	.word	0x08006709
 80066d8:	08006721 	.word	0x08006721
 80066dc:	08006721 	.word	0x08006721
 80066e0:	08006721 	.word	0x08006721
 80066e4:	08006715 	.word	0x08006715
 80066e8:	08006721 	.word	0x08006721
 80066ec:	08006721 	.word	0x08006721
 80066f0:	08006721 	.word	0x08006721
 80066f4:	0800670f 	.word	0x0800670f
 80066f8:	08006721 	.word	0x08006721
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006721 	.word	0x08006721
 8006704:	0800671b 	.word	0x0800671b
 8006708:	2300      	movs	r3, #0
 800670a:	77fb      	strb	r3, [r7, #31]
 800670c:	e118      	b.n	8006940 <UART_SetConfig+0x348>
 800670e:	2302      	movs	r3, #2
 8006710:	77fb      	strb	r3, [r7, #31]
 8006712:	e115      	b.n	8006940 <UART_SetConfig+0x348>
 8006714:	2304      	movs	r3, #4
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e112      	b.n	8006940 <UART_SetConfig+0x348>
 800671a:	2308      	movs	r3, #8
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e10f      	b.n	8006940 <UART_SetConfig+0x348>
 8006720:	2310      	movs	r3, #16
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e10c      	b.n	8006940 <UART_SetConfig+0x348>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a68      	ldr	r2, [pc, #416]	; (80068cc <UART_SetConfig+0x2d4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d120      	bne.n	8006772 <UART_SetConfig+0x17a>
 8006730:	4b64      	ldr	r3, [pc, #400]	; (80068c4 <UART_SetConfig+0x2cc>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800673a:	2b30      	cmp	r3, #48	; 0x30
 800673c:	d013      	beq.n	8006766 <UART_SetConfig+0x16e>
 800673e:	2b30      	cmp	r3, #48	; 0x30
 8006740:	d814      	bhi.n	800676c <UART_SetConfig+0x174>
 8006742:	2b20      	cmp	r3, #32
 8006744:	d009      	beq.n	800675a <UART_SetConfig+0x162>
 8006746:	2b20      	cmp	r3, #32
 8006748:	d810      	bhi.n	800676c <UART_SetConfig+0x174>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <UART_SetConfig+0x15c>
 800674e:	2b10      	cmp	r3, #16
 8006750:	d006      	beq.n	8006760 <UART_SetConfig+0x168>
 8006752:	e00b      	b.n	800676c <UART_SetConfig+0x174>
 8006754:	2300      	movs	r3, #0
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e0f2      	b.n	8006940 <UART_SetConfig+0x348>
 800675a:	2302      	movs	r3, #2
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e0ef      	b.n	8006940 <UART_SetConfig+0x348>
 8006760:	2304      	movs	r3, #4
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e0ec      	b.n	8006940 <UART_SetConfig+0x348>
 8006766:	2308      	movs	r3, #8
 8006768:	77fb      	strb	r3, [r7, #31]
 800676a:	e0e9      	b.n	8006940 <UART_SetConfig+0x348>
 800676c:	2310      	movs	r3, #16
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e0e6      	b.n	8006940 <UART_SetConfig+0x348>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a56      	ldr	r2, [pc, #344]	; (80068d0 <UART_SetConfig+0x2d8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d120      	bne.n	80067be <UART_SetConfig+0x1c6>
 800677c:	4b51      	ldr	r3, [pc, #324]	; (80068c4 <UART_SetConfig+0x2cc>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006786:	2bc0      	cmp	r3, #192	; 0xc0
 8006788:	d013      	beq.n	80067b2 <UART_SetConfig+0x1ba>
 800678a:	2bc0      	cmp	r3, #192	; 0xc0
 800678c:	d814      	bhi.n	80067b8 <UART_SetConfig+0x1c0>
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d009      	beq.n	80067a6 <UART_SetConfig+0x1ae>
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d810      	bhi.n	80067b8 <UART_SetConfig+0x1c0>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <UART_SetConfig+0x1a8>
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d006      	beq.n	80067ac <UART_SetConfig+0x1b4>
 800679e:	e00b      	b.n	80067b8 <UART_SetConfig+0x1c0>
 80067a0:	2300      	movs	r3, #0
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e0cc      	b.n	8006940 <UART_SetConfig+0x348>
 80067a6:	2302      	movs	r3, #2
 80067a8:	77fb      	strb	r3, [r7, #31]
 80067aa:	e0c9      	b.n	8006940 <UART_SetConfig+0x348>
 80067ac:	2304      	movs	r3, #4
 80067ae:	77fb      	strb	r3, [r7, #31]
 80067b0:	e0c6      	b.n	8006940 <UART_SetConfig+0x348>
 80067b2:	2308      	movs	r3, #8
 80067b4:	77fb      	strb	r3, [r7, #31]
 80067b6:	e0c3      	b.n	8006940 <UART_SetConfig+0x348>
 80067b8:	2310      	movs	r3, #16
 80067ba:	77fb      	strb	r3, [r7, #31]
 80067bc:	e0c0      	b.n	8006940 <UART_SetConfig+0x348>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a44      	ldr	r2, [pc, #272]	; (80068d4 <UART_SetConfig+0x2dc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d125      	bne.n	8006814 <UART_SetConfig+0x21c>
 80067c8:	4b3e      	ldr	r3, [pc, #248]	; (80068c4 <UART_SetConfig+0x2cc>)
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d6:	d017      	beq.n	8006808 <UART_SetConfig+0x210>
 80067d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067dc:	d817      	bhi.n	800680e <UART_SetConfig+0x216>
 80067de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e2:	d00b      	beq.n	80067fc <UART_SetConfig+0x204>
 80067e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e8:	d811      	bhi.n	800680e <UART_SetConfig+0x216>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <UART_SetConfig+0x1fe>
 80067ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f2:	d006      	beq.n	8006802 <UART_SetConfig+0x20a>
 80067f4:	e00b      	b.n	800680e <UART_SetConfig+0x216>
 80067f6:	2300      	movs	r3, #0
 80067f8:	77fb      	strb	r3, [r7, #31]
 80067fa:	e0a1      	b.n	8006940 <UART_SetConfig+0x348>
 80067fc:	2302      	movs	r3, #2
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e09e      	b.n	8006940 <UART_SetConfig+0x348>
 8006802:	2304      	movs	r3, #4
 8006804:	77fb      	strb	r3, [r7, #31]
 8006806:	e09b      	b.n	8006940 <UART_SetConfig+0x348>
 8006808:	2308      	movs	r3, #8
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e098      	b.n	8006940 <UART_SetConfig+0x348>
 800680e:	2310      	movs	r3, #16
 8006810:	77fb      	strb	r3, [r7, #31]
 8006812:	e095      	b.n	8006940 <UART_SetConfig+0x348>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2f      	ldr	r2, [pc, #188]	; (80068d8 <UART_SetConfig+0x2e0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d125      	bne.n	800686a <UART_SetConfig+0x272>
 800681e:	4b29      	ldr	r3, [pc, #164]	; (80068c4 <UART_SetConfig+0x2cc>)
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800682c:	d017      	beq.n	800685e <UART_SetConfig+0x266>
 800682e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006832:	d817      	bhi.n	8006864 <UART_SetConfig+0x26c>
 8006834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006838:	d00b      	beq.n	8006852 <UART_SetConfig+0x25a>
 800683a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683e:	d811      	bhi.n	8006864 <UART_SetConfig+0x26c>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <UART_SetConfig+0x254>
 8006844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006848:	d006      	beq.n	8006858 <UART_SetConfig+0x260>
 800684a:	e00b      	b.n	8006864 <UART_SetConfig+0x26c>
 800684c:	2301      	movs	r3, #1
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	e076      	b.n	8006940 <UART_SetConfig+0x348>
 8006852:	2302      	movs	r3, #2
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e073      	b.n	8006940 <UART_SetConfig+0x348>
 8006858:	2304      	movs	r3, #4
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e070      	b.n	8006940 <UART_SetConfig+0x348>
 800685e:	2308      	movs	r3, #8
 8006860:	77fb      	strb	r3, [r7, #31]
 8006862:	e06d      	b.n	8006940 <UART_SetConfig+0x348>
 8006864:	2310      	movs	r3, #16
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e06a      	b.n	8006940 <UART_SetConfig+0x348>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1b      	ldr	r2, [pc, #108]	; (80068dc <UART_SetConfig+0x2e4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d138      	bne.n	80068e6 <UART_SetConfig+0x2ee>
 8006874:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <UART_SetConfig+0x2cc>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800687e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006882:	d017      	beq.n	80068b4 <UART_SetConfig+0x2bc>
 8006884:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006888:	d82a      	bhi.n	80068e0 <UART_SetConfig+0x2e8>
 800688a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800688e:	d00b      	beq.n	80068a8 <UART_SetConfig+0x2b0>
 8006890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006894:	d824      	bhi.n	80068e0 <UART_SetConfig+0x2e8>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <UART_SetConfig+0x2aa>
 800689a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689e:	d006      	beq.n	80068ae <UART_SetConfig+0x2b6>
 80068a0:	e01e      	b.n	80068e0 <UART_SetConfig+0x2e8>
 80068a2:	2300      	movs	r3, #0
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e04b      	b.n	8006940 <UART_SetConfig+0x348>
 80068a8:	2302      	movs	r3, #2
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e048      	b.n	8006940 <UART_SetConfig+0x348>
 80068ae:	2304      	movs	r3, #4
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e045      	b.n	8006940 <UART_SetConfig+0x348>
 80068b4:	2308      	movs	r3, #8
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e042      	b.n	8006940 <UART_SetConfig+0x348>
 80068ba:	bf00      	nop
 80068bc:	efff69f3 	.word	0xefff69f3
 80068c0:	40011000 	.word	0x40011000
 80068c4:	40023800 	.word	0x40023800
 80068c8:	40004400 	.word	0x40004400
 80068cc:	40004800 	.word	0x40004800
 80068d0:	40004c00 	.word	0x40004c00
 80068d4:	40005000 	.word	0x40005000
 80068d8:	40011400 	.word	0x40011400
 80068dc:	40007800 	.word	0x40007800
 80068e0:	2310      	movs	r3, #16
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e02c      	b.n	8006940 <UART_SetConfig+0x348>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a72      	ldr	r2, [pc, #456]	; (8006ab4 <UART_SetConfig+0x4bc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d125      	bne.n	800693c <UART_SetConfig+0x344>
 80068f0:	4b71      	ldr	r3, [pc, #452]	; (8006ab8 <UART_SetConfig+0x4c0>)
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068fe:	d017      	beq.n	8006930 <UART_SetConfig+0x338>
 8006900:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006904:	d817      	bhi.n	8006936 <UART_SetConfig+0x33e>
 8006906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690a:	d00b      	beq.n	8006924 <UART_SetConfig+0x32c>
 800690c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006910:	d811      	bhi.n	8006936 <UART_SetConfig+0x33e>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <UART_SetConfig+0x326>
 8006916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800691a:	d006      	beq.n	800692a <UART_SetConfig+0x332>
 800691c:	e00b      	b.n	8006936 <UART_SetConfig+0x33e>
 800691e:	2300      	movs	r3, #0
 8006920:	77fb      	strb	r3, [r7, #31]
 8006922:	e00d      	b.n	8006940 <UART_SetConfig+0x348>
 8006924:	2302      	movs	r3, #2
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e00a      	b.n	8006940 <UART_SetConfig+0x348>
 800692a:	2304      	movs	r3, #4
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e007      	b.n	8006940 <UART_SetConfig+0x348>
 8006930:	2308      	movs	r3, #8
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e004      	b.n	8006940 <UART_SetConfig+0x348>
 8006936:	2310      	movs	r3, #16
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e001      	b.n	8006940 <UART_SetConfig+0x348>
 800693c:	2310      	movs	r3, #16
 800693e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	d15b      	bne.n	8006a02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800694a:	7ffb      	ldrb	r3, [r7, #31]
 800694c:	2b08      	cmp	r3, #8
 800694e:	d828      	bhi.n	80069a2 <UART_SetConfig+0x3aa>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x360>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	0800697d 	.word	0x0800697d
 800695c:	08006985 	.word	0x08006985
 8006960:	0800698d 	.word	0x0800698d
 8006964:	080069a3 	.word	0x080069a3
 8006968:	08006993 	.word	0x08006993
 800696c:	080069a3 	.word	0x080069a3
 8006970:	080069a3 	.word	0x080069a3
 8006974:	080069a3 	.word	0x080069a3
 8006978:	0800699b 	.word	0x0800699b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800697c:	f7fd f946 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8006980:	61b8      	str	r0, [r7, #24]
        break;
 8006982:	e013      	b.n	80069ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006984:	f7fd f956 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8006988:	61b8      	str	r0, [r7, #24]
        break;
 800698a:	e00f      	b.n	80069ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800698c:	4b4b      	ldr	r3, [pc, #300]	; (8006abc <UART_SetConfig+0x4c4>)
 800698e:	61bb      	str	r3, [r7, #24]
        break;
 8006990:	e00c      	b.n	80069ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006992:	f7fd f829 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8006996:	61b8      	str	r0, [r7, #24]
        break;
 8006998:	e008      	b.n	80069ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800699e:	61bb      	str	r3, [r7, #24]
        break;
 80069a0:	e004      	b.n	80069ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	77bb      	strb	r3, [r7, #30]
        break;
 80069aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d074      	beq.n	8006a9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	005a      	lsls	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	085b      	lsrs	r3, r3, #1
 80069bc:	441a      	add	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2b0f      	cmp	r3, #15
 80069cc:	d916      	bls.n	80069fc <UART_SetConfig+0x404>
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d4:	d212      	bcs.n	80069fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f023 030f 	bic.w	r3, r3, #15
 80069de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	085b      	lsrs	r3, r3, #1
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	89fb      	ldrh	r3, [r7, #14]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	89fa      	ldrh	r2, [r7, #14]
 80069f8:	60da      	str	r2, [r3, #12]
 80069fa:	e04f      	b.n	8006a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	77bb      	strb	r3, [r7, #30]
 8006a00:	e04c      	b.n	8006a9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a02:	7ffb      	ldrb	r3, [r7, #31]
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d828      	bhi.n	8006a5a <UART_SetConfig+0x462>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <UART_SetConfig+0x418>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a3d 	.word	0x08006a3d
 8006a18:	08006a45 	.word	0x08006a45
 8006a1c:	08006a5b 	.word	0x08006a5b
 8006a20:	08006a4b 	.word	0x08006a4b
 8006a24:	08006a5b 	.word	0x08006a5b
 8006a28:	08006a5b 	.word	0x08006a5b
 8006a2c:	08006a5b 	.word	0x08006a5b
 8006a30:	08006a53 	.word	0x08006a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a34:	f7fd f8ea 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8006a38:	61b8      	str	r0, [r7, #24]
        break;
 8006a3a:	e013      	b.n	8006a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a3c:	f7fd f8fa 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8006a40:	61b8      	str	r0, [r7, #24]
        break;
 8006a42:	e00f      	b.n	8006a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a44:	4b1d      	ldr	r3, [pc, #116]	; (8006abc <UART_SetConfig+0x4c4>)
 8006a46:	61bb      	str	r3, [r7, #24]
        break;
 8006a48:	e00c      	b.n	8006a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a4a:	f7fc ffcd 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8006a4e:	61b8      	str	r0, [r7, #24]
        break;
 8006a50:	e008      	b.n	8006a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a56:	61bb      	str	r3, [r7, #24]
        break;
 8006a58:	e004      	b.n	8006a64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	77bb      	strb	r3, [r7, #30]
        break;
 8006a62:	bf00      	nop
    }

    if (pclk != 0U)
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d018      	beq.n	8006a9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	085a      	lsrs	r2, r3, #1
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	441a      	add	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b0f      	cmp	r3, #15
 8006a82:	d909      	bls.n	8006a98 <UART_SetConfig+0x4a0>
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8a:	d205      	bcs.n	8006a98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60da      	str	r2, [r3, #12]
 8006a96:	e001      	b.n	8006a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006aa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	40007c00 	.word	0x40007c00
 8006ab8:	40023800 	.word	0x40023800
 8006abc:	00f42400 	.word	0x00f42400

08006ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbe:	d10a      	bne.n	8006bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c14:	f7fb fc2a 	bl	800246c <HAL_GetTick>
 8006c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d10e      	bne.n	8006c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f831 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e027      	b.n	8006c96 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d10e      	bne.n	8006c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f81b 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e011      	b.n	8006c96 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b09c      	sub	sp, #112	; 0x70
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	603b      	str	r3, [r7, #0]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cae:	e0a7      	b.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	f000 80a3 	beq.w	8006e00 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cba:	f7fb fbd7 	bl	800246c <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d302      	bcc.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d13f      	bne.n	8006d50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cf0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e6      	bne.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3308      	adds	r3, #8
 8006d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	663b      	str	r3, [r7, #96]	; 0x60
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d22:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e5      	bne.n	8006d02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e068      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d050      	beq.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6c:	d148      	bne.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d76:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d96:	637b      	str	r3, [r7, #52]	; 0x34
 8006d98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e6      	bne.n	8006d78 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f023 0301 	bic.w	r3, r3, #1
 8006dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dca:	623a      	str	r2, [r7, #32]
 8006dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	69f9      	ldr	r1, [r7, #28]
 8006dd0:	6a3a      	ldr	r2, [r7, #32]
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e5      	bne.n	8006daa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2220      	movs	r2, #32
 8006de2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e010      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69da      	ldr	r2, [r3, #28]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	bf0c      	ite	eq
 8006e10:	2301      	moveq	r3, #1
 8006e12:	2300      	movne	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	f43f af48 	beq.w	8006cb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3770      	adds	r7, #112	; 0x70
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <__libc_init_array>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4d0d      	ldr	r5, [pc, #52]	; (8006e64 <__libc_init_array+0x38>)
 8006e30:	4c0d      	ldr	r4, [pc, #52]	; (8006e68 <__libc_init_array+0x3c>)
 8006e32:	1b64      	subs	r4, r4, r5
 8006e34:	10a4      	asrs	r4, r4, #2
 8006e36:	2600      	movs	r6, #0
 8006e38:	42a6      	cmp	r6, r4
 8006e3a:	d109      	bne.n	8006e50 <__libc_init_array+0x24>
 8006e3c:	4d0b      	ldr	r5, [pc, #44]	; (8006e6c <__libc_init_array+0x40>)
 8006e3e:	4c0c      	ldr	r4, [pc, #48]	; (8006e70 <__libc_init_array+0x44>)
 8006e40:	f000 f82e 	bl	8006ea0 <_init>
 8006e44:	1b64      	subs	r4, r4, r5
 8006e46:	10a4      	asrs	r4, r4, #2
 8006e48:	2600      	movs	r6, #0
 8006e4a:	42a6      	cmp	r6, r4
 8006e4c:	d105      	bne.n	8006e5a <__libc_init_array+0x2e>
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e54:	4798      	blx	r3
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7ee      	b.n	8006e38 <__libc_init_array+0xc>
 8006e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5e:	4798      	blx	r3
 8006e60:	3601      	adds	r6, #1
 8006e62:	e7f2      	b.n	8006e4a <__libc_init_array+0x1e>
 8006e64:	08006ed8 	.word	0x08006ed8
 8006e68:	08006ed8 	.word	0x08006ed8
 8006e6c:	08006ed8 	.word	0x08006ed8
 8006e70:	08006edc 	.word	0x08006edc

08006e74 <memcpy>:
 8006e74:	440a      	add	r2, r1
 8006e76:	4291      	cmp	r1, r2
 8006e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e7c:	d100      	bne.n	8006e80 <memcpy+0xc>
 8006e7e:	4770      	bx	lr
 8006e80:	b510      	push	{r4, lr}
 8006e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e8a:	4291      	cmp	r1, r2
 8006e8c:	d1f9      	bne.n	8006e82 <memcpy+0xe>
 8006e8e:	bd10      	pop	{r4, pc}

08006e90 <memset>:
 8006e90:	4402      	add	r2, r0
 8006e92:	4603      	mov	r3, r0
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d100      	bne.n	8006e9a <memset+0xa>
 8006e98:	4770      	bx	lr
 8006e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9e:	e7f9      	b.n	8006e94 <memset+0x4>

08006ea0 <_init>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	bf00      	nop
 8006ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea6:	bc08      	pop	{r3}
 8006ea8:	469e      	mov	lr, r3
 8006eaa:	4770      	bx	lr

08006eac <_fini>:
 8006eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eae:	bf00      	nop
 8006eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eb2:	bc08      	pop	{r3}
 8006eb4:	469e      	mov	lr, r3
 8006eb6:	4770      	bx	lr
