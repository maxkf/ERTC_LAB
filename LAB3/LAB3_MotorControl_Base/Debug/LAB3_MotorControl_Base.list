
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d98  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa8  08006fa8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fb0  08006fb0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fb4  08006fb4  00016fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  20000018  08006fd0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08006fd0  00020784  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b26  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296b  00000000  00000000  00037b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029428  00000000  00000000  0003cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a218  00000000  00000000  00066008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010468c  00000000  00000000  00080220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001848ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000558c  00000000  00000000  001848fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000018 	.word	0x20000018
 8000214:	00000000 	.word	0x00000000
 8000218:	08006f78 	.word	0x08006f78

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000001c 	.word	0x2000001c
 8000234:	08006f78 	.word	0x08006f78

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 800053c:	b480      	push	{r7}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	607a      	str	r2, [r7, #4]
 8000556:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000558:	2301      	movs	r3, #1
 800055a:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 800055c:	e025      	b.n	80005aa <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d109      	bne.n	800057a <cobsEncode+0x3e>
            FinishBlock(code);
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	7efa      	ldrb	r2, [r7, #27]
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	607a      	str	r2, [r7, #4]
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	2301      	movs	r3, #1
 8000576:	76fb      	strb	r3, [r7, #27]
 8000578:	e014      	b.n	80005a4 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 8000586:	7efb      	ldrb	r3, [r7, #27]
 8000588:	3301      	adds	r3, #1
 800058a:	76fb      	strb	r3, [r7, #27]
 800058c:	7efb      	ldrb	r3, [r7, #27]
 800058e:	2bff      	cmp	r3, #255	; 0xff
 8000590:	d108      	bne.n	80005a4 <cobsEncode+0x68>
                FinishBlock(code);
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	7efa      	ldrb	r2, [r7, #27]
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	607a      	str	r2, [r7, #4]
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	2301      	movs	r3, #1
 80005a2:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3d5      	bcc.n	800055e <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	7efa      	ldrb	r2, [r7, #27]
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	2301      	movs	r3, #1
 80005c2:	76fb      	strb	r3, [r7, #27]
}
 80005c4:	bf00      	nop
 80005c6:	3724      	adds	r7, #36	; 0x24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d01c      	beq.n	800061e <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3321      	adds	r3, #33	; 0x21
 80005e8:	461a      	mov	r2, r3
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	68b8      	ldr	r0, [r7, #8]
 80005ee:	f7ff ffa5 	bl	800053c <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	b29b      	uxth	r3, r3
 8000610:	3302      	adds	r3, #2
 8000612:	b29a      	uxth	r2, r3
 8000614:	2303      	movs	r3, #3
 8000616:	f005 ff13 	bl	8006440 <HAL_UART_Transmit>
 800061a:	4603      	mov	r3, r0
 800061c:	e000      	b.n	8000620 <ertc_dlog_send+0x50>
	}

	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1c59      	adds	r1, r3, #1
 800063a:	2303      	movs	r3, #3
 800063c:	2201      	movs	r2, #1
 800063e:	f005 ff82 	bl	8006546 <HAL_UART_Receive>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d112      	bne.n	800066e <ertc_dlog_update+0x46>
		switch (logger->rxbuff[0]) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	2b41      	cmp	r3, #65	; 0x41
 800064e:	d002      	beq.n	8000656 <ertc_dlog_update+0x2e>
 8000650:	2b42      	cmp	r3, #66	; 0x42
 8000652:	d004      	beq.n	800065e <ertc_dlog_update+0x36>
 8000654:	e007      	b.n	8000666 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
				break;
 800065c:	e008      	b.n	8000670 <ertc_dlog_update+0x48>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
				break;
 8000664:	e004      	b.n	8000670 <ertc_dlog_update+0x48>
			default:
				logger->tx_enable = false;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	e000      	b.n	8000670 <ertc_dlog_update+0x48>
		}
	}
 800066e:	bf00      	nop
	return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	0000      	movs	r0, r0
 800067c:	0000      	movs	r0, r0
	...

08000680 <HAL_TIM_PeriodElapsedCallback>:
	float u2;
} data;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a72      	ldr	r2, [pc, #456]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800068e:	4293      	cmp	r3, r2
 8000690:	f040 80d0 	bne.w	8000834 <HAL_TIM_PeriodElapsedCallback+0x1b4>

		uint32_t TIM3_CurrentCount;
		int32_t TIM3_DiffCount;
		static uint32_t TIM3_PreviousCount = 0;

		TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 8000694:	4b71      	ldr	r3, [pc, #452]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	61bb      	str	r3, [r7, #24]

		/*  evaluate increment of TIM3 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 800069c:	4b6f      	ldr	r3, [pc, #444]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f003 0310 	and.w	r3, r3, #16
 80006a6:	2b10      	cmp	r3, #16
 80006a8:	d112      	bne.n	80006d0 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			/* check for counter underflow */
			if (TIM3_CurrentCount <= TIM3_PreviousCount)
 80006aa:	4b6d      	ldr	r3, [pc, #436]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	69ba      	ldr	r2, [r7, #24]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d805      	bhi.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x40>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80006b4:	4b6a      	ldr	r3, [pc, #424]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	69ba      	ldr	r2, [r7, #24]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	e019      	b.n	80006f4 <HAL_TIM_PeriodElapsedCallback+0x74>
			else
				TIM3_DiffCount = -((TIM3_ARR_VALUE+1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 80006c0:	4b67      	ldr	r3, [pc, #412]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	69ba      	ldr	r2, [r7, #24]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 80006cc:	61fb      	str	r3, [r7, #28]
 80006ce:	e011      	b.n	80006f4 <HAL_TIM_PeriodElapsedCallback+0x74>
		}
		else
		{
		/* check for counter overflow */
			if (TIM3_CurrentCount >= TIM3_PreviousCount)
 80006d0:	4b63      	ldr	r3, [pc, #396]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d305      	bcc.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0x66>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80006da:	4b61      	ldr	r3, [pc, #388]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	69ba      	ldr	r2, [r7, #24]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	61fb      	str	r3, [r7, #28]
 80006e4:	e006      	b.n	80006f4 <HAL_TIM_PeriodElapsedCallback+0x74>
			else
				TIM3_DiffCount = ((TIM3_ARR_VALUE+1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 80006e6:	4b5e      	ldr	r3, [pc, #376]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	69ba      	ldr	r2, [r7, #24]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80006f2:	61fb      	str	r3, [r7, #28]
		}

		TIM3_PreviousCount = TIM3_CurrentCount;
 80006f4:	4a5a      	ldr	r2, [pc, #360]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	6013      	str	r3, [r2, #0]
	    // 3. compute the motor speed, in [rpm] for example
		double current_rpm = (TIM3_DiffCount/(2*1920))*(60/TS );
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	4a59      	ldr	r2, [pc, #356]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	441a      	add	r2, r3
 8000704:	12d2      	asrs	r2, r2, #11
 8000706:	17db      	asrs	r3, r3, #31
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	ee07 3a90 	vmov	s15, r3
 800070e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000712:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8000840 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000716:	ee27 7b06 	vmul.f64	d7, d7, d6
 800071a:	ed87 7b04 	vstr	d7, [r7, #16]
		current_rpm = (TIM3_DiffCount/(1920.0))*(60/TS );
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	ee07 3a90 	vmov	s15, r3
 8000724:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000728:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8000848 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 800072c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000730:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8000840 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000734:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000738:	ed87 7b04 	vstr	d7, [r7, #16]
	    // reference_rpm = 20;
	    tracking_error = reference_rpm - current_rpm;
 800073c:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000746:	ed97 7b04 	vldr	d7, [r7, #16]
 800074a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800074e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000752:	4b46      	ldr	r3, [pc, #280]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000754:	edc3 7a00 	vstr	s15, [r3]
	    /* 4. compute the tracking error
	    * 5. compute the proportional term
	    * 6. compute the integral term (simplest way is to use forward Euler method) * u_int=u_int+Ki*TS*err
	    * 7. calculate the PI signal and set the pwm of the motor properly
	    */
	     controller_return = PI_controller(tracking_error);
 8000758:	4b44      	ldr	r3, [pc, #272]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800075a:	edd3 7a00 	vldr	s15, [r3]
 800075e:	eeb0 0a67 	vmov.f32	s0, s15
 8000762:	f000 f891 	bl	8000888 <PI_controller>
 8000766:	eef0 7a40 	vmov.f32	s15, s0
 800076a:	4b41      	ldr	r3, [pc, #260]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800076c:	edc3 7a00 	vstr	s15, [r3]

	     motor_V = controller_return ;
 8000770:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a3f      	ldr	r2, [pc, #252]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000776:	6013      	str	r3, [r2, #0]


	    // anti windup
	    if(motor_V > 8)
 8000778:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800077a:	edd3 7a00 	vldr	s15, [r3]
 800077e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078a:	dd03      	ble.n	8000794 <HAL_TIM_PeriodElapsedCallback+0x114>
	    	motor_V = 8;
 800078c:	4b39      	ldr	r3, [pc, #228]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800078e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8000792:	601a      	str	r2, [r3, #0]
	    if(motor_V < -8)
 8000794:	4b37      	ldr	r3, [pc, #220]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000796:	edd3 7a00 	vldr	s15, [r3]
 800079a:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800079e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a6:	d503      	bpl.n	80007b0 <HAL_TIM_PeriodElapsedCallback+0x130>
			motor_V = -8;
 80007a8:	4b32      	ldr	r3, [pc, #200]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80007aa:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80007ae:	601a      	str	r2, [r3, #0]

	    motor_V = 2;
 80007b0:	4b30      	ldr	r3, [pc, #192]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80007b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b6:	601a      	str	r2, [r3, #0]

	    int32_t duty = V2DUTY*motor_V;
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80007ba:	edd3 7a00 	vldr	s15, [r3]
 80007be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007c2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000850 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80007c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007ca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007ce:	ee17 3a90 	vmov	r3, s15
 80007d2:	60fb      	str	r3, [r7, #12]
	    // command a motor
		/* calculate duty properly */
		if (duty >= 0) {
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db0c      	blt.n	80007f4 <HAL_TIM_PeriodElapsedCallback+0x174>
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);


			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f240 128f 	movw	r2, #399	; 0x18f
 80007e2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, TIM8_ARR_VALUE - duty);
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	f240 138f 	movw	r3, #399	; 0x18f
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	4a22      	ldr	r2, [pc, #136]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	6393      	str	r3, [r2, #56]	; 0x38
 80007f2:	e008      	b.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x186>

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	425a      	negs	r2, r3
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
		}
	   	    //command a motor

     	/*	Prepare data packet */
		data.w1 = reference_rpm;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800080c:	6013      	str	r3, [r2, #0]
		data.w2 = current_rpm;
 800080e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000812:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000818:	edc3 7a01 	vstr	s15, [r3, #4]
		data.u1 = controller_return;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a16      	ldr	r2, [pc, #88]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000822:	6093      	str	r3, [r2, #8]
		data.u2 = 0.555683;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000828:	60da      	str	r2, [r3, #12]

		ertc_dlog_send(&logger, &data, sizeof(data));
 800082a:	2210      	movs	r2, #16
 800082c:	4913      	ldr	r1, [pc, #76]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800082e:	4815      	ldr	r0, [pc, #84]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000830:	f7ff fece 	bl	80005d0 <ertc_dlog_send>
	}
}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	f3af 8000 	nop.w
 8000840:	00000000 	.word	0x00000000
 8000844:	40b77000 	.word	0x40b77000
 8000848:	00000000 	.word	0x00000000
 800084c:	409e0000 	.word	0x409e0000
 8000850:	00000000 	.word	0x00000000
 8000854:	40490000 	.word	0x40490000
 8000858:	40001000 	.word	0x40001000
 800085c:	20000220 	.word	0x20000220
 8000860:	20000778 	.word	0x20000778
 8000864:	88888889 	.word	0x88888889
 8000868:	20000000 	.word	0x20000000
 800086c:	20000764 	.word	0x20000764
 8000870:	2000075c 	.word	0x2000075c
 8000874:	20000760 	.word	0x20000760
 8000878:	20000350 	.word	0x20000350
 800087c:	20000768 	.word	0x20000768
 8000880:	3f0e413e 	.word	0x3f0e413e
 8000884:	20000690 	.word	0x20000690

08000888 <PI_controller>:

float Kp = 3;
float KI = 2;


float PI_controller (float error){
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	ed87 0a01 	vstr	s0, [r7, #4]
	float P = Kp * error;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <PI_controller+0x78>)
 8000894:	edd3 7a00 	vldr	s15, [r3]
 8000898:	ed97 7a01 	vldr	s14, [r7, #4]
 800089c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a0:	edc7 7a03 	vstr	s15, [r7, #12]
	static float I = 0;
	I = I + error * KI * TS;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <PI_controller+0x7c>)
 80008a6:	edd3 7a00 	vldr	s15, [r3]
 80008aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <PI_controller+0x80>)
 80008b0:	ed93 7a00 	vldr	s14, [r3]
 80008b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008c0:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 80008f8 <PI_controller+0x70>
 80008c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80008c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <PI_controller+0x7c>)
 80008d2:	edc3 7a00 	vstr	s15, [r3]
	return P + I;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <PI_controller+0x7c>)
 80008d8:	ed93 7a00 	vldr	s14, [r3]
 80008dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80008e4:	eeb0 0a67 	vmov.f32	s0, s15
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	f3af 8000 	nop.w
 80008f8:	47ae147b 	.word	0x47ae147b
 80008fc:	3f847ae1 	.word	0x3f847ae1
 8000900:	20000004 	.word	0x20000004
 8000904:	2000077c 	.word	0x2000077c
 8000908:	20000008 	.word	0x20000008

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f001 fdc7 	bl	80024a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f884 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 fedc 	bl	80016d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800091c:	f000 feaa 	bl	8001674 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000920:	f000 f8f0 	bl	8000b04 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000924:	f000 f940 	bl	8000ba8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000928:	f000 f97e 	bl	8000c28 <MX_I2C2_Init>
  MX_SPI1_Init();
 800092c:	f000 f9bc 	bl	8000ca8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000930:	f000 f9f8 	bl	8000d24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000934:	f000 fac6 	bl	8000ec4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000938:	f000 fb5e 	bl	8000ff8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800093c:	f000 fbb2 	bl	80010a4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000940:	f000 fc06 	bl	8001150 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000944:	f000 fcb4 	bl	80012b0 <MX_TIM8_Init>
  MX_UART4_Init();
 8000948:	f000 fdd4 	bl	80014f4 <MX_UART4_Init>
  MX_UART5_Init();
 800094c:	f000 fe02 	bl	8001554 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000950:	f000 fe30 	bl	80015b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000954:	f000 fe5e 	bl	8001614 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000958:	f000 fd7c 	bl	8001454 <MX_TIM9_Init>
  MX_TIM6_Init();
 800095c:	f000 fc70 	bl	8001240 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  logger.uart_handle = huart3; // for serial
 8000960:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <main+0xf4>)
 8000962:	4a28      	ldr	r2, [pc, #160]	; (8000a04 <main+0xf8>)
 8000964:	3344      	adds	r3, #68	; 0x44
 8000966:	4611      	mov	r1, r2
 8000968:	2288      	movs	r2, #136	; 0x88
 800096a:	4618      	mov	r0, r3
 800096c:	f006 faee 	bl	8006f4c <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2110      	movs	r1, #16
 8000974:	4824      	ldr	r0, [pc, #144]	; (8000a08 <main+0xfc>)
 8000976:	f002 fb67 	bl	8003048 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 800097a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097e:	f001 fded 	bl	800255c <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000982:	213c      	movs	r1, #60	; 0x3c
 8000984:	4821      	ldr	r0, [pc, #132]	; (8000a0c <main+0x100>)
 8000986:	f004 fa31 	bl	8004dec <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800098a:	213c      	movs	r1, #60	; 0x3c
 800098c:	4820      	ldr	r0, [pc, #128]	; (8000a10 <main+0x104>)
 800098e:	f004 fa2d 	bl	8004dec <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000992:	2100      	movs	r1, #0
 8000994:	481f      	ldr	r0, [pc, #124]	; (8000a14 <main+0x108>)
 8000996:	f004 f827 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800099a:	2104      	movs	r1, #4
 800099c:	481d      	ldr	r0, [pc, #116]	; (8000a14 <main+0x108>)
 800099e:	f004 f823 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009a2:	2108      	movs	r1, #8
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <main+0x108>)
 80009a6:	f004 f81f 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80009aa:	210c      	movs	r1, #12
 80009ac:	4819      	ldr	r0, [pc, #100]	; (8000a14 <main+0x108>)
 80009ae:	f004 f81b 	bl	80049e8 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <main+0x10c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2200      	movs	r2, #0
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <main+0x10c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <main+0x10c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <main+0x10c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80009d2:	2100      	movs	r1, #0
 80009d4:	4810      	ldr	r0, [pc, #64]	; (8000a18 <main+0x10c>)
 80009d6:	f004 f807 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80009da:	2104      	movs	r1, #4
 80009dc:	480e      	ldr	r0, [pc, #56]	; (8000a18 <main+0x10c>)
 80009de:	f004 f803 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80009e2:	2108      	movs	r1, #8
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <main+0x10c>)
 80009e6:	f003 ffff 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80009ea:	210c      	movs	r1, #12
 80009ec:	480a      	ldr	r0, [pc, #40]	; (8000a18 <main+0x10c>)
 80009ee:	f003 fffb 	bl	80049e8 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <main+0x110>)
 80009f4:	f003 fec8 	bl	8004788 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 80009f8:	4801      	ldr	r0, [pc, #4]	; (8000a00 <main+0xf4>)
 80009fa:	f7ff fe15 	bl	8000628 <ertc_dlog_update>
 80009fe:	e7fb      	b.n	80009f8 <main+0xec>
 8000a00:	20000690 	.word	0x20000690
 8000a04:	20000608 	.word	0x20000608
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	20000220 	.word	0x20000220
 8000a10:	2000026c 	.word	0x2000026c
 8000a14:	20000188 	.word	0x20000188
 8000a18:	20000350 	.word	0x20000350
 8000a1c:	20000304 	.word	0x20000304

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2234      	movs	r2, #52	; 0x34
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f006 fa9a 	bl	8006f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a44:	f002 fc42 	bl	80032cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <SystemClock_Config+0xdc>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a2b      	ldr	r2, [pc, #172]	; (8000afc <SystemClock_Config+0xdc>)
 8000a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <SystemClock_Config+0xdc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <SystemClock_Config+0xe0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a68:	4a25      	ldr	r2, [pc, #148]	; (8000b00 <SystemClock_Config+0xe0>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <SystemClock_Config+0xe0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a94:	2360      	movs	r3, #96	; 0x60
 8000a96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 fc6f 	bl	800338c <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ab4:	f000 ff40 	bl	8001938 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ab8:	f002 fc18 	bl	80032ec <HAL_PWREx_EnableOverDrive>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ac2:	f000 ff39 	bl	8001938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 ff00 	bl	80038e8 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000aee:	f000 ff23 	bl	8001938 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3750      	adds	r7, #80	; 0x50
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b18:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <MX_ADC1_Init+0x9c>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <MX_ADC1_Init+0xa0>)
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b66:	f001 fd1d 	bl	80025a4 <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b70:	f000 fee2 	bl	8001938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b74:	2303      	movs	r3, #3
 8000b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b86:	f001 fd51 	bl	800262c <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b90:	f000 fed2 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000034 	.word	0x20000034
 8000ba0:	40012000 	.word	0x40012000
 8000ba4:	0f000001 	.word	0x0f000001

08000ba8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <MX_I2C1_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <MX_I2C1_Init+0x7c>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000be4:	f002 fa4a 	bl	800307c <HAL_I2C_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bee:	f000 fea3 	bl	8001938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bf6:	f002 fad1 	bl	800319c <HAL_I2CEx_ConfigAnalogFilter>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 fe9a 	bl	8001938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000c08:	f002 fb13 	bl	8003232 <HAL_I2CEx_ConfigDigitalFilter>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 fe91 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000007c 	.word	0x2000007c
 8000c20:	40005400 	.word	0x40005400
 8000c24:	20303e5d 	.word	0x20303e5d

08000c28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <MX_I2C2_Init+0x78>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c34:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <MX_I2C2_Init+0x7c>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c62:	480e      	ldr	r0, [pc, #56]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c64:	f002 fa0a 	bl	800307c <HAL_I2C_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c6e:	f000 fe63 	bl	8001938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c76:	f002 fa91 	bl	800319c <HAL_I2CEx_ConfigAnalogFilter>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c80:	f000 fe5a 	bl	8001938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_I2C2_Init+0x74>)
 8000c88:	f002 fad3 	bl	8003232 <HAL_I2CEx_ConfigDigitalFilter>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f000 fe51 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000d0 	.word	0x200000d0
 8000ca0:	40005800 	.word	0x40005800
 8000ca4:	20303e5d 	.word	0x20303e5d

08000ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_SPI1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cc2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000d02:	2208      	movs	r2, #8
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_SPI1_Init+0x74>)
 8000d08:	f003 fc3c 	bl	8004584 <HAL_SPI_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 fe11 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000124 	.word	0x20000124
 8000d20:	40013000 	.word	0x40013000

08000d24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b09a      	sub	sp, #104	; 0x68
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	222c      	movs	r2, #44	; 0x2c
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f006 f902 	bl	8006f68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d64:	4b55      	ldr	r3, [pc, #340]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000d66:	4a56      	ldr	r2, [pc, #344]	; (8000ec0 <MX_TIM1_Init+0x19c>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d6a:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000d76:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b4f      	ldr	r3, [pc, #316]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d82:	4b4e      	ldr	r3, [pc, #312]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d8e:	484b      	ldr	r0, [pc, #300]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000d90:	f003 fca3 	bl	80046da <HAL_TIM_Base_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d9a:	f000 fdcd 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000da4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000da8:	4619      	mov	r1, r3
 8000daa:	4844      	ldr	r0, [pc, #272]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000dac:	f004 fbf6 	bl	800559c <HAL_TIM_ConfigClockSource>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000db6:	f000 fdbf 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000dba:	4840      	ldr	r0, [pc, #256]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000dbc:	f003 fd5c 	bl	8004878 <HAL_TIM_OC_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dc6:	f000 fdb7 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4837      	ldr	r0, [pc, #220]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000dde:	f005 f9b7 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000de8:	f000 fda6 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000dec:	2350      	movs	r3, #80	; 0x50
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000df4:	2302      	movs	r3, #2
 8000df6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	482a      	ldr	r0, [pc, #168]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000e12:	f004 f999 	bl	8005148 <HAL_TIM_OC_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000e1c:	f000 fd8c 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e24:	2204      	movs	r2, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4824      	ldr	r0, [pc, #144]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000e2a:	f004 f98d 	bl	8005148 <HAL_TIM_OC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000e34:	f000 fd80 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481e      	ldr	r0, [pc, #120]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000e42:	f004 f981 	bl	8005148 <HAL_TIM_OC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000e4c:	f000 fd74 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e54:	220c      	movs	r2, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	4818      	ldr	r0, [pc, #96]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000e5a:	f004 f975 	bl	8005148 <HAL_TIM_OC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000e64:	f000 fd68 	bl	8001938 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4807      	ldr	r0, [pc, #28]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000e9e:	f005 f9e5 	bl	800626c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000ea8:	f000 fd46 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <MX_TIM1_Init+0x198>)
 8000eae:	f001 f805 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8000eb2:	bf00      	nop
 8000eb4:	3768      	adds	r7, #104	; 0x68
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000188 	.word	0x20000188
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b092      	sub	sp, #72	; 0x48
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f04:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f0c:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f18:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f2c:	4831      	ldr	r0, [pc, #196]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f2e:	f003 fbd4 	bl	80046da <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f38:	f000 fcfe 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f46:	4619      	mov	r1, r3
 8000f48:	482a      	ldr	r0, [pc, #168]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f4a:	f004 fb27 	bl	800559c <HAL_TIM_ConfigClockSource>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f54:	f000 fcf0 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f58:	4826      	ldr	r0, [pc, #152]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f5a:	f003 fcee 	bl	800493a <HAL_TIM_PWM_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000f64:	f000 fce8 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f68:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f6a:	f003 fe37 	bl	8004bdc <HAL_TIM_IC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f74:	f000 fce0 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f84:	4619      	mov	r1, r3
 8000f86:	481b      	ldr	r0, [pc, #108]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000f88:	f005 f8e2 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000f92:	f000 fcd1 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	; 0x60
 8000f98:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000fb0:	f004 f9e0 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000fba:	f000 fcbd 	bl	8001938 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000fd6:	f004 f931 	bl	800523c <HAL_TIM_IC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000fe0:	f000 fcaa 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_TIM2_Init+0x130>)
 8000fe6:	f000 ff69 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8000fea:	bf00      	nop
 8000fec:	3748      	adds	r7, #72	; 0x48
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001d4 	.word	0x200001d4

08000ff8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2224      	movs	r2, #36	; 0x24
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f005 ffae 	bl	8006f68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_TIM3_Init+0xa4>)
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <MX_TIM3_Init+0xa8>)
 800101a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_TIM3_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_TIM3_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_TIM3_Init+0xa4>)
 800102a:	f640 62ff 	movw	r2, #3839	; 0xeff
 800102e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_TIM3_Init+0xa4>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_TIM3_Init+0xa4>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800103c:	2303      	movs	r3, #3
 800103e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001044:	2301      	movs	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800104c:	230f      	movs	r3, #15
 800104e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001054:	2301      	movs	r3, #1
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800105c:	230f      	movs	r3, #15
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_TIM3_Init+0xa4>)
 8001068:	f003 fe1a 	bl	8004ca0 <HAL_TIM_Encoder_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001072:	f000 fc61 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_TIM3_Init+0xa4>)
 8001084:	f005 f864 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800108e:	f000 fc53 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3730      	adds	r7, #48	; 0x30
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000220 	.word	0x20000220
 80010a0:	40000400 	.word	0x40000400

080010a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2224      	movs	r2, #36	; 0x24
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 ff58 	bl	8006f68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_TIM4_Init+0xa4>)
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <MX_TIM4_Init+0xa8>)
 80010c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_TIM4_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_TIM4_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_TIM4_Init+0xa4>)
 80010d6:	f640 62ff 	movw	r2, #3839	; 0xeff
 80010da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_TIM4_Init+0xa4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_TIM4_Init+0xa4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010e8:	2303      	movs	r3, #3
 80010ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80010f8:	230f      	movs	r3, #15
 80010fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001100:	2301      	movs	r3, #1
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001108:	230f      	movs	r3, #15
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_TIM4_Init+0xa4>)
 8001114:	f003 fdc4 	bl	8004ca0 <HAL_TIM_Encoder_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800111e:	f000 fc0b 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_TIM4_Init+0xa4>)
 8001130:	f005 f80e 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800113a:	f000 fbfd 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	; 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000026c 	.word	0x2000026c
 800114c:	40000800 	.word	0x40000800

08001150 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_TIM5_Init+0xe8>)
 8001184:	4a2d      	ldr	r2, [pc, #180]	; (800123c <MX_TIM5_Init+0xec>)
 8001186:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_TIM5_Init+0xe8>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_TIM5_Init+0xe8>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001194:	4b28      	ldr	r3, [pc, #160]	; (8001238 <MX_TIM5_Init+0xe8>)
 8001196:	f04f 32ff 	mov.w	r2, #4294967295
 800119a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_TIM5_Init+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <MX_TIM5_Init+0xe8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011a8:	4823      	ldr	r0, [pc, #140]	; (8001238 <MX_TIM5_Init+0xe8>)
 80011aa:	f003 fa96 	bl	80046da <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80011b4:	f000 fbc0 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	4619      	mov	r1, r3
 80011c4:	481c      	ldr	r0, [pc, #112]	; (8001238 <MX_TIM5_Init+0xe8>)
 80011c6:	f004 f9e9 	bl	800559c <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80011d0:	f000 fbb2 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80011d4:	4818      	ldr	r0, [pc, #96]	; (8001238 <MX_TIM5_Init+0xe8>)
 80011d6:	f003 fbb0 	bl	800493a <HAL_TIM_PWM_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80011e0:	f000 fbaa 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4811      	ldr	r0, [pc, #68]	; (8001238 <MX_TIM5_Init+0xe8>)
 80011f4:	f004 ffac 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80011fe:	f000 fb9b 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001202:	2360      	movs	r3, #96	; 0x60
 8001204:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <MX_TIM5_Init+0xe8>)
 800121a:	f004 f8ab 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001224:	f000 fb88 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <MX_TIM5_Init+0xe8>)
 800122a:	f000 fe47 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 800122e:	bf00      	nop
 8001230:	3738      	adds	r7, #56	; 0x38
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200002b8 	.word	0x200002b8
 800123c:	40000c00 	.word	0x40000c00

08001240 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_TIM6_Init+0x68>)
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <MX_TIM6_Init+0x6c>)
 8001254:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_TIM6_Init+0x68>)
 8001258:	f240 32bf 	movw	r2, #959	; 0x3bf
 800125c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_TIM6_Init+0x68>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_TIM6_Init+0x68>)
 8001266:	f240 32e7 	movw	r2, #999	; 0x3e7
 800126a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_TIM6_Init+0x68>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_TIM6_Init+0x68>)
 8001274:	f003 fa31 	bl	80046da <HAL_TIM_Base_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800127e:	f000 fb5b 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_TIM6_Init+0x68>)
 8001290:	f004 ff5e 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800129a:	f000 fb4d 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000304 	.word	0x20000304
 80012ac:	40001000 	.word	0x40001000

080012b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09a      	sub	sp, #104	; 0x68
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	222c      	movs	r2, #44	; 0x2c
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 fe3c 	bl	8006f68 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <MX_TIM8_Init+0x19c>)
 80012f2:	4a57      	ldr	r2, [pc, #348]	; (8001450 <MX_TIM8_Init+0x1a0>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80012f6:	4b55      	ldr	r3, [pc, #340]	; (800144c <MX_TIM8_Init+0x19c>)
 80012f8:	f240 32bf 	movw	r2, #959	; 0x3bf
 80012fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <MX_TIM8_Init+0x19c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001304:	4b51      	ldr	r3, [pc, #324]	; (800144c <MX_TIM8_Init+0x19c>)
 8001306:	f240 128f 	movw	r2, #399	; 0x18f
 800130a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <MX_TIM8_Init+0x19c>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001312:	4b4e      	ldr	r3, [pc, #312]	; (800144c <MX_TIM8_Init+0x19c>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <MX_TIM8_Init+0x19c>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800131e:	484b      	ldr	r0, [pc, #300]	; (800144c <MX_TIM8_Init+0x19c>)
 8001320:	f003 f9db 	bl	80046da <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800132a:	f000 fb05 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001338:	4619      	mov	r1, r3
 800133a:	4844      	ldr	r0, [pc, #272]	; (800144c <MX_TIM8_Init+0x19c>)
 800133c:	f004 f92e 	bl	800559c <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001346:	f000 faf7 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800134a:	4840      	ldr	r0, [pc, #256]	; (800144c <MX_TIM8_Init+0x19c>)
 800134c:	f003 faf5 	bl	800493a <HAL_TIM_PWM_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001356:	f000 faef 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001366:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800136a:	4619      	mov	r1, r3
 800136c:	4837      	ldr	r0, [pc, #220]	; (800144c <MX_TIM8_Init+0x19c>)
 800136e:	f004 feef 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001378:	f000 fade 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137c:	2360      	movs	r3, #96	; 0x60
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	482a      	ldr	r0, [pc, #168]	; (800144c <MX_TIM8_Init+0x19c>)
 80013a2:	f003 ffe7 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80013ac:	f000 fac4 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b4:	2204      	movs	r2, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4824      	ldr	r0, [pc, #144]	; (800144c <MX_TIM8_Init+0x19c>)
 80013ba:	f003 ffdb 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80013c4:	f000 fab8 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013cc:	2208      	movs	r2, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <MX_TIM8_Init+0x19c>)
 80013d2:	f003 ffcf 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80013dc:	f000 faac 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e4:	220c      	movs	r2, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	4818      	ldr	r0, [pc, #96]	; (800144c <MX_TIM8_Init+0x19c>)
 80013ea:	f003 ffc3 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80013f4:	f000 faa0 	bl	8001938 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800140c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001410:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800141a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM8_Init+0x19c>)
 800142e:	f004 ff1d 	bl	800626c <HAL_TIMEx_ConfigBreakDeadTime>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001438:	f000 fa7e 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM8_Init+0x19c>)
 800143e:	f000 fd3d 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8001442:	bf00      	nop
 8001444:	3768      	adds	r7, #104	; 0x68
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000350 	.word	0x20000350
 8001450:	40010400 	.word	0x40010400

08001454 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_TIM9_Init+0x98>)
 800146e:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <MX_TIM9_Init+0x9c>)
 8001470:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <MX_TIM9_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_TIM9_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_TIM9_Init+0x98>)
 8001480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001484:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_TIM9_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_TIM9_Init+0x98>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001492:	4816      	ldr	r0, [pc, #88]	; (80014ec <MX_TIM9_Init+0x98>)
 8001494:	f003 fa51 	bl	800493a <HAL_TIM_PWM_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800149e:	f000 fa4b 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a2:	2360      	movs	r3, #96	; 0x60
 80014a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <MX_TIM9_Init+0x98>)
 80014ba:	f003 ff5b 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80014c4:	f000 fa38 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2204      	movs	r2, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM9_Init+0x98>)
 80014d0:	f003 ff50 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80014da:	f000 fa2d 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM9_Init+0x98>)
 80014e0:	f000 fcec 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000039c 	.word	0x2000039c
 80014f0:	40014000 	.word	0x40014000

080014f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_UART4_Init+0x58>)
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <MX_UART4_Init+0x5c>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_UART4_Init+0x58>)
 8001500:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001504:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_UART4_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_UART4_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_UART4_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_UART4_Init+0x58>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_UART4_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_UART4_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_UART4_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_UART4_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_UART4_Init+0x58>)
 8001538:	f004 ff34 	bl	80063a4 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001542:	f000 f9f9 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200003e8 	.word	0x200003e8
 8001550:	40004c00 	.word	0x40004c00

08001554 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_UART5_Init+0x58>)
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <MX_UART5_Init+0x5c>)
 800155c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_UART5_Init+0x58>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_UART5_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_UART5_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_UART5_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_UART5_Init+0x58>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_UART5_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_UART5_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_UART5_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_UART5_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_UART5_Init+0x58>)
 8001598:	f004 ff04 	bl	80063a4 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80015a2:	f000 f9c9 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000470 	.word	0x20000470
 80015b0:	40005000 	.word	0x40005000

080015b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015ba:	4a15      	ldr	r2, [pc, #84]	; (8001610 <MX_USART1_UART_Init+0x5c>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_USART1_UART_Init+0x58>)
 80015f8:	f004 fed4 	bl	80063a4 <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001602:	f000 f999 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200004f8 	.word	0x200004f8
 8001610:	40011000 	.word	0x40011000

08001614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_USART2_UART_Init+0x54>)
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <MX_USART2_UART_Init+0x58>)
 800161c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_USART2_UART_Init+0x54>)
 8001620:	4a13      	ldr	r2, [pc, #76]	; (8001670 <MX_USART2_UART_Init+0x5c>)
 8001622:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_USART2_UART_Init+0x54>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_USART2_UART_Init+0x54>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <MX_USART2_UART_Init+0x54>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART2_UART_Init+0x54>)
 8001638:	220c      	movs	r2, #12
 800163a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <MX_USART2_UART_Init+0x54>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART2_UART_Init+0x54>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <MX_USART2_UART_Init+0x54>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART2_UART_Init+0x54>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <MX_USART2_UART_Init+0x54>)
 8001656:	f004 fea5 	bl	80063a4 <HAL_UART_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001660:	f000 f96a 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000580 	.word	0x20000580
 800166c:	40004400 	.word	0x40004400
 8001670:	000f4240 	.word	0x000f4240

08001674 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_USART3_UART_Init+0x58>)
 800167a:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <MX_USART3_UART_Init+0x5c>)
 800167c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_USART3_UART_Init+0x58>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_USART3_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_USART3_UART_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_USART3_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_USART3_UART_Init+0x58>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_USART3_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_USART3_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_USART3_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_USART3_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_USART3_UART_Init+0x58>)
 80016b8:	f004 fe74 	bl	80063a4 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016c2:	f000 f939 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000608 	.word	0x20000608
 80016d0:	40004800 	.word	0x40004800

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ea:	4b8c      	ldr	r3, [pc, #560]	; (800191c <MX_GPIO_Init+0x248>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a8b      	ldr	r2, [pc, #556]	; (800191c <MX_GPIO_Init+0x248>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <MX_GPIO_Init+0x248>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	623b      	str	r3, [r7, #32]
 8001700:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	4b86      	ldr	r3, [pc, #536]	; (800191c <MX_GPIO_Init+0x248>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a85      	ldr	r2, [pc, #532]	; (800191c <MX_GPIO_Init+0x248>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b83      	ldr	r3, [pc, #524]	; (800191c <MX_GPIO_Init+0x248>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800171a:	4b80      	ldr	r3, [pc, #512]	; (800191c <MX_GPIO_Init+0x248>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a7f      	ldr	r2, [pc, #508]	; (800191c <MX_GPIO_Init+0x248>)
 8001720:	f043 0320 	orr.w	r3, r3, #32
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b7d      	ldr	r3, [pc, #500]	; (800191c <MX_GPIO_Init+0x248>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001732:	4b7a      	ldr	r3, [pc, #488]	; (800191c <MX_GPIO_Init+0x248>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a79      	ldr	r2, [pc, #484]	; (800191c <MX_GPIO_Init+0x248>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b77      	ldr	r3, [pc, #476]	; (800191c <MX_GPIO_Init+0x248>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b74      	ldr	r3, [pc, #464]	; (800191c <MX_GPIO_Init+0x248>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a73      	ldr	r2, [pc, #460]	; (800191c <MX_GPIO_Init+0x248>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b71      	ldr	r3, [pc, #452]	; (800191c <MX_GPIO_Init+0x248>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b6e      	ldr	r3, [pc, #440]	; (800191c <MX_GPIO_Init+0x248>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a6d      	ldr	r2, [pc, #436]	; (800191c <MX_GPIO_Init+0x248>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b6b      	ldr	r3, [pc, #428]	; (800191c <MX_GPIO_Init+0x248>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800177a:	4b68      	ldr	r3, [pc, #416]	; (800191c <MX_GPIO_Init+0x248>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a67      	ldr	r2, [pc, #412]	; (800191c <MX_GPIO_Init+0x248>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <MX_GPIO_Init+0x248>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001792:	4b62      	ldr	r3, [pc, #392]	; (800191c <MX_GPIO_Init+0x248>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a61      	ldr	r2, [pc, #388]	; (800191c <MX_GPIO_Init+0x248>)
 8001798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <MX_GPIO_Init+0x248>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2118      	movs	r1, #24
 80017ae:	485c      	ldr	r0, [pc, #368]	; (8001920 <MX_GPIO_Init+0x24c>)
 80017b0:	f001 fc4a 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f244 0181 	movw	r1, #16513	; 0x4081
 80017ba:	485a      	ldr	r0, [pc, #360]	; (8001924 <MX_GPIO_Init+0x250>)
 80017bc:	f001 fc44 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2140      	movs	r1, #64	; 0x40
 80017c4:	4858      	ldr	r0, [pc, #352]	; (8001928 <MX_GPIO_Init+0x254>)
 80017c6:	f001 fc3f 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 80017ca:	2318      	movs	r3, #24
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017de:	4619      	mov	r1, r3
 80017e0:	484f      	ldr	r0, [pc, #316]	; (8001920 <MX_GPIO_Init+0x24c>)
 80017e2:	f001 fa85 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 80017e6:	f643 731c 	movw	r3, #16156	; 0x3f1c
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	484b      	ldr	r0, [pc, #300]	; (800192c <MX_GPIO_Init+0x258>)
 80017fe:	f001 fa77 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001802:	2332      	movs	r3, #50	; 0x32
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001812:	230b      	movs	r3, #11
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	4844      	ldr	r0, [pc, #272]	; (8001930 <MX_GPIO_Init+0x25c>)
 800181e:	f001 fa67 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001822:	2386      	movs	r3, #134	; 0x86
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001832:	230b      	movs	r3, #11
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	483d      	ldr	r0, [pc, #244]	; (8001934 <MX_GPIO_Init+0x260>)
 800183e:	f001 fa57 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001842:	f244 0381 	movw	r3, #16513	; 0x4081
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4832      	ldr	r0, [pc, #200]	; (8001924 <MX_GPIO_Init+0x250>)
 800185c:	f001 fa48 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001872:	230b      	movs	r3, #11
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	4619      	mov	r1, r3
 800187c:	4829      	ldr	r0, [pc, #164]	; (8001924 <MX_GPIO_Init+0x250>)
 800187e:	f001 fa37 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001882:	2340      	movs	r3, #64	; 0x40
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	4823      	ldr	r0, [pc, #140]	; (8001928 <MX_GPIO_Init+0x254>)
 800189a:	f001 fa29 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ae:	4619      	mov	r1, r3
 80018b0:	481d      	ldr	r0, [pc, #116]	; (8001928 <MX_GPIO_Init+0x254>)
 80018b2:	f001 fa1d 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c8:	230a      	movs	r3, #10
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4818      	ldr	r0, [pc, #96]	; (8001934 <MX_GPIO_Init+0x260>)
 80018d4:	f001 fa0c 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	4811      	ldr	r0, [pc, #68]	; (8001934 <MX_GPIO_Init+0x260>)
 80018ee:	f001 f9ff 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001904:	230b      	movs	r3, #11
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190c:	4619      	mov	r1, r3
 800190e:	4806      	ldr	r0, [pc, #24]	; (8001928 <MX_GPIO_Init+0x254>)
 8001910:	f001 f9ee 	bl	8002cf0 <HAL_GPIO_Init>

}
 8001914:	bf00      	nop
 8001916:	3738      	adds	r7, #56	; 0x38
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40021000 	.word	0x40021000
 8001924:	40020400 	.word	0x40020400
 8001928:	40021800 	.word	0x40021800
 800192c:	40021400 	.word	0x40021400
 8001930:	40020800 	.word	0x40020800
 8001934:	40020000 	.word	0x40020000

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193c:	b672      	cpsid	i
}
 800193e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001940:	e7fe      	b.n	8001940 <Error_Handler+0x8>
	...

08001944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_MspInit+0x44>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_MspInit+0x44>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_MspInit+0x44>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_MspInit+0x44>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_MspInit+0x44>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_MspInit+0x44>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a15      	ldr	r2, [pc, #84]	; (8001a00 <HAL_ADC_MspInit+0x74>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d123      	bne.n	80019f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_ADC_MspInit+0x78>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_ADC_MspInit+0x78>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_ADC_MspInit+0x78>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_ADC_MspInit+0x78>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_ADC_MspInit+0x78>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_ADC_MspInit+0x78>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 80019de:	2308      	movs	r3, #8
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e2:	2303      	movs	r3, #3
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <HAL_ADC_MspInit+0x7c>)
 80019f2:	f001 f97d 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40012000 	.word	0x40012000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000

08001a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b0b0      	sub	sp, #192	; 0xc0
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	2290      	movs	r2, #144	; 0x90
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f005 fa9b 	bl	8006f68 <memset>
  if(hi2c->Instance==I2C1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a44      	ldr	r2, [pc, #272]	; (8001b48 <HAL_I2C_MspInit+0x13c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d13e      	bne.n	8001aba <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a40:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 f971 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001a58:	f7ff ff6e 	bl	8001938 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4a3a      	ldr	r2, [pc, #232]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	6313      	str	r3, [r2, #48]	; 0x30
 8001a68:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7c:	2312      	movs	r3, #18
 8001a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a98:	4619      	mov	r1, r3
 8001a9a:	482d      	ldr	r0, [pc, #180]	; (8001b50 <HAL_I2C_MspInit+0x144>)
 8001a9c:	f001 f928 	bl	8002cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ab8:	e041      	b.n	8001b3e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a25      	ldr	r2, [pc, #148]	; (8001b54 <HAL_I2C_MspInit+0x148>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d13c      	bne.n	8001b3e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ac8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 f92d 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001ae0:	f7ff ff2a 	bl	8001938 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001aea:	f043 0320 	orr.w	r3, r3, #32
 8001aee:	6313      	str	r3, [r2, #48]	; 0x30
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b02:	2312      	movs	r3, #18
 8001b04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b14:	2304      	movs	r3, #4
 8001b16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <HAL_I2C_MspInit+0x14c>)
 8001b22:	f001 f8e5 	bl	8002cf0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_I2C_MspInit+0x140>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
}
 8001b3e:	bf00      	nop
 8001b40:	37c0      	adds	r7, #192	; 0xc0
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40005800 	.word	0x40005800
 8001b58:	40021400 	.word	0x40021400

08001b5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08c      	sub	sp, #48	; 0x30
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a33      	ldr	r2, [pc, #204]	; (8001c48 <HAL_SPI_MspInit+0xec>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d160      	bne.n	8001c40 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b7e:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a2c      	ldr	r2, [pc, #176]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001bb4:	f043 0308 	orr.w	r3, r3, #8
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_SPI_MspInit+0xf0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bde:	2320      	movs	r3, #32
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4815      	ldr	r0, [pc, #84]	; (8001c50 <HAL_SPI_MspInit+0xf4>)
 8001bfa:	f001 f879 	bl	8002cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c0e:	2305      	movs	r3, #5
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	480e      	ldr	r0, [pc, #56]	; (8001c54 <HAL_SPI_MspInit+0xf8>)
 8001c1a:	f001 f869 	bl	8002cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c30:	2305      	movs	r3, #5
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4807      	ldr	r0, [pc, #28]	; (8001c58 <HAL_SPI_MspInit+0xfc>)
 8001c3c:	f001 f858 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3730      	adds	r7, #48	; 0x30
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40013000 	.word	0x40013000
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021800 	.word	0x40021800

08001c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a3f      	ldr	r2, [pc, #252]	; (8001d78 <HAL_TIM_Base_MspInit+0x11c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10c      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a3e      	ldr	r2, [pc, #248]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001c96:	e06b      	b.n	8001d70 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca0:	d129      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a35      	ldr	r2, [pc, #212]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	4619      	mov	r1, r3
 8001cee:	4824      	ldr	r0, [pc, #144]	; (8001d80 <HAL_TIM_Base_MspInit+0x124>)
 8001cf0:	f000 fffe 	bl	8002cf0 <HAL_GPIO_Init>
}
 8001cf4:	e03c      	b.n	8001d70 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a22      	ldr	r2, [pc, #136]	; (8001d84 <HAL_TIM_Base_MspInit+0x128>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d10c      	bne.n	8001d1a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	697b      	ldr	r3, [r7, #20]
}
 8001d18:	e02a      	b.n	8001d70 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_TIM_Base_MspInit+0x12c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d114      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001d2a:	f043 0310 	orr.w	r3, r3, #16
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2101      	movs	r1, #1
 8001d40:	2036      	movs	r0, #54	; 0x36
 8001d42:	f000 ff9e 	bl	8002c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d46:	2036      	movs	r0, #54	; 0x36
 8001d48:	f000 ffb7 	bl	8002cba <HAL_NVIC_EnableIRQ>
}
 8001d4c:	e010      	b.n	8001d70 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_TIM_Base_MspInit+0x130>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d10b      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	6453      	str	r3, [r2, #68]	; 0x44
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_TIM_Base_MspInit+0x120>)
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3738      	adds	r7, #56	; 0x38
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40000c00 	.word	0x40000c00
 8001d88:	40001000 	.word	0x40001000
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d128      	bne.n	8001e04 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001de2:	2330      	movs	r3, #48	; 0x30
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001df2:	2302      	movs	r3, #2
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481c      	ldr	r0, [pc, #112]	; (8001e70 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001dfe:	f000 ff77 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e02:	e02d      	b.n	8001e60 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d128      	bne.n	8001e60 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001e3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e50:	2302      	movs	r3, #2
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e5c:	f000 ff48 	bl	8002cf0 <HAL_GPIO_Init>
}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40000800 	.word	0x40000800
 8001e78:	40020c00 	.word	0x40020c00

08001e7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x38>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40014000 	.word	0x40014000
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a56      	ldr	r2, [pc, #344]	; (8002034 <HAL_TIM_MspPostInit+0x178>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d11d      	bne.n	8001f1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ede:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a55      	ldr	r2, [pc, #340]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001ef6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	484a      	ldr	r0, [pc, #296]	; (800203c <HAL_TIM_MspPostInit+0x180>)
 8001f14:	f000 feec 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001f18:	e088      	b.n	800202c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f22:	d11d      	bne.n	8001f60 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	4b44      	ldr	r3, [pc, #272]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	4a43      	ldr	r2, [pc, #268]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f30:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4839      	ldr	r0, [pc, #228]	; (8002040 <HAL_TIM_MspPostInit+0x184>)
 8001f5a:	f000 fec9 	bl	8002cf0 <HAL_GPIO_Init>
}
 8001f5e:	e065      	b.n	800202c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a37      	ldr	r2, [pc, #220]	; (8002044 <HAL_TIM_MspPostInit+0x188>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d11c      	bne.n	8001fa4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b33      	ldr	r3, [pc, #204]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a32      	ldr	r2, [pc, #200]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f92:	2302      	movs	r3, #2
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4828      	ldr	r0, [pc, #160]	; (8002040 <HAL_TIM_MspPostInit+0x184>)
 8001f9e:	f000 fea7 	bl	8002cf0 <HAL_GPIO_Init>
}
 8001fa2:	e043      	b.n	800202c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <HAL_TIM_MspPostInit+0x18c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d11d      	bne.n	8001fea <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a21      	ldr	r2, [pc, #132]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8001fc6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481a      	ldr	r0, [pc, #104]	; (800204c <HAL_TIM_MspPostInit+0x190>)
 8001fe4:	f000 fe84 	bl	8002cf0 <HAL_GPIO_Init>
}
 8001fe8:	e020      	b.n	800202c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_TIM_MspPostInit+0x194>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001ffa:	f043 0310 	orr.w	r3, r3, #16
 8001ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 800200c:	2360      	movs	r3, #96	; 0x60
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800201c:	2303      	movs	r3, #3
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	4619      	mov	r1, r3
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <HAL_TIM_MspPostInit+0x180>)
 8002028:	f000 fe62 	bl	8002cf0 <HAL_GPIO_Init>
}
 800202c:	bf00      	nop
 800202e:	3730      	adds	r7, #48	; 0x30
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40010000 	.word	0x40010000
 8002038:	40023800 	.word	0x40023800
 800203c:	40021000 	.word	0x40021000
 8002040:	40020000 	.word	0x40020000
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40010400 	.word	0x40010400
 800204c:	40020800 	.word	0x40020800
 8002050:	40014000 	.word	0x40014000

08002054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0b6      	sub	sp, #216	; 0xd8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800206c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002070:	2290      	movs	r2, #144	; 0x90
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f004 ff77 	bl	8006f68 <memset>
  if(huart->Instance==UART4)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4aa0      	ldr	r2, [pc, #640]	; (8002300 <HAL_UART_MspInit+0x2ac>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d13e      	bne.n	8002102 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002090:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002094:	4618      	mov	r0, r3
 8002096:	f001 fe4d 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80020a0:	f7ff fc4a 	bl	8001938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020a4:	4b97      	ldr	r3, [pc, #604]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a96      	ldr	r2, [pc, #600]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80020aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
 80020b0:	4b94      	ldr	r3, [pc, #592]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
 80020ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020bc:	4b91      	ldr	r3, [pc, #580]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	4a90      	ldr	r2, [pc, #576]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6313      	str	r3, [r2, #48]	; 0x30
 80020c8:	4b8e      	ldr	r3, [pc, #568]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80020d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020ee:	2308      	movs	r3, #8
 80020f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4883      	ldr	r0, [pc, #524]	; (8002308 <HAL_UART_MspInit+0x2b4>)
 80020fc:	f000 fdf8 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002100:	e151      	b.n	80023a6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a81      	ldr	r2, [pc, #516]	; (800230c <HAL_UART_MspInit+0x2b8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d160      	bne.n	80021ce <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800210c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002118:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800211c:	4618      	mov	r0, r3
 800211e:	f001 fe09 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002128:	f7ff fc06 	bl	8001938 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800212c:	4b75      	ldr	r3, [pc, #468]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a74      	ldr	r2, [pc, #464]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 8002132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b72      	ldr	r3, [pc, #456]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	4b6f      	ldr	r3, [pc, #444]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b6c      	ldr	r3, [pc, #432]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215c:	4b69      	ldr	r3, [pc, #420]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a68      	ldr	r2, [pc, #416]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002178:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800218e:	2308      	movs	r3, #8
 8002190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002198:	4619      	mov	r1, r3
 800219a:	485d      	ldr	r0, [pc, #372]	; (8002310 <HAL_UART_MspInit+0x2bc>)
 800219c:	f000 fda8 	bl	8002cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021ba:	2308      	movs	r3, #8
 80021bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4850      	ldr	r0, [pc, #320]	; (8002308 <HAL_UART_MspInit+0x2b4>)
 80021c8:	f000 fd92 	bl	8002cf0 <HAL_GPIO_Init>
}
 80021cc:	e0eb      	b.n	80023a6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a50      	ldr	r2, [pc, #320]	; (8002314 <HAL_UART_MspInit+0x2c0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d151      	bne.n	800227c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d8:	2340      	movs	r3, #64	; 0x40
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021dc:	2300      	movs	r3, #0
 80021de:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fda5 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80021f0:	f7ff fba2 	bl	8001938 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	4a42      	ldr	r2, [pc, #264]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80021fa:	f043 0310 	orr.w	r3, r3, #16
 80021fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002200:	4b40      	ldr	r3, [pc, #256]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	4a3c      	ldr	r2, [pc, #240]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	6313      	str	r3, [r2, #48]	; 0x30
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800223e:	2304      	movs	r3, #4
 8002240:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002248:	4619      	mov	r1, r3
 800224a:	4831      	ldr	r0, [pc, #196]	; (8002310 <HAL_UART_MspInit+0x2bc>)
 800224c:	f000 fd50 	bl	8002cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002250:	2340      	movs	r3, #64	; 0x40
 8002252:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002268:	2307      	movs	r3, #7
 800226a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002272:	4619      	mov	r1, r3
 8002274:	4826      	ldr	r0, [pc, #152]	; (8002310 <HAL_UART_MspInit+0x2bc>)
 8002276:	f000 fd3b 	bl	8002cf0 <HAL_GPIO_Init>
}
 800227a:	e094      	b.n	80023a6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a25      	ldr	r2, [pc, #148]	; (8002318 <HAL_UART_MspInit+0x2c4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d14c      	bne.n	8002320 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800228a:	2300      	movs	r3, #0
 800228c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002292:	4618      	mov	r0, r3
 8002294:	f001 fd4e 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800229e:	f7ff fb4b 	bl	8001938 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a17      	ldr	r2, [pc, #92]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a11      	ldr	r2, [pc, #68]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_UART_MspInit+0x2b0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022d2:	2360      	movs	r3, #96	; 0x60
 80022d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ea:	2307      	movs	r3, #7
 80022ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4809      	ldr	r0, [pc, #36]	; (800231c <HAL_UART_MspInit+0x2c8>)
 80022f8:	f000 fcfa 	bl	8002cf0 <HAL_GPIO_Init>
}
 80022fc:	e053      	b.n	80023a6 <HAL_UART_MspInit+0x352>
 80022fe:	bf00      	nop
 8002300:	40004c00 	.word	0x40004c00
 8002304:	40023800 	.word	0x40023800
 8002308:	40020800 	.word	0x40020800
 800230c:	40005000 	.word	0x40005000
 8002310:	40020400 	.word	0x40020400
 8002314:	40011000 	.word	0x40011000
 8002318:	40004400 	.word	0x40004400
 800231c:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <HAL_UART_MspInit+0x35c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d13d      	bne.n	80023a6 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800232a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800233a:	4618      	mov	r0, r3
 800233c:	f001 fcfa 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002346:	f7ff faf7 	bl	8001938 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_UART_MspInit+0x360>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <HAL_UART_MspInit+0x360>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_UART_MspInit+0x360>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_UART_MspInit+0x360>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <HAL_UART_MspInit+0x360>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_UART_MspInit+0x360>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800237a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800237e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002394:	2307      	movs	r3, #7
 8002396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800239a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <HAL_UART_MspInit+0x364>)
 80023a2:	f000 fca5 	bl	8002cf0 <HAL_GPIO_Init>
}
 80023a6:	bf00      	nop
 80023a8:	37d8      	adds	r7, #216	; 0xd8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40004800 	.word	0x40004800
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020c00 	.word	0x40020c00

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <NMI_Handler+0x4>

080023c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <MemManage_Handler+0x4>

080023ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <BusFault_Handler+0x4>

080023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <UsageFault_Handler+0x4>

080023da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002408:	f000 f888 	bl	800251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM6_DAC_IRQHandler+0x10>)
 8002416:	f002 fd77 	bl	8004f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000304 	.word	0x20000304

08002424 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <SystemInit+0x28>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <SystemInit+0x28>)
 8002430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <SystemInit+0x28>)
 800243a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800243e:	609a      	str	r2, [r3, #8]
#endif
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002456:	e003      	b.n	8002460 <LoopCopyDataInit>

08002458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800245a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800245c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800245e:	3104      	adds	r1, #4

08002460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002460:	480b      	ldr	r0, [pc, #44]	; (8002490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002468:	d3f6      	bcc.n	8002458 <CopyDataInit>
  ldr  r2, =_sbss
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800246c:	e002      	b.n	8002474 <LoopFillZerobss>

0800246e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800246e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002470:	f842 3b04 	str.w	r3, [r2], #4

08002474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002478:	d3f9      	bcc.n	800246e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800247a:	f7ff ffd3 	bl	8002424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247e:	f004 fd41 	bl	8006f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002482:	f7fe fa43 	bl	800090c <main>
  bx  lr    
 8002486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002488:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800248c:	08006fb8 	.word	0x08006fb8
  ldr  r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002494:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8002498:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 800249c:	20000784 	.word	0x20000784

080024a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>

080024a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a6:	2003      	movs	r0, #3
 80024a8:	f000 fbe0 	bl	8002c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f000 f805 	bl	80024bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b2:	f7ff fa47 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_InitTick+0x54>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x58>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fbfb 	bl	8002cd6 <HAL_SYSTICK_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00e      	b.n	8002508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d80a      	bhi.n	8002506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f000 fbc3 	bl	8002c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <HAL_InitTick+0x5c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2000000c 	.word	0x2000000c
 8002514:	20000014 	.word	0x20000014
 8002518:	20000010 	.word	0x20000010

0800251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x24>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_IncTick+0x24>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000014 	.word	0x20000014
 8002540:	20000780 	.word	0x20000780

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000780 	.word	0x20000780

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff ffee 	bl	8002544 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d005      	beq.n	8002582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_Delay+0x44>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002582:	bf00      	nop
 8002584:	f7ff ffde 	bl	8002544 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d8f7      	bhi.n	8002584 <HAL_Delay+0x28>
  {
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000014 	.word	0x20000014

080025a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e031      	b.n	800261e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff f9e2 	bl	800198c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_ADC_Init+0x84>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	f043 0202 	orr.w	r2, r3, #2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f970 	bl	80028d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
 800260e:	e001      	b.n	8002614 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	ffffeefd 	.word	0xffffeefd

0800262c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1c>
 8002644:	2302      	movs	r3, #2
 8002646:	e136      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x28a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b09      	cmp	r3, #9
 8002656:	d93a      	bls.n	80026ce <HAL_ADC_ConfigChannel+0xa2>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002660:	d035      	beq.n	80026ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68d9      	ldr	r1, [r3, #12]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	3b1e      	subs	r3, #30
 8002678:	2207      	movs	r2, #7
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	400a      	ands	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a8d      	ldr	r2, [pc, #564]	; (80028c4 <HAL_ADC_ConfigChannel+0x298>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10a      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	061a      	lsls	r2, r3, #24
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a6:	e035      	b.n	8002714 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68d9      	ldr	r1, [r3, #12]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4403      	add	r3, r0
 80026c0:	3b1e      	subs	r3, #30
 80026c2:	409a      	lsls	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026cc:	e022      	b.n	8002714 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6919      	ldr	r1, [r3, #16]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	2207      	movs	r2, #7
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43da      	mvns	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	400a      	ands	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6919      	ldr	r1, [r3, #16]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4618      	mov	r0, r3
 8002704:	4603      	mov	r3, r0
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4403      	add	r3, r0
 800270a:	409a      	lsls	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b06      	cmp	r3, #6
 800271a:	d824      	bhi.n	8002766 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	3b05      	subs	r3, #5
 800272e:	221f      	movs	r2, #31
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43da      	mvns	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	400a      	ands	r2, r1
 800273c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4618      	mov	r0, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3b05      	subs	r3, #5
 8002758:	fa00 f203 	lsl.w	r2, r0, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	635a      	str	r2, [r3, #52]	; 0x34
 8002764:	e04c      	b.n	8002800 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d824      	bhi.n	80027b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b23      	subs	r3, #35	; 0x23
 8002780:	221f      	movs	r2, #31
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3b23      	subs	r3, #35	; 0x23
 80027aa:	fa00 f203 	lsl.w	r2, r0, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
 80027b6:	e023      	b.n	8002800 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	3b41      	subs	r3, #65	; 0x41
 80027ca:	221f      	movs	r2, #31
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43da      	mvns	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	400a      	ands	r2, r1
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	3b41      	subs	r3, #65	; 0x41
 80027f4:	fa00 f203 	lsl.w	r2, r0, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a30      	ldr	r2, [pc, #192]	; (80028c8 <HAL_ADC_ConfigChannel+0x29c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10a      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x1f4>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002812:	d105      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002814:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a2c      	ldr	r2, [pc, #176]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 800281a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800281e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <HAL_ADC_ConfigChannel+0x29c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10f      	bne.n	800284a <HAL_ADC_ConfigChannel+0x21e>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b12      	cmp	r3, #18
 8002830:	d10b      	bne.n	800284a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4a25      	ldr	r2, [pc, #148]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002838:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800283c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002848:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <HAL_ADC_ConfigChannel+0x29c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d12b      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x280>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <HAL_ADC_ConfigChannel+0x298>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x23a>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b11      	cmp	r3, #17
 8002864:	d122      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 800286c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002870:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a15      	ldr	r2, [pc, #84]	; (80028cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800287c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_ADC_ConfigChannel+0x298>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d111      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_ADC_ConfigChannel+0x2a4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <HAL_ADC_ConfigChannel+0x2a8>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9a      	lsrs	r2, r3, #18
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800289e:	e002      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f9      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	10000012 	.word	0x10000012
 80028c8:	40012000 	.word	0x40012000
 80028cc:	40012300 	.word	0x40012300
 80028d0:	2000000c 	.word	0x2000000c
 80028d4:	431bde83 	.word	0x431bde83

080028d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028e0:	4b78      	ldr	r3, [pc, #480]	; (8002ac4 <ADC_Init+0x1ec>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a77      	ldr	r2, [pc, #476]	; (8002ac4 <ADC_Init+0x1ec>)
 80028e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028ec:	4b75      	ldr	r3, [pc, #468]	; (8002ac4 <ADC_Init+0x1ec>)
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4973      	ldr	r1, [pc, #460]	; (8002ac4 <ADC_Init+0x1ec>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	021a      	lsls	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800292c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6899      	ldr	r1, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <ADC_Init+0x1f0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800297a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6899      	ldr	r1, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800299c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6899      	ldr	r1, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	e00f      	b.n	80029d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0202 	bic.w	r2, r2, #2
 80029e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	005a      	lsls	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01b      	beq.n	8002a38 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	035a      	lsls	r2, r3, #13
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	e007      	b.n	8002a48 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	051a      	lsls	r2, r3, #20
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6899      	ldr	r1, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a8a:	025a      	lsls	r2, r3, #9
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	029a      	lsls	r2, r3, #10
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40012300 	.word	0x40012300
 8002ac8:	0f000001 	.word	0x0f000001

08002acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <__NVIC_SetPriorityGrouping+0x40>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afa:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <__NVIC_SetPriorityGrouping+0x40>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	60d3      	str	r3, [r2, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00
 8002b10:	05fa0000 	.word	0x05fa0000

08002b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <__NVIC_GetPriorityGrouping+0x18>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0307 	and.w	r3, r3, #7
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db0b      	blt.n	8002b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <__NVIC_EnableIRQ+0x38>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db0a      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	; (8002bb8 <__NVIC_SetPriority+0x4c>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b94:	e00a      	b.n	8002bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	; (8002bbc <__NVIC_SetPriority+0x50>)
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	440b      	add	r3, r1
 8002baa:	761a      	strb	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f1c3 0307 	rsb	r3, r3, #7
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf28      	it	cs
 8002bde:	2304      	movcs	r3, #4
 8002be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d902      	bls.n	8002bf0 <NVIC_EncodePriority+0x30>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b03      	subs	r3, #3
 8002bee:	e000      	b.n	8002bf2 <NVIC_EncodePriority+0x32>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	4313      	orrs	r3, r2
         );
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c38:	d301      	bcc.n	8002c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00f      	b.n	8002c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <SysTick_Config+0x40>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c46:	210f      	movs	r1, #15
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f7ff ff8e 	bl	8002b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <SysTick_Config+0x40>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c56:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <SysTick_Config+0x40>)
 8002c58:	2207      	movs	r2, #7
 8002c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	e000e010 	.word	0xe000e010

08002c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff29 	bl	8002acc <__NVIC_SetPriorityGrouping>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c94:	f7ff ff3e 	bl	8002b14 <__NVIC_GetPriorityGrouping>
 8002c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7ff ff8e 	bl	8002bc0 <NVIC_EncodePriority>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff5d 	bl	8002b6c <__NVIC_SetPriority>
}
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff31 	bl	8002b30 <__NVIC_EnableIRQ>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ffa2 	bl	8002c28 <SysTick_Config>
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e175      	b.n	8002ffc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d10:	2201      	movs	r2, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	f040 8164 	bne.w	8002ff6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d005      	beq.n	8002d46 <HAL_GPIO_Init+0x56>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d130      	bne.n	8002da8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 0201 	and.w	r2, r3, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d017      	beq.n	8002de4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d123      	bne.n	8002e38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	08da      	lsrs	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3208      	adds	r2, #8
 8002df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3208      	adds	r2, #8
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2203      	movs	r2, #3
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80be 	beq.w	8002ff6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7a:	4b66      	ldr	r3, [pc, #408]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4a65      	ldr	r2, [pc, #404]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e84:	6453      	str	r3, [r2, #68]	; 0x44
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_GPIO_Init+0x324>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e92:	4a61      	ldr	r2, [pc, #388]	; (8003018 <HAL_GPIO_Init+0x328>)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	3302      	adds	r3, #2
 8002e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a58      	ldr	r2, [pc, #352]	; (800301c <HAL_GPIO_Init+0x32c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d037      	beq.n	8002f2e <HAL_GPIO_Init+0x23e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a57      	ldr	r2, [pc, #348]	; (8003020 <HAL_GPIO_Init+0x330>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d031      	beq.n	8002f2a <HAL_GPIO_Init+0x23a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a56      	ldr	r2, [pc, #344]	; (8003024 <HAL_GPIO_Init+0x334>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02b      	beq.n	8002f26 <HAL_GPIO_Init+0x236>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a55      	ldr	r2, [pc, #340]	; (8003028 <HAL_GPIO_Init+0x338>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d025      	beq.n	8002f22 <HAL_GPIO_Init+0x232>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a54      	ldr	r2, [pc, #336]	; (800302c <HAL_GPIO_Init+0x33c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01f      	beq.n	8002f1e <HAL_GPIO_Init+0x22e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a53      	ldr	r2, [pc, #332]	; (8003030 <HAL_GPIO_Init+0x340>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d019      	beq.n	8002f1a <HAL_GPIO_Init+0x22a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a52      	ldr	r2, [pc, #328]	; (8003034 <HAL_GPIO_Init+0x344>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_Init+0x226>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a51      	ldr	r2, [pc, #324]	; (8003038 <HAL_GPIO_Init+0x348>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00d      	beq.n	8002f12 <HAL_GPIO_Init+0x222>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a50      	ldr	r2, [pc, #320]	; (800303c <HAL_GPIO_Init+0x34c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x21e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4f      	ldr	r2, [pc, #316]	; (8003040 <HAL_GPIO_Init+0x350>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_GPIO_Init+0x21a>
 8002f06:	2309      	movs	r3, #9
 8002f08:	e012      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	e010      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	e00e      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f12:	2307      	movs	r3, #7
 8002f14:	e00c      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f16:	2306      	movs	r3, #6
 8002f18:	e00a      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f002 0203 	and.w	r2, r2, #3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f40:	4935      	ldr	r1, [pc, #212]	; (8003018 <HAL_GPIO_Init+0x328>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_GPIO_Init+0x354>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f72:	4a34      	ldr	r2, [pc, #208]	; (8003044 <HAL_GPIO_Init+0x354>)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_GPIO_Init+0x354>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f9c:	4a29      	ldr	r2, [pc, #164]	; (8003044 <HAL_GPIO_Init+0x354>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa2:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_GPIO_Init+0x354>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <HAL_GPIO_Init+0x354>)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_GPIO_Init+0x354>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <HAL_GPIO_Init+0x354>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	f67f ae86 	bls.w	8002d10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40013800 	.word	0x40013800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020800 	.word	0x40020800
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021000 	.word	0x40021000
 8003030:	40021400 	.word	0x40021400
 8003034:	40021800 	.word	0x40021800
 8003038:	40021c00 	.word	0x40021c00
 800303c:	40022000 	.word	0x40022000
 8003040:	40022400 	.word	0x40022400
 8003044:	40013c00 	.word	0x40013c00

08003048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
 8003054:	4613      	mov	r3, r2
 8003056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003064:	e003      	b.n	800306e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003066:	887b      	ldrh	r3, [r7, #2]
 8003068:	041a      	lsls	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	619a      	str	r2, [r3, #24]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e07f      	b.n	800318e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe fcb2 	bl	8001a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	; 0x24
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	e006      	b.n	8003104 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003102:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d104      	bne.n	8003116 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003114:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_I2C_Init+0x11c>)
 8003122:	430b      	orrs	r3, r1
 8003124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69d9      	ldr	r1, [r3, #28]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	02008000 	.word	0x02008000

0800319c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d138      	bne.n	8003224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031bc:	2302      	movs	r3, #2
 80031be:	e032      	b.n	8003226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b20      	cmp	r3, #32
 8003246:	d139      	bne.n	80032bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003252:	2302      	movs	r3, #2
 8003254:	e033      	b.n	80032be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2224      	movs	r2, #36	; 0x24
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0201 	bic.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003284:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e000      	b.n	80032be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
  }
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40007000 	.word	0x40007000

080032ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_PWREx_EnableOverDrive+0x98>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_PWREx_EnableOverDrive+0x98>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800331a:	f7ff f913 	bl	8002544 <HAL_GetTick>
 800331e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003320:	e009      	b.n	8003336 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003322:	f7ff f90f 	bl	8002544 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003330:	d901      	bls.n	8003336 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e022      	b.n	800337c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003342:	d1ee      	bne.n	8003322 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003344:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003350:	f7ff f8f8 	bl	8002544 <HAL_GetTick>
 8003354:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003356:	e009      	b.n	800336c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003358:	f7ff f8f4 	bl	8002544 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003366:	d901      	bls.n	800336c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e007      	b.n	800337c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003378:	d1ee      	bne.n	8003358 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000

0800338c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e29b      	b.n	80038da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8087 	beq.w	80034be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b0:	4b96      	ldr	r3, [pc, #600]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d00c      	beq.n	80033d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033bc:	4b93      	ldr	r3, [pc, #588]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d112      	bne.n	80033ee <HAL_RCC_OscConfig+0x62>
 80033c8:	4b90      	ldr	r3, [pc, #576]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d4:	d10b      	bne.n	80033ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d6:	4b8d      	ldr	r3, [pc, #564]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d06c      	beq.n	80034bc <HAL_RCC_OscConfig+0x130>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d168      	bne.n	80034bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e275      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f6:	d106      	bne.n	8003406 <HAL_RCC_OscConfig+0x7a>
 80033f8:	4b84      	ldr	r3, [pc, #528]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a83      	ldr	r2, [pc, #524]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80033fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e02e      	b.n	8003464 <HAL_RCC_OscConfig+0xd8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0x9c>
 800340e:	4b7f      	ldr	r3, [pc, #508]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7e      	ldr	r2, [pc, #504]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b7c      	ldr	r3, [pc, #496]	; (800360c <HAL_RCC_OscConfig+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7b      	ldr	r2, [pc, #492]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e01d      	b.n	8003464 <HAL_RCC_OscConfig+0xd8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0xc0>
 8003432:	4b76      	ldr	r3, [pc, #472]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a75      	ldr	r2, [pc, #468]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b73      	ldr	r3, [pc, #460]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a72      	ldr	r2, [pc, #456]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0xd8>
 800344c:	4b6f      	ldr	r3, [pc, #444]	; (800360c <HAL_RCC_OscConfig+0x280>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a6e      	ldr	r2, [pc, #440]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b6c      	ldr	r3, [pc, #432]	; (800360c <HAL_RCC_OscConfig+0x280>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a6b      	ldr	r2, [pc, #428]	; (800360c <HAL_RCC_OscConfig+0x280>)
 800345e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7ff f86a 	bl	8002544 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003474:	f7ff f866 	bl	8002544 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e229      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0xe8>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7ff f856 	bl	8002544 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7ff f852 	bl	8002544 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e215      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	4b57      	ldr	r3, [pc, #348]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x110>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d069      	beq.n	800359e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ca:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b4d      	ldr	r3, [pc, #308]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d11c      	bne.n	800351c <HAL_RCC_OscConfig+0x190>
 80034e2:	4b4a      	ldr	r3, [pc, #296]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d116      	bne.n	800351c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_RCC_OscConfig+0x17a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e1e9      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003506:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	493d      	ldr	r1, [pc, #244]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	e040      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003524:	4b39      	ldr	r3, [pc, #228]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a38      	ldr	r2, [pc, #224]	; (800360c <HAL_RCC_OscConfig+0x280>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7ff f808 	bl	8002544 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7ff f804 	bl	8002544 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e1c7      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b2d      	ldr	r3, [pc, #180]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4929      	ldr	r1, [pc, #164]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
 800356a:	e018      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356c:	4b27      	ldr	r3, [pc, #156]	; (800360c <HAL_RCC_OscConfig+0x280>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a26      	ldr	r2, [pc, #152]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe ffe4 	bl	8002544 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003580:	f7fe ffe0 	bl	8002544 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1a3      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d038      	beq.n	800361c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d019      	beq.n	80035e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80035b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b6:	4a15      	ldr	r2, [pc, #84]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035be:	f7fe ffc1 	bl	8002544 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c6:	f7fe ffbd 	bl	8002544 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e180      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x23a>
 80035e4:	e01a      	b.n	800361c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80035e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <HAL_RCC_OscConfig+0x280>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fe ffa7 	bl	8002544 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fa:	f7fe ffa3 	bl	8002544 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d903      	bls.n	8003610 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e166      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
 800360c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b92      	ldr	r3, [pc, #584]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ee      	bne.n	80035fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a4 	beq.w	8003772 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362a:	4b8c      	ldr	r3, [pc, #560]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10d      	bne.n	8003652 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b89      	ldr	r3, [pc, #548]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a88      	ldr	r2, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b86      	ldr	r3, [pc, #536]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003652:	4b83      	ldr	r3, [pc, #524]	; (8003860 <HAL_RCC_OscConfig+0x4d4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d118      	bne.n	8003690 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800365e:	4b80      	ldr	r3, [pc, #512]	; (8003860 <HAL_RCC_OscConfig+0x4d4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7f      	ldr	r2, [pc, #508]	; (8003860 <HAL_RCC_OscConfig+0x4d4>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fe ff6b 	bl	8002544 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fe ff67 	bl	8002544 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b64      	cmp	r3, #100	; 0x64
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e12a      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003684:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0x4d4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x31a>
 8003698:	4b70      	ldr	r3, [pc, #448]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a6f      	ldr	r2, [pc, #444]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	e02d      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x33c>
 80036ae:	4b6b      	ldr	r3, [pc, #428]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a6a      	ldr	r2, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a67      	ldr	r2, [pc, #412]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	e01c      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d10c      	bne.n	80036ea <HAL_RCC_OscConfig+0x35e>
 80036d0:	4b62      	ldr	r3, [pc, #392]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a61      	ldr	r2, [pc, #388]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	4b5f      	ldr	r3, [pc, #380]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a5e      	ldr	r2, [pc, #376]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	e00b      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
 80036ea:	4b5c      	ldr	r3, [pc, #368]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a5b      	ldr	r2, [pc, #364]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d015      	beq.n	8003736 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fe ff1b 	bl	8002544 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003710:	e00a      	b.n	8003728 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003712:	f7fe ff17 	bl	8002544 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003720:	4293      	cmp	r3, r2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e0d8      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	4b4c      	ldr	r3, [pc, #304]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ee      	beq.n	8003712 <HAL_RCC_OscConfig+0x386>
 8003734:	e014      	b.n	8003760 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003736:	f7fe ff05 	bl	8002544 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fe ff01 	bl	8002544 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0c2      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003754:	4b41      	ldr	r3, [pc, #260]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ee      	bne.n	800373e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d105      	bne.n	8003772 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	4b3d      	ldr	r3, [pc, #244]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a3c      	ldr	r2, [pc, #240]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800376c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80ae 	beq.w	80038d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800377c:	4b37      	ldr	r3, [pc, #220]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b08      	cmp	r3, #8
 8003786:	d06d      	beq.n	8003864 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d14b      	bne.n	8003828 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003790:	4b32      	ldr	r3, [pc, #200]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a31      	ldr	r2, [pc, #196]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800379a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe fed2 	bl	8002544 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe fece 	bl	8002544 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e091      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	019b      	lsls	r3, r3, #6
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	3b01      	subs	r3, #1
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	071b      	lsls	r3, r3, #28
 80037ee:	491b      	ldr	r1, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 80037fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe fea0 	bl	8002544 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7fe fe9c 	bl	8002544 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e05f      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x47c>
 8003826:	e057      	b.n	80038d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0b      	ldr	r2, [pc, #44]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 800382e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe fe86 	bl	8002544 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fe fe82 	bl	8002544 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e045      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	4b03      	ldr	r3, [pc, #12]	; (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x4b0>
 800385a:	e03d      	b.n	80038d8 <HAL_RCC_OscConfig+0x54c>
 800385c:	40023800 	.word	0x40023800
 8003860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003864:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <HAL_RCC_OscConfig+0x558>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d030      	beq.n	80038d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d129      	bne.n	80038d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d122      	bne.n	80038d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800389a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800389c:	4293      	cmp	r3, r2
 800389e:	d119      	bne.n	80038d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d10f      	bne.n	80038d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800

080038e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0d0      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4b6a      	ldr	r3, [pc, #424]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d910      	bls.n	8003930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b67      	ldr	r3, [pc, #412]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 020f 	bic.w	r2, r3, #15
 8003916:	4965      	ldr	r1, [pc, #404]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b8      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a58      	ldr	r2, [pc, #352]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800394e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003952:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a52      	ldr	r2, [pc, #328]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800396a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800396c:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	494d      	ldr	r1, [pc, #308]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d040      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d115      	bne.n	80039ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e07f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039aa:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e073      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e06b      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ca:	4b39      	ldr	r3, [pc, #228]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f023 0203 	bic.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4936      	ldr	r1, [pc, #216]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039dc:	f7fe fdb2 	bl	8002544 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fe fdae 	bl	8002544 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e053      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 020c 	and.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1eb      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d210      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 020f 	bic.w	r2, r3, #15
 8003a22:	4922      	ldr	r1, [pc, #136]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e032      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4916      	ldr	r1, [pc, #88]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a7a:	f000 f821 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8003a8c:	5ccb      	ldrb	r3, [r1, r3]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RCC_ClockConfig+0x1d4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fd0e 	bl	80024bc <HAL_InitTick>

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	08006f90 	.word	0x08006f90
 8003ab8:	2000000c 	.word	0x2000000c
 8003abc:	20000010 	.word	0x20000010

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac4:	b094      	sub	sp, #80	; 0x50
 8003ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
 8003acc:	2300      	movs	r3, #0
 8003ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad8:	4b79      	ldr	r3, [pc, #484]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d00d      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x40>
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	f200 80e1 	bhi.w	8003cac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x34>
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0x3a>
 8003af2:	e0db      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b73      	ldr	r3, [pc, #460]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003af8:	e0db      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003afa:	4b73      	ldr	r3, [pc, #460]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003afc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003afe:	e0d8      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b00:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b08:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b0a:	4b6d      	ldr	r3, [pc, #436]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d063      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b16:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b32:	4622      	mov	r2, r4
 8003b34:	462b      	mov	r3, r5
 8003b36:	f04f 0000 	mov.w	r0, #0
 8003b3a:	f04f 0100 	mov.w	r1, #0
 8003b3e:	0159      	lsls	r1, r3, #5
 8003b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b44:	0150      	lsls	r0, r2, #5
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	1a51      	subs	r1, r2, r1
 8003b4e:	6139      	str	r1, [r7, #16]
 8003b50:	4629      	mov	r1, r5
 8003b52:	eb63 0301 	sbc.w	r3, r3, r1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b64:	4659      	mov	r1, fp
 8003b66:	018b      	lsls	r3, r1, #6
 8003b68:	4651      	mov	r1, sl
 8003b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b6e:	4651      	mov	r1, sl
 8003b70:	018a      	lsls	r2, r1, #6
 8003b72:	4651      	mov	r1, sl
 8003b74:	ebb2 0801 	subs.w	r8, r2, r1
 8003b78:	4659      	mov	r1, fp
 8003b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b92:	4690      	mov	r8, r2
 8003b94:	4699      	mov	r9, r3
 8003b96:	4623      	mov	r3, r4
 8003b98:	eb18 0303 	adds.w	r3, r8, r3
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	462b      	mov	r3, r5
 8003ba0:	eb49 0303 	adc.w	r3, r9, r3
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	024b      	lsls	r3, r1, #9
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	024a      	lsls	r2, r1, #9
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bd0:	f7fc fb32 	bl	8000238 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bdc:	e058      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bde:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	2200      	movs	r2, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	4611      	mov	r1, r2
 8003bea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	464b      	mov	r3, r9
 8003bfc:	f04f 0000 	mov.w	r0, #0
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	0159      	lsls	r1, r3, #5
 8003c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c0a:	0150      	lsls	r0, r2, #5
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4641      	mov	r1, r8
 8003c12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c16:	4649      	mov	r1, r9
 8003c18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c30:	ebb2 040a 	subs.w	r4, r2, sl
 8003c34:	eb63 050b 	sbc.w	r5, r3, fp
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	00eb      	lsls	r3, r5, #3
 8003c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c46:	00e2      	lsls	r2, r4, #3
 8003c48:	4614      	mov	r4, r2
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	4643      	mov	r3, r8
 8003c4e:	18e3      	adds	r3, r4, r3
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	464b      	mov	r3, r9
 8003c54:	eb45 0303 	adc.w	r3, r5, r3
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c66:	4629      	mov	r1, r5
 8003c68:	028b      	lsls	r3, r1, #10
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c70:	4621      	mov	r1, r4
 8003c72:	028a      	lsls	r2, r1, #10
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	61fa      	str	r2, [r7, #28]
 8003c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c84:	f7fc fad8 	bl	8000238 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003caa:	e002      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3750      	adds	r7, #80	; 0x50
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	00f42400 	.word	0x00f42400
 8003cc8:	007a1200 	.word	0x007a1200

08003ccc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	2000000c 	.word	0x2000000c

08003ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ce8:	f7ff fff0 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0a9b      	lsrs	r3, r3, #10
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4903      	ldr	r1, [pc, #12]	; (8003d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	08006fa0 	.word	0x08006fa0

08003d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d10:	f7ff ffdc 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0b5b      	lsrs	r3, r3, #13
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4903      	ldr	r1, [pc, #12]	; (8003d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	08006fa0 	.word	0x08006fa0

08003d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d012      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d5c:	4b69      	ldr	r3, [pc, #420]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a68      	ldr	r2, [pc, #416]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d66:	6093      	str	r3, [r2, #8]
 8003d68:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d70:	4964      	ldr	r1, [pc, #400]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d017      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d8e:	4b5d      	ldr	r3, [pc, #372]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	4959      	ldr	r1, [pc, #356]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dac:	d101      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d017      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dca:	4b4e      	ldr	r3, [pc, #312]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	494a      	ldr	r1, [pc, #296]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de8:	d101      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 808b 	beq.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	4a39      	ldr	r2, [pc, #228]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6413      	str	r3, [r2, #64]	; 0x40
 8003e24:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e30:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a34      	ldr	r2, [pc, #208]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fb82 	bl	8002544 <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e44:	f7fe fb7e 	bl	8002544 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e38f      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e56:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e62:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d035      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d02e      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e80:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e96:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ea2:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d114      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fb46 	bl	8002544 <HAL_GetTick>
 8003eb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fb42 	bl	8002544 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e351      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ee      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eea:	d111      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003efa:	400b      	ands	r3, r1
 8003efc:	4901      	ldr	r1, [pc, #4]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
 8003f02:	e00b      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	0ffffcff 	.word	0x0ffffcff
 8003f10:	4bac      	ldr	r3, [pc, #688]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4aab      	ldr	r2, [pc, #684]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f1a:	6093      	str	r3, [r2, #8]
 8003f1c:	4ba9      	ldr	r3, [pc, #676]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f28:	49a6      	ldr	r1, [pc, #664]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f3a:	4ba2      	ldr	r3, [pc, #648]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f40:	4aa0      	ldr	r2, [pc, #640]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f4a:	4b9e      	ldr	r3, [pc, #632]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	499b      	ldr	r1, [pc, #620]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f68:	4b96      	ldr	r3, [pc, #600]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f76:	4993      	ldr	r1, [pc, #588]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f8a:	4b8e      	ldr	r3, [pc, #568]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f98:	498a      	ldr	r1, [pc, #552]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fac:	4b85      	ldr	r3, [pc, #532]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fba:	4982      	ldr	r1, [pc, #520]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fce:	4b7d      	ldr	r3, [pc, #500]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	4979      	ldr	r1, [pc, #484]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ff0:	4b74      	ldr	r3, [pc, #464]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f023 0203 	bic.w	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	4971      	ldr	r1, [pc, #452]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004012:	4b6c      	ldr	r3, [pc, #432]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	f023 020c 	bic.w	r2, r3, #12
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004020:	4968      	ldr	r1, [pc, #416]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004034:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	4960      	ldr	r1, [pc, #384]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004056:	4b5b      	ldr	r3, [pc, #364]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004064:	4957      	ldr	r1, [pc, #348]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004078:	4b52      	ldr	r3, [pc, #328]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	494f      	ldr	r1, [pc, #316]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	4946      	ldr	r1, [pc, #280]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040bc:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	493e      	ldr	r1, [pc, #248]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040de:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	4935      	ldr	r1, [pc, #212]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004100:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410e:	492d      	ldr	r1, [pc, #180]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d011      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004122:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004130:	4924      	ldr	r1, [pc, #144]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004140:	d101      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004142:	2301      	movs	r3, #1
 8004144:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004152:	2301      	movs	r3, #1
 8004154:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004162:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004170:	4914      	ldr	r1, [pc, #80]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004194:	490b      	ldr	r1, [pc, #44]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00f      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	4902      	ldr	r1, [pc, #8]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041c0:	e002      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041d4:	4b8a      	ldr	r3, [pc, #552]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	4986      	ldr	r1, [pc, #536]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041f8:	4b81      	ldr	r3, [pc, #516]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004208:	497d      	ldr	r1, [pc, #500]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d006      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80d6 	beq.w	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004224:	4b76      	ldr	r3, [pc, #472]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a75      	ldr	r2, [pc, #468]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800422e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004230:	f7fe f988 	bl	8002544 <HAL_GetTick>
 8004234:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004238:	f7fe f984 	bl	8002544 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e195      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800424a:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d021      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	2b00      	cmp	r3, #0
 8004268:	d11d      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800426a:	4b65      	ldr	r3, [pc, #404]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004278:	4b61      	ldr	r3, [pc, #388]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427e:	0e1b      	lsrs	r3, r3, #24
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	019a      	lsls	r2, r3, #6
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	041b      	lsls	r3, r3, #16
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	071b      	lsls	r3, r3, #28
 800429e:	4958      	ldr	r1, [pc, #352]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d02e      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d0:	d129      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042d2:	4b4b      	ldr	r3, [pc, #300]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042e0:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e6:	0f1b      	lsrs	r3, r3, #28
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	019a      	lsls	r2, r3, #6
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	061b      	lsls	r3, r3, #24
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	071b      	lsls	r3, r3, #28
 8004306:	493e      	ldr	r1, [pc, #248]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800430e:	4b3c      	ldr	r3, [pc, #240]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004314:	f023 021f 	bic.w	r2, r3, #31
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	3b01      	subs	r3, #1
 800431e:	4938      	ldr	r1, [pc, #224]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01d      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004332:	4b33      	ldr	r3, [pc, #204]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004340:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004346:	0f1b      	lsrs	r3, r3, #28
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	019a      	lsls	r2, r3, #6
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	431a      	orrs	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	061b      	lsls	r3, r3, #24
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	071b      	lsls	r3, r3, #28
 8004366:	4926      	ldr	r1, [pc, #152]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d011      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	019a      	lsls	r2, r3, #6
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	071b      	lsls	r3, r3, #28
 8004396:	491a      	ldr	r1, [pc, #104]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043aa:	f7fe f8cb 	bl	8002544 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043b2:	f7fe f8c7 	bl	8002544 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b64      	cmp	r3, #100	; 0x64
 80043be:	d901      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0d8      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	f040 80ce 	bne.w	8004574 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a08      	ldr	r2, [pc, #32]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e4:	f7fe f8ae 	bl	8002544 <HAL_GetTick>
 80043e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043ea:	e00b      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043ec:	f7fe f8aa 	bl	8002544 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d904      	bls.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e0bb      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004404:	4b5e      	ldr	r3, [pc, #376]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800440c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004410:	d0ec      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800442e:	2b00      	cmp	r3, #0
 8004430:	d02e      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d12a      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800443a:	4b51      	ldr	r3, [pc, #324]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004448:	4b4d      	ldr	r3, [pc, #308]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	0f1b      	lsrs	r3, r3, #28
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	019a      	lsls	r2, r3, #6
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	061b      	lsls	r3, r3, #24
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	071b      	lsls	r3, r3, #28
 800446e:	4944      	ldr	r1, [pc, #272]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004476:	4b42      	ldr	r3, [pc, #264]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	493d      	ldr	r1, [pc, #244]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d022      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a4:	d11d      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	0e1b      	lsrs	r3, r3, #24
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044b4:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	0f1b      	lsrs	r3, r3, #28
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	019a      	lsls	r2, r3, #6
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	041b      	lsls	r3, r3, #16
 80044ce:	431a      	orrs	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	071b      	lsls	r3, r3, #28
 80044da:	4929      	ldr	r1, [pc, #164]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d028      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044fc:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	019a      	lsls	r2, r3, #6
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	431a      	orrs	r2, r3
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	071b      	lsls	r3, r3, #28
 8004522:	4917      	ldr	r1, [pc, #92]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800452c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	4911      	ldr	r1, [pc, #68]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454c:	f7fd fffa 	bl	8002544 <HAL_GetTick>
 8004550:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004554:	f7fd fff6 	bl	8002544 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	; 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e007      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800456e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004572:	d1ef      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800

08004584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e09d      	b.n	80046d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d108      	bne.n	80045b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a6:	d009      	beq.n	80045bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
 80045ae:	e005      	b.n	80045bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd fac0 	bl	8001b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045fc:	d902      	bls.n	8004604 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e002      	b.n	800460a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004608:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004612:	d007      	beq.n	8004624 <HAL_SPI_Init+0xa0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800461c:	d002      	beq.n	8004624 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	ea42 0103 	orr.w	r1, r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	f003 0204 	and.w	r2, r3, #4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046a0:	ea42 0103 	orr.w	r1, r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e049      	b.n	8004780 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fd faab 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f001 f831 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d001      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e054      	b.n	800484a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a26      	ldr	r2, [pc, #152]	; (8004858 <HAL_TIM_Base_Start_IT+0xd0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d022      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ca:	d01d      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a22      	ldr	r2, [pc, #136]	; (800485c <HAL_TIM_Base_Start_IT+0xd4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d018      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a21      	ldr	r2, [pc, #132]	; (8004860 <HAL_TIM_Base_Start_IT+0xd8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <HAL_TIM_Base_Start_IT+0xdc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00e      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <HAL_TIM_Base_Start_IT+0xe0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1c      	ldr	r2, [pc, #112]	; (800486c <HAL_TIM_Base_Start_IT+0xe4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <HAL_TIM_Base_Start_IT+0xe8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d115      	bne.n	8004834 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_TIM_Base_Start_IT+0xec>)
 8004810:	4013      	ands	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b06      	cmp	r3, #6
 8004818:	d015      	beq.n	8004846 <HAL_TIM_Base_Start_IT+0xbe>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004820:	d011      	beq.n	8004846 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	e008      	b.n	8004846 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e000      	b.n	8004848 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004846:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40010000 	.word	0x40010000
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800
 8004864:	40000c00 	.word	0x40000c00
 8004868:	40010400 	.word	0x40010400
 800486c:	40014000 	.word	0x40014000
 8004870:	40001800 	.word	0x40001800
 8004874:	00010007 	.word	0x00010007

08004878 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e049      	b.n	800491e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f841 	bl	8004926 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f000 ff62 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e049      	b.n	80049e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fd fa8b 	bl	8001e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f000 ff01 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start+0x24>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e03c      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d109      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x3e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e02f      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x58>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e022      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d109      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x72>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e015      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d109      	bne.n	8004a74 <HAL_TIM_PWM_Start+0x8c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e008      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e092      	b.n	8004bb4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0xb6>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	e023      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0xc6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	e01b      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Start+0xd6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	e013      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Start+0xe6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004acc:	e00b      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0xf6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004adc:	e003      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 fb08 	bl	8006104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a30      	ldr	r2, [pc, #192]	; (8004bbc <HAL_TIM_PWM_Start+0x1d4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_TIM_PWM_Start+0x120>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2f      	ldr	r2, [pc, #188]	; (8004bc0 <HAL_TIM_PWM_Start+0x1d8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d101      	bne.n	8004b0c <HAL_TIM_PWM_Start+0x124>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <HAL_TIM_PWM_Start+0x126>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a25      	ldr	r2, [pc, #148]	; (8004bbc <HAL_TIM_PWM_Start+0x1d4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d022      	beq.n	8004b72 <HAL_TIM_PWM_Start+0x18a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b34:	d01d      	beq.n	8004b72 <HAL_TIM_PWM_Start+0x18a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_TIM_PWM_Start+0x1dc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d018      	beq.n	8004b72 <HAL_TIM_PWM_Start+0x18a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a20      	ldr	r2, [pc, #128]	; (8004bc8 <HAL_TIM_PWM_Start+0x1e0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <HAL_TIM_PWM_Start+0x18a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_TIM_PWM_Start+0x1e4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00e      	beq.n	8004b72 <HAL_TIM_PWM_Start+0x18a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <HAL_TIM_PWM_Start+0x1d8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d009      	beq.n	8004b72 <HAL_TIM_PWM_Start+0x18a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <HAL_TIM_PWM_Start+0x1e8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d004      	beq.n	8004b72 <HAL_TIM_PWM_Start+0x18a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <HAL_TIM_PWM_Start+0x1ec>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d115      	bne.n	8004b9e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <HAL_TIM_PWM_Start+0x1f0>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b06      	cmp	r3, #6
 8004b82:	d015      	beq.n	8004bb0 <HAL_TIM_PWM_Start+0x1c8>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8a:	d011      	beq.n	8004bb0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9c:	e008      	b.n	8004bb0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e000      	b.n	8004bb2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40010400 	.word	0x40010400
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40001800 	.word	0x40001800
 8004bd8:	00010007 	.word	0x00010007

08004bdc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e049      	b.n	8004c82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f841 	bl	8004c8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 fdb0 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e08f      	b.n	8004dd4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7fd f861 	bl	8001d90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6899      	ldr	r1, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	4b3e      	ldr	r3, [pc, #248]	; (8004ddc <HAL_TIM_Encoder_Init+0x13c>)
 8004ce2:	400b      	ands	r3, r1
 8004ce4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f000 fd45 	bl	8005780 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_TIM_Encoder_Init+0x140>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <HAL_TIM_Encoder_Init+0x144>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <HAL_TIM_Encoder_Init+0x148>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	011a      	lsls	r2, r3, #4
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	031b      	lsls	r3, r3, #12
 8004d60:	4313      	orrs	r3, r2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	4313      	orrs	r3, r2
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	fffebff8 	.word	0xfffebff8
 8004de0:	fffffcfc 	.word	0xfffffcfc
 8004de4:	fffff3f3 	.word	0xfffff3f3
 8004de8:	ffff0f0f 	.word	0xffff0f0f

08004dec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dfc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d110      	bne.n	8004e3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d102      	bne.n	8004e28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e22:	7b7b      	ldrb	r3, [r7, #13]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d001      	beq.n	8004e2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e069      	b.n	8004f00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3c:	e031      	b.n	8004ea2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d110      	bne.n	8004e66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e44:	7bbb      	ldrb	r3, [r7, #14]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d102      	bne.n	8004e50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e4a:	7b3b      	ldrb	r3, [r7, #12]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e055      	b.n	8004f00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e64:	e01d      	b.n	8004ea2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d108      	bne.n	8004e7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d105      	bne.n	8004e7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e72:	7b7b      	ldrb	r3, [r7, #13]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d102      	bne.n	8004e7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e78:	7b3b      	ldrb	r3, [r7, #12]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d001      	beq.n	8004e82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e03e      	b.n	8004f00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_TIM_Encoder_Start+0xc4>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d008      	beq.n	8004ec0 <HAL_TIM_Encoder_Start+0xd4>
 8004eae:	e00f      	b.n	8004ed0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f001 f923 	bl	8006104 <TIM_CCxChannelCmd>
      break;
 8004ebe:	e016      	b.n	8004eee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 f91b 	bl	8006104 <TIM_CCxChannelCmd>
      break;
 8004ece:	e00e      	b.n	8004eee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 f913 	bl	8006104 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	2104      	movs	r1, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 f90c 	bl	8006104 <TIM_CCxChannelCmd>
      break;
 8004eec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0202 	mvn.w	r2, #2
 8004f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fbfa 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fbec 	bl	8005730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fbfd 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0204 	mvn.w	r2, #4
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fbd0 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fbc2 	bl	8005730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fbd3 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d122      	bne.n	800500c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d11b      	bne.n	800500c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0208 	mvn.w	r2, #8
 8004fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fba6 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fb98 	bl	8005730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fba9 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b10      	cmp	r3, #16
 8005018:	d122      	bne.n	8005060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b10      	cmp	r3, #16
 8005026:	d11b      	bne.n	8005060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0210 	mvn.w	r2, #16
 8005030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2208      	movs	r2, #8
 8005036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fb7c 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 800504c:	e005      	b.n	800505a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fb6e 	bl	8005730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fb7f 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d10e      	bne.n	800508c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b01      	cmp	r3, #1
 800507a:	d107      	bne.n	800508c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0201 	mvn.w	r2, #1
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fb fafa 	bl	8000680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d10e      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	d107      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f001 f962 	bl	800637c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c6:	d10e      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d107      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 f955 	bl	8006390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d10e      	bne.n	8005112 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fe:	2b40      	cmp	r3, #64	; 0x40
 8005100:	d107      	bne.n	8005112 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800510a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fb2d 	bl	800576c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b20      	cmp	r3, #32
 800511e:	d10e      	bne.n	800513e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b20      	cmp	r3, #32
 800512c:	d107      	bne.n	800513e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f06f 0220 	mvn.w	r2, #32
 8005136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f001 f915 	bl	8006368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005162:	2302      	movs	r3, #2
 8005164:	e066      	b.n	8005234 <HAL_TIM_OC_ConfigChannel+0xec>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b14      	cmp	r3, #20
 8005172:	d857      	bhi.n	8005224 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005174:	a201      	add	r2, pc, #4	; (adr r2, 800517c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	080051d1 	.word	0x080051d1
 8005180:	08005225 	.word	0x08005225
 8005184:	08005225 	.word	0x08005225
 8005188:	08005225 	.word	0x08005225
 800518c:	080051df 	.word	0x080051df
 8005190:	08005225 	.word	0x08005225
 8005194:	08005225 	.word	0x08005225
 8005198:	08005225 	.word	0x08005225
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	08005225 	.word	0x08005225
 80051a4:	08005225 	.word	0x08005225
 80051a8:	08005225 	.word	0x08005225
 80051ac:	080051fb 	.word	0x080051fb
 80051b0:	08005225 	.word	0x08005225
 80051b4:	08005225 	.word	0x08005225
 80051b8:	08005225 	.word	0x08005225
 80051bc:	08005209 	.word	0x08005209
 80051c0:	08005225 	.word	0x08005225
 80051c4:	08005225 	.word	0x08005225
 80051c8:	08005225 	.word	0x08005225
 80051cc:	08005217 	.word	0x08005217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fb72 	bl	80058c0 <TIM_OC1_SetConfig>
      break;
 80051dc:	e025      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fbdd 	bl	80059a4 <TIM_OC2_SetConfig>
      break;
 80051ea:	e01e      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fc4e 	bl	8005a94 <TIM_OC3_SetConfig>
      break;
 80051f8:	e017      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fcbd 	bl	8005b80 <TIM_OC4_SetConfig>
      break;
 8005206:	e010      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fd0e 	bl	8005c30 <TIM_OC5_SetConfig>
      break;
 8005214:	e009      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fd59 	bl	8005cd4 <TIM_OC6_SetConfig>
      break;
 8005222:	e002      	b.n	800522a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
      break;
 8005228:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005232:	7dfb      	ldrb	r3, [r7, #23]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005256:	2302      	movs	r3, #2
 8005258:	e088      	b.n	800536c <HAL_TIM_IC_ConfigChannel+0x130>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d11b      	bne.n	80052a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f000 fd80 	bl	8005d7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 020c 	bic.w	r2, r2, #12
 800528a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6999      	ldr	r1, [r3, #24]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	619a      	str	r2, [r3, #24]
 800529e:	e060      	b.n	8005362 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d11c      	bne.n	80052e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f000 fe04 	bl	8005ec2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6999      	ldr	r1, [r3, #24]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	021a      	lsls	r2, r3, #8
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
 80052de:	e040      	b.n	8005362 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d11b      	bne.n	800531e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f000 fe51 	bl	8005f9c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 020c 	bic.w	r2, r2, #12
 8005308:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69d9      	ldr	r1, [r3, #28]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	61da      	str	r2, [r3, #28]
 800531c:	e021      	b.n	8005362 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b0c      	cmp	r3, #12
 8005322:	d11c      	bne.n	800535e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	6819      	ldr	r1, [r3, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f000 fe6e 	bl	8006014 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69da      	ldr	r2, [r3, #28]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005346:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69d9      	ldr	r1, [r3, #28]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	021a      	lsls	r2, r3, #8
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	61da      	str	r2, [r3, #28]
 800535c:	e001      	b.n	8005362 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800536a:	7dfb      	ldrb	r3, [r7, #23]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800538e:	2302      	movs	r3, #2
 8005390:	e0ff      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b14      	cmp	r3, #20
 800539e:	f200 80f0 	bhi.w	8005582 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	08005583 	.word	0x08005583
 80053b0:	08005583 	.word	0x08005583
 80053b4:	08005583 	.word	0x08005583
 80053b8:	0800543d 	.word	0x0800543d
 80053bc:	08005583 	.word	0x08005583
 80053c0:	08005583 	.word	0x08005583
 80053c4:	08005583 	.word	0x08005583
 80053c8:	0800547f 	.word	0x0800547f
 80053cc:	08005583 	.word	0x08005583
 80053d0:	08005583 	.word	0x08005583
 80053d4:	08005583 	.word	0x08005583
 80053d8:	080054bf 	.word	0x080054bf
 80053dc:	08005583 	.word	0x08005583
 80053e0:	08005583 	.word	0x08005583
 80053e4:	08005583 	.word	0x08005583
 80053e8:	08005501 	.word	0x08005501
 80053ec:	08005583 	.word	0x08005583
 80053f0:	08005583 	.word	0x08005583
 80053f4:	08005583 	.word	0x08005583
 80053f8:	08005541 	.word	0x08005541
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fa5c 	bl	80058c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0208 	orr.w	r2, r2, #8
 8005416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0204 	bic.w	r2, r2, #4
 8005426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6999      	ldr	r1, [r3, #24]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	619a      	str	r2, [r3, #24]
      break;
 800543a:	e0a5      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 faae 	bl	80059a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6999      	ldr	r1, [r3, #24]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	021a      	lsls	r2, r3, #8
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	619a      	str	r2, [r3, #24]
      break;
 800547c:	e084      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fb05 	bl	8005a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0208 	orr.w	r2, r2, #8
 8005498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0204 	bic.w	r2, r2, #4
 80054a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69d9      	ldr	r1, [r3, #28]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	61da      	str	r2, [r3, #28]
      break;
 80054bc:	e064      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fb5b 	bl	8005b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69d9      	ldr	r1, [r3, #28]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	021a      	lsls	r2, r3, #8
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	61da      	str	r2, [r3, #28]
      break;
 80054fe:	e043      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fb92 	bl	8005c30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0208 	orr.w	r2, r2, #8
 800551a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0204 	bic.w	r2, r2, #4
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800553e:	e023      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fbc4 	bl	8005cd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800555a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	021a      	lsls	r2, r3, #8
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005580:	e002      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
      break;
 8005586:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005590:	7dfb      	ldrb	r3, [r7, #23]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop

0800559c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_ConfigClockSource+0x1c>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e0b4      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x186>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4b56      	ldr	r3, [pc, #344]	; (800572c <HAL_TIM_ConfigClockSource+0x190>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f0:	d03e      	beq.n	8005670 <HAL_TIM_ConfigClockSource+0xd4>
 80055f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f6:	f200 8087 	bhi.w	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fe:	f000 8086 	beq.w	800570e <HAL_TIM_ConfigClockSource+0x172>
 8005602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005606:	d87f      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b70      	cmp	r3, #112	; 0x70
 800560a:	d01a      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0xa6>
 800560c:	2b70      	cmp	r3, #112	; 0x70
 800560e:	d87b      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b60      	cmp	r3, #96	; 0x60
 8005612:	d050      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005614:	2b60      	cmp	r3, #96	; 0x60
 8005616:	d877      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b50      	cmp	r3, #80	; 0x50
 800561a:	d03c      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0xfa>
 800561c:	2b50      	cmp	r3, #80	; 0x50
 800561e:	d873      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b40      	cmp	r3, #64	; 0x40
 8005622:	d058      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d86f      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b30      	cmp	r3, #48	; 0x30
 800562a:	d064      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	2b30      	cmp	r3, #48	; 0x30
 800562e:	d86b      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b20      	cmp	r3, #32
 8005632:	d060      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d867      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05c      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 800563c:	2b10      	cmp	r3, #16
 800563e:	d05a      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005640:	e062      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6899      	ldr	r1, [r3, #8]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f000 fd37 	bl	80060c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	609a      	str	r2, [r3, #8]
      break;
 800566e:	e04f      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6899      	ldr	r1, [r3, #8]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f000 fd20 	bl	80060c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005692:	609a      	str	r2, [r3, #8]
      break;
 8005694:	e03c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 fbde 	bl	8005e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2150      	movs	r1, #80	; 0x50
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fced 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 80056b4:	e02c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 fc3a 	bl	8005f3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2160      	movs	r1, #96	; 0x60
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fcdd 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 80056d4:	e01c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f000 fbbe 	bl	8005e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2140      	movs	r1, #64	; 0x40
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fccd 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 80056f4:	e00c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f000 fcc4 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 8005706:	e003      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
      break;
 800570c:	e000      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800570e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	fffeff88 	.word	0xfffeff88

08005730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a40      	ldr	r2, [pc, #256]	; (8005894 <TIM_Base_SetConfig+0x114>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579e:	d00f      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3d      	ldr	r2, [pc, #244]	; (8005898 <TIM_Base_SetConfig+0x118>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a3c      	ldr	r2, [pc, #240]	; (800589c <TIM_Base_SetConfig+0x11c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3b      	ldr	r2, [pc, #236]	; (80058a0 <TIM_Base_SetConfig+0x120>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3a      	ldr	r2, [pc, #232]	; (80058a4 <TIM_Base_SetConfig+0x124>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2f      	ldr	r2, [pc, #188]	; (8005894 <TIM_Base_SetConfig+0x114>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02b      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d027      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2c      	ldr	r2, [pc, #176]	; (8005898 <TIM_Base_SetConfig+0x118>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d023      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2b      	ldr	r2, [pc, #172]	; (800589c <TIM_Base_SetConfig+0x11c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01f      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <TIM_Base_SetConfig+0x120>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01b      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a29      	ldr	r2, [pc, #164]	; (80058a4 <TIM_Base_SetConfig+0x124>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d017      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a28      	ldr	r2, [pc, #160]	; (80058a8 <TIM_Base_SetConfig+0x128>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a27      	ldr	r2, [pc, #156]	; (80058ac <TIM_Base_SetConfig+0x12c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00f      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a26      	ldr	r2, [pc, #152]	; (80058b0 <TIM_Base_SetConfig+0x130>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <TIM_Base_SetConfig+0x134>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a24      	ldr	r2, [pc, #144]	; (80058b8 <TIM_Base_SetConfig+0x138>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a23      	ldr	r2, [pc, #140]	; (80058bc <TIM_Base_SetConfig+0x13c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <TIM_Base_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <TIM_Base_SetConfig+0x124>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d103      	bne.n	8005880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	615a      	str	r2, [r3, #20]
}
 8005886:	bf00      	nop
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40010400 	.word	0x40010400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800
 80058b4:	40001800 	.word	0x40001800
 80058b8:	40001c00 	.word	0x40001c00
 80058bc:	40002000 	.word	0x40002000

080058c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f023 0201 	bic.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <TIM_OC1_SetConfig+0xd8>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f023 0302 	bic.w	r3, r3, #2
 8005908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a21      	ldr	r2, [pc, #132]	; (800599c <TIM_OC1_SetConfig+0xdc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC1_SetConfig+0x64>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a20      	ldr	r2, [pc, #128]	; (80059a0 <TIM_OC1_SetConfig+0xe0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d10c      	bne.n	800593e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0308 	bic.w	r3, r3, #8
 800592a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f023 0304 	bic.w	r3, r3, #4
 800593c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a16      	ldr	r2, [pc, #88]	; (800599c <TIM_OC1_SetConfig+0xdc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_OC1_SetConfig+0x8e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <TIM_OC1_SetConfig+0xe0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d111      	bne.n	8005972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800595c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	621a      	str	r2, [r3, #32]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	fffeff8f 	.word	0xfffeff8f
 800599c:	40010000 	.word	0x40010000
 80059a0:	40010400 	.word	0x40010400

080059a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f023 0210 	bic.w	r2, r3, #16
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <TIM_OC2_SetConfig+0xe4>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0320 	bic.w	r3, r3, #32
 80059ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a23      	ldr	r2, [pc, #140]	; (8005a8c <TIM_OC2_SetConfig+0xe8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_OC2_SetConfig+0x68>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <TIM_OC2_SetConfig+0xec>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d10d      	bne.n	8005a28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <TIM_OC2_SetConfig+0xe8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_OC2_SetConfig+0x94>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <TIM_OC2_SetConfig+0xec>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d113      	bne.n	8005a60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	feff8fff 	.word	0xfeff8fff
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40010400 	.word	0x40010400

08005a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <TIM_OC3_SetConfig+0xe0>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a22      	ldr	r2, [pc, #136]	; (8005b78 <TIM_OC3_SetConfig+0xe4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_OC3_SetConfig+0x66>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <TIM_OC3_SetConfig+0xe8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d10d      	bne.n	8005b16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <TIM_OC3_SetConfig+0xe4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_OC3_SetConfig+0x92>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a16      	ldr	r2, [pc, #88]	; (8005b7c <TIM_OC3_SetConfig+0xe8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d113      	bne.n	8005b4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	fffeff8f 	.word	0xfffeff8f
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40010400 	.word	0x40010400

08005b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4b1e      	ldr	r3, [pc, #120]	; (8005c24 <TIM_OC4_SetConfig+0xa4>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <TIM_OC4_SetConfig+0xa8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC4_SetConfig+0x68>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <TIM_OC4_SetConfig+0xac>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d109      	bne.n	8005bfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	019b      	lsls	r3, r3, #6
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	feff8fff 	.word	0xfeff8fff
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40010400 	.word	0x40010400

08005c30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <TIM_OC5_SetConfig+0x98>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	041b      	lsls	r3, r3, #16
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a12      	ldr	r2, [pc, #72]	; (8005ccc <TIM_OC5_SetConfig+0x9c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_OC5_SetConfig+0x5e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a11      	ldr	r2, [pc, #68]	; (8005cd0 <TIM_OC5_SetConfig+0xa0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d109      	bne.n	8005ca2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	621a      	str	r2, [r3, #32]
}
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	fffeff8f 	.word	0xfffeff8f
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40010400 	.word	0x40010400

08005cd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4b1c      	ldr	r3, [pc, #112]	; (8005d70 <TIM_OC6_SetConfig+0x9c>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	051b      	lsls	r3, r3, #20
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <TIM_OC6_SetConfig+0xa0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_OC6_SetConfig+0x60>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a12      	ldr	r2, [pc, #72]	; (8005d78 <TIM_OC6_SetConfig+0xa4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d109      	bne.n	8005d48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	029b      	lsls	r3, r3, #10
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	feff8fff 	.word	0xfeff8fff
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40010400 	.word	0x40010400

08005d7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a28      	ldr	r2, [pc, #160]	; (8005e48 <TIM_TI1_SetConfig+0xcc>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01b      	beq.n	8005de2 <TIM_TI1_SetConfig+0x66>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d017      	beq.n	8005de2 <TIM_TI1_SetConfig+0x66>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a25      	ldr	r2, [pc, #148]	; (8005e4c <TIM_TI1_SetConfig+0xd0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <TIM_TI1_SetConfig+0x66>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4a24      	ldr	r2, [pc, #144]	; (8005e50 <TIM_TI1_SetConfig+0xd4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00f      	beq.n	8005de2 <TIM_TI1_SetConfig+0x66>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a23      	ldr	r2, [pc, #140]	; (8005e54 <TIM_TI1_SetConfig+0xd8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00b      	beq.n	8005de2 <TIM_TI1_SetConfig+0x66>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a22      	ldr	r2, [pc, #136]	; (8005e58 <TIM_TI1_SetConfig+0xdc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <TIM_TI1_SetConfig+0x66>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a21      	ldr	r2, [pc, #132]	; (8005e5c <TIM_TI1_SetConfig+0xe0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_TI1_SetConfig+0x66>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <TIM_TI1_SetConfig+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d101      	bne.n	8005de6 <TIM_TI1_SetConfig+0x6a>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <TIM_TI1_SetConfig+0x6c>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	e003      	b.n	8005e06 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f023 030a 	bic.w	r3, r3, #10
 8005e20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f003 030a 	and.w	r3, r3, #10
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40010400 	.word	0x40010400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40001800 	.word	0x40001800

08005e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	f023 0201 	bic.w	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f023 030a 	bic.w	r3, r3, #10
 8005ea0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b087      	sub	sp, #28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	f023 0210 	bic.w	r2, r3, #16
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	031b      	lsls	r3, r3, #12
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	621a      	str	r2, [r3, #32]
}
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f023 0210 	bic.w	r2, r3, #16
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	031b      	lsls	r3, r3, #12
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	621a      	str	r2, [r3, #32]
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 0303 	bic.w	r3, r3, #3
 8005fc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005fec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	621a      	str	r2, [r3, #32]
}
 8006008:	bf00      	nop
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006040:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006052:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	031b      	lsls	r3, r3, #12
 8006058:	b29b      	uxth	r3, r3
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006066:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	031b      	lsls	r3, r3, #12
 800606c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f043 0307 	orr.w	r3, r3, #7
 80060b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	021a      	lsls	r2, r3, #8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	609a      	str	r2, [r3, #8]
}
 80060f8:	bf00      	nop
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2201      	movs	r2, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1a      	ldr	r2, [r3, #32]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	43db      	mvns	r3, r3
 8006126:	401a      	ands	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006164:	2302      	movs	r3, #2
 8006166:	e06d      	b.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a30      	ldr	r2, [pc, #192]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2f      	ldr	r2, [pc, #188]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d108      	bne.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a20      	ldr	r2, [pc, #128]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d022      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061da:	d01d      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1d      	ldr	r2, [pc, #116]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d018      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1c      	ldr	r2, [pc, #112]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1a      	ldr	r2, [pc, #104]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00e      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a15      	ldr	r2, [pc, #84]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a16      	ldr	r2, [pc, #88]	; (8006264 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a15      	ldr	r2, [pc, #84]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10c      	bne.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800621e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	4313      	orrs	r3, r2
 8006228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40010000 	.word	0x40010000
 8006254:	40010400 	.word	0x40010400
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40014000 	.word	0x40014000
 8006268:	40001800 	.word	0x40001800

0800626c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006284:	2302      	movs	r3, #2
 8006286:	e065      	b.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	041b      	lsls	r3, r3, #16
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a16      	ldr	r2, [pc, #88]	; (8006360 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a14      	ldr	r2, [pc, #80]	; (8006364 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d115      	bne.n	8006342 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	051b      	lsls	r3, r3, #20
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	40010000 	.word	0x40010000
 8006364:	40010400 	.word	0x40010400

08006368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e040      	b.n	8006438 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fb fe44 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	; 0x24
 80063d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f974 	bl	80066d0 <UART_SetConfig>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e022      	b.n	8006438 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fbcc 	bl	8006b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800640e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800641e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fc53 	bl	8006cdc <UART_CheckIdleState>
 8006436:	4603      	mov	r3, r0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006454:	2b20      	cmp	r3, #32
 8006456:	d171      	bne.n	800653c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_UART_Transmit+0x24>
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e06a      	b.n	800653e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2221      	movs	r2, #33	; 0x21
 8006474:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006476:	f7fc f865 	bl	8002544 <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006494:	d108      	bne.n	80064a8 <HAL_UART_Transmit+0x68>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e003      	b.n	80064b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b0:	e02c      	b.n	800650c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fc5a 	bl	8006d76 <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e038      	b.n	800653e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	3302      	adds	r3, #2
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e007      	b.n	80064fa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1cc      	bne.n	80064b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	2140      	movs	r1, #64	; 0x40
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fc27 	bl	8006d76 <UART_WaitOnFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e005      	b.n	800653e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b08a      	sub	sp, #40	; 0x28
 800654a:	af02      	add	r7, sp, #8
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800655c:	2b20      	cmp	r3, #32
 800655e:	f040 80b1 	bne.w	80066c4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_UART_Receive+0x28>
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e0a9      	b.n	80066c6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2222      	movs	r2, #34	; 0x22
 800657e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006588:	f7fb ffdc 	bl	8002544 <HAL_GetTick>
 800658c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	88fa      	ldrh	r2, [r7, #6]
 800659a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a6:	d10e      	bne.n	80065c6 <HAL_UART_Receive+0x80>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d105      	bne.n	80065bc <HAL_UART_Receive+0x76>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ba:	e02d      	b.n	8006618 <HAL_UART_Receive+0xd2>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065c4:	e028      	b.n	8006618 <HAL_UART_Receive+0xd2>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <HAL_UART_Receive+0xa4>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <HAL_UART_Receive+0x9a>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	22ff      	movs	r2, #255	; 0xff
 80065da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065de:	e01b      	b.n	8006618 <HAL_UART_Receive+0xd2>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	227f      	movs	r2, #127	; 0x7f
 80065e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065e8:	e016      	b.n	8006618 <HAL_UART_Receive+0xd2>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f2:	d10d      	bne.n	8006610 <HAL_UART_Receive+0xca>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_UART_Receive+0xc0>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	227f      	movs	r2, #127	; 0x7f
 8006600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006604:	e008      	b.n	8006618 <HAL_UART_Receive+0xd2>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	223f      	movs	r2, #63	; 0x3f
 800660a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800660e:	e003      	b.n	8006618 <HAL_UART_Receive+0xd2>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800661e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006628:	d108      	bne.n	800663c <HAL_UART_Receive+0xf6>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	e003      	b.n	8006644 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006644:	e032      	b.n	80066ac <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2200      	movs	r2, #0
 800664e:	2120      	movs	r1, #32
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fb90 	bl	8006d76 <UART_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e032      	b.n	80066c6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10c      	bne.n	8006680 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	b29a      	uxth	r2, r3
 800666e:	8a7b      	ldrh	r3, [r7, #18]
 8006670:	4013      	ands	r3, r2
 8006672:	b29a      	uxth	r2, r3
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	3302      	adds	r3, #2
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	e00c      	b.n	800669a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	b2da      	uxtb	r2, r3
 8006688:	8a7b      	ldrh	r3, [r7, #18]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	4013      	ands	r3, r2
 800668e:	b2da      	uxtb	r2, r3
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	3301      	adds	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1c6      	bne.n	8006646 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e000      	b.n	80066c6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4ba6      	ldr	r3, [pc, #664]	; (8006994 <UART_SetConfig+0x2c4>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	6979      	ldr	r1, [r7, #20]
 8006704:	430b      	orrs	r3, r1
 8006706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	430a      	orrs	r2, r1
 8006740:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a94      	ldr	r2, [pc, #592]	; (8006998 <UART_SetConfig+0x2c8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d120      	bne.n	800678e <UART_SetConfig+0xbe>
 800674c:	4b93      	ldr	r3, [pc, #588]	; (800699c <UART_SetConfig+0x2cc>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	2b03      	cmp	r3, #3
 8006758:	d816      	bhi.n	8006788 <UART_SetConfig+0xb8>
 800675a:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <UART_SetConfig+0x90>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	08006771 	.word	0x08006771
 8006764:	0800677d 	.word	0x0800677d
 8006768:	08006777 	.word	0x08006777
 800676c:	08006783 	.word	0x08006783
 8006770:	2301      	movs	r3, #1
 8006772:	77fb      	strb	r3, [r7, #31]
 8006774:	e150      	b.n	8006a18 <UART_SetConfig+0x348>
 8006776:	2302      	movs	r3, #2
 8006778:	77fb      	strb	r3, [r7, #31]
 800677a:	e14d      	b.n	8006a18 <UART_SetConfig+0x348>
 800677c:	2304      	movs	r3, #4
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e14a      	b.n	8006a18 <UART_SetConfig+0x348>
 8006782:	2308      	movs	r3, #8
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e147      	b.n	8006a18 <UART_SetConfig+0x348>
 8006788:	2310      	movs	r3, #16
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e144      	b.n	8006a18 <UART_SetConfig+0x348>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a83      	ldr	r2, [pc, #524]	; (80069a0 <UART_SetConfig+0x2d0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d132      	bne.n	80067fe <UART_SetConfig+0x12e>
 8006798:	4b80      	ldr	r3, [pc, #512]	; (800699c <UART_SetConfig+0x2cc>)
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	f003 030c 	and.w	r3, r3, #12
 80067a2:	2b0c      	cmp	r3, #12
 80067a4:	d828      	bhi.n	80067f8 <UART_SetConfig+0x128>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0xdc>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	080067f9 	.word	0x080067f9
 80067b4:	080067f9 	.word	0x080067f9
 80067b8:	080067f9 	.word	0x080067f9
 80067bc:	080067ed 	.word	0x080067ed
 80067c0:	080067f9 	.word	0x080067f9
 80067c4:	080067f9 	.word	0x080067f9
 80067c8:	080067f9 	.word	0x080067f9
 80067cc:	080067e7 	.word	0x080067e7
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	080067f9 	.word	0x080067f9
 80067dc:	080067f3 	.word	0x080067f3
 80067e0:	2300      	movs	r3, #0
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e118      	b.n	8006a18 <UART_SetConfig+0x348>
 80067e6:	2302      	movs	r3, #2
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e115      	b.n	8006a18 <UART_SetConfig+0x348>
 80067ec:	2304      	movs	r3, #4
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e112      	b.n	8006a18 <UART_SetConfig+0x348>
 80067f2:	2308      	movs	r3, #8
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e10f      	b.n	8006a18 <UART_SetConfig+0x348>
 80067f8:	2310      	movs	r3, #16
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e10c      	b.n	8006a18 <UART_SetConfig+0x348>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a68      	ldr	r2, [pc, #416]	; (80069a4 <UART_SetConfig+0x2d4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d120      	bne.n	800684a <UART_SetConfig+0x17a>
 8006808:	4b64      	ldr	r3, [pc, #400]	; (800699c <UART_SetConfig+0x2cc>)
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006812:	2b30      	cmp	r3, #48	; 0x30
 8006814:	d013      	beq.n	800683e <UART_SetConfig+0x16e>
 8006816:	2b30      	cmp	r3, #48	; 0x30
 8006818:	d814      	bhi.n	8006844 <UART_SetConfig+0x174>
 800681a:	2b20      	cmp	r3, #32
 800681c:	d009      	beq.n	8006832 <UART_SetConfig+0x162>
 800681e:	2b20      	cmp	r3, #32
 8006820:	d810      	bhi.n	8006844 <UART_SetConfig+0x174>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <UART_SetConfig+0x15c>
 8006826:	2b10      	cmp	r3, #16
 8006828:	d006      	beq.n	8006838 <UART_SetConfig+0x168>
 800682a:	e00b      	b.n	8006844 <UART_SetConfig+0x174>
 800682c:	2300      	movs	r3, #0
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e0f2      	b.n	8006a18 <UART_SetConfig+0x348>
 8006832:	2302      	movs	r3, #2
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e0ef      	b.n	8006a18 <UART_SetConfig+0x348>
 8006838:	2304      	movs	r3, #4
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e0ec      	b.n	8006a18 <UART_SetConfig+0x348>
 800683e:	2308      	movs	r3, #8
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e0e9      	b.n	8006a18 <UART_SetConfig+0x348>
 8006844:	2310      	movs	r3, #16
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e0e6      	b.n	8006a18 <UART_SetConfig+0x348>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a56      	ldr	r2, [pc, #344]	; (80069a8 <UART_SetConfig+0x2d8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d120      	bne.n	8006896 <UART_SetConfig+0x1c6>
 8006854:	4b51      	ldr	r3, [pc, #324]	; (800699c <UART_SetConfig+0x2cc>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800685e:	2bc0      	cmp	r3, #192	; 0xc0
 8006860:	d013      	beq.n	800688a <UART_SetConfig+0x1ba>
 8006862:	2bc0      	cmp	r3, #192	; 0xc0
 8006864:	d814      	bhi.n	8006890 <UART_SetConfig+0x1c0>
 8006866:	2b80      	cmp	r3, #128	; 0x80
 8006868:	d009      	beq.n	800687e <UART_SetConfig+0x1ae>
 800686a:	2b80      	cmp	r3, #128	; 0x80
 800686c:	d810      	bhi.n	8006890 <UART_SetConfig+0x1c0>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <UART_SetConfig+0x1a8>
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d006      	beq.n	8006884 <UART_SetConfig+0x1b4>
 8006876:	e00b      	b.n	8006890 <UART_SetConfig+0x1c0>
 8006878:	2300      	movs	r3, #0
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e0cc      	b.n	8006a18 <UART_SetConfig+0x348>
 800687e:	2302      	movs	r3, #2
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e0c9      	b.n	8006a18 <UART_SetConfig+0x348>
 8006884:	2304      	movs	r3, #4
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e0c6      	b.n	8006a18 <UART_SetConfig+0x348>
 800688a:	2308      	movs	r3, #8
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e0c3      	b.n	8006a18 <UART_SetConfig+0x348>
 8006890:	2310      	movs	r3, #16
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e0c0      	b.n	8006a18 <UART_SetConfig+0x348>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a44      	ldr	r2, [pc, #272]	; (80069ac <UART_SetConfig+0x2dc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d125      	bne.n	80068ec <UART_SetConfig+0x21c>
 80068a0:	4b3e      	ldr	r3, [pc, #248]	; (800699c <UART_SetConfig+0x2cc>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ae:	d017      	beq.n	80068e0 <UART_SetConfig+0x210>
 80068b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b4:	d817      	bhi.n	80068e6 <UART_SetConfig+0x216>
 80068b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ba:	d00b      	beq.n	80068d4 <UART_SetConfig+0x204>
 80068bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c0:	d811      	bhi.n	80068e6 <UART_SetConfig+0x216>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <UART_SetConfig+0x1fe>
 80068c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ca:	d006      	beq.n	80068da <UART_SetConfig+0x20a>
 80068cc:	e00b      	b.n	80068e6 <UART_SetConfig+0x216>
 80068ce:	2300      	movs	r3, #0
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e0a1      	b.n	8006a18 <UART_SetConfig+0x348>
 80068d4:	2302      	movs	r3, #2
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e09e      	b.n	8006a18 <UART_SetConfig+0x348>
 80068da:	2304      	movs	r3, #4
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	e09b      	b.n	8006a18 <UART_SetConfig+0x348>
 80068e0:	2308      	movs	r3, #8
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e098      	b.n	8006a18 <UART_SetConfig+0x348>
 80068e6:	2310      	movs	r3, #16
 80068e8:	77fb      	strb	r3, [r7, #31]
 80068ea:	e095      	b.n	8006a18 <UART_SetConfig+0x348>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a2f      	ldr	r2, [pc, #188]	; (80069b0 <UART_SetConfig+0x2e0>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d125      	bne.n	8006942 <UART_SetConfig+0x272>
 80068f6:	4b29      	ldr	r3, [pc, #164]	; (800699c <UART_SetConfig+0x2cc>)
 80068f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006904:	d017      	beq.n	8006936 <UART_SetConfig+0x266>
 8006906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800690a:	d817      	bhi.n	800693c <UART_SetConfig+0x26c>
 800690c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006910:	d00b      	beq.n	800692a <UART_SetConfig+0x25a>
 8006912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006916:	d811      	bhi.n	800693c <UART_SetConfig+0x26c>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <UART_SetConfig+0x254>
 800691c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006920:	d006      	beq.n	8006930 <UART_SetConfig+0x260>
 8006922:	e00b      	b.n	800693c <UART_SetConfig+0x26c>
 8006924:	2301      	movs	r3, #1
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e076      	b.n	8006a18 <UART_SetConfig+0x348>
 800692a:	2302      	movs	r3, #2
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e073      	b.n	8006a18 <UART_SetConfig+0x348>
 8006930:	2304      	movs	r3, #4
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e070      	b.n	8006a18 <UART_SetConfig+0x348>
 8006936:	2308      	movs	r3, #8
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e06d      	b.n	8006a18 <UART_SetConfig+0x348>
 800693c:	2310      	movs	r3, #16
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e06a      	b.n	8006a18 <UART_SetConfig+0x348>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1b      	ldr	r2, [pc, #108]	; (80069b4 <UART_SetConfig+0x2e4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d138      	bne.n	80069be <UART_SetConfig+0x2ee>
 800694c:	4b13      	ldr	r3, [pc, #76]	; (800699c <UART_SetConfig+0x2cc>)
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006952:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006956:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800695a:	d017      	beq.n	800698c <UART_SetConfig+0x2bc>
 800695c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006960:	d82a      	bhi.n	80069b8 <UART_SetConfig+0x2e8>
 8006962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006966:	d00b      	beq.n	8006980 <UART_SetConfig+0x2b0>
 8006968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696c:	d824      	bhi.n	80069b8 <UART_SetConfig+0x2e8>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <UART_SetConfig+0x2aa>
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006976:	d006      	beq.n	8006986 <UART_SetConfig+0x2b6>
 8006978:	e01e      	b.n	80069b8 <UART_SetConfig+0x2e8>
 800697a:	2300      	movs	r3, #0
 800697c:	77fb      	strb	r3, [r7, #31]
 800697e:	e04b      	b.n	8006a18 <UART_SetConfig+0x348>
 8006980:	2302      	movs	r3, #2
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e048      	b.n	8006a18 <UART_SetConfig+0x348>
 8006986:	2304      	movs	r3, #4
 8006988:	77fb      	strb	r3, [r7, #31]
 800698a:	e045      	b.n	8006a18 <UART_SetConfig+0x348>
 800698c:	2308      	movs	r3, #8
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	e042      	b.n	8006a18 <UART_SetConfig+0x348>
 8006992:	bf00      	nop
 8006994:	efff69f3 	.word	0xefff69f3
 8006998:	40011000 	.word	0x40011000
 800699c:	40023800 	.word	0x40023800
 80069a0:	40004400 	.word	0x40004400
 80069a4:	40004800 	.word	0x40004800
 80069a8:	40004c00 	.word	0x40004c00
 80069ac:	40005000 	.word	0x40005000
 80069b0:	40011400 	.word	0x40011400
 80069b4:	40007800 	.word	0x40007800
 80069b8:	2310      	movs	r3, #16
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e02c      	b.n	8006a18 <UART_SetConfig+0x348>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a72      	ldr	r2, [pc, #456]	; (8006b8c <UART_SetConfig+0x4bc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d125      	bne.n	8006a14 <UART_SetConfig+0x344>
 80069c8:	4b71      	ldr	r3, [pc, #452]	; (8006b90 <UART_SetConfig+0x4c0>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069d6:	d017      	beq.n	8006a08 <UART_SetConfig+0x338>
 80069d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069dc:	d817      	bhi.n	8006a0e <UART_SetConfig+0x33e>
 80069de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e2:	d00b      	beq.n	80069fc <UART_SetConfig+0x32c>
 80069e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e8:	d811      	bhi.n	8006a0e <UART_SetConfig+0x33e>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <UART_SetConfig+0x326>
 80069ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f2:	d006      	beq.n	8006a02 <UART_SetConfig+0x332>
 80069f4:	e00b      	b.n	8006a0e <UART_SetConfig+0x33e>
 80069f6:	2300      	movs	r3, #0
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e00d      	b.n	8006a18 <UART_SetConfig+0x348>
 80069fc:	2302      	movs	r3, #2
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e00a      	b.n	8006a18 <UART_SetConfig+0x348>
 8006a02:	2304      	movs	r3, #4
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e007      	b.n	8006a18 <UART_SetConfig+0x348>
 8006a08:	2308      	movs	r3, #8
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e004      	b.n	8006a18 <UART_SetConfig+0x348>
 8006a0e:	2310      	movs	r3, #16
 8006a10:	77fb      	strb	r3, [r7, #31]
 8006a12:	e001      	b.n	8006a18 <UART_SetConfig+0x348>
 8006a14:	2310      	movs	r3, #16
 8006a16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a20:	d15b      	bne.n	8006ada <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a22:	7ffb      	ldrb	r3, [r7, #31]
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d828      	bhi.n	8006a7a <UART_SetConfig+0x3aa>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <UART_SetConfig+0x360>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	08006a7b 	.word	0x08006a7b
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a7b 	.word	0x08006a7b
 8006a48:	08006a7b 	.word	0x08006a7b
 8006a4c:	08006a7b 	.word	0x08006a7b
 8006a50:	08006a73 	.word	0x08006a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7fd f946 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 8006a58:	61b8      	str	r0, [r7, #24]
        break;
 8006a5a:	e013      	b.n	8006a84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7fd f956 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 8006a60:	61b8      	str	r0, [r7, #24]
        break;
 8006a62:	e00f      	b.n	8006a84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a64:	4b4b      	ldr	r3, [pc, #300]	; (8006b94 <UART_SetConfig+0x4c4>)
 8006a66:	61bb      	str	r3, [r7, #24]
        break;
 8006a68:	e00c      	b.n	8006a84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6a:	f7fd f829 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8006a6e:	61b8      	str	r0, [r7, #24]
        break;
 8006a70:	e008      	b.n	8006a84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a76:	61bb      	str	r3, [r7, #24]
        break;
 8006a78:	e004      	b.n	8006a84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	77bb      	strb	r3, [r7, #30]
        break;
 8006a82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d074      	beq.n	8006b74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	005a      	lsls	r2, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	441a      	add	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b0f      	cmp	r3, #15
 8006aa4:	d916      	bls.n	8006ad4 <UART_SetConfig+0x404>
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aac:	d212      	bcs.n	8006ad4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f023 030f 	bic.w	r3, r3, #15
 8006ab6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	89fb      	ldrh	r3, [r7, #14]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	89fa      	ldrh	r2, [r7, #14]
 8006ad0:	60da      	str	r2, [r3, #12]
 8006ad2:	e04f      	b.n	8006b74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	77bb      	strb	r3, [r7, #30]
 8006ad8:	e04c      	b.n	8006b74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ada:	7ffb      	ldrb	r3, [r7, #31]
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d828      	bhi.n	8006b32 <UART_SetConfig+0x462>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x418>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	08006b33 	.word	0x08006b33
 8006af8:	08006b23 	.word	0x08006b23
 8006afc:	08006b33 	.word	0x08006b33
 8006b00:	08006b33 	.word	0x08006b33
 8006b04:	08006b33 	.word	0x08006b33
 8006b08:	08006b2b 	.word	0x08006b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fd f8ea 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 8006b10:	61b8      	str	r0, [r7, #24]
        break;
 8006b12:	e013      	b.n	8006b3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b14:	f7fd f8fa 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 8006b18:	61b8      	str	r0, [r7, #24]
        break;
 8006b1a:	e00f      	b.n	8006b3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b1c:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <UART_SetConfig+0x4c4>)
 8006b1e:	61bb      	str	r3, [r7, #24]
        break;
 8006b20:	e00c      	b.n	8006b3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b22:	f7fc ffcd 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8006b26:	61b8      	str	r0, [r7, #24]
        break;
 8006b28:	e008      	b.n	8006b3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2e:	61bb      	str	r3, [r7, #24]
        break;
 8006b30:	e004      	b.n	8006b3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	77bb      	strb	r3, [r7, #30]
        break;
 8006b3a:	bf00      	nop
    }

    if (pclk != 0U)
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d018      	beq.n	8006b74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	085a      	lsrs	r2, r3, #1
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	441a      	add	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b0f      	cmp	r3, #15
 8006b5a:	d909      	bls.n	8006b70 <UART_SetConfig+0x4a0>
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b62:	d205      	bcs.n	8006b70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60da      	str	r2, [r3, #12]
 8006b6e:	e001      	b.n	8006b74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b80:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40007c00 	.word	0x40007c00
 8006b90:	40023800 	.word	0x40023800
 8006b94:	00f42400 	.word	0x00f42400

08006b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01a      	beq.n	8006cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c96:	d10a      	bne.n	8006cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cec:	f7fb fc2a 	bl	8002544 <HAL_GetTick>
 8006cf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d10e      	bne.n	8006d1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f831 	bl	8006d76 <UART_WaitOnFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e027      	b.n	8006d6e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d10e      	bne.n	8006d4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f81b 	bl	8006d76 <UART_WaitOnFlagUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e011      	b.n	8006d6e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b09c      	sub	sp, #112	; 0x70
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	603b      	str	r3, [r7, #0]
 8006d82:	4613      	mov	r3, r2
 8006d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d86:	e0a7      	b.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8e:	f000 80a3 	beq.w	8006ed8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d92:	f7fb fbd7 	bl	8002544 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d302      	bcc.n	8006da8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d13f      	bne.n	8006e28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e6      	bne.n	8006da8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	663b      	str	r3, [r7, #96]	; 0x60
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e5      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e068      	b.n	8006efa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d050      	beq.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e44:	d148      	bne.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e70:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e6      	bne.n	8006e50 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3308      	adds	r3, #8
 8006e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	613b      	str	r3, [r7, #16]
   return(result);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f023 0301 	bic.w	r3, r3, #1
 8006e98:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ea2:	623a      	str	r2, [r7, #32]
 8006ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	69f9      	ldr	r1, [r7, #28]
 8006ea8:	6a3a      	ldr	r2, [r7, #32]
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e5      	bne.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e010      	b.n	8006efa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69da      	ldr	r2, [r3, #28]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	bf0c      	ite	eq
 8006ee8:	2301      	moveq	r3, #1
 8006eea:	2300      	movne	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	f43f af48 	beq.w	8006d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3770      	adds	r7, #112	; 0x70
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <__libc_init_array>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4d0d      	ldr	r5, [pc, #52]	; (8006f3c <__libc_init_array+0x38>)
 8006f08:	4c0d      	ldr	r4, [pc, #52]	; (8006f40 <__libc_init_array+0x3c>)
 8006f0a:	1b64      	subs	r4, r4, r5
 8006f0c:	10a4      	asrs	r4, r4, #2
 8006f0e:	2600      	movs	r6, #0
 8006f10:	42a6      	cmp	r6, r4
 8006f12:	d109      	bne.n	8006f28 <__libc_init_array+0x24>
 8006f14:	4d0b      	ldr	r5, [pc, #44]	; (8006f44 <__libc_init_array+0x40>)
 8006f16:	4c0c      	ldr	r4, [pc, #48]	; (8006f48 <__libc_init_array+0x44>)
 8006f18:	f000 f82e 	bl	8006f78 <_init>
 8006f1c:	1b64      	subs	r4, r4, r5
 8006f1e:	10a4      	asrs	r4, r4, #2
 8006f20:	2600      	movs	r6, #0
 8006f22:	42a6      	cmp	r6, r4
 8006f24:	d105      	bne.n	8006f32 <__libc_init_array+0x2e>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2c:	4798      	blx	r3
 8006f2e:	3601      	adds	r6, #1
 8006f30:	e7ee      	b.n	8006f10 <__libc_init_array+0xc>
 8006f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f36:	4798      	blx	r3
 8006f38:	3601      	adds	r6, #1
 8006f3a:	e7f2      	b.n	8006f22 <__libc_init_array+0x1e>
 8006f3c:	08006fb0 	.word	0x08006fb0
 8006f40:	08006fb0 	.word	0x08006fb0
 8006f44:	08006fb0 	.word	0x08006fb0
 8006f48:	08006fb4 	.word	0x08006fb4

08006f4c <memcpy>:
 8006f4c:	440a      	add	r2, r1
 8006f4e:	4291      	cmp	r1, r2
 8006f50:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f54:	d100      	bne.n	8006f58 <memcpy+0xc>
 8006f56:	4770      	bx	lr
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f62:	4291      	cmp	r1, r2
 8006f64:	d1f9      	bne.n	8006f5a <memcpy+0xe>
 8006f66:	bd10      	pop	{r4, pc}

08006f68 <memset>:
 8006f68:	4402      	add	r2, r0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d100      	bne.n	8006f72 <memset+0xa>
 8006f70:	4770      	bx	lr
 8006f72:	f803 1b01 	strb.w	r1, [r3], #1
 8006f76:	e7f9      	b.n	8006f6c <memset+0x4>

08006f78 <_init>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	bf00      	nop
 8006f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	469e      	mov	lr, r3
 8006f82:	4770      	bx	lr

08006f84 <_fini>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	bf00      	nop
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr
