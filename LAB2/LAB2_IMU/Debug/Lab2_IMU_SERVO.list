
Lab2_IMU_SERVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008430  08008430  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008438  08008438  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008438  08008438  00018438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000070  080084b0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  080084b0  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eca1  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a30  00000000  00000000  0003ed3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  00041770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc0  00000000  00000000  00043458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b780  00000000  00000000  00045018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021df9  00000000  00000000  00070798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112a07  00000000  00000000  00092591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a4f98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008130  00000000  00000000  001a4fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	080083d8 	.word	0x080083d8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	080083d8 	.word	0x080083d8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000544:	23ff      	movs	r3, #255	; 0xff
 8000546:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000548:	2300      	movs	r3, #0
 800054a:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 800054c:	2300      	movs	r3, #0
 800054e:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000550:	2300      	movs	r3, #0
 8000552:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000554:	4a58      	ldr	r2, [pc, #352]	; (80006b8 <bno055_init+0x17c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800055a:	4b57      	ldr	r3, [pc, #348]	; (80006b8 <bno055_init+0x17c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	68dc      	ldr	r4, [r3, #12]
 8000560:	4b55      	ldr	r3, [pc, #340]	; (80006b8 <bno055_init+0x17c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	7a58      	ldrb	r0, [r3, #9]
 8000566:	f107 020d 	add.w	r2, r7, #13
 800056a:	2301      	movs	r3, #1
 800056c:	2107      	movs	r1, #7
 800056e:	47a0      	blx	r4
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000574:	4b50      	ldr	r3, [pc, #320]	; (80006b8 <bno055_init+0x17c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	691c      	ldr	r4, [r3, #16]
 800057a:	4b4f      	ldr	r3, [pc, #316]	; (80006b8 <bno055_init+0x17c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	7a58      	ldrb	r0, [r3, #9]
 8000580:	f107 020e 	add.w	r2, r7, #14
 8000584:	2301      	movs	r3, #1
 8000586:	2100      	movs	r1, #0
 8000588:	47a0      	blx	r4
 800058a:	4603      	mov	r3, r0
 800058c:	b2da      	uxtb	r2, r3
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	4413      	add	r3, r2
 8000592:	b2db      	uxtb	r3, r3
 8000594:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000596:	4b48      	ldr	r3, [pc, #288]	; (80006b8 <bno055_init+0x17c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	7bba      	ldrb	r2, [r7, #14]
 800059c:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800059e:	4b46      	ldr	r3, [pc, #280]	; (80006b8 <bno055_init+0x17c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	691c      	ldr	r4, [r3, #16]
 80005a4:	4b44      	ldr	r3, [pc, #272]	; (80006b8 <bno055_init+0x17c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	7a58      	ldrb	r0, [r3, #9]
 80005aa:	f107 020e 	add.w	r2, r7, #14
 80005ae:	2301      	movs	r3, #1
 80005b0:	2101      	movs	r1, #1
 80005b2:	47a0      	blx	r4
 80005b4:	4603      	mov	r3, r0
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4413      	add	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80005c0:	4b3d      	ldr	r3, [pc, #244]	; (80006b8 <bno055_init+0x17c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	7bba      	ldrb	r2, [r7, #14]
 80005c6:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80005c8:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <bno055_init+0x17c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	691c      	ldr	r4, [r3, #16]
 80005ce:	4b3a      	ldr	r3, [pc, #232]	; (80006b8 <bno055_init+0x17c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	7a58      	ldrb	r0, [r3, #9]
 80005d4:	f107 020e 	add.w	r2, r7, #14
 80005d8:	2301      	movs	r3, #1
 80005da:	2102      	movs	r1, #2
 80005dc:	47a0      	blx	r4
 80005de:	4603      	mov	r3, r0
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	4413      	add	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <bno055_init+0x17c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	7bba      	ldrb	r2, [r7, #14]
 80005f0:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80005f2:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <bno055_init+0x17c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	691c      	ldr	r4, [r3, #16]
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <bno055_init+0x17c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	7a58      	ldrb	r0, [r3, #9]
 80005fe:	f107 020e 	add.w	r2, r7, #14
 8000602:	2301      	movs	r3, #1
 8000604:	2103      	movs	r1, #3
 8000606:	47a0      	blx	r4
 8000608:	4603      	mov	r3, r0
 800060a:	b2da      	uxtb	r2, r3
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4413      	add	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <bno055_init+0x17c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	7bba      	ldrb	r2, [r7, #14]
 800061a:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <bno055_init+0x17c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	691c      	ldr	r4, [r3, #16]
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <bno055_init+0x17c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	7a58      	ldrb	r0, [r3, #9]
 8000628:	f107 020e 	add.w	r2, r7, #14
 800062c:	2301      	movs	r3, #1
 800062e:	2106      	movs	r1, #6
 8000630:	47a0      	blx	r4
 8000632:	4603      	mov	r3, r0
 8000634:	b2da      	uxtb	r2, r3
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	4413      	add	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <bno055_init+0x17c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	7bba      	ldrb	r2, [r7, #14]
 8000644:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <bno055_init+0x17c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	691c      	ldr	r4, [r3, #16]
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <bno055_init+0x17c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	7a58      	ldrb	r0, [r3, #9]
 8000652:	f107 0208 	add.w	r2, r7, #8
 8000656:	2302      	movs	r3, #2
 8000658:	2104      	movs	r1, #4
 800065a:	47a0      	blx	r4
 800065c:	4603      	mov	r3, r0
 800065e:	b2da      	uxtb	r2, r3
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	4413      	add	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000668:	7a3b      	ldrb	r3, [r7, #8]
 800066a:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 800066c:	7a7b      	ldrb	r3, [r7, #9]
 800066e:	b29b      	uxth	r3, r3
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	b299      	uxth	r1, r3
 8000674:	7a3b      	ldrb	r3, [r7, #8]
 8000676:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <bno055_init+0x17c>)
 800067a:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 800067c:	430a      	orrs	r2, r1
 800067e:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000680:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <bno055_init+0x17c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	691c      	ldr	r4, [r3, #16]
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <bno055_init+0x17c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	7a58      	ldrb	r0, [r3, #9]
 800068e:	f107 020e 	add.w	r2, r7, #14
 8000692:	2301      	movs	r3, #1
 8000694:	2107      	movs	r1, #7
 8000696:	47a0      	blx	r4
 8000698:	4603      	mov	r3, r0
 800069a:	b2da      	uxtb	r2, r3
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4413      	add	r3, r2
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <bno055_init+0x17c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	7bba      	ldrb	r2, [r7, #14]
 80006aa:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80006ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	2000008c 	.word	0x2000008c

080006bc <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80006cc:	23ff      	movs	r3, #255	; 0xff
 80006ce:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <bno055_write_register+0x48>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d102      	bne.n	80006de <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 80006d8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80006dc:	e00d      	b.n	80006fa <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <bno055_write_register+0x48>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68dc      	ldr	r4, [r3, #12]
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <bno055_write_register+0x48>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	7a58      	ldrb	r0, [r3, #9]
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	79f9      	ldrb	r1, [r7, #7]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	47a0      	blx	r4
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80006f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c

08000708 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000712:	23ff      	movs	r3, #255	; 0xff
 8000714:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000716:	2300      	movs	r3, #0
 8000718:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <bno055_write_page_id+0x8c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d102      	bne.n	8000728 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000722:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000726:	e030      	b.n	800078a <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <bno055_write_page_id+0x8c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	691c      	ldr	r4, [r3, #16]
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <bno055_write_page_id+0x8c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	7a58      	ldrb	r0, [r3, #9]
 8000734:	f107 020e 	add.w	r2, r7, #14
 8000738:	2301      	movs	r3, #1
 800073a:	2107      	movs	r1, #7
 800073c:	47a0      	blx	r4
 800073e:	4603      	mov	r3, r0
 8000740:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d11b      	bne.n	8000782 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <bno055_write_page_id+0x8c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68dc      	ldr	r4, [r3, #12]
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <bno055_write_page_id+0x8c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	7a58      	ldrb	r0, [r3, #9]
 800075a:	f107 020e 	add.w	r2, r7, #14
 800075e:	2301      	movs	r3, #1
 8000760:	2107      	movs	r1, #7
 8000762:	47a0      	blx	r4
 8000764:	4603      	mov	r3, r0
 8000766:	b2da      	uxtb	r2, r3
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	4413      	add	r3, r2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d106      	bne.n	8000786 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <bno055_write_page_id+0x8c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	79fa      	ldrb	r2, [r7, #7]
 800077e:	711a      	strb	r2, [r3, #4]
 8000780:	e001      	b.n	8000786 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000782:	23ff      	movs	r3, #255	; 0xff
 8000784:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}
 8000792:	bf00      	nop
 8000794:	2000008c 	.word	0x2000008c

08000798 <bno055_read_accel_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_accel_xyz(struct bno055_accel_t *accel)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80007a0:	23ff      	movs	r3, #255	; 0xff
 80007a2:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 80007a4:	4a31      	ldr	r2, [pc, #196]	; (800086c <bno055_read_accel_xyz+0xd4>)
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ae:	6018      	str	r0, [r3, #0]
 80007b0:	3304      	adds	r3, #4
 80007b2:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 80007b4:	23ff      	movs	r3, #255	; 0xff
 80007b6:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <bno055_read_accel_xyz+0xd8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <bno055_read_accel_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 80007c0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80007c4:	e04e      	b.n	8000864 <bno055_read_accel_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <bno055_read_accel_xyz+0xd8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <bno055_read_accel_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ff99 	bl	8000708 <bno055_write_page_id>
 80007d6:	4603      	mov	r3, r0
 80007d8:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80007da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d004      	beq.n	80007ec <bno055_read_accel_xyz+0x54>
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <bno055_read_accel_xyz+0xd8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d137      	bne.n	800085c <bno055_read_accel_xyz+0xc4>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <bno055_read_accel_xyz+0xd8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	691c      	ldr	r4, [r3, #16]
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <bno055_read_accel_xyz+0xd8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	7a58      	ldrb	r0, [r3, #9]
 80007f8:	f107 0208 	add.w	r2, r7, #8
 80007fc:	2306      	movs	r3, #6
 80007fe:	2108      	movs	r1, #8
 8000800:	47a0      	blx	r4
 8000802:	4603      	mov	r3, r0
 8000804:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_ACCEL_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000806:	7a3b      	ldrb	r3, [r7, #8]
 8000808:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 800080a:	7a7b      	ldrb	r3, [r7, #9]
 800080c:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_ACCEL_DATA_X_MSB_VALUEX);
            accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800080e:	7a7b      	ldrb	r3, [r7, #9]
 8000810:	b25b      	sxtb	r3, r3
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000816:	7a3b      	ldrb	r3, [r7, #8]
 8000818:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
            accel->x =
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000822:	7abb      	ldrb	r3, [r7, #10]
 8000824:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000826:	7afb      	ldrb	r3, [r7, #11]
 8000828:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_ACCEL_DATA_Y_MSB_VALUEY);
            accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800082a:	7afb      	ldrb	r3, [r7, #11]
 800082c:	b25b      	sxtb	r3, r3
 800082e:	021b      	lsls	r3, r3, #8
 8000830:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000832:	7abb      	ldrb	r3, [r7, #10]
 8000834:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000836:	4313      	orrs	r3, r2
 8000838:	b21a      	sxth	r2, r3
            accel->y =
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 800083e:	7b3b      	ldrb	r3, [r7, #12]
 8000840:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000842:	7b7b      	ldrb	r3, [r7, #13]
 8000844:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_ACCEL_DATA_Z_MSB_VALUEZ);
            accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000846:	7b7b      	ldrb	r3, [r7, #13]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 800084e:	7b3b      	ldrb	r3, [r7, #12]
 8000850:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000852:	4313      	orrs	r3, r2
 8000854:	b21a      	sxth	r2, r3
            accel->z =
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	809a      	strh	r2, [r3, #4]
 800085a:	e001      	b.n	8000860 <bno055_read_accel_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800085c:	23ff      	movs	r3, #255	; 0xff
 800085e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000860:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	080083f0 	.word	0x080083f0
 8000870:	2000008c 	.word	0x2000008c

08000874 <bno055_read_gyro_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gyro_xyz(struct bno055_gyro_t *gyro)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800087c:	23ff      	movs	r3, #255	; 0xff
 800087e:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GYRO_XYZ_DATA_SIZE] = {
 8000880:	4a31      	ldr	r2, [pc, #196]	; (8000948 <bno055_read_gyro_xyz+0xd4>)
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088a:	6018      	str	r0, [r3, #0]
 800088c:	3304      	adds	r3, #4
 800088e:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000890:	23ff      	movs	r3, #255	; 0xff
 8000892:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000894:	4b2d      	ldr	r3, [pc, #180]	; (800094c <bno055_read_gyro_xyz+0xd8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <bno055_read_gyro_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 800089c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80008a0:	e04e      	b.n	8000940 <bno055_read_gyro_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <bno055_read_gyro_xyz+0xd8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	791b      	ldrb	r3, [r3, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d004      	beq.n	80008b6 <bno055_read_gyro_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff ff2b 	bl	8000708 <bno055_write_page_id>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80008b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d004      	beq.n	80008c8 <bno055_read_gyro_xyz+0x54>
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <bno055_read_gyro_xyz+0xd8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d137      	bne.n	8000938 <bno055_read_gyro_xyz+0xc4>
        {
            /* Read the six bytes data of gyro xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <bno055_read_gyro_xyz+0xd8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	691c      	ldr	r4, [r3, #16]
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <bno055_read_gyro_xyz+0xd8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	7a58      	ldrb	r0, [r3, #9]
 80008d4:	f107 0208 	add.w	r2, r7, #8
 80008d8:	2306      	movs	r3, #6
 80008da:	2114      	movs	r1, #20
 80008dc:	47a0      	blx	r4
 80008de:	4603      	mov	r3, r0
 80008e0:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_GYRO_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_GYRO_XYZ_DATA_SIZE);

            /* Data x*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 80008e2:	7a3b      	ldrb	r3, [r7, #8]
 80008e4:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_GYRO_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 80008e6:	7a7b      	ldrb	r3, [r7, #9]
 80008e8:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_GYRO_DATA_X_MSB_VALUEX);
            gyro->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008ea:	7a7b      	ldrb	r3, [r7, #9]
 80008ec:	b25b      	sxtb	r3, r3
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 80008f2:	7a3b      	ldrb	r3, [r7, #8]
 80008f4:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b21a      	sxth	r2, r3
            gyro->x =
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	801a      	strh	r2, [r3, #0]

            /* Data y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 80008fe:	7abb      	ldrb	r3, [r7, #10]
 8000900:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_GYRO_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_GYRO_DATA_Y_MSB_VALUEY);
            gyro->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000906:	7afb      	ldrb	r3, [r7, #11]
 8000908:	b25b      	sxtb	r3, r3
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 800090e:	7abb      	ldrb	r3, [r7, #10]
 8000910:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000912:	4313      	orrs	r3, r2
 8000914:	b21a      	sxth	r2, r3
            gyro->y =
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	805a      	strh	r2, [r3, #2]

            /* Data z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 800091a:	7b3b      	ldrb	r3, [r7, #12]
 800091c:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_GYRO_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 800091e:	7b7b      	ldrb	r3, [r7, #13]
 8000920:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_GYRO_DATA_Z_MSB_VALUEZ);
            gyro->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000922:	7b7b      	ldrb	r3, [r7, #13]
 8000924:	b25b      	sxtb	r3, r3
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 800092a:	7b3b      	ldrb	r3, [r7, #12]
 800092c:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800092e:	4313      	orrs	r3, r2
 8000930:	b21a      	sxth	r2, r3
            gyro->z =
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	809a      	strh	r2, [r3, #4]
 8000936:	e001      	b.n	800093c <bno055_read_gyro_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000938:	23ff      	movs	r3, #255	; 0xff
 800093a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800093c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bd90      	pop	{r4, r7, pc}
 8000948:	080083f0 	.word	0x080083f0
 800094c:	2000008c 	.word	0x2000008c

08000950 <bno055_convert_double_accel_xyz_msq>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_accel_xyz_msq(struct bno055_accel_double_t *accel_xyz)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000958:	23ff      	movs	r3, #255	; 0xff
 800095a:	75fb      	strb	r3, [r7, #23]
    struct bno055_accel_t reg_accel_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 800095c:	2300      	movs	r3, #0
 800095e:	823b      	strh	r3, [r7, #16]
 8000960:	2300      	movs	r3, #0
 8000962:	827b      	strh	r3, [r7, #18]
 8000964:	2300      	movs	r3, #0
 8000966:	82bb      	strh	r3, [r7, #20]
    u8 accel_unit_u8 = BNO055_INIT_VALUE;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

    /* Read the current accel unit and set the
     * unit as m/s2 if the unit is in mg*/
    com_rslt = bno055_get_accel_unit(&accel_unit_u8);
 800096c:	f107 030f 	add.w	r3, r7, #15
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f8c5 	bl	8000b00 <bno055_get_accel_unit>
 8000976:	4603      	mov	r3, r0
 8000978:	75fb      	strb	r3, [r7, #23]
    if (accel_unit_u8 != BNO055_ACCEL_UNIT_MSQ)
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d008      	beq.n	8000992 <bno055_convert_double_accel_xyz_msq+0x42>
    {
        com_rslt += bno055_set_accel_unit(BNO055_ACCEL_UNIT_MSQ);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f8ff 	bl	8000b84 <bno055_set_accel_unit>
 8000986:	4603      	mov	r3, r0
 8000988:	b2da      	uxtb	r2, r3
 800098a:	7dfb      	ldrb	r3, [r7, #23]
 800098c:	4413      	add	r3, r2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 8000992:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d139      	bne.n	8000a0e <bno055_convert_double_accel_xyz_msq+0xbe>
    {
        /* Read the accel raw xyz data*/
        com_rslt += bno055_read_accel_xyz(&reg_accel_xyz);
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fefa 	bl	8000798 <bno055_read_accel_xyz>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	7dfb      	ldrb	r3, [r7, #23]
 80009aa:	4413      	add	r3, r2
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 80009b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d127      	bne.n	8000a08 <bno055_convert_double_accel_xyz_msq+0xb8>
        {
            /* Convert raw xyz to m/s2*/
            accel_xyz->x = (double)(reg_accel_xyz.x / BNO055_ACCEL_DIV_MSQ);
 80009b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009c4:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000a20 <bno055_convert_double_accel_xyz_msq+0xd0>
 80009c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	ed83 7b00 	vstr	d7, [r3]
            accel_xyz->y = (double)(reg_accel_xyz.y / BNO055_ACCEL_DIV_MSQ);
 80009d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009de:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000a20 <bno055_convert_double_accel_xyz_msq+0xd0>
 80009e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	ed83 7b02 	vstr	d7, [r3, #8]
            accel_xyz->z = (double)(reg_accel_xyz.z / BNO055_ACCEL_DIV_MSQ);
 80009ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009f8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000a20 <bno055_convert_double_accel_xyz_msq+0xd0>
 80009fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	ed83 7b04 	vstr	d7, [r3, #16]
 8000a06:	e004      	b.n	8000a12 <bno055_convert_double_accel_xyz_msq+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000a08:	23ff      	movs	r3, #255	; 0xff
 8000a0a:	75fb      	strb	r3, [r7, #23]
 8000a0c:	e001      	b.n	8000a12 <bno055_convert_double_accel_xyz_msq+0xc2>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8000a0e:	23ff      	movs	r3, #255	; 0xff
 8000a10:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8000a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	00000000 	.word	0x00000000
 8000a24:	40590000 	.word	0x40590000

08000a28 <bno055_convert_double_gyro_xyz_rps>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_gyro_xyz_rps(struct bno055_gyro_double_t *gyro_xyz)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a30:	23ff      	movs	r3, #255	; 0xff
 8000a32:	75fb      	strb	r3, [r7, #23]
    struct bno055_gyro_t reg_gyro_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000a34:	2300      	movs	r3, #0
 8000a36:	823b      	strh	r3, [r7, #16]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	827b      	strh	r3, [r7, #18]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	82bb      	strh	r3, [r7, #20]
    u8 gyro_unit_u8 = BNO055_INIT_VALUE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]

    /* Read the current gyro unit and set the
     * unit as rps if the unit is in dps */
    com_rslt = bno055_get_gyro_unit(&gyro_unit_u8);
 8000a44:	f107 030f 	add.w	r3, r7, #15
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f915 	bl	8000c78 <bno055_get_gyro_unit>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	75fb      	strb	r3, [r7, #23]
    if (gyro_unit_u8 != BNO055_GYRO_UNIT_RPS)
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d008      	beq.n	8000a6a <bno055_convert_double_gyro_xyz_rps+0x42>
    {
        com_rslt += bno055_set_gyro_unit(BNO055_GYRO_UNIT_RPS);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 f951 	bl	8000d00 <bno055_set_gyro_unit>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	4413      	add	r3, r2
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 8000a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d139      	bne.n	8000ae6 <bno055_convert_double_gyro_xyz_rps+0xbe>
    {
        /* Read gyro raw x data */
        com_rslt += bno055_read_gyro_xyz(&reg_gyro_xyz);
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fefc 	bl	8000874 <bno055_read_gyro_xyz>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
 8000a82:	4413      	add	r3, r2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 8000a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d127      	bne.n	8000ae0 <bno055_convert_double_gyro_xyz_rps+0xb8>
        {
            /* Convert the raw gyro xyz to rps*/
            gyro_xyz->x = (double)(reg_gyro_xyz.x / BNO055_GYRO_DIV_RPS);
 8000a90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a9c:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000af8 <bno055_convert_double_gyro_xyz_rps+0xd0>
 8000aa0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	ed83 7b00 	vstr	d7, [r3]
            gyro_xyz->y = (double)(reg_gyro_xyz.y / BNO055_GYRO_DIV_RPS);
 8000aaa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ab6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000af8 <bno055_convert_double_gyro_xyz_rps+0xd0>
 8000aba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	ed83 7b02 	vstr	d7, [r3, #8]
            gyro_xyz->z = (double)(reg_gyro_xyz.z / BNO055_GYRO_DIV_RPS);
 8000ac4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ac8:	ee07 3a90 	vmov	s15, r3
 8000acc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ad0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000af8 <bno055_convert_double_gyro_xyz_rps+0xd0>
 8000ad4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	ed83 7b04 	vstr	d7, [r3, #16]
 8000ade:	e004      	b.n	8000aea <bno055_convert_double_gyro_xyz_rps+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000ae0:	23ff      	movs	r3, #255	; 0xff
 8000ae2:	75fb      	strb	r3, [r7, #23]
 8000ae4:	e001      	b.n	8000aea <bno055_convert_double_gyro_xyz_rps+0xc2>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8000ae6:	23ff      	movs	r3, #255	; 0xff
 8000ae8:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8000aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	00000000 	.word	0x00000000
 8000afc:	408c2000 	.word	0x408c2000

08000b00 <bno055_get_accel_unit>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_accel_unit(u8 *accel_unit_u8)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b08:	23ff      	movs	r3, #255	; 0xff
 8000b0a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000b10:	23ff      	movs	r3, #255	; 0xff
 8000b12:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <bno055_get_accel_unit+0x80>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <bno055_get_accel_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000b1c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000b20:	e02a      	b.n	8000b78 <bno055_get_accel_unit+0x78>
    }
    else
    {
        /*condition check for page, accel unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <bno055_get_accel_unit+0x80>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <bno055_get_accel_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fdeb 	bl	8000708 <bno055_write_page_id>
 8000b32:	4603      	mov	r3, r0
 8000b34:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d004      	beq.n	8000b48 <bno055_get_accel_unit+0x48>
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <bno055_get_accel_unit+0x80>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	791b      	ldrb	r3, [r3, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d113      	bne.n	8000b70 <bno055_get_accel_unit+0x70>
        {
            /* Read the accel unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <bno055_get_accel_unit+0x80>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	691c      	ldr	r4, [r3, #16]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <bno055_get_accel_unit+0x80>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	7a58      	ldrb	r0, [r3, #9]
 8000b54:	f107 020d 	add.w	r2, r7, #13
 8000b58:	2301      	movs	r3, #1
 8000b5a:	213b      	movs	r1, #59	; 0x3b
 8000b5c:	47a0      	blx	r4
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *accel_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT);
 8000b62:	7b7b      	ldrb	r3, [r7, #13]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e001      	b.n	8000b74 <bno055_get_accel_unit+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b70:	23ff      	movs	r3, #255	; 0xff
 8000b72:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	2000008c 	.word	0x2000008c

08000b84 <bno055_set_accel_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_unit(u8 accel_unit_u8)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b8e:	23ff      	movs	r3, #255	; 0xff
 8000b90:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000b96:	2300      	movs	r3, #0
 8000b98:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000b9a:	23ff      	movs	r3, #255	; 0xff
 8000b9c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b9e:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <bno055_set_accel_unit+0xf0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <bno055_set_accel_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000ba6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000baa:	e05f      	b.n	8000c6c <bno055_set_accel_unit+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f921 	bl	8000df8 <bno055_get_operation_mode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d143      	bne.n	8000c4a <bno055_set_accel_unit+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000bc2:	7b3b      	ldrb	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d008      	beq.n	8000bda <bno055_set_accel_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 f957 	bl	8000e7c <bno055_set_operation_mode>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d130      	bne.n	8000c44 <bno055_set_accel_unit+0xc0>
            {
                /* Write the accel unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <bno055_set_accel_unit+0xf0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	691c      	ldr	r4, [r3, #16]
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <bno055_set_accel_unit+0xf0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	7a58      	ldrb	r0, [r3, #9]
 8000bee:	f107 020d 	add.w	r2, r7, #13
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	213b      	movs	r1, #59	; 0x3b
 8000bf6:	47a0      	blx	r4
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_ACCEL_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d124      	bne.n	8000c4e <bno055_set_accel_unit+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT, accel_unit_u8);
 8000c04:	7b7b      	ldrb	r3, [r7, #13]
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	f023 0301 	bic.w	r3, r3, #1
 8000c0c:	b25a      	sxtb	r2, r3
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <bno055_set_accel_unit+0xf0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68dc      	ldr	r4, [r3, #12]
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <bno055_set_accel_unit+0xf0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	7a58      	ldrb	r0, [r3, #9]
 8000c2c:	f107 020d 	add.w	r2, r7, #13
 8000c30:	2301      	movs	r3, #1
 8000c32:	213b      	movs	r1, #59	; 0x3b
 8000c34:	47a0      	blx	r4
 8000c36:	4603      	mov	r3, r0
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	e004      	b.n	8000c4e <bno055_set_accel_unit+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000c44:	23ff      	movs	r3, #255	; 0xff
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e001      	b.n	8000c4e <bno055_set_accel_unit+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000c4a:	23ff      	movs	r3, #255	; 0xff
 8000c4c:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000c4e:	7b3b      	ldrb	r3, [r7, #12]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d009      	beq.n	8000c68 <bno055_set_accel_unit+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000c54:	7b3b      	ldrb	r3, [r7, #12]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f910 	bl	8000e7c <bno055_set_operation_mode>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	4413      	add	r3, r2
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	2000008c 	.word	0x2000008c

08000c78 <bno055_get_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_gyro_unit(u8 *gyro_unit_u8)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c80:	23ff      	movs	r3, #255	; 0xff
 8000c82:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000c88:	23ff      	movs	r3, #255	; 0xff
 8000c8a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <bno055_get_gyro_unit+0x84>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <bno055_get_gyro_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000c94:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000c98:	e02c      	b.n	8000cf4 <bno055_get_gyro_unit+0x7c>
    }
    else
    {
        /*condition check for page, gyro unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <bno055_get_gyro_unit+0x84>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <bno055_get_gyro_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fd2f 	bl	8000708 <bno055_write_page_id>
 8000caa:	4603      	mov	r3, r0
 8000cac:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d004      	beq.n	8000cc0 <bno055_get_gyro_unit+0x48>
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <bno055_get_gyro_unit+0x84>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	791b      	ldrb	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d115      	bne.n	8000cec <bno055_get_gyro_unit+0x74>
        {
            /* Read the gyro unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <bno055_get_gyro_unit+0x84>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	691c      	ldr	r4, [r3, #16]
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <bno055_get_gyro_unit+0x84>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	7a58      	ldrb	r0, [r3, #9]
 8000ccc:	f107 020d 	add.w	r2, r7, #13
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	213b      	movs	r1, #59	; 0x3b
 8000cd4:	47a0      	blx	r4
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_GYRO_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *gyro_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_GYRO_UNIT);
 8000cda:	7b7b      	ldrb	r3, [r7, #13]
 8000cdc:	105b      	asrs	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e001      	b.n	8000cf0 <bno055_get_gyro_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000cec:	23ff      	movs	r3, #255	; 0xff
 8000cee:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	2000008c 	.word	0x2000008c

08000d00 <bno055_set_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_gyro_unit(u8 gyro_unit_u8)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d0a:	23ff      	movs	r3, #255	; 0xff
 8000d0c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000d12:	2300      	movs	r3, #0
 8000d14:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000d16:	23ff      	movs	r3, #255	; 0xff
 8000d18:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <bno055_set_gyro_unit+0xf4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <bno055_set_gyro_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000d22:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000d26:	e060      	b.n	8000dea <bno055_set_gyro_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f863 	bl	8000df8 <bno055_get_operation_mode>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000d36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d144      	bne.n	8000dc8 <bno055_set_gyro_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000d3e:	7b3b      	ldrb	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d008      	beq.n	8000d56 <bno055_set_gyro_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 f899 	bl	8000e7c <bno055_set_operation_mode>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
 8000d50:	4413      	add	r3, r2
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000d56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d131      	bne.n	8000dc2 <bno055_set_gyro_unit+0xc2>
            {
                /* Write the gyro unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d5e:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <bno055_set_gyro_unit+0xf4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	691c      	ldr	r4, [r3, #16]
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <bno055_set_gyro_unit+0xf4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	7a58      	ldrb	r0, [r3, #9]
 8000d6a:	f107 020d 	add.w	r2, r7, #13
 8000d6e:	2301      	movs	r3, #1
 8000d70:	213b      	movs	r1, #59	; 0x3b
 8000d72:	47a0      	blx	r4
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_GYRO_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d125      	bne.n	8000dcc <bno055_set_gyro_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_GYRO_UNIT, gyro_unit_u8);
 8000d80:	7b7b      	ldrb	r3, [r7, #13]
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	f023 0302 	bic.w	r3, r3, #2
 8000d88:	b25a      	sxtb	r2, r3
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <bno055_set_gyro_unit+0xf4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68dc      	ldr	r4, [r3, #12]
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <bno055_set_gyro_unit+0xf4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	7a58      	ldrb	r0, [r3, #9]
 8000daa:	f107 020d 	add.w	r2, r7, #13
 8000dae:	2301      	movs	r3, #1
 8000db0:	213b      	movs	r1, #59	; 0x3b
 8000db2:	47a0      	blx	r4
 8000db4:	4603      	mov	r3, r0
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	4413      	add	r3, r2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e004      	b.n	8000dcc <bno055_set_gyro_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000dc2:	23ff      	movs	r3, #255	; 0xff
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	e001      	b.n	8000dcc <bno055_set_gyro_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000dc8:	23ff      	movs	r3, #255	; 0xff
 8000dca:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000dcc:	7b3b      	ldrb	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d009      	beq.n	8000de6 <bno055_set_gyro_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000dd2:	7b3b      	ldrb	r3, [r7, #12]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f851 	bl	8000e7c <bno055_set_operation_mode>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	4413      	add	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000008c 	.word	0x2000008c

08000df8 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e00:	23ff      	movs	r3, #255	; 0xff
 8000e02:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000e08:	23ff      	movs	r3, #255	; 0xff
 8000e0a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <bno055_get_operation_mode+0x80>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000e14:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000e18:	e02a      	b.n	8000e70 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <bno055_get_operation_mode+0x80>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	791b      	ldrb	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d004      	beq.n	8000e2e <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fc6f 	bl	8000708 <bno055_write_page_id>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000e2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d004      	beq.n	8000e40 <bno055_get_operation_mode+0x48>
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <bno055_get_operation_mode+0x80>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d113      	bne.n	8000e68 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <bno055_get_operation_mode+0x80>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	691c      	ldr	r4, [r3, #16]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <bno055_get_operation_mode+0x80>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	7a58      	ldrb	r0, [r3, #9]
 8000e4c:	f107 020d 	add.w	r2, r7, #13
 8000e50:	2301      	movs	r3, #1
 8000e52:	213d      	movs	r1, #61	; 0x3d
 8000e54:	47a0      	blx	r4
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000e5a:	7b7b      	ldrb	r3, [r7, #13]
 8000e5c:	f003 030f 	and.w	r3, r3, #15
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e001      	b.n	8000e6c <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	2000008c 	.word	0x2000008c

08000e7c <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e86:	23ff      	movs	r3, #255	; 0xff
 8000e88:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000e92:	23ff      	movs	r3, #255	; 0xff
 8000e94:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d102      	bne.n	8000ea4 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000e9e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000ea2:	e0ac      	b.n	8000ffe <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffa5 	bl	8000df8 <bno055_get_operation_mode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 809d 	bne.w	8000ff6 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000ebc:	7b3b      	ldrb	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d137      	bne.n	8000f32 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ec2:	4b51      	ldr	r3, [pc, #324]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	691c      	ldr	r4, [r3, #16]
 8000ec8:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	7a58      	ldrb	r0, [r3, #9]
 8000ece:	f107 020d 	add.w	r2, r7, #13
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	213d      	movs	r1, #61	; 0x3d
 8000ed6:	47a0      	blx	r4
 8000ed8:	4603      	mov	r3, r0
 8000eda:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f040 808a 	bne.w	8000ffa <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000ee6:	7b7b      	ldrb	r3, [r7, #13]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	f023 030f 	bic.w	r3, r3, #15
 8000eee:	b25a      	sxtb	r2, r3
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68dc      	ldr	r4, [r3, #12]
 8000f08:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	7a58      	ldrb	r0, [r3, #9]
 8000f0e:	f107 020d 	add.w	r2, r7, #13
 8000f12:	2301      	movs	r3, #1
 8000f14:	213d      	movs	r1, #61	; 0x3d
 8000f16:	47a0      	blx	r4
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000f24:	4b38      	ldr	r3, [pc, #224]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000f2e:	4798      	blx	r3
 8000f30:	e063      	b.n	8000ffa <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f32:	4b35      	ldr	r3, [pc, #212]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	691c      	ldr	r4, [r3, #16]
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	7a58      	ldrb	r0, [r3, #9]
 8000f3e:	f107 020d 	add.w	r2, r7, #13
 8000f42:	2301      	movs	r3, #1
 8000f44:	213d      	movs	r1, #61	; 0x3d
 8000f46:	47a0      	blx	r4
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d116      	bne.n	8000f82 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000f54:	7b7b      	ldrb	r3, [r7, #13]
 8000f56:	f023 030f 	bic.w	r3, r3, #15
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000f5e:	f107 030d 	add.w	r3, r7, #13
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	203d      	movs	r0, #61	; 0x3d
 8000f68:	f7ff fba8 	bl	80006bc <bno055_write_register>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	4413      	add	r3, r2
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	2014      	movs	r0, #20
 8000f80:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d038      	beq.n	8000ffa <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	691c      	ldr	r4, [r3, #16]
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	7a58      	ldrb	r0, [r3, #9]
 8000f94:	f107 020d 	add.w	r2, r7, #13
 8000f98:	2301      	movs	r3, #1
 8000f9a:	213d      	movs	r1, #61	; 0x3d
 8000f9c:	47a0      	blx	r4
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d127      	bne.n	8000ffa <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	f023 030f 	bic.w	r3, r3, #15
 8000fb2:	b25a      	sxtb	r2, r3
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68dc      	ldr	r4, [r3, #12]
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	7a58      	ldrb	r0, [r3, #9]
 8000fd2:	f107 020d 	add.w	r2, r7, #13
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	213d      	movs	r1, #61	; 0x3d
 8000fda:	47a0      	blx	r4
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <bno055_set_operation_mode+0x18c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000ff2:	4798      	blx	r3
 8000ff4:	e001      	b.n	8000ffa <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000ff6:	23ff      	movs	r3, #255	; 0xff
 8000ff8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	bf00      	nop
 8001008:	2000008c 	.word	0x2000008c

0800100c <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800101a:	2300      	movs	r3, #0
 800101c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800101e:	2300      	movs	r3, #0
 8001020:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001022:	23ff      	movs	r3, #255	; 0xff
 8001024:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <bno055_set_power_mode+0xf0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 800102e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001032:	e05f      	b.n	80010f4 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fedd 	bl	8000df8 <bno055_get_operation_mode>
 800103e:	4603      	mov	r3, r0
 8001040:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d143      	bne.n	80010d2 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff ff13 	bl	8000e7c <bno055_set_operation_mode>
 8001056:	4603      	mov	r3, r0
 8001058:	b2da      	uxtb	r2, r3
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	4413      	add	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d130      	bne.n	80010cc <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <bno055_set_power_mode+0xf0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	691c      	ldr	r4, [r3, #16]
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <bno055_set_power_mode+0xf0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	7a58      	ldrb	r0, [r3, #9]
 8001076:	f107 020d 	add.w	r2, r7, #13
 800107a:	2301      	movs	r3, #1
 800107c:	213e      	movs	r1, #62	; 0x3e
 800107e:	47a0      	blx	r4
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d124      	bne.n	80010d6 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	b25b      	sxtb	r3, r3
 8001090:	f023 0303 	bic.w	r3, r3, #3
 8001094:	b25a      	sxtb	r2, r3
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <bno055_set_power_mode+0xf0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68dc      	ldr	r4, [r3, #12]
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <bno055_set_power_mode+0xf0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	7a58      	ldrb	r0, [r3, #9]
 80010b4:	f107 020d 	add.w	r2, r7, #13
 80010b8:	2301      	movs	r3, #1
 80010ba:	213e      	movs	r1, #62	; 0x3e
 80010bc:	47a0      	blx	r4
 80010be:	4603      	mov	r3, r0
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4413      	add	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e004      	b.n	80010d6 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 80010cc:	23ff      	movs	r3, #255	; 0xff
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e001      	b.n	80010d6 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fecc 	bl	8000e7c <bno055_set_operation_mode>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	4413      	add	r3, r2
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd90      	pop	{r4, r7, pc}
 80010fc:	2000008c 	.word	0x2000008c

08001100 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 800111c:	2301      	movs	r3, #1
 800111e:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8001120:	e025      	b.n	800116e <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <cobsEncode+0x3e>
            FinishBlock(code);
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	7efa      	ldrb	r2, [r7, #27]
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	2301      	movs	r3, #1
 800113a:	76fb      	strb	r3, [r7, #27]
 800113c:	e014      	b.n	8001168 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	7812      	ldrb	r2, [r2, #0]
 8001148:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 800114a:	7efb      	ldrb	r3, [r7, #27]
 800114c:	3301      	adds	r3, #1
 800114e:	76fb      	strb	r3, [r7, #27]
 8001150:	7efb      	ldrb	r3, [r7, #27]
 8001152:	2bff      	cmp	r3, #255	; 0xff
 8001154:	d108      	bne.n	8001168 <cobsEncode+0x68>
                FinishBlock(code);
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	7efa      	ldrb	r2, [r7, #27]
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	2301      	movs	r3, #1
 8001166:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	429a      	cmp	r2, r3
 8001174:	d3d5      	bcc.n	8001122 <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	7efa      	ldrb	r2, [r7, #27]
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	2301      	movs	r3, #1
 8001186:	76fb      	strb	r3, [r7, #27]
}
 8001188:	bf00      	nop
 800118a:	3724      	adds	r7, #36	; 0x24
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01c      	beq.n	80011e2 <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3321      	adds	r3, #33	; 0x21
 80011ac:	461a      	mov	r2, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	68b8      	ldr	r0, [r7, #8]
 80011b2:	f7ff ffa5 	bl	8001100 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3301      	adds	r3, #1
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	3302      	adds	r3, #2
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	2303      	movs	r3, #3
 80011da:	f006 fa09 	bl	80075f0 <HAL_UART_Transmit>
 80011de:	4603      	mov	r3, r0
 80011e0:	e000      	b.n	80011e4 <ertc_dlog_send+0x50>
	}

	return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1c59      	adds	r1, r3, #1
 80011fe:	2303      	movs	r3, #3
 8001200:	2201      	movs	r2, #1
 8001202:	f006 fa78 	bl	80076f6 <HAL_UART_Receive>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d112      	bne.n	8001232 <ertc_dlog_update+0x46>
		switch (logger->rxbuff[0]) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	2b41      	cmp	r3, #65	; 0x41
 8001212:	d002      	beq.n	800121a <ertc_dlog_update+0x2e>
 8001214:	2b42      	cmp	r3, #66	; 0x42
 8001216:	d004      	beq.n	8001222 <ertc_dlog_update+0x36>
 8001218:	e007      	b.n	800122a <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
				break;
 8001220:	e008      	b.n	8001234 <ertc_dlog_update+0x48>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
				break;
 8001228:	e004      	b.n	8001234 <ertc_dlog_update+0x48>
			default:
				logger->tx_enable = false;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	e000      	b.n	8001234 <ertc_dlog_update+0x48>
		}
	}
 8001232:	bf00      	nop
	return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <bus_read_wrapper>:
/* structure used to read the gyro xyz data output as dps or rps */
struct bno055_gyro_double_t d_gyro_xyz;


int8_t bus_read_wrapper(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t r_len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af04      	add	r7, sp, #16
 8001246:	603a      	str	r2, [r7, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	460b      	mov	r3, r1
 8001250:	71bb      	strb	r3, [r7, #6]
 8001252:	4613      	mov	r3, r2
 8001254:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Read(&hi2c1, dev_addr << 1, reg_addr, 1, reg_data, r_len, I2C_TIMEOUT);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	b29b      	uxth	r3, r3
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	b299      	uxth	r1, r3
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	b29a      	uxth	r2, r3
 8001262:	797b      	ldrb	r3, [r7, #5]
 8001264:	b29b      	uxth	r3, r3
 8001266:	20c8      	movs	r0, #200	; 0xc8
 8001268:	9002      	str	r0, [sp, #8]
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2301      	movs	r3, #1
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <bus_read_wrapper+0x48>)
 8001274:	f002 fffc 	bl	8004270 <HAL_I2C_Mem_Read>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
  return (int8_t)status;
 800127c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200000d8 	.word	0x200000d8

0800128c <bus_write_wrapper>:

int8_t bus_write_wrapper(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t wr_len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	603a      	str	r2, [r7, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	460b      	mov	r3, r1
 800129c:	71bb      	strb	r3, [r7, #6]
 800129e:	4613      	mov	r3, r2
 80012a0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Write(&hi2c1, dev_addr << 1, reg_addr, 1, reg_data, wr_len, I2C_TIMEOUT);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	b299      	uxth	r1, r3
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	20c8      	movs	r0, #200	; 0xc8
 80012b4:	9002      	str	r0, [sp, #8]
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <bus_write_wrapper+0x48>)
 80012c0:	f002 fec2 	bl	8004048 <HAL_I2C_Mem_Write>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]
  return (int8_t)status;
 80012c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200000d8 	.word	0x200000d8

080012d8 <delay_wrapper>:

void delay_wrapper(u32 delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f002 f86d 	bl	80033c0 <HAL_Delay>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <saturate>:

uint32_t saturate(uint32_t val, uint32_t min, uint32_t max){
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
	if(val<min)
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d201      	bcs.n	8001306 <saturate+0x18>
		return min;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	e006      	b.n	8001314 <saturate+0x26>
	else if(val>max)
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d901      	bls.n	8001312 <saturate+0x24>
		return max;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	e000      	b.n	8001314 <saturate+0x26>
	else
		return val;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001326:	f001 ffee 	bl	8003306 <HAL_Init>
  /* USER CODE BEGIN Init */
  // initialise_monitor_handles();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132a:	f000 f939 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132e:	f001 f82d 	bl	800238c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001332:	f000 fffb 	bl	800232c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001336:	f000 f9a5 	bl	8001684 <MX_ADC1_Init>
  MX_I2C1_Init();
 800133a:	f000 f9f5 	bl	8001728 <MX_I2C1_Init>
  MX_I2C2_Init();
 800133e:	f000 fa33 	bl	80017a8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001342:	f000 fa71 	bl	8001828 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001346:	f000 fae5 	bl	8001914 <MX_TIM1_Init>
  MX_TIM2_Init();
 800134a:	f000 fbb5 	bl	8001ab8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800134e:	f000 fc4d 	bl	8001bec <MX_TIM3_Init>
  MX_TIM4_Init();
 8001352:	f000 fca1 	bl	8001c98 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001356:	f000 fcf5 	bl	8001d44 <MX_TIM5_Init>
  MX_TIM8_Init();
 800135a:	f000 fd6b 	bl	8001e34 <MX_TIM8_Init>
  MX_UART4_Init();
 800135e:	f000 ff25 	bl	80021ac <MX_UART4_Init>
  MX_UART5_Init();
 8001362:	f000 ff53 	bl	800220c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001366:	f000 ff81 	bl	800226c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800136a:	f000 ffaf 	bl	80022cc <MX_USART2_UART_Init>
  MX_TIM9_Init();
 800136e:	f000 fe31 	bl	8001fd4 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001372:	f000 fa97 	bl	80018a4 <MX_SPI2_Init>
  MX_TIM11_Init();
 8001376:	f000 fe7d 	bl	8002074 <MX_TIM11_Init>
  MX_TIM13_Init();
 800137a:	f000 fec9 	bl	8002110 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  /* Configure data logger  */
  logger.uart_handle = huart3; // for serial
 800137e:	4b78      	ldr	r3, [pc, #480]	; (8001560 <main+0x240>)
 8001380:	4a78      	ldr	r2, [pc, #480]	; (8001564 <main+0x244>)
 8001382:	3344      	adds	r3, #68	; 0x44
 8001384:	4611      	mov	r1, r2
 8001386:	2288      	movs	r2, #136	; 0x88
 8001388:	4618      	mov	r0, r3
 800138a:	f006 febd 	bl	8008108 <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2110      	movs	r1, #16
 8001392:	4875      	ldr	r0, [pc, #468]	; (8001568 <main+0x248>)
 8001394:	f002 fd8a 	bl	8003eac <HAL_GPIO_WritePin>

  bno055.bus_write = bus_write_wrapper;
 8001398:	4b74      	ldr	r3, [pc, #464]	; (800156c <main+0x24c>)
 800139a:	4a75      	ldr	r2, [pc, #468]	; (8001570 <main+0x250>)
 800139c:	60da      	str	r2, [r3, #12]
  bno055.bus_read = bus_read_wrapper;
 800139e:	4b73      	ldr	r3, [pc, #460]	; (800156c <main+0x24c>)
 80013a0:	4a74      	ldr	r2, [pc, #464]	; (8001574 <main+0x254>)
 80013a2:	611a      	str	r2, [r3, #16]
  bno055.delay_msec = delay_wrapper;
 80013a4:	4b71      	ldr	r3, [pc, #452]	; (800156c <main+0x24c>)
 80013a6:	4a74      	ldr	r2, [pc, #464]	; (8001578 <main+0x258>)
 80013a8:	615a      	str	r2, [r3, #20]
  bno055.dev_addr = 0x28;
 80013aa:	4b70      	ldr	r3, [pc, #448]	; (800156c <main+0x24c>)
 80013ac:	2228      	movs	r2, #40	; 0x28
 80013ae:	725a      	strb	r2, [r3, #9]
  int32_t comres = bno055_init(&bno055);
 80013b0:	486e      	ldr	r0, [pc, #440]	; (800156c <main+0x24c>)
 80013b2:	f7ff f8c3 	bl	800053c <bno055_init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	60fb      	str	r3, [r7, #12]

  comres += bno055_set_power_mode(BNO055_POWER_MODE_NORMAL);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fe26 	bl	800100c <bno055_set_power_mode>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_AMG);
 80013ca:	2007      	movs	r0, #7
 80013cc:	f7ff fd56 	bl	8000e7c <bno055_set_operation_mode>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013da:	2104      	movs	r1, #4
 80013dc:	4867      	ldr	r0, [pc, #412]	; (800157c <main+0x25c>)
 80013de:	f004 fe49 	bl	8006074 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013e2:	2108      	movs	r1, #8
 80013e4:	4865      	ldr	r0, [pc, #404]	; (800157c <main+0x25c>)
 80013e6:	f004 fe45 	bl	8006074 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(20);
 80013ea:	2014      	movs	r0, #20
 80013ec:	f001 ffe8 	bl	80033c0 <HAL_Delay>
	  bno055_convert_double_accel_xyz_msq(&d_accel_xyz);
 80013f0:	4863      	ldr	r0, [pc, #396]	; (8001580 <main+0x260>)
 80013f2:	f7ff faad 	bl	8000950 <bno055_convert_double_accel_xyz_msq>
	  bno055_convert_double_gyro_xyz_rps(&d_gyro_xyz);
 80013f6:	4863      	ldr	r0, [pc, #396]	; (8001584 <main+0x264>)
 80013f8:	f7ff fb16 	bl	8000a28 <bno055_convert_double_gyro_xyz_rps>
	  angle = (asin(d_accel_xyz.y/ 9.81)) * 180 / 3.14;
 80013fc:	4b60      	ldr	r3, [pc, #384]	; (8001580 <main+0x260>)
 80013fe:	ed93 7b02 	vldr	d7, [r3, #8]
 8001402:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8001538 <main+0x218>
 8001406:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800140a:	eeb0 0b46 	vmov.f64	d0, d6
 800140e:	f006 fe91 	bl	8008134 <asin>
 8001412:	eeb0 7b40 	vmov.f64	d7, d0
 8001416:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001540 <main+0x220>
 800141a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800141e:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8001548 <main+0x228>
 8001422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001426:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800142a:	4b57      	ldr	r3, [pc, #348]	; (8001588 <main+0x268>)
 800142c:	edc3 7a00 	vstr	s15, [r3]
	  tilt = -angle;
 8001430:	4b55      	ldr	r3, [pc, #340]	; (8001588 <main+0x268>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef1 7a67 	vneg.f32	s15, s15
 800143a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001442:	793b      	ldrb	r3, [r7, #4]
 8001444:	b25a      	sxtb	r2, r3
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <main+0x26c>)
 8001448:	701a      	strb	r2, [r3, #0]
	  angle = d_gyro_xyz.z * 180 / 3.14;
 800144a:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <main+0x264>)
 800144c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001450:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001540 <main+0x220>
 8001454:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001458:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001548 <main+0x228>
 800145c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001460:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001464:	4b48      	ldr	r3, [pc, #288]	; (8001588 <main+0x268>)
 8001466:	edc3 7a00 	vstr	s15, [r3]
	  pan = -angle/8;
 800146a:	4b47      	ldr	r3, [pc, #284]	; (8001588 <main+0x268>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	eeb1 7a67 	vneg.f32	s14, s15
 8001474:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001480:	edc7 7a01 	vstr	s15, [r7, #4]
 8001484:	793b      	ldrb	r3, [r7, #4]
 8001486:	b25a      	sxtb	r2, r3
 8001488:	4b41      	ldr	r3, [pc, #260]	; (8001590 <main+0x270>)
 800148a:	701a      	strb	r2, [r3, #0]
	  logger_data.w1 = d_accel_xyz.x;
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <main+0x260>)
 800148e:	ed93 7b00 	vldr	d7, [r3]
 8001492:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <main+0x274>)
 8001498:	edc3 7a00 	vstr	s15, [r3]
	  logger_data.u2 = d_gyro_xyz.x;
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <main+0x264>)
 800149e:	ed93 7b00 	vldr	d7, [r3]
 80014a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014a6:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <main+0x274>)
 80014a8:	edc3 7a03 	vstr	s15, [r3, #12]
	  logger_data.u1 = -3.14;
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <main+0x274>)
 80014ae:	4a3a      	ldr	r2, [pc, #232]	; (8001598 <main+0x278>)
 80014b0:	609a      	str	r2, [r3, #8]
	  logger_data.w2 = 0.555683;
 80014b2:	4b38      	ldr	r3, [pc, #224]	; (8001594 <main+0x274>)
 80014b4:	4a39      	ldr	r2, [pc, #228]	; (800159c <main+0x27c>)
 80014b6:	605a      	str	r2, [r3, #4]
	  ertc_dlog_send(&logger, &logger_data, sizeof(logger_data));
 80014b8:	2210      	movs	r2, #16
 80014ba:	4936      	ldr	r1, [pc, #216]	; (8001594 <main+0x274>)
 80014bc:	4828      	ldr	r0, [pc, #160]	; (8001560 <main+0x240>)
 80014be:	f7ff fe69 	bl	8001194 <ertc_dlog_send>
	  ertc_dlog_update(&logger);
 80014c2:	4827      	ldr	r0, [pc, #156]	; (8001560 <main+0x240>)
 80014c4:	f7ff fe92 	bl	80011ec <ertc_dlog_update>

	  /* update pan-tilt camera */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <main+0x270>)
 80014ca:	f993 3000 	ldrsb.w	r3, [r3]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014d6:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001550 <main+0x230>
 80014da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014de:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001558 <main+0x238>
 80014e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <main+0x25c>)
 80014ec:	681c      	ldr	r4, [r3, #0]
 80014ee:	22c8      	movs	r2, #200	; 0xc8
 80014f0:	2164      	movs	r1, #100	; 0x64
 80014f2:	ee17 0a90 	vmov	r0, s15
 80014f6:	f7ff fefa 	bl	80012ee <saturate>
 80014fa:	4603      	mov	r3, r0
 80014fc:	63e3      	str	r3, [r4, #60]	; 0x3c
					(uint32_t)saturate((150+pan*(50.0/45.0)), SERVO_MIN_VALUE, SERVO_MAX_VALUE)); // tilt
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <main+0x26c>)
 8001500:	f993 3000 	ldrsb.w	r3, [r3]
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800150c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001550 <main+0x230>
 8001510:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001514:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001558 <main+0x238>
 8001518:	ee37 7b06 	vadd.f64	d7, d7, d6
 800151c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <main+0x25c>)
 8001522:	681c      	ldr	r4, [r3, #0]
 8001524:	22c8      	movs	r2, #200	; 0xc8
 8001526:	2164      	movs	r1, #100	; 0x64
 8001528:	ee17 0a90 	vmov	r0, s15
 800152c:	f7ff fedf 	bl	80012ee <saturate>
 8001530:	4603      	mov	r3, r0
 8001532:	63a3      	str	r3, [r4, #56]	; 0x38
	  HAL_Delay(20);
 8001534:	e759      	b.n	80013ea <main+0xca>
 8001536:	bf00      	nop
 8001538:	51eb851f 	.word	0x51eb851f
 800153c:	40239eb8 	.word	0x40239eb8
 8001540:	00000000 	.word	0x00000000
 8001544:	40668000 	.word	0x40668000
 8001548:	51eb851f 	.word	0x51eb851f
 800154c:	40091eb8 	.word	0x40091eb8
 8001550:	71c71c72 	.word	0x71c71c72
 8001554:	3ff1c71c 	.word	0x3ff1c71c
 8001558:	00000000 	.word	0x00000000
 800155c:	4062c000 	.word	0x4062c000
 8001560:	200007e8 	.word	0x200007e8
 8001564:	20000714 	.word	0x20000714
 8001568:	40021000 	.word	0x40021000
 800156c:	2000079c 	.word	0x2000079c
 8001570:	0800128d 	.word	0x0800128d
 8001574:	08001241 	.word	0x08001241
 8001578:	080012d9 	.word	0x080012d9
 800157c:	20000248 	.word	0x20000248
 8001580:	200007b8 	.word	0x200007b8
 8001584:	200007d0 	.word	0x200007d0
 8001588:	200008c8 	.word	0x200008c8
 800158c:	200008c5 	.word	0x200008c5
 8001590:	200008c4 	.word	0x200008c4
 8001594:	200008b4 	.word	0x200008b4
 8001598:	c048f5c3 	.word	0xc048f5c3
 800159c:	3f0e413e 	.word	0x3f0e413e

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	; 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	2234      	movs	r2, #52	; 0x34
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f006 fdb8 	bl	8008124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015c4:	f003 faa0 	bl	8004b08 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	4b2c      	ldr	r3, [pc, #176]	; (800167c <SystemClock_Config+0xdc>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a2b      	ldr	r2, [pc, #172]	; (800167c <SystemClock_Config+0xdc>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b29      	ldr	r3, [pc, #164]	; (800167c <SystemClock_Config+0xdc>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <SystemClock_Config+0xe0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015e8:	4a25      	ldr	r2, [pc, #148]	; (8001680 <SystemClock_Config+0xe0>)
 80015ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <SystemClock_Config+0xe0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001600:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001604:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001606:	2302      	movs	r3, #2
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001610:	2304      	movs	r3, #4
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001614:	2360      	movs	r3, #96	; 0x60
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001618:	2302      	movs	r3, #2
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4618      	mov	r0, r3
 800162a:	f003 facd 	bl	8004bc8 <HAL_RCC_OscConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001634:	f000 fff2 	bl	800261c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001638:	f003 fa76 	bl	8004b28 <HAL_PWREx_EnableOverDrive>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001642:	f000 ffeb 	bl	800261c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001646:	230f      	movs	r3, #15
 8001648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164a:	2302      	movs	r3, #2
 800164c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	2103      	movs	r1, #3
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fd5e 	bl	8005124 <HAL_RCC_ClockConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800166e:	f000 ffd5 	bl	800261c <Error_Handler>
  }
}
 8001672:	bf00      	nop
 8001674:	3750      	adds	r7, #80	; 0x50
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40007000 	.word	0x40007000

08001684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_ADC1_Init+0x98>)
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <MX_ADC1_Init+0x9c>)
 800169a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_ADC1_Init+0x98>)
 800169e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_ADC1_Init+0x98>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_ADC1_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_ADC1_Init+0x98>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_ADC1_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_ADC1_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_ADC1_Init+0x98>)
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <MX_ADC1_Init+0xa0>)
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_ADC1_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_ADC1_Init+0x98>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_ADC1_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_ADC1_Init+0x98>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016e4:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_ADC1_Init+0x98>)
 80016e6:	f001 fe8f 	bl	8003408 <HAL_ADC_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016f0:	f000 ff94 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016f4:	2303      	movs	r3, #3
 80016f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_ADC1_Init+0x98>)
 8001706:	f001 fec3 	bl	8003490 <HAL_ADC_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001710:	f000 ff84 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000090 	.word	0x20000090
 8001720:	40012000 	.word	0x40012000
 8001724:	0f000001 	.word	0x0f000001

08001728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_I2C1_Init+0x74>)
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <MX_I2C1_Init+0x78>)
 8001730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_I2C1_Init+0x74>)
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <MX_I2C1_Init+0x7c>)
 8001736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_I2C1_Init+0x74>)
 8001740:	2201      	movs	r2, #1
 8001742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_I2C1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_I2C1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_I2C1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_I2C1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001762:	480e      	ldr	r0, [pc, #56]	; (800179c <MX_I2C1_Init+0x74>)
 8001764:	f002 fbe0 	bl	8003f28 <HAL_I2C_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800176e:	f000 ff55 	bl	800261c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001772:	2100      	movs	r1, #0
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <MX_I2C1_Init+0x74>)
 8001776:	f003 f92f 	bl	80049d8 <HAL_I2CEx_ConfigAnalogFilter>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001780:	f000 ff4c 	bl	800261c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_I2C1_Init+0x74>)
 8001788:	f003 f971 	bl	8004a6e <HAL_I2CEx_ConfigDigitalFilter>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001792:	f000 ff43 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000d8 	.word	0x200000d8
 80017a0:	40005400 	.word	0x40005400
 80017a4:	20303e5d 	.word	0x20303e5d

080017a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <MX_I2C2_Init+0x74>)
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <MX_I2C2_Init+0x78>)
 80017b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_I2C2_Init+0x74>)
 80017b4:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <MX_I2C2_Init+0x7c>)
 80017b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_I2C2_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_I2C2_Init+0x74>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_I2C2_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_I2C2_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_I2C2_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_I2C2_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_I2C2_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <MX_I2C2_Init+0x74>)
 80017e4:	f002 fba0 	bl	8003f28 <HAL_I2C_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017ee:	f000 ff15 	bl	800261c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f2:	2100      	movs	r1, #0
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <MX_I2C2_Init+0x74>)
 80017f6:	f003 f8ef 	bl	80049d8 <HAL_I2CEx_ConfigAnalogFilter>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001800:	f000 ff0c 	bl	800261c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001804:	2100      	movs	r1, #0
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_I2C2_Init+0x74>)
 8001808:	f003 f931 	bl	8004a6e <HAL_I2CEx_ConfigDigitalFilter>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001812:	f000 ff03 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000012c 	.word	0x2000012c
 8001820:	40005800 	.word	0x40005800
 8001824:	20303e5d 	.word	0x20303e5d

08001828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_SPI1_Init+0x74>)
 800182e:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <MX_SPI1_Init+0x78>)
 8001830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_SPI1_Init+0x74>)
 8001834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_SPI1_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_SPI1_Init+0x74>)
 8001842:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001846:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_SPI1_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <MX_SPI1_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_SPI1_Init+0x74>)
 8001856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_SPI1_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_SPI1_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_SPI1_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_SPI1_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_SPI1_Init+0x74>)
 8001876:	2207      	movs	r2, #7
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_SPI1_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_SPI1_Init+0x74>)
 8001882:	2208      	movs	r2, #8
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_SPI1_Init+0x74>)
 8001888:	f004 fa9a 	bl	8005dc0 <HAL_SPI_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001892:	f000 fec3 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000180 	.word	0x20000180
 80018a0:	40013000 	.word	0x40013000

080018a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <MX_SPI2_Init+0x68>)
 80018aa:	4a19      	ldr	r2, [pc, #100]	; (8001910 <MX_SPI2_Init+0x6c>)
 80018ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI2_Init+0x68>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <MX_SPI2_Init+0x68>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI2_Init+0x68>)
 80018bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI2_Init+0x68>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_SPI2_Init+0x68>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI2_Init+0x68>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MX_SPI2_Init+0x68>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI2_Init+0x68>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_SPI2_Init+0x68>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI2_Init+0x68>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_SPI2_Init+0x68>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI2_Init+0x68>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_SPI2_Init+0x68>)
 80018fa:	f004 fa61 	bl	8005dc0 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001904:	f000 fe8a 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200001e4 	.word	0x200001e4
 8001910:	40003800 	.word	0x40003800

08001914 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b09a      	sub	sp, #104	; 0x68
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001934:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	615a      	str	r2, [r3, #20]
 8001946:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	222c      	movs	r2, #44	; 0x2c
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f006 fbe8 	bl	8008124 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001954:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001956:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <MX_TIM1_Init+0x1a0>)
 8001958:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 959;
 800195a:	4b55      	ldr	r3, [pc, #340]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 800195c:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001960:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001968:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 800196a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800196e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001970:	4b4f      	ldr	r3, [pc, #316]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001976:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001982:	484b      	ldr	r0, [pc, #300]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001984:	f004 fac7 	bl	8005f16 <HAL_TIM_Base_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800198e:	f000 fe45 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001996:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001998:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800199c:	4619      	mov	r1, r3
 800199e:	4844      	ldr	r0, [pc, #272]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 80019a0:	f004 ff1a 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80019aa:	f000 fe37 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019ae:	4840      	ldr	r0, [pc, #256]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 80019b0:	f004 fb08 	bl	8005fc4 <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80019ba:	f000 fe2f 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ce:	4619      	mov	r1, r3
 80019d0:	4837      	ldr	r0, [pc, #220]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 80019d2:	f005 fcb3 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80019dc:	f000 fe1e 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e0:	2360      	movs	r3, #96	; 0x60
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e8:	2300      	movs	r3, #0
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a00:	2200      	movs	r2, #0
 8001a02:	4619      	mov	r1, r3
 8001a04:	482a      	ldr	r0, [pc, #168]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001a06:	f004 fdd3 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001a10:	f000 fe04 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4824      	ldr	r0, [pc, #144]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001a1e:	f004 fdc7 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001a28:	f000 fdf8 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a30:	2208      	movs	r2, #8
 8001a32:	4619      	mov	r1, r3
 8001a34:	481e      	ldr	r0, [pc, #120]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001a36:	f004 fdbb 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001a40:	f000 fdec 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a48:	220c      	movs	r2, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001a4e:	f004 fdaf 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001a58:	f000 fde0 	bl	800261c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001a92:	f005 fce1 	bl	8007458 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8001a9c:	f000 fdbe 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <MX_TIM1_Init+0x19c>)
 8001aa2:	f001 f8f7 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 8001aa6:	bf00      	nop
 8001aa8:	3768      	adds	r7, #104	; 0x68
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000248 	.word	0x20000248
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b092      	sub	sp, #72	; 0x48
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b00:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b20:	4831      	ldr	r0, [pc, #196]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b22:	f004 f9f8 	bl	8005f16 <HAL_TIM_Base_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b2c:	f000 fd76 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	482a      	ldr	r0, [pc, #168]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b3e:	f004 fe4b 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b48:	f000 fd68 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b4c:	4826      	ldr	r0, [pc, #152]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b4e:	f004 fa39 	bl	8005fc4 <HAL_TIM_PWM_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001b58:	f000 fd60 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b5c:	4822      	ldr	r0, [pc, #136]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b5e:	f004 fb83 	bl	8006268 <HAL_TIM_IC_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b68:	f000 fd58 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481b      	ldr	r0, [pc, #108]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001b7c:	f005 fbde 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b86:	f000 fd49 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8a:	2360      	movs	r3, #96	; 0x60
 8001b8c:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4811      	ldr	r0, [pc, #68]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001ba4:	f004 fd04 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001bae:	f000 fd35 	bl	800261c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001bca:	f004 fc55 	bl	8006478 <HAL_TIM_IC_ConfigChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001bd4:	f000 fd22 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <MX_TIM2_Init+0x130>)
 8001bda:	f001 f85b 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 8001bde:	bf00      	nop
 8001be0:	3748      	adds	r7, #72	; 0x48
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000294 	.word	0x20000294

08001bec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 fa92 	bl	8008124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c0a:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <MX_TIM3_Init+0xa4>)
 8001c0c:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <MX_TIM3_Init+0xa8>)
 8001c0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <MX_TIM3_Init+0xa4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <MX_TIM3_Init+0xa4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <MX_TIM3_Init+0xa4>)
 8001c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_TIM3_Init+0xa4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MX_TIM3_Init+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480d      	ldr	r0, [pc, #52]	; (8001c90 <MX_TIM3_Init+0xa4>)
 8001c5c:	f004 fb66 	bl	800632c <HAL_TIM_Encoder_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c66:	f000 fcd9 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c72:	463b      	mov	r3, r7
 8001c74:	4619      	mov	r1, r3
 8001c76:	4806      	ldr	r0, [pc, #24]	; (8001c90 <MX_TIM3_Init+0xa4>)
 8001c78:	f005 fb60 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c82:	f000 fccb 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	3730      	adds	r7, #48	; 0x30
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002e0 	.word	0x200002e0
 8001c94:	40000400 	.word	0x40000400

08001c98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	; 0x30
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	2224      	movs	r2, #36	; 0x24
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f006 fa3c 	bl	8008124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	463b      	mov	r3, r7
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <MX_TIM4_Init+0xa4>)
 8001cb8:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <MX_TIM4_Init+0xa8>)
 8001cba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_TIM4_Init+0xa4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <MX_TIM4_Init+0xa4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_TIM4_Init+0xa4>)
 8001cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_TIM4_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <MX_TIM4_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <MX_TIM4_Init+0xa4>)
 8001d08:	f004 fb10 	bl	800632c <HAL_TIM_Encoder_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d12:	f000 fc83 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4619      	mov	r1, r3
 8001d22:	4806      	ldr	r0, [pc, #24]	; (8001d3c <MX_TIM4_Init+0xa4>)
 8001d24:	f005 fb0a 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d2e:	f000 fc75 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	3730      	adds	r7, #48	; 0x30
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000032c 	.word	0x2000032c
 8001d40:	40000800 	.word	0x40000800

08001d44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	; 0x38
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d76:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001d78:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <MX_TIM5_Init+0xec>)
 8001d7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d9c:	4823      	ldr	r0, [pc, #140]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001d9e:	f004 f8ba 	bl	8005f16 <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001da8:	f000 fc38 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	4619      	mov	r1, r3
 8001db8:	481c      	ldr	r0, [pc, #112]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001dba:	f004 fd0d 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001dc4:	f000 fc2a 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001dc8:	4818      	ldr	r0, [pc, #96]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001dca:	f004 f8fb 	bl	8005fc4 <HAL_TIM_PWM_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001dd4:	f000 fc22 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	4811      	ldr	r0, [pc, #68]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001de8:	f005 faa8 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001df2:	f000 fc13 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df6:	2360      	movs	r3, #96	; 0x60
 8001df8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e06:	463b      	mov	r3, r7
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4807      	ldr	r0, [pc, #28]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001e0e:	f004 fbcf 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001e18:	f000 fc00 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e1c:	4803      	ldr	r0, [pc, #12]	; (8001e2c <MX_TIM5_Init+0xe8>)
 8001e1e:	f000 ff39 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 8001e22:	bf00      	nop
 8001e24:	3738      	adds	r7, #56	; 0x38
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000378 	.word	0x20000378
 8001e30:	40000c00 	.word	0x40000c00

08001e34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b09a      	sub	sp, #104	; 0x68
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
 8001e64:	615a      	str	r2, [r3, #20]
 8001e66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	222c      	movs	r2, #44	; 0x2c
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 f958 	bl	8008124 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e74:	4b55      	ldr	r3, [pc, #340]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001e76:	4a56      	ldr	r2, [pc, #344]	; (8001fd0 <MX_TIM8_Init+0x19c>)
 8001e78:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e7a:	4b54      	ldr	r3, [pc, #336]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e80:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e86:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8e:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9a:	4b4c      	ldr	r3, [pc, #304]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ea0:	484a      	ldr	r0, [pc, #296]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001ea2:	f004 f838 	bl	8005f16 <HAL_TIM_Base_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001eac:	f000 fbb6 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001eb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4843      	ldr	r0, [pc, #268]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001ebe:	f004 fc8b 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001ec8:	f000 fba8 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ecc:	483f      	ldr	r0, [pc, #252]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001ece:	f004 f879 	bl	8005fc4 <HAL_TIM_PWM_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001ed8:	f000 fba0 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ee8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eec:	4619      	mov	r1, r3
 8001eee:	4837      	ldr	r0, [pc, #220]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001ef0:	f005 fa24 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001efa:	f000 fb8f 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efe:	2360      	movs	r3, #96	; 0x60
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f06:	2300      	movs	r3, #0
 8001f08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	482a      	ldr	r0, [pc, #168]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001f24:	f004 fb44 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001f2e:	f000 fb75 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f36:	2204      	movs	r2, #4
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4824      	ldr	r0, [pc, #144]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001f3c:	f004 fb38 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001f46:	f000 fb69 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f4e:	2208      	movs	r2, #8
 8001f50:	4619      	mov	r1, r3
 8001f52:	481e      	ldr	r0, [pc, #120]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001f54:	f004 fb2c 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001f5e:	f000 fb5d 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f66:	220c      	movs	r2, #12
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4818      	ldr	r0, [pc, #96]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001f6c:	f004 fb20 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8001f76:	f000 fb51 	bl	800261c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001fb0:	f005 fa52 	bl	8007458 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8001fba:	f000 fb2f 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001fbe:	4803      	ldr	r0, [pc, #12]	; (8001fcc <MX_TIM8_Init+0x198>)
 8001fc0:	f000 fe68 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 8001fc4:	bf00      	nop
 8001fc6:	3768      	adds	r7, #104	; 0x68
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200003c4 	.word	0x200003c4
 8001fd0:	40010400 	.word	0x40010400

08001fd4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	615a      	str	r2, [r3, #20]
 8001fea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <MX_TIM9_Init+0x98>)
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <MX_TIM9_Init+0x9c>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_TIM9_Init+0x98>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <MX_TIM9_Init+0x98>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <MX_TIM9_Init+0x98>)
 8002000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002004:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <MX_TIM9_Init+0x98>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <MX_TIM9_Init+0x98>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002012:	4816      	ldr	r0, [pc, #88]	; (800206c <MX_TIM9_Init+0x98>)
 8002014:	f003 ffd6 	bl	8005fc4 <HAL_TIM_PWM_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800201e:	f000 fafd 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002022:	2360      	movs	r3, #96	; 0x60
 8002024:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <MX_TIM9_Init+0x98>)
 800203a:	f004 fab9 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002044:	f000 faea 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2204      	movs	r2, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <MX_TIM9_Init+0x98>)
 8002050:	f004 faae 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800205a:	f000 fadf 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800205e:	4803      	ldr	r0, [pc, #12]	; (800206c <MX_TIM9_Init+0x98>)
 8002060:	f000 fe18 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000410 	.word	0x20000410
 8002070:	40014000 	.word	0x40014000

08002074 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
 8002088:	615a      	str	r2, [r3, #20]
 800208a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <MX_TIM11_Init+0x94>)
 800208e:	4a1f      	ldr	r2, [pc, #124]	; (800210c <MX_TIM11_Init+0x98>)
 8002090:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM11_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_TIM11_Init+0x94>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_TIM11_Init+0x94>)
 80020a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_TIM11_Init+0x94>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_TIM11_Init+0x94>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80020b2:	4815      	ldr	r0, [pc, #84]	; (8002108 <MX_TIM11_Init+0x94>)
 80020b4:	f003 ff2f 	bl	8005f16 <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80020be:	f000 faad 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80020c2:	4811      	ldr	r0, [pc, #68]	; (8002108 <MX_TIM11_Init+0x94>)
 80020c4:	f003 ff7e 	bl	8005fc4 <HAL_TIM_PWM_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80020ce:	f000 faa5 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d2:	2360      	movs	r3, #96	; 0x60
 80020d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	4619      	mov	r1, r3
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <MX_TIM11_Init+0x94>)
 80020ea:	f004 fa61 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80020f4:	f000 fa92 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <MX_TIM11_Init+0x94>)
 80020fa:	f000 fdcb 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000045c 	.word	0x2000045c
 800210c:	40014800 	.word	0x40014800

08002110 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
 8002124:	615a      	str	r2, [r3, #20]
 8002126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <MX_TIM13_Init+0x94>)
 800212a:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <MX_TIM13_Init+0x98>)
 800212c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <MX_TIM13_Init+0x94>)
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <MX_TIM13_Init+0x94>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <MX_TIM13_Init+0x94>)
 800213c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002140:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <MX_TIM13_Init+0x94>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <MX_TIM13_Init+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800214e:	4815      	ldr	r0, [pc, #84]	; (80021a4 <MX_TIM13_Init+0x94>)
 8002150:	f003 fee1 	bl	8005f16 <HAL_TIM_Base_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800215a:	f000 fa5f 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800215e:	4811      	ldr	r0, [pc, #68]	; (80021a4 <MX_TIM13_Init+0x94>)
 8002160:	f003 ff30 	bl	8005fc4 <HAL_TIM_PWM_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800216a:	f000 fa57 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216e:	2360      	movs	r3, #96	; 0x60
 8002170:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2200      	movs	r2, #0
 8002182:	4619      	mov	r1, r3
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <MX_TIM13_Init+0x94>)
 8002186:	f004 fa13 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002190:	f000 fa44 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <MX_TIM13_Init+0x94>)
 8002196:	f000 fd7d 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200004a8 	.word	0x200004a8
 80021a8:	40001c00 	.word	0x40001c00

080021ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_UART4_Init+0x58>)
 80021b2:	4a15      	ldr	r2, [pc, #84]	; (8002208 <MX_UART4_Init+0x5c>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_UART4_Init+0x58>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_UART4_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_UART4_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_UART4_Init+0x58>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <MX_UART4_Init+0x58>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <MX_UART4_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <MX_UART4_Init+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <MX_UART4_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_UART4_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_UART4_Init+0x58>)
 80021f0:	f005 f9b0 	bl	8007554 <HAL_UART_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80021fa:	f000 fa0f 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200004f4 	.word	0x200004f4
 8002208:	40004c00 	.word	0x40004c00

0800220c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_UART5_Init+0x58>)
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <MX_UART5_Init+0x5c>)
 8002214:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <MX_UART5_Init+0x58>)
 8002218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800221c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_UART5_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_UART5_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_UART5_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_UART5_Init+0x58>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_UART5_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_UART5_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_UART5_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_UART5_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_UART5_Init+0x58>)
 8002250:	f005 f980 	bl	8007554 <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800225a:	f000 f9df 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000057c 	.word	0x2000057c
 8002268:	40005000 	.word	0x40005000

0800226c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002272:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <MX_USART1_UART_Init+0x5c>)
 8002274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 80022b0:	f005 f950 	bl	8007554 <HAL_UART_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022ba:	f000 f9af 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000604 	.word	0x20000604
 80022c8:	40011000 	.word	0x40011000

080022cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <MX_USART2_UART_Init+0x5c>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART2_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002310:	f005 f920 	bl	8007554 <HAL_UART_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800231a:	f000 f97f 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	2000068c 	.word	0x2000068c
 8002328:	40004400 	.word	0x40004400

0800232c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_USART3_UART_Init+0x58>)
 8002332:	4a15      	ldr	r2, [pc, #84]	; (8002388 <MX_USART3_UART_Init+0x5c>)
 8002334:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_USART3_UART_Init+0x58>)
 8002338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800233c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_USART3_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_USART3_UART_Init+0x58>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_USART3_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_USART3_UART_Init+0x58>)
 8002352:	220c      	movs	r2, #12
 8002354:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_USART3_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_USART3_UART_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_USART3_UART_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_USART3_UART_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_USART3_UART_Init+0x58>)
 8002370:	f005 f8f0 	bl	8007554 <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800237a:	f000 f94f 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000714 	.word	0x20000714
 8002388:	40004800 	.word	0x40004800

0800238c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023a2:	4b97      	ldr	r3, [pc, #604]	; (8002600 <MX_GPIO_Init+0x274>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a96      	ldr	r2, [pc, #600]	; (8002600 <MX_GPIO_Init+0x274>)
 80023a8:	f043 0310 	orr.w	r3, r3, #16
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b94      	ldr	r3, [pc, #592]	; (8002600 <MX_GPIO_Init+0x274>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	4b91      	ldr	r3, [pc, #580]	; (8002600 <MX_GPIO_Init+0x274>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a90      	ldr	r2, [pc, #576]	; (8002600 <MX_GPIO_Init+0x274>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b8e      	ldr	r3, [pc, #568]	; (8002600 <MX_GPIO_Init+0x274>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d2:	4b8b      	ldr	r3, [pc, #556]	; (8002600 <MX_GPIO_Init+0x274>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a8a      	ldr	r2, [pc, #552]	; (8002600 <MX_GPIO_Init+0x274>)
 80023d8:	f043 0320 	orr.w	r3, r3, #32
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b88      	ldr	r3, [pc, #544]	; (8002600 <MX_GPIO_Init+0x274>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ea:	4b85      	ldr	r3, [pc, #532]	; (8002600 <MX_GPIO_Init+0x274>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a84      	ldr	r2, [pc, #528]	; (8002600 <MX_GPIO_Init+0x274>)
 80023f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b82      	ldr	r3, [pc, #520]	; (8002600 <MX_GPIO_Init+0x274>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <MX_GPIO_Init+0x274>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a7e      	ldr	r2, [pc, #504]	; (8002600 <MX_GPIO_Init+0x274>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b7c      	ldr	r3, [pc, #496]	; (8002600 <MX_GPIO_Init+0x274>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	4b79      	ldr	r3, [pc, #484]	; (8002600 <MX_GPIO_Init+0x274>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a78      	ldr	r2, [pc, #480]	; (8002600 <MX_GPIO_Init+0x274>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b76      	ldr	r3, [pc, #472]	; (8002600 <MX_GPIO_Init+0x274>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002432:	4b73      	ldr	r3, [pc, #460]	; (8002600 <MX_GPIO_Init+0x274>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a72      	ldr	r2, [pc, #456]	; (8002600 <MX_GPIO_Init+0x274>)
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b70      	ldr	r3, [pc, #448]	; (8002600 <MX_GPIO_Init+0x274>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800244a:	4b6d      	ldr	r3, [pc, #436]	; (8002600 <MX_GPIO_Init+0x274>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a6c      	ldr	r2, [pc, #432]	; (8002600 <MX_GPIO_Init+0x274>)
 8002450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <MX_GPIO_Init+0x274>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_PIN_3|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	211c      	movs	r1, #28
 8002466:	4867      	ldr	r0, [pc, #412]	; (8002604 <MX_GPIO_Init+0x278>)
 8002468:	f001 fd20 	bl	8003eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	f244 0181 	movw	r1, #16513	; 0x4081
 8002472:	4865      	ldr	r0, [pc, #404]	; (8002608 <MX_GPIO_Init+0x27c>)
 8002474:	f001 fd1a 	bl	8003eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2140      	movs	r1, #64	; 0x40
 800247c:	4863      	ldr	r0, [pc, #396]	; (800260c <MX_GPIO_Init+0x280>)
 800247e:	f001 fd15 	bl	8003eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin PE3 GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_PIN_3|GPIO_OUT_SPI_CS_LCD_Pin;
 8002482:	231c      	movs	r3, #28
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002486:	2301      	movs	r3, #1
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002496:	4619      	mov	r1, r3
 8002498:	485a      	ldr	r0, [pc, #360]	; (8002604 <MX_GPIO_Init+0x278>)
 800249a:	f001 fb5b 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin;
 800249e:	2304      	movs	r3, #4
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI2_PROXY_TOF_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	4857      	ldr	r0, [pc, #348]	; (8002610 <MX_GPIO_Init+0x284>)
 80024b4:	f001 fb4e 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin
                           GPIO_EXTI12_BUMP1_IRQ_Pin GPIO_EXTI13_BUMP2_IRQ_Pin GPIO_EXTI14_BUMP3_IRQ_Pin GPIO_EXTI15_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin
 80024b8:	f24f 3318 	movw	r3, #62232	; 0xf318
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI12_BUMP1_IRQ_Pin|GPIO_EXTI13_BUMP2_IRQ_Pin|GPIO_EXTI14_BUMP3_IRQ_Pin|GPIO_EXTI15_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024cc:	4619      	mov	r1, r3
 80024ce:	4850      	ldr	r0, [pc, #320]	; (8002610 <MX_GPIO_Init+0x284>)
 80024d0:	f001 fb40 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024d4:	2332      	movs	r3, #50	; 0x32
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024e4:	230b      	movs	r3, #11
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	4619      	mov	r1, r3
 80024ee:	4849      	ldr	r0, [pc, #292]	; (8002614 <MX_GPIO_Init+0x288>)
 80024f0:	f001 fb30 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80024f4:	2386      	movs	r3, #134	; 0x86
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002500:	2303      	movs	r3, #3
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002504:	230b      	movs	r3, #11
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	4619      	mov	r1, r3
 800250e:	4842      	ldr	r0, [pc, #264]	; (8002618 <MX_GPIO_Init+0x28c>)
 8002510:	f001 fb20 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002514:	f244 0381 	movw	r3, #16513	; 0x4081
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251a:	2301      	movs	r3, #1
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252a:	4619      	mov	r1, r3
 800252c:	4836      	ldr	r0, [pc, #216]	; (8002608 <MX_GPIO_Init+0x27c>)
 800252e:	f001 fb11 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002544:	230b      	movs	r3, #11
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254c:	4619      	mov	r1, r3
 800254e:	482e      	ldr	r0, [pc, #184]	; (8002608 <MX_GPIO_Init+0x27c>)
 8002550:	f001 fb00 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002554:	2340      	movs	r3, #64	; 0x40
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002558:	2301      	movs	r3, #1
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	4619      	mov	r1, r3
 800256a:	4828      	ldr	r0, [pc, #160]	; (800260c <MX_GPIO_Init+0x280>)
 800256c:	f001 faf2 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800257c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002580:	4619      	mov	r1, r3
 8002582:	4822      	ldr	r0, [pc, #136]	; (800260c <MX_GPIO_Init+0x280>)
 8002584:	f001 fae6 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002588:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800259a:	230a      	movs	r3, #10
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a2:	4619      	mov	r1, r3
 80025a4:	481c      	ldr	r0, [pc, #112]	; (8002618 <MX_GPIO_Init+0x28c>)
 80025a6:	f001 fad5 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	4619      	mov	r1, r3
 80025be:	4816      	ldr	r0, [pc, #88]	; (8002618 <MX_GPIO_Init+0x28c>)
 80025c0:	f001 fac8 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80025c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025d6:	230b      	movs	r3, #11
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025de:	4619      	mov	r1, r3
 80025e0:	480a      	ldr	r0, [pc, #40]	; (800260c <MX_GPIO_Init+0x280>)
 80025e2:	f001 fab7 	bl	8003b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2101      	movs	r1, #1
 80025ea:	2008      	movs	r0, #8
 80025ec:	f001 fa7b 	bl	8003ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80025f0:	2008      	movs	r0, #8
 80025f2:	f001 fa94 	bl	8003b1e <HAL_NVIC_EnableIRQ>

}
 80025f6:	bf00      	nop
 80025f8:	3738      	adds	r7, #56	; 0x38
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	40021000 	.word	0x40021000
 8002608:	40020400 	.word	0x40020400
 800260c:	40021800 	.word	0x40021800
 8002610:	40021400 	.word	0x40021400
 8002614:	40020800 	.word	0x40020800
 8002618:	40020000 	.word	0x40020000

0800261c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002620:	b672      	cpsid	i
}
 8002622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002624:	e7fe      	b.n	8002624 <Error_Handler+0x8>
	...

08002628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_MspInit+0x44>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <HAL_MspInit+0x44>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_MspInit+0x44>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_MspInit+0x44>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a08      	ldr	r2, [pc, #32]	; (800266c <HAL_MspInit+0x44>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_MspInit+0x44>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <HAL_ADC_MspInit+0x74>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d123      	bne.n	80026da <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_ADC_MspInit+0x78>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_ADC_MspInit+0x78>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_ADC_MspInit+0x78>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_ADC_MspInit+0x78>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <HAL_ADC_MspInit+0x78>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_ADC_MspInit+0x78>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 80026c2:	2308      	movs	r3, #8
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c6:	2303      	movs	r3, #3
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <HAL_ADC_MspInit+0x7c>)
 80026d6:	f001 fa3d 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40012000 	.word	0x40012000
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020000 	.word	0x40020000

080026f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b0b0      	sub	sp, #192	; 0xc0
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	2290      	movs	r2, #144	; 0x90
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f005 fd07 	bl	8008124 <memset>
  if(hi2c->Instance==I2C1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a44      	ldr	r2, [pc, #272]	; (800282c <HAL_I2C_MspInit+0x13c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d13e      	bne.n	800279e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002720:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002724:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272c:	f107 031c 	add.w	r3, r7, #28
 8002730:	4618      	mov	r0, r3
 8002732:	f002 ff1d 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800273c:	f7ff ff6e 	bl	800261c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_I2C_MspInit+0x140>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <HAL_I2C_MspInit+0x140>)
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	6313      	str	r3, [r2, #48]	; 0x30
 800274c:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_I2C_MspInit+0x140>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002758:	f44f 7340 	mov.w	r3, #768	; 0x300
 800275c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002760:	2312      	movs	r3, #18
 8002762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002766:	2301      	movs	r3, #1
 8002768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002772:	2304      	movs	r3, #4
 8002774:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002778:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800277c:	4619      	mov	r1, r3
 800277e:	482d      	ldr	r0, [pc, #180]	; (8002834 <HAL_I2C_MspInit+0x144>)
 8002780:	f001 f9e8 	bl	8003b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <HAL_I2C_MspInit+0x140>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4a29      	ldr	r2, [pc, #164]	; (8002830 <HAL_I2C_MspInit+0x140>)
 800278a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800278e:	6413      	str	r3, [r2, #64]	; 0x40
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <HAL_I2C_MspInit+0x140>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800279c:	e041      	b.n	8002822 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a25      	ldr	r2, [pc, #148]	; (8002838 <HAL_I2C_MspInit+0x148>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d13c      	bne.n	8002822 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80027a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fed9 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80027c4:	f7ff ff2a 	bl	800261c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_I2C_MspInit+0x140>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_I2C_MspInit+0x140>)
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	6313      	str	r3, [r2, #48]	; 0x30
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_I2C_MspInit+0x140>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027e0:	2303      	movs	r3, #3
 80027e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e6:	2312      	movs	r3, #18
 80027e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f2:	2303      	movs	r3, #3
 80027f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027f8:	2304      	movs	r3, #4
 80027fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002802:	4619      	mov	r1, r3
 8002804:	480d      	ldr	r0, [pc, #52]	; (800283c <HAL_I2C_MspInit+0x14c>)
 8002806:	f001 f9a5 	bl	8003b54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_I2C_MspInit+0x140>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <HAL_I2C_MspInit+0x140>)
 8002810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_I2C_MspInit+0x140>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
}
 8002822:	bf00      	nop
 8002824:	37c0      	adds	r7, #192	; 0xc0
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40005400 	.word	0x40005400
 8002830:	40023800 	.word	0x40023800
 8002834:	40020400 	.word	0x40020400
 8002838:	40005800 	.word	0x40005800
 800283c:	40021400 	.word	0x40021400

08002840 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b090      	sub	sp, #64	; 0x40
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a67      	ldr	r2, [pc, #412]	; (80029fc <HAL_SPI_MspInit+0x1bc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d161      	bne.n	8002926 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002862:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a66      	ldr	r2, [pc, #408]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a60      	ldr	r2, [pc, #384]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b5e      	ldr	r3, [pc, #376]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a5a      	ldr	r2, [pc, #360]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028aa:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 80028b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028c2:	2320      	movs	r3, #32
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ce:	2303      	movs	r3, #3
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028d2:	2305      	movs	r3, #5
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028da:	4619      	mov	r1, r3
 80028dc:	4849      	ldr	r0, [pc, #292]	; (8002a04 <HAL_SPI_MspInit+0x1c4>)
 80028de:	f001 f939 	bl	8003b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028f2:	2305      	movs	r3, #5
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028fa:	4619      	mov	r1, r3
 80028fc:	4842      	ldr	r0, [pc, #264]	; (8002a08 <HAL_SPI_MspInit+0x1c8>)
 80028fe:	f001 f929 	bl	8003b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002914:	2305      	movs	r3, #5
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291c:	4619      	mov	r1, r3
 800291e:	483b      	ldr	r0, [pc, #236]	; (8002a0c <HAL_SPI_MspInit+0x1cc>)
 8002920:	f001 f918 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002924:	e065      	b.n	80029f2 <HAL_SPI_MspInit+0x1b2>
  else if(hspi->Instance==SPI2)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a39      	ldr	r2, [pc, #228]	; (8002a10 <HAL_SPI_MspInit+0x1d0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d160      	bne.n	80029f2 <HAL_SPI_MspInit+0x1b2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002930:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293a:	6413      	str	r3, [r2, #64]	; 0x40
 800293c:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	6313      	str	r3, [r2, #48]	; 0x30
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a26      	ldr	r2, [pc, #152]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 800297e:	f043 0308 	orr.w	r3, r3, #8
 8002982:	6313      	str	r3, [r2, #48]	; 0x30
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_SPI_MspInit+0x1c0>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002990:	230c      	movs	r3, #12
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029a0:	2305      	movs	r3, #5
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a8:	4619      	mov	r1, r3
 80029aa:	481a      	ldr	r0, [pc, #104]	; (8002a14 <HAL_SPI_MspInit+0x1d4>)
 80029ac:	f001 f8d2 	bl	8003b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c2:	2305      	movs	r3, #5
 80029c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ca:	4619      	mov	r1, r3
 80029cc:	4812      	ldr	r0, [pc, #72]	; (8002a18 <HAL_SPI_MspInit+0x1d8>)
 80029ce:	f001 f8c1 	bl	8003b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d2:	2308      	movs	r3, #8
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029e2:	2305      	movs	r3, #5
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ea:	4619      	mov	r1, r3
 80029ec:	4806      	ldr	r0, [pc, #24]	; (8002a08 <HAL_SPI_MspInit+0x1c8>)
 80029ee:	f001 f8b1 	bl	8003b54 <HAL_GPIO_Init>
}
 80029f2:	bf00      	nop
 80029f4:	3740      	adds	r7, #64	; 0x40
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40013000 	.word	0x40013000
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40020000 	.word	0x40020000
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40021800 	.word	0x40021800
 8002a10:	40003800 	.word	0x40003800
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40020400 	.word	0x40020400

08002a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08e      	sub	sp, #56	; 0x38
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a44      	ldr	r2, [pc, #272]	; (8002b4c <HAL_TIM_Base_MspInit+0x130>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d10c      	bne.n	8002a58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a3e:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	4a43      	ldr	r2, [pc, #268]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002a56:	e075      	b.n	8002b44 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d129      	bne.n	8002ab6 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a34      	ldr	r2, [pc, #208]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8002a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aac:	4619      	mov	r1, r3
 8002aae:	4829      	ldr	r0, [pc, #164]	; (8002b54 <HAL_TIM_Base_MspInit+0x138>)
 8002ab0:	f001 f850 	bl	8003b54 <HAL_GPIO_Init>
}
 8002ab4:	e046      	b.n	8002b44 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM5)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <HAL_TIM_Base_MspInit+0x13c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10c      	bne.n	8002ada <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002ac6:	f043 0308 	orr.w	r3, r3, #8
 8002aca:	6413      	str	r3, [r2, #64]	; 0x40
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	697b      	ldr	r3, [r7, #20]
}
 8002ad8:	e034      	b.n	8002b44 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_TIM_Base_MspInit+0x140>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10c      	bne.n	8002afe <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	6453      	str	r3, [r2, #68]	; 0x44
 8002af0:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
}
 8002afc:	e022      	b.n	8002b44 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM11)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <HAL_TIM_Base_MspInit+0x144>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d10c      	bne.n	8002b22 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	4a10      	ldr	r2, [pc, #64]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b12:	6453      	str	r3, [r2, #68]	; 0x44
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	e010      	b.n	8002b44 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_TIM_Base_MspInit+0x148>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10b      	bne.n	8002b44 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_TIM_Base_MspInit+0x134>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
}
 8002b44:	bf00      	nop
 8002b46:	3738      	adds	r7, #56	; 0x38
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40000c00 	.word	0x40000c00
 8002b5c:	40010400 	.word	0x40010400
 8002b60:	40014800 	.word	0x40014800
 8002b64:	40001c00 	.word	0x40001c00

08002b68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d128      	bne.n	8002bdc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b8a:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a2d      	ldr	r2, [pc, #180]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba2:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8002bba:	2330      	movs	r3, #48	; 0x30
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bce:	f107 031c 	add.w	r3, r7, #28
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	481c      	ldr	r0, [pc, #112]	; (8002c48 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002bd6:	f000 ffbd 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bda:	e02d      	b.n	8002c38 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1a      	ldr	r2, [pc, #104]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xe4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d128      	bne.n	8002c38 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002c04:	f043 0308 	orr.w	r3, r3, #8
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8002c16:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	4619      	mov	r1, r3
 8002c32:	4807      	ldr	r0, [pc, #28]	; (8002c50 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c34:	f000 ff8e 	bl	8003b54 <HAL_GPIO_Init>
}
 8002c38:	bf00      	nop
 8002c3a:	3730      	adds	r7, #48	; 0x30
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40000800 	.word	0x40000800
 8002c50:	40020c00 	.word	0x40020c00

08002c54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <HAL_TIM_PWM_MspInit+0x38>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10b      	bne.n	8002c7e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40023800 	.word	0x40023800

08002c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a78      	ldr	r2, [pc, #480]	; (8002e94 <HAL_TIM_MspPostInit+0x200>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d11d      	bne.n	8002cf2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cb6:	4b78      	ldr	r3, [pc, #480]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a77      	ldr	r2, [pc, #476]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002cbc:	f043 0310 	orr.w	r3, r3, #16
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	623b      	str	r3, [r7, #32]
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8002cce:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce8:	4619      	mov	r1, r3
 8002cea:	486c      	ldr	r0, [pc, #432]	; (8002e9c <HAL_TIM_MspPostInit+0x208>)
 8002cec:	f000 ff32 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002cf0:	e0cc      	b.n	8002e8c <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfa:	d11d      	bne.n	8002d38 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfc:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d26:	2301      	movs	r3, #1
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2e:	4619      	mov	r1, r3
 8002d30:	485b      	ldr	r0, [pc, #364]	; (8002ea0 <HAL_TIM_MspPostInit+0x20c>)
 8002d32:	f000 ff0f 	bl	8003b54 <HAL_GPIO_Init>
}
 8002d36:	e0a9      	b.n	8002e8c <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM5)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a59      	ldr	r2, [pc, #356]	; (8002ea4 <HAL_TIM_MspPostInit+0x210>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d11c      	bne.n	8002d7c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a54      	ldr	r2, [pc, #336]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b52      	ldr	r3, [pc, #328]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d72:	4619      	mov	r1, r3
 8002d74:	484a      	ldr	r0, [pc, #296]	; (8002ea0 <HAL_TIM_MspPostInit+0x20c>)
 8002d76:	f000 feed 	bl	8003b54 <HAL_GPIO_Init>
}
 8002d7a:	e087      	b.n	8002e8c <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM8)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a49      	ldr	r2, [pc, #292]	; (8002ea8 <HAL_TIM_MspPostInit+0x214>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d11d      	bne.n	8002dc2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d86:	4b44      	ldr	r3, [pc, #272]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a43      	ldr	r2, [pc, #268]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002d8c:	f043 0304 	orr.w	r3, r3, #4
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002d9e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002db0:	2303      	movs	r3, #3
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	483c      	ldr	r0, [pc, #240]	; (8002eac <HAL_TIM_MspPostInit+0x218>)
 8002dbc:	f000 feca 	bl	8003b54 <HAL_GPIO_Init>
}
 8002dc0:	e064      	b.n	8002e8c <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM9)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <HAL_TIM_MspPostInit+0x21c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d11c      	bne.n	8002e06 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dcc:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a31      	ldr	r2, [pc, #196]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002dd2:	f043 0310 	orr.w	r3, r3, #16
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8002de4:	2360      	movs	r3, #96	; 0x60
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	2300      	movs	r3, #0
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002df4:	2303      	movs	r3, #3
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4827      	ldr	r0, [pc, #156]	; (8002e9c <HAL_TIM_MspPostInit+0x208>)
 8002e00:	f000 fea8 	bl	8003b54 <HAL_GPIO_Init>
}
 8002e04:	e042      	b.n	8002e8c <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM11)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_TIM_MspPostInit+0x220>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d11c      	bne.n	8002e4a <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e10:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002e16:	f043 0320 	orr.w	r3, r3, #32
 8002e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM11_CH1_USER_LED3_Pin;
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM11_CH1_USER_LED3_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	4619      	mov	r1, r3
 8002e42:	481d      	ldr	r0, [pc, #116]	; (8002eb8 <HAL_TIM_MspPostInit+0x224>)
 8002e44:	f000 fe86 	bl	8003b54 <HAL_GPIO_Init>
}
 8002e48:	e020      	b.n	8002e8c <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM13)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_TIM_MspPostInit+0x228>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d11b      	bne.n	8002e8c <HAL_TIM_MspPostInit+0x1f8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_TIM_MspPostInit+0x204>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM13_CH1_USER_LED4_Pin;
 8002e6c:	2340      	movs	r3, #64	; 0x40
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002e7c:	2309      	movs	r3, #9
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM13_CH1_USER_LED4_GPIO_Port, &GPIO_InitStruct);
 8002e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e84:	4619      	mov	r1, r3
 8002e86:	4806      	ldr	r0, [pc, #24]	; (8002ea0 <HAL_TIM_MspPostInit+0x20c>)
 8002e88:	f000 fe64 	bl	8003b54 <HAL_GPIO_Init>
}
 8002e8c:	bf00      	nop
 8002e8e:	3738      	adds	r7, #56	; 0x38
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40000c00 	.word	0x40000c00
 8002ea8:	40010400 	.word	0x40010400
 8002eac:	40020800 	.word	0x40020800
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40014800 	.word	0x40014800
 8002eb8:	40021400 	.word	0x40021400
 8002ebc:	40001c00 	.word	0x40001c00

08002ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b0b6      	sub	sp, #216	; 0xd8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ed8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002edc:	2290      	movs	r2, #144	; 0x90
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f005 f91f 	bl	8008124 <memset>
  if(huart->Instance==UART4)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a9f      	ldr	r2, [pc, #636]	; (8003168 <HAL_UART_MspInit+0x2a8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d13e      	bne.n	8002f6e <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002efc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 fb35 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002f0c:	f7ff fb86 	bl	800261c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f10:	4b96      	ldr	r3, [pc, #600]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	4a95      	ldr	r2, [pc, #596]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1c:	4b93      	ldr	r3, [pc, #588]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f28:	4b90      	ldr	r3, [pc, #576]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	4a8f      	ldr	r2, [pc, #572]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6313      	str	r3, [r2, #48]	; 0x30
 8002f34:	4b8d      	ldr	r3, [pc, #564]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f54:	2303      	movs	r3, #3
 8002f56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4882      	ldr	r0, [pc, #520]	; (8003170 <HAL_UART_MspInit+0x2b0>)
 8002f68:	f000 fdf4 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f6c:	e14f      	b.n	800320e <HAL_UART_MspInit+0x34e>
  else if(huart->Instance==UART5)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <HAL_UART_MspInit+0x2b4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d15f      	bne.n	8003038 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f002 faf1 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002f94:	f7ff fb42 	bl	800261c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f98:	4b74      	ldr	r3, [pc, #464]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	4a73      	ldr	r2, [pc, #460]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa4:	4b71      	ldr	r3, [pc, #452]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb0:	4b6e      	ldr	r3, [pc, #440]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	4a6d      	ldr	r2, [pc, #436]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002fb6:	f043 0304 	orr.w	r3, r3, #4
 8002fba:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbc:	4b6b      	ldr	r3, [pc, #428]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	4a67      	ldr	r2, [pc, #412]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002fce:	f043 0308 	orr.w	r3, r3, #8
 8002fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd4:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	623b      	str	r3, [r7, #32]
 8002fde:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003000:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003004:	4619      	mov	r1, r3
 8003006:	485a      	ldr	r0, [pc, #360]	; (8003170 <HAL_UART_MspInit+0x2b0>)
 8003008:	f000 fda4 	bl	8003b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800300c:	2304      	movs	r3, #4
 800300e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301e:	2303      	movs	r3, #3
 8003020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003024:	2308      	movs	r3, #8
 8003026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800302a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800302e:	4619      	mov	r1, r3
 8003030:	4851      	ldr	r0, [pc, #324]	; (8003178 <HAL_UART_MspInit+0x2b8>)
 8003032:	f000 fd8f 	bl	8003b54 <HAL_GPIO_Init>
}
 8003036:	e0ea      	b.n	800320e <HAL_UART_MspInit+0x34e>
  else if(huart->Instance==USART1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a4f      	ldr	r2, [pc, #316]	; (800317c <HAL_UART_MspInit+0x2bc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d151      	bne.n	80030e6 <HAL_UART_MspInit+0x226>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003046:	2300      	movs	r3, #0
 8003048:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800304a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800304e:	4618      	mov	r0, r3
 8003050:	f002 fa8e 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800305a:	f7ff fadf 	bl	800261c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	4a42      	ldr	r2, [pc, #264]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8003064:	f043 0310 	orr.w	r3, r3, #16
 8003068:	6453      	str	r3, [r2, #68]	; 0x44
 800306a:	4b40      	ldr	r3, [pc, #256]	; (800316c <HAL_UART_MspInit+0x2ac>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a3c      	ldr	r2, [pc, #240]	; (800316c <HAL_UART_MspInit+0x2ac>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800308e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	2302      	movs	r3, #2
 8003098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a2:	2303      	movs	r3, #3
 80030a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80030a8:	2304      	movs	r3, #4
 80030aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4832      	ldr	r0, [pc, #200]	; (8003180 <HAL_UART_MspInit+0x2c0>)
 80030b6:	f000 fd4d 	bl	8003b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030ba:	2340      	movs	r3, #64	; 0x40
 80030bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030d2:	2307      	movs	r3, #7
 80030d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030dc:	4619      	mov	r1, r3
 80030de:	4828      	ldr	r0, [pc, #160]	; (8003180 <HAL_UART_MspInit+0x2c0>)
 80030e0:	f000 fd38 	bl	8003b54 <HAL_GPIO_Init>
}
 80030e4:	e093      	b.n	800320e <HAL_UART_MspInit+0x34e>
  else if(huart->Instance==USART2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a26      	ldr	r2, [pc, #152]	; (8003184 <HAL_UART_MspInit+0x2c4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d14b      	bne.n	8003188 <HAL_UART_MspInit+0x2c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030f4:	2300      	movs	r3, #0
 80030f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fa37 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8003108:	f7ff fa88 	bl	800261c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800310c:	4b17      	ldr	r3, [pc, #92]	; (800316c <HAL_UART_MspInit+0x2ac>)
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8003112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003116:	6413      	str	r3, [r2, #64]	; 0x40
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_UART_MspInit+0x2ac>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_UART_MspInit+0x2ac>)
 800312a:	f043 0308 	orr.w	r3, r3, #8
 800312e:	6313      	str	r3, [r2, #48]	; 0x30
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_UART_MspInit+0x2ac>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800313c:	2360      	movs	r3, #96	; 0x60
 800313e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003142:	2302      	movs	r3, #2
 8003144:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003154:	2307      	movs	r3, #7
 8003156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800315a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800315e:	4619      	mov	r1, r3
 8003160:	4805      	ldr	r0, [pc, #20]	; (8003178 <HAL_UART_MspInit+0x2b8>)
 8003162:	f000 fcf7 	bl	8003b54 <HAL_GPIO_Init>
}
 8003166:	e052      	b.n	800320e <HAL_UART_MspInit+0x34e>
 8003168:	40004c00 	.word	0x40004c00
 800316c:	40023800 	.word	0x40023800
 8003170:	40020800 	.word	0x40020800
 8003174:	40005000 	.word	0x40005000
 8003178:	40020c00 	.word	0x40020c00
 800317c:	40011000 	.word	0x40011000
 8003180:	40020400 	.word	0x40020400
 8003184:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_UART_MspInit+0x358>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d13d      	bne.n	800320e <HAL_UART_MspInit+0x34e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800319e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031a2:	4618      	mov	r0, r3
 80031a4:	f002 f9e4 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 80031ae:	f7ff fa35 	bl	800261c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <HAL_UART_MspInit+0x35c>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	4a19      	ldr	r2, [pc, #100]	; (800321c <HAL_UART_MspInit+0x35c>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6413      	str	r3, [r2, #64]	; 0x40
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_UART_MspInit+0x35c>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_UART_MspInit+0x35c>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a13      	ldr	r2, [pc, #76]	; (800321c <HAL_UART_MspInit+0x35c>)
 80031d0:	f043 0308 	orr.w	r3, r3, #8
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_UART_MspInit+0x35c>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80031e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f6:	2303      	movs	r3, #3
 80031f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031fc:	2307      	movs	r3, #7
 80031fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003202:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003206:	4619      	mov	r1, r3
 8003208:	4805      	ldr	r0, [pc, #20]	; (8003220 <HAL_UART_MspInit+0x360>)
 800320a:	f000 fca3 	bl	8003b54 <HAL_GPIO_Init>
}
 800320e:	bf00      	nop
 8003210:	37d8      	adds	r7, #216	; 0xd8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40004800 	.word	0x40004800
 800321c:	40023800 	.word	0x40023800
 8003220:	40020c00 	.word	0x40020c00

08003224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003228:	e7fe      	b.n	8003228 <NMI_Handler+0x4>

0800322a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800322e:	e7fe      	b.n	800322e <HardFault_Handler+0x4>

08003230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003234:	e7fe      	b.n	8003234 <MemManage_Handler+0x4>

08003236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800323a:	e7fe      	b.n	800323a <BusFault_Handler+0x4>

0800323c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003240:	e7fe      	b.n	8003240 <UsageFault_Handler+0x4>

08003242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003270:	f000 f886 	bl	8003380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}

08003278 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin);
 800327c:	2004      	movs	r0, #4
 800327e:	f000 fe2f 	bl	8003ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <SystemInit+0x28>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <SystemInit+0x28>)
 8003294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SystemInit+0x28>)
 800329e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032a2:	609a      	str	r2, [r3, #8]
#endif
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ba:	e003      	b.n	80032c4 <LoopCopyDataInit>

080032bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032c2:	3104      	adds	r1, #4

080032c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032c4:	480b      	ldr	r0, [pc, #44]	; (80032f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032cc:	d3f6      	bcc.n	80032bc <CopyDataInit>
  ldr  r2, =_sbss
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032d0:	e002      	b.n	80032d8 <LoopFillZerobss>

080032d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032d4:	f842 3b04 	str.w	r3, [r2], #4

080032d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032dc:	d3f9      	bcc.n	80032d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032de:	f7ff ffd3 	bl	8003288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032e2:	f004 feed 	bl	80080c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032e6:	f7fe f81b 	bl	8001320 <main>
  bx  lr    
 80032ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032ec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80032f0:	08008440 	.word	0x08008440
  ldr  r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032f8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80032fc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003300:	200008d0 	.word	0x200008d0

08003304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003304:	e7fe      	b.n	8003304 <ADC_IRQHandler>

08003306 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330a:	2003      	movs	r0, #3
 800330c:	f000 fbe0 	bl	8003ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003310:	2000      	movs	r0, #0
 8003312:	f000 f805 	bl	8003320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003316:	f7ff f987 	bl	8002628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_InitTick+0x54>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_InitTick+0x58>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003336:	fbb3 f3f1 	udiv	r3, r3, r1
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fbfb 	bl	8003b3a <HAL_SYSTICK_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e00e      	b.n	800336c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b0f      	cmp	r3, #15
 8003352:	d80a      	bhi.n	800336a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003354:	2200      	movs	r2, #0
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f000 fbc3 	bl	8003ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003360:	4a06      	ldr	r2, [pc, #24]	; (800337c <HAL_InitTick+0x5c>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000000 	.word	0x20000000
 8003378:	20000008 	.word	0x20000008
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_IncTick+0x20>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_IncTick+0x24>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4413      	add	r3, r2
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <HAL_IncTick+0x24>)
 8003392:	6013      	str	r3, [r2, #0]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000008 	.word	0x20000008
 80033a4:	200008cc 	.word	0x200008cc

080033a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return uwTick;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_GetTick+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	200008cc 	.word	0x200008cc

080033c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c8:	f7ff ffee 	bl	80033a8 <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d005      	beq.n	80033e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_Delay+0x44>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033e6:	bf00      	nop
 80033e8:	f7ff ffde 	bl	80033a8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d8f7      	bhi.n	80033e8 <HAL_Delay+0x28>
  {
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000008 	.word	0x20000008

08003408 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e031      	b.n	8003482 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff f922 	bl	8002670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_ADC_Init+0x84>)
 800344c:	4013      	ands	r3, r2
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f970 	bl	800373c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
 8003472:	e001      	b.n	8003478 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	ffffeefd 	.word	0xffffeefd

08003490 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1c>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e136      	b.n	800371a <HAL_ADC_ConfigChannel+0x28a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d93a      	bls.n	8003532 <HAL_ADC_ConfigChannel+0xa2>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034c4:	d035      	beq.n	8003532 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68d9      	ldr	r1, [r3, #12]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	3b1e      	subs	r3, #30
 80034dc:	2207      	movs	r2, #7
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	400a      	ands	r2, r1
 80034ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a8d      	ldr	r2, [pc, #564]	; (8003728 <HAL_ADC_ConfigChannel+0x298>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10a      	bne.n	800350c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68d9      	ldr	r1, [r3, #12]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	061a      	lsls	r2, r3, #24
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800350a:	e035      	b.n	8003578 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68d9      	ldr	r1, [r3, #12]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	4603      	mov	r3, r0
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4403      	add	r3, r0
 8003524:	3b1e      	subs	r3, #30
 8003526:	409a      	lsls	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003530:	e022      	b.n	8003578 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6919      	ldr	r1, [r3, #16]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	2207      	movs	r2, #7
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43da      	mvns	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	400a      	ands	r2, r1
 8003554:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6919      	ldr	r1, [r3, #16]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	4618      	mov	r0, r3
 8003568:	4603      	mov	r3, r0
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4403      	add	r3, r0
 800356e:	409a      	lsls	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b06      	cmp	r3, #6
 800357e:	d824      	bhi.n	80035ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	3b05      	subs	r3, #5
 8003592:	221f      	movs	r2, #31
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43da      	mvns	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	400a      	ands	r2, r1
 80035a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	3b05      	subs	r3, #5
 80035bc:	fa00 f203 	lsl.w	r2, r0, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34
 80035c8:	e04c      	b.n	8003664 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d824      	bhi.n	800361c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	3b23      	subs	r3, #35	; 0x23
 80035e4:	221f      	movs	r2, #31
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	400a      	ands	r2, r1
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4618      	mov	r0, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	3b23      	subs	r3, #35	; 0x23
 800360e:	fa00 f203 	lsl.w	r2, r0, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
 800361a:	e023      	b.n	8003664 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	3b41      	subs	r3, #65	; 0x41
 800362e:	221f      	movs	r2, #31
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43da      	mvns	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	400a      	ands	r2, r1
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	4618      	mov	r0, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	3b41      	subs	r3, #65	; 0x41
 8003658:	fa00 f203 	lsl.w	r2, r0, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a30      	ldr	r2, [pc, #192]	; (800372c <HAL_ADC_ConfigChannel+0x29c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10a      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x1f4>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003676:	d105      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a2c      	ldr	r2, [pc, #176]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 800367e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003682:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a28      	ldr	r2, [pc, #160]	; (800372c <HAL_ADC_ConfigChannel+0x29c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10f      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x21e>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b12      	cmp	r3, #18
 8003694:	d10b      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003696:	4b26      	ldr	r3, [pc, #152]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a25      	ldr	r2, [pc, #148]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 800369c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036a2:	4b23      	ldr	r3, [pc, #140]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4a22      	ldr	r2, [pc, #136]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 80036a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <HAL_ADC_ConfigChannel+0x29c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d12b      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x280>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <HAL_ADC_ConfigChannel+0x298>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <HAL_ADC_ConfigChannel+0x23a>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b11      	cmp	r3, #17
 80036c8:	d122      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80036ca:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a18      	ldr	r2, [pc, #96]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 80036d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_ADC_ConfigChannel+0x2a0>)
 80036dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a10      	ldr	r2, [pc, #64]	; (8003728 <HAL_ADC_ConfigChannel+0x298>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d111      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_ADC_ConfigChannel+0x2a4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_ADC_ConfigChannel+0x2a8>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0c9a      	lsrs	r2, r3, #18
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003702:	e002      	b.n	800370a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3b01      	subs	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f9      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	10000012 	.word	0x10000012
 800372c:	40012000 	.word	0x40012000
 8003730:	40012300 	.word	0x40012300
 8003734:	20000000 	.word	0x20000000
 8003738:	431bde83 	.word	0x431bde83

0800373c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003744:	4b78      	ldr	r3, [pc, #480]	; (8003928 <ADC_Init+0x1ec>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a77      	ldr	r2, [pc, #476]	; (8003928 <ADC_Init+0x1ec>)
 800374a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800374e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003750:	4b75      	ldr	r3, [pc, #468]	; (8003928 <ADC_Init+0x1ec>)
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4973      	ldr	r1, [pc, #460]	; (8003928 <ADC_Init+0x1ec>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800376c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	021a      	lsls	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	4a58      	ldr	r2, [pc, #352]	; (800392c <ADC_Init+0x1f0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6899      	ldr	r1, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	e00f      	b.n	8003836 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003834:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0202 	bic.w	r2, r2, #2
 8003844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	005a      	lsls	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003872:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	3b01      	subs	r3, #1
 8003890:	035a      	lsls	r2, r3, #13
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	e007      	b.n	80038ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	051a      	lsls	r2, r3, #20
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6899      	ldr	r1, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038ee:	025a      	lsls	r2, r3, #9
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6899      	ldr	r1, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	029a      	lsls	r2, r3, #10
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	40012300 	.word	0x40012300
 800392c:	0f000001 	.word	0x0f000001

08003930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <__NVIC_SetPriorityGrouping+0x40>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800394c:	4013      	ands	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <__NVIC_SetPriorityGrouping+0x44>)
 800395a:	4313      	orrs	r3, r2
 800395c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800395e:	4a04      	ldr	r2, [pc, #16]	; (8003970 <__NVIC_SetPriorityGrouping+0x40>)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	60d3      	str	r3, [r2, #12]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00
 8003974:	05fa0000 	.word	0x05fa0000

08003978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800397c:	4b04      	ldr	r3, [pc, #16]	; (8003990 <__NVIC_GetPriorityGrouping+0x18>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	f003 0307 	and.w	r3, r3, #7
}
 8003986:	4618      	mov	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	db0b      	blt.n	80039be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	4907      	ldr	r1, [pc, #28]	; (80039cc <__NVIC_EnableIRQ+0x38>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2001      	movs	r0, #1
 80039b6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	e000e100 	.word	0xe000e100

080039d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	6039      	str	r1, [r7, #0]
 80039da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	db0a      	blt.n	80039fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	490c      	ldr	r1, [pc, #48]	; (8003a1c <__NVIC_SetPriority+0x4c>)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	440b      	add	r3, r1
 80039f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039f8:	e00a      	b.n	8003a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4908      	ldr	r1, [pc, #32]	; (8003a20 <__NVIC_SetPriority+0x50>)
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	3b04      	subs	r3, #4
 8003a08:	0112      	lsls	r2, r2, #4
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	761a      	strb	r2, [r3, #24]
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000e100 	.word	0xe000e100
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f1c3 0307 	rsb	r3, r3, #7
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	bf28      	it	cs
 8003a42:	2304      	movcs	r3, #4
 8003a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d902      	bls.n	8003a54 <NVIC_EncodePriority+0x30>
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3b03      	subs	r3, #3
 8003a52:	e000      	b.n	8003a56 <NVIC_EncodePriority+0x32>
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a58:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43da      	mvns	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	401a      	ands	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	43d9      	mvns	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a7c:	4313      	orrs	r3, r2
         );
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3724      	adds	r7, #36	; 0x24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a9c:	d301      	bcc.n	8003aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00f      	b.n	8003ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <SysTick_Config+0x40>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aaa:	210f      	movs	r1, #15
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	f7ff ff8e 	bl	80039d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <SysTick_Config+0x40>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aba:	4b04      	ldr	r3, [pc, #16]	; (8003acc <SysTick_Config+0x40>)
 8003abc:	2207      	movs	r2, #7
 8003abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	e000e010 	.word	0xe000e010

08003ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff29 	bl	8003930 <__NVIC_SetPriorityGrouping>
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003af8:	f7ff ff3e 	bl	8003978 <__NVIC_GetPriorityGrouping>
 8003afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	6978      	ldr	r0, [r7, #20]
 8003b04:	f7ff ff8e 	bl	8003a24 <NVIC_EncodePriority>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff5d 	bl	80039d0 <__NVIC_SetPriority>
}
 8003b16:	bf00      	nop
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	4603      	mov	r3, r0
 8003b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff31 	bl	8003994 <__NVIC_EnableIRQ>
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ffa2 	bl	8003a8c <SysTick_Config>
 8003b48:	4603      	mov	r3, r0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b089      	sub	sp, #36	; 0x24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e175      	b.n	8003e60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b74:	2201      	movs	r2, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	f040 8164 	bne.w	8003e5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d005      	beq.n	8003baa <HAL_GPIO_Init+0x56>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d130      	bne.n	8003c0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be0:	2201      	movs	r2, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 0201 	and.w	r2, r3, #1
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d017      	beq.n	8003c48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2203      	movs	r2, #3
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d123      	bne.n	8003c9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	08da      	lsrs	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3208      	adds	r2, #8
 8003c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	08da      	lsrs	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3208      	adds	r2, #8
 8003c96:	69b9      	ldr	r1, [r7, #24]
 8003c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0203 	and.w	r2, r3, #3
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80be 	beq.w	8003e5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cde:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_GPIO_Init+0x324>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_GPIO_Init+0x324>)
 8003ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cea:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_GPIO_Init+0x324>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cf6:	4a61      	ldr	r2, [pc, #388]	; (8003e7c <HAL_GPIO_Init+0x328>)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	089b      	lsrs	r3, r3, #2
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	220f      	movs	r2, #15
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a58      	ldr	r2, [pc, #352]	; (8003e80 <HAL_GPIO_Init+0x32c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d037      	beq.n	8003d92 <HAL_GPIO_Init+0x23e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a57      	ldr	r2, [pc, #348]	; (8003e84 <HAL_GPIO_Init+0x330>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d031      	beq.n	8003d8e <HAL_GPIO_Init+0x23a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a56      	ldr	r2, [pc, #344]	; (8003e88 <HAL_GPIO_Init+0x334>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d02b      	beq.n	8003d8a <HAL_GPIO_Init+0x236>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a55      	ldr	r2, [pc, #340]	; (8003e8c <HAL_GPIO_Init+0x338>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d025      	beq.n	8003d86 <HAL_GPIO_Init+0x232>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a54      	ldr	r2, [pc, #336]	; (8003e90 <HAL_GPIO_Init+0x33c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01f      	beq.n	8003d82 <HAL_GPIO_Init+0x22e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a53      	ldr	r2, [pc, #332]	; (8003e94 <HAL_GPIO_Init+0x340>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d019      	beq.n	8003d7e <HAL_GPIO_Init+0x22a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a52      	ldr	r2, [pc, #328]	; (8003e98 <HAL_GPIO_Init+0x344>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_GPIO_Init+0x226>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a51      	ldr	r2, [pc, #324]	; (8003e9c <HAL_GPIO_Init+0x348>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00d      	beq.n	8003d76 <HAL_GPIO_Init+0x222>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a50      	ldr	r2, [pc, #320]	; (8003ea0 <HAL_GPIO_Init+0x34c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <HAL_GPIO_Init+0x21e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a4f      	ldr	r2, [pc, #316]	; (8003ea4 <HAL_GPIO_Init+0x350>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_GPIO_Init+0x21a>
 8003d6a:	2309      	movs	r3, #9
 8003d6c:	e012      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d6e:	230a      	movs	r3, #10
 8003d70:	e010      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d72:	2308      	movs	r3, #8
 8003d74:	e00e      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d76:	2307      	movs	r3, #7
 8003d78:	e00c      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d7a:	2306      	movs	r3, #6
 8003d7c:	e00a      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d7e:	2305      	movs	r3, #5
 8003d80:	e008      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d82:	2304      	movs	r3, #4
 8003d84:	e006      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d86:	2303      	movs	r3, #3
 8003d88:	e004      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e002      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_GPIO_Init+0x240>
 8003d92:	2300      	movs	r3, #0
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	f002 0203 	and.w	r2, r2, #3
 8003d9a:	0092      	lsls	r2, r2, #2
 8003d9c:	4093      	lsls	r3, r2
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003da4:	4935      	ldr	r1, [pc, #212]	; (8003e7c <HAL_GPIO_Init+0x328>)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	089b      	lsrs	r3, r3, #2
 8003daa:	3302      	adds	r3, #2
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003db2:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <HAL_GPIO_Init+0x354>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dd6:	4a34      	ldr	r2, [pc, #208]	; (8003ea8 <HAL_GPIO_Init+0x354>)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ddc:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <HAL_GPIO_Init+0x354>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e00:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <HAL_GPIO_Init+0x354>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e06:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <HAL_GPIO_Init+0x354>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ea8 <HAL_GPIO_Init+0x354>)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_GPIO_Init+0x354>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e54:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <HAL_GPIO_Init+0x354>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b0f      	cmp	r3, #15
 8003e64:	f67f ae86 	bls.w	8003b74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3724      	adds	r7, #36	; 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40013800 	.word	0x40013800
 8003e80:	40020000 	.word	0x40020000
 8003e84:	40020400 	.word	0x40020400
 8003e88:	40020800 	.word	0x40020800
 8003e8c:	40020c00 	.word	0x40020c00
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40021400 	.word	0x40021400
 8003e98:	40021800 	.word	0x40021800
 8003e9c:	40021c00 	.word	0x40021c00
 8003ea0:	40022000 	.word	0x40022000
 8003ea4:	40022400 	.word	0x40022400
 8003ea8:	40013c00 	.word	0x40013c00

08003eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	807b      	strh	r3, [r7, #2]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ebc:	787b      	ldrb	r3, [r7, #1]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ec8:	e003      	b.n	8003ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	041a      	lsls	r2, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	619a      	str	r2, [r3, #24]
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f806 	bl	8003f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40013c00 	.word	0x40013c00

08003f10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07f      	b.n	800403a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fe fbce 	bl	80026f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2224      	movs	r2, #36	; 0x24
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d107      	bne.n	8003fa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	e006      	b.n	8003fb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d104      	bne.n	8003fc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_I2C_Init+0x11c>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69d9      	ldr	r1, [r3, #28]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	02008000 	.word	0x02008000

08004048 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4603      	mov	r3, r0
 8004058:	817b      	strh	r3, [r7, #10]
 800405a:	460b      	mov	r3, r1
 800405c:	813b      	strh	r3, [r7, #8]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b20      	cmp	r3, #32
 800406c:	f040 80f9 	bne.w	8004262 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_I2C_Mem_Write+0x34>
 8004076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004082:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0ed      	b.n	8004264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_I2C_Mem_Write+0x4e>
 8004092:	2302      	movs	r3, #2
 8004094:	e0e6      	b.n	8004264 <HAL_I2C_Mem_Write+0x21c>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800409e:	f7ff f983 	bl	80033a8 <HAL_GetTick>
 80040a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2319      	movs	r3, #25
 80040aa:	2201      	movs	r2, #1
 80040ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fac3 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0d1      	b.n	8004264 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2221      	movs	r2, #33	; 0x21
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2240      	movs	r2, #64	; 0x40
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e8:	88f8      	ldrh	r0, [r7, #6]
 80040ea:	893a      	ldrh	r2, [r7, #8]
 80040ec:	8979      	ldrh	r1, [r7, #10]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	4603      	mov	r3, r0
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f9d3 	bl	80044a4 <I2C_RequestMemoryWrite>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0a9      	b.n	8004264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2bff      	cmp	r3, #255	; 0xff
 8004118:	d90e      	bls.n	8004138 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	22ff      	movs	r2, #255	; 0xff
 800411e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	b2da      	uxtb	r2, r3
 8004126:	8979      	ldrh	r1, [r7, #10]
 8004128:	2300      	movs	r3, #0
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fc1f 	bl	8004974 <I2C_TransferConfig>
 8004136:	e00f      	b.n	8004158 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	b2da      	uxtb	r2, r3
 8004148:	8979      	ldrh	r1, [r7, #10]
 800414a:	2300      	movs	r3, #0
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fc0e 	bl	8004974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 faad 	bl	80046bc <I2C_WaitOnTXISFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e07b      	b.n	8004264 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d034      	beq.n	8004210 <HAL_I2C_Mem_Write+0x1c8>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d130      	bne.n	8004210 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	2200      	movs	r2, #0
 80041b6:	2180      	movs	r1, #128	; 0x80
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fa3f 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e04d      	b.n	8004264 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2bff      	cmp	r3, #255	; 0xff
 80041d0:	d90e      	bls.n	80041f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	8979      	ldrh	r1, [r7, #10]
 80041e0:	2300      	movs	r3, #0
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fbc3 	bl	8004974 <I2C_TransferConfig>
 80041ee:	e00f      	b.n	8004210 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	8979      	ldrh	r1, [r7, #10]
 8004202:	2300      	movs	r3, #0
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fbb2 	bl	8004974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d19e      	bne.n	8004158 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fa8c 	bl	800473c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e01a      	b.n	8004264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2220      	movs	r2, #32
 8004234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6859      	ldr	r1, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <HAL_I2C_Mem_Write+0x224>)
 8004242:	400b      	ands	r3, r1
 8004244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	fe00e800 	.word	0xfe00e800

08004270 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	461a      	mov	r2, r3
 800427e:	4603      	mov	r3, r0
 8004280:	817b      	strh	r3, [r7, #10]
 8004282:	460b      	mov	r3, r1
 8004284:	813b      	strh	r3, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b20      	cmp	r3, #32
 8004294:	f040 80fd 	bne.w	8004492 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_I2C_Mem_Read+0x34>
 800429e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0f1      	b.n	8004494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_I2C_Mem_Read+0x4e>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0ea      	b.n	8004494 <HAL_I2C_Mem_Read+0x224>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042c6:	f7ff f86f 	bl	80033a8 <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	2319      	movs	r3, #25
 80042d2:	2201      	movs	r2, #1
 80042d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f9af 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0d5      	b.n	8004494 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2222      	movs	r2, #34	; 0x22
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a3a      	ldr	r2, [r7, #32]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004310:	88f8      	ldrh	r0, [r7, #6]
 8004312:	893a      	ldrh	r2, [r7, #8]
 8004314:	8979      	ldrh	r1, [r7, #10]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	4603      	mov	r3, r0
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f913 	bl	800454c <I2C_RequestMemoryRead>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0ad      	b.n	8004494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2bff      	cmp	r3, #255	; 0xff
 8004340:	d90e      	bls.n	8004360 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	22ff      	movs	r2, #255	; 0xff
 8004346:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	b2da      	uxtb	r2, r3
 800434e:	8979      	ldrh	r1, [r7, #10]
 8004350:	4b52      	ldr	r3, [pc, #328]	; (800449c <HAL_I2C_Mem_Read+0x22c>)
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fb0b 	bl	8004974 <I2C_TransferConfig>
 800435e:	e00f      	b.n	8004380 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	b2da      	uxtb	r2, r3
 8004370:	8979      	ldrh	r1, [r7, #10]
 8004372:	4b4a      	ldr	r3, [pc, #296]	; (800449c <HAL_I2C_Mem_Read+0x22c>)
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fafa 	bl	8004974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	2200      	movs	r2, #0
 8004388:	2104      	movs	r1, #4
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f956 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07c      	b.n	8004494 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d034      	beq.n	8004440 <HAL_I2C_Mem_Read+0x1d0>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d130      	bne.n	8004440 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	2200      	movs	r2, #0
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f927 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e04d      	b.n	8004494 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2bff      	cmp	r3, #255	; 0xff
 8004400:	d90e      	bls.n	8004420 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440c:	b2da      	uxtb	r2, r3
 800440e:	8979      	ldrh	r1, [r7, #10]
 8004410:	2300      	movs	r3, #0
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 faab 	bl	8004974 <I2C_TransferConfig>
 800441e:	e00f      	b.n	8004440 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	b2da      	uxtb	r2, r3
 8004430:	8979      	ldrh	r1, [r7, #10]
 8004432:	2300      	movs	r3, #0
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fa9a 	bl	8004974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d19a      	bne.n	8004380 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f974 	bl	800473c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e01a      	b.n	8004494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2220      	movs	r2, #32
 8004464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <HAL_I2C_Mem_Read+0x230>)
 8004472:	400b      	ands	r3, r1
 8004474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	80002400 	.word	0x80002400
 80044a0:	fe00e800 	.word	0xfe00e800

080044a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	8979      	ldrh	r1, [r7, #10]
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <I2C_RequestMemoryWrite+0xa4>)
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fa51 	bl	8004974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	69b9      	ldr	r1, [r7, #24]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f8f0 	bl	80046bc <I2C_WaitOnTXISFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e02c      	b.n	8004540 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
 80044f6:	e015      	b.n	8004524 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f8d6 	bl	80046bc <I2C_WaitOnTXISFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e012      	b.n	8004540 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800451a:	893b      	ldrh	r3, [r7, #8]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f884 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	80002000 	.word	0x80002000

0800454c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	4603      	mov	r3, r0
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	460b      	mov	r3, r1
 8004560:	813b      	strh	r3, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	8979      	ldrh	r1, [r7, #10]
 800456c:	4b20      	ldr	r3, [pc, #128]	; (80045f0 <I2C_RequestMemoryRead+0xa4>)
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2300      	movs	r3, #0
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f9fe 	bl	8004974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	69b9      	ldr	r1, [r7, #24]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f89d 	bl	80046bc <I2C_WaitOnTXISFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e02c      	b.n	80045e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d105      	bne.n	800459e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004592:	893b      	ldrh	r3, [r7, #8]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
 800459c:	e015      	b.n	80045ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800459e:	893b      	ldrh	r3, [r7, #8]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	69b9      	ldr	r1, [r7, #24]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f883 	bl	80046bc <I2C_WaitOnTXISFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e012      	b.n	80045e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2200      	movs	r2, #0
 80045d2:	2140      	movs	r1, #64	; 0x40
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f831 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	80002000 	.word	0x80002000

080045f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d103      	bne.n	8004612 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d007      	beq.n	8004630 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	619a      	str	r2, [r3, #24]
  }
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800464c:	e022      	b.n	8004694 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d01e      	beq.n	8004694 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004656:	f7fe fea7 	bl	80033a8 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d113      	bne.n	8004694 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e00f      	b.n	80046b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4013      	ands	r3, r2
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d0cd      	beq.n	800464e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046c8:	e02c      	b.n	8004724 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f870 	bl	80047b4 <I2C_IsErrorOccurred>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e02a      	b.n	8004734 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d01e      	beq.n	8004724 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fe fe5f 	bl	80033a8 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d113      	bne.n	8004724 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e007      	b.n	8004734 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d1cb      	bne.n	80046ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004748:	e028      	b.n	800479c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f830 	bl	80047b4 <I2C_IsErrorOccurred>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e026      	b.n	80047ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475e:	f7fe fe23 	bl	80033a8 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	429a      	cmp	r2, r3
 800476c:	d302      	bcc.n	8004774 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d113      	bne.n	800479c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e007      	b.n	80047ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d1cf      	bne.n	800474a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d068      	beq.n	80048b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2210      	movs	r2, #16
 80047e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047e8:	e049      	b.n	800487e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d045      	beq.n	800487e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fe fdd9 	bl	80033a8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <I2C_IsErrorOccurred+0x54>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d13a      	bne.n	800487e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004812:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800481a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482a:	d121      	bne.n	8004870 <I2C_IsErrorOccurred+0xbc>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004832:	d01d      	beq.n	8004870 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b20      	cmp	r3, #32
 8004838:	d01a      	beq.n	8004870 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004848:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800484a:	f7fe fdad 	bl	80033a8 <HAL_GetTick>
 800484e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004850:	e00e      	b.n	8004870 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004852:	f7fe fda9 	bl	80033a8 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b19      	cmp	r3, #25
 800485e:	d907      	bls.n	8004870 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f043 0320 	orr.w	r3, r3, #32
 8004866:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800486e:	e006      	b.n	800487e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b20      	cmp	r3, #32
 800487c:	d1e9      	bne.n	8004852 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b20      	cmp	r3, #32
 800488a:	d003      	beq.n	8004894 <I2C_IsErrorOccurred+0xe0>
 800488c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0aa      	beq.n	80047ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2220      	movs	r2, #32
 80048a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f043 0304 	orr.w	r3, r3, #4
 80048aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	f043 0308 	orr.w	r3, r3, #8
 80048ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f043 0302 	orr.w	r3, r3, #2
 800490e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01c      	beq.n	8004962 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7ff fe63 	bl	80045f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6859      	ldr	r1, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <I2C_IsErrorOccurred+0x1bc>)
 800493a:	400b      	ands	r3, r1
 800493c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	431a      	orrs	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004966:	4618      	mov	r0, r3
 8004968:	3728      	adds	r7, #40	; 0x28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	fe00e800 	.word	0xfe00e800

08004974 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	817b      	strh	r3, [r7, #10]
 8004982:	4613      	mov	r3, r2
 8004984:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004986:	897b      	ldrh	r3, [r7, #10]
 8004988:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800498c:	7a7b      	ldrb	r3, [r7, #9]
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004994:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	4313      	orrs	r3, r2
 800499e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	0d5b      	lsrs	r3, r3, #21
 80049ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <I2C_TransferConfig+0x60>)
 80049b4:	430b      	orrs	r3, r1
 80049b6:	43db      	mvns	r3, r3
 80049b8:	ea02 0103 	and.w	r1, r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	03ff63ff 	.word	0x03ff63ff

080049d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d138      	bne.n	8004a60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e032      	b.n	8004a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2224      	movs	r2, #36	; 0x24
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0201 	bic.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e000      	b.n	8004a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d139      	bne.n	8004af8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e033      	b.n	8004afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2224      	movs	r2, #36	; 0x24
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ac0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b16:	6013      	str	r3, [r2, #0]
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40007000 	.word	0x40007000

08004b28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	4b23      	ldr	r3, [pc, #140]	; (8004bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3e:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b56:	f7fe fc27 	bl	80033a8 <HAL_GetTick>
 8004b5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b5c:	e009      	b.n	8004b72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b5e:	f7fe fc23 	bl	80033a8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b6c:	d901      	bls.n	8004b72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e022      	b.n	8004bb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7e:	d1ee      	bne.n	8004b5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b80:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b8c:	f7fe fc0c 	bl	80033a8 <HAL_GetTick>
 8004b90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b92:	e009      	b.n	8004ba8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b94:	f7fe fc08 	bl	80033a8 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ba2:	d901      	bls.n	8004ba8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e007      	b.n	8004bb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb4:	d1ee      	bne.n	8004b94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40007000 	.word	0x40007000

08004bc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e29b      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8087 	beq.w	8004cfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bec:	4b96      	ldr	r3, [pc, #600]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 030c 	and.w	r3, r3, #12
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d00c      	beq.n	8004c12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf8:	4b93      	ldr	r3, [pc, #588]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d112      	bne.n	8004c2a <HAL_RCC_OscConfig+0x62>
 8004c04:	4b90      	ldr	r3, [pc, #576]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c10:	d10b      	bne.n	8004c2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c12:	4b8d      	ldr	r3, [pc, #564]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d06c      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x130>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d168      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e275      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c32:	d106      	bne.n	8004c42 <HAL_RCC_OscConfig+0x7a>
 8004c34:	4b84      	ldr	r3, [pc, #528]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a83      	ldr	r2, [pc, #524]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	e02e      	b.n	8004ca0 <HAL_RCC_OscConfig+0xd8>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCC_OscConfig+0x9c>
 8004c4a:	4b7f      	ldr	r3, [pc, #508]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a7e      	ldr	r2, [pc, #504]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b7c      	ldr	r3, [pc, #496]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a7b      	ldr	r2, [pc, #492]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e01d      	b.n	8004ca0 <HAL_RCC_OscConfig+0xd8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCC_OscConfig+0xc0>
 8004c6e:	4b76      	ldr	r3, [pc, #472]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a75      	ldr	r2, [pc, #468]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	4b73      	ldr	r3, [pc, #460]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a72      	ldr	r2, [pc, #456]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e00b      	b.n	8004ca0 <HAL_RCC_OscConfig+0xd8>
 8004c88:	4b6f      	ldr	r3, [pc, #444]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a6e      	ldr	r2, [pc, #440]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	4b6c      	ldr	r3, [pc, #432]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a6b      	ldr	r2, [pc, #428]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d013      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fe fb7e 	bl	80033a8 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb0:	f7fe fb7a 	bl	80033a8 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b64      	cmp	r3, #100	; 0x64
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e229      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	4b61      	ldr	r3, [pc, #388]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0xe8>
 8004cce:	e014      	b.n	8004cfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fb6a 	bl	80033a8 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd8:	f7fe fb66 	bl	80033a8 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e215      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	4b57      	ldr	r3, [pc, #348]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x110>
 8004cf6:	e000      	b.n	8004cfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d069      	beq.n	8004dda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d06:	4b50      	ldr	r3, [pc, #320]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00b      	beq.n	8004d2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d12:	4b4d      	ldr	r3, [pc, #308]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d11c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x190>
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d116      	bne.n	8004d58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_RCC_OscConfig+0x17a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d001      	beq.n	8004d42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e1e9      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	493d      	ldr	r1, [pc, #244]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d56:	e040      	b.n	8004dda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d023      	beq.n	8004da8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d60:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fe fb1c 	bl	80033a8 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d74:	f7fe fb18 	bl	80033a8 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1c7      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d86:	4b30      	ldr	r3, [pc, #192]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d92:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4929      	ldr	r1, [pc, #164]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]
 8004da6:	e018      	b.n	8004dda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da8:	4b27      	ldr	r3, [pc, #156]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fe faf8 	bl	80033a8 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fe faf4 	bl	80033a8 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1a3      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dce:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d038      	beq.n	8004e58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d019      	beq.n	8004e22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dee:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df2:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfa:	f7fe fad5 	bl	80033a8 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e02:	f7fe fad1 	bl	80033a8 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e180      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f0      	beq.n	8004e02 <HAL_RCC_OscConfig+0x23a>
 8004e20:	e01a      	b.n	8004e58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e26:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <HAL_RCC_OscConfig+0x280>)
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2e:	f7fe fabb 	bl	80033a8 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e34:	e00a      	b.n	8004e4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e36:	f7fe fab7 	bl	80033a8 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d903      	bls.n	8004e4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e166      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
 8004e48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e4c:	4b92      	ldr	r3, [pc, #584]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ee      	bne.n	8004e36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80a4 	beq.w	8004fae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e66:	4b8c      	ldr	r3, [pc, #560]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10d      	bne.n	8004e8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e72:	4b89      	ldr	r3, [pc, #548]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a88      	ldr	r2, [pc, #544]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b86      	ldr	r3, [pc, #536]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e8e:	4b83      	ldr	r3, [pc, #524]	; (800509c <HAL_RCC_OscConfig+0x4d4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d118      	bne.n	8004ecc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e9a:	4b80      	ldr	r3, [pc, #512]	; (800509c <HAL_RCC_OscConfig+0x4d4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a7f      	ldr	r2, [pc, #508]	; (800509c <HAL_RCC_OscConfig+0x4d4>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea6:	f7fe fa7f 	bl	80033a8 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eae:	f7fe fa7b 	bl	80033a8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b64      	cmp	r3, #100	; 0x64
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e12a      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec0:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCC_OscConfig+0x4d4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x31a>
 8004ed4:	4b70      	ldr	r3, [pc, #448]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a6f      	ldr	r2, [pc, #444]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee0:	e02d      	b.n	8004f3e <HAL_RCC_OscConfig+0x376>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x33c>
 8004eea:	4b6b      	ldr	r3, [pc, #428]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	4a6a      	ldr	r2, [pc, #424]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef6:	4b68      	ldr	r3, [pc, #416]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	4a67      	ldr	r2, [pc, #412]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004efc:	f023 0304 	bic.w	r3, r3, #4
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70
 8004f02:	e01c      	b.n	8004f3e <HAL_RCC_OscConfig+0x376>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b05      	cmp	r3, #5
 8004f0a:	d10c      	bne.n	8004f26 <HAL_RCC_OscConfig+0x35e>
 8004f0c:	4b62      	ldr	r3, [pc, #392]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	4a61      	ldr	r2, [pc, #388]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f12:	f043 0304 	orr.w	r3, r3, #4
 8004f16:	6713      	str	r3, [r2, #112]	; 0x70
 8004f18:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1c:	4a5e      	ldr	r2, [pc, #376]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6713      	str	r3, [r2, #112]	; 0x70
 8004f24:	e00b      	b.n	8004f3e <HAL_RCC_OscConfig+0x376>
 8004f26:	4b5c      	ldr	r3, [pc, #368]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	4a5b      	ldr	r2, [pc, #364]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	6713      	str	r3, [r2, #112]	; 0x70
 8004f32:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	4a58      	ldr	r2, [pc, #352]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f38:	f023 0304 	bic.w	r3, r3, #4
 8004f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d015      	beq.n	8004f72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fe fa2f 	bl	80033a8 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f7fe fa2b 	bl	80033a8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e0d8      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f64:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0ee      	beq.n	8004f4e <HAL_RCC_OscConfig+0x386>
 8004f70:	e014      	b.n	8004f9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fe fa19 	bl	80033a8 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f78:	e00a      	b.n	8004f90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7a:	f7fe fa15 	bl	80033a8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e0c2      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f90:	4b41      	ldr	r3, [pc, #260]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1ee      	bne.n	8004f7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	4a3c      	ldr	r2, [pc, #240]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80ae 	beq.w	8005114 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fb8:	4b37      	ldr	r3, [pc, #220]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d06d      	beq.n	80050a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d14b      	bne.n	8005064 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fcc:	4b32      	ldr	r3, [pc, #200]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a31      	ldr	r2, [pc, #196]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fe f9e6 	bl	80033a8 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fe f9e2 	bl	80033a8 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e091      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff2:	4b29      	ldr	r3, [pc, #164]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	019b      	lsls	r3, r3, #6
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	3b01      	subs	r3, #1
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	071b      	lsls	r3, r3, #28
 800502a:	491b      	ldr	r1, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a18      	ldr	r2, [pc, #96]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8005036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800503a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fe f9b4 	bl	80033a8 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fe f9b0 	bl	80033a8 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e05f      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0x47c>
 8005062:	e057      	b.n	8005114 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005064:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a0b      	ldr	r2, [pc, #44]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 800506a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fe f99a 	bl	80033a8 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fe f996 	bl	80033a8 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e045      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	4b03      	ldr	r3, [pc, #12]	; (8005098 <HAL_RCC_OscConfig+0x4d0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x4b0>
 8005096:	e03d      	b.n	8005114 <HAL_RCC_OscConfig+0x54c>
 8005098:	40023800 	.word	0x40023800
 800509c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050a0:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <HAL_RCC_OscConfig+0x558>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d030      	beq.n	8005110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d129      	bne.n	8005110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d122      	bne.n	8005110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050d0:	4013      	ands	r3, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d8:	4293      	cmp	r3, r2
 80050da:	d119      	bne.n	8005110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	3b01      	subs	r3, #1
 80050ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d10f      	bne.n	8005110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d107      	bne.n	8005110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800

08005124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e0d0      	b.n	80052de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800513c:	4b6a      	ldr	r3, [pc, #424]	; (80052e8 <HAL_RCC_ClockConfig+0x1c4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d910      	bls.n	800516c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514a:	4b67      	ldr	r3, [pc, #412]	; (80052e8 <HAL_RCC_ClockConfig+0x1c4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f023 020f 	bic.w	r2, r3, #15
 8005152:	4965      	ldr	r1, [pc, #404]	; (80052e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	4313      	orrs	r3, r2
 8005158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515a:	4b63      	ldr	r3, [pc, #396]	; (80052e8 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0b8      	b.n	80052de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d020      	beq.n	80051ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005184:	4b59      	ldr	r3, [pc, #356]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4a58      	ldr	r2, [pc, #352]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 800518a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800518e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800519c:	4b53      	ldr	r3, [pc, #332]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	4a52      	ldr	r2, [pc, #328]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 80051a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a8:	4b50      	ldr	r3, [pc, #320]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	494d      	ldr	r1, [pc, #308]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d040      	beq.n	8005248 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d107      	bne.n	80051de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ce:	4b47      	ldr	r3, [pc, #284]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d115      	bne.n	8005206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e07f      	b.n	80052de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d107      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e6:	4b41      	ldr	r3, [pc, #260]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e073      	b.n	80052de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f6:	4b3d      	ldr	r3, [pc, #244]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e06b      	b.n	80052de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005206:	4b39      	ldr	r3, [pc, #228]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f023 0203 	bic.w	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4936      	ldr	r1, [pc, #216]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 8005214:	4313      	orrs	r3, r2
 8005216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005218:	f7fe f8c6 	bl	80033a8 <HAL_GetTick>
 800521c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521e:	e00a      	b.n	8005236 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005220:	f7fe f8c2 	bl	80033a8 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f241 3288 	movw	r2, #5000	; 0x1388
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e053      	b.n	80052de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005236:	4b2d      	ldr	r3, [pc, #180]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 020c 	and.w	r2, r3, #12
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	429a      	cmp	r2, r3
 8005246:	d1eb      	bne.n	8005220 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005248:	4b27      	ldr	r3, [pc, #156]	; (80052e8 <HAL_RCC_ClockConfig+0x1c4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d210      	bcs.n	8005278 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f023 020f 	bic.w	r2, r3, #15
 800525e:	4922      	ldr	r1, [pc, #136]	; (80052e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	4313      	orrs	r3, r2
 8005264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e032      	b.n	80052de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005284:	4b19      	ldr	r3, [pc, #100]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4916      	ldr	r1, [pc, #88]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 8005292:	4313      	orrs	r3, r2
 8005294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	490e      	ldr	r1, [pc, #56]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052b6:	f000 f821 	bl	80052fc <HAL_RCC_GetSysClockFreq>
 80052ba:	4602      	mov	r2, r0
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_RCC_ClockConfig+0x1c8>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	490a      	ldr	r1, [pc, #40]	; (80052f0 <HAL_RCC_ClockConfig+0x1cc>)
 80052c8:	5ccb      	ldrb	r3, [r1, r3]
 80052ca:	fa22 f303 	lsr.w	r3, r2, r3
 80052ce:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <HAL_RCC_ClockConfig+0x1d0>)
 80052d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_RCC_ClockConfig+0x1d4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe f822 	bl	8003320 <HAL_InitTick>

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40023c00 	.word	0x40023c00
 80052ec:	40023800 	.word	0x40023800
 80052f0:	08008414 	.word	0x08008414
 80052f4:	20000000 	.word	0x20000000
 80052f8:	20000004 	.word	0x20000004

080052fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005300:	b094      	sub	sp, #80	; 0x50
 8005302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	647b      	str	r3, [r7, #68]	; 0x44
 8005308:	2300      	movs	r3, #0
 800530a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800530c:	2300      	movs	r3, #0
 800530e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005314:	4b79      	ldr	r3, [pc, #484]	; (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 030c 	and.w	r3, r3, #12
 800531c:	2b08      	cmp	r3, #8
 800531e:	d00d      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x40>
 8005320:	2b08      	cmp	r3, #8
 8005322:	f200 80e1 	bhi.w	80054e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0x34>
 800532a:	2b04      	cmp	r3, #4
 800532c:	d003      	beq.n	8005336 <HAL_RCC_GetSysClockFreq+0x3a>
 800532e:	e0db      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b73      	ldr	r3, [pc, #460]	; (8005500 <HAL_RCC_GetSysClockFreq+0x204>)
 8005332:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005334:	e0db      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005336:	4b73      	ldr	r3, [pc, #460]	; (8005504 <HAL_RCC_GetSysClockFreq+0x208>)
 8005338:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800533a:	e0d8      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800533c:	4b6f      	ldr	r3, [pc, #444]	; (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005344:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005346:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d063      	beq.n	800541a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005352:	4b6a      	ldr	r3, [pc, #424]	; (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	099b      	lsrs	r3, r3, #6
 8005358:	2200      	movs	r2, #0
 800535a:	63bb      	str	r3, [r7, #56]	; 0x38
 800535c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005364:	633b      	str	r3, [r7, #48]	; 0x30
 8005366:	2300      	movs	r3, #0
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
 800536a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800536e:	4622      	mov	r2, r4
 8005370:	462b      	mov	r3, r5
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f04f 0100 	mov.w	r1, #0
 800537a:	0159      	lsls	r1, r3, #5
 800537c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005380:	0150      	lsls	r0, r2, #5
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4621      	mov	r1, r4
 8005388:	1a51      	subs	r1, r2, r1
 800538a:	6139      	str	r1, [r7, #16]
 800538c:	4629      	mov	r1, r5
 800538e:	eb63 0301 	sbc.w	r3, r3, r1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a0:	4659      	mov	r1, fp
 80053a2:	018b      	lsls	r3, r1, #6
 80053a4:	4651      	mov	r1, sl
 80053a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053aa:	4651      	mov	r1, sl
 80053ac:	018a      	lsls	r2, r1, #6
 80053ae:	4651      	mov	r1, sl
 80053b0:	ebb2 0801 	subs.w	r8, r2, r1
 80053b4:	4659      	mov	r1, fp
 80053b6:	eb63 0901 	sbc.w	r9, r3, r1
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ce:	4690      	mov	r8, r2
 80053d0:	4699      	mov	r9, r3
 80053d2:	4623      	mov	r3, r4
 80053d4:	eb18 0303 	adds.w	r3, r8, r3
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	462b      	mov	r3, r5
 80053dc:	eb49 0303 	adc.w	r3, r9, r3
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053ee:	4629      	mov	r1, r5
 80053f0:	024b      	lsls	r3, r1, #9
 80053f2:	4621      	mov	r1, r4
 80053f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053f8:	4621      	mov	r1, r4
 80053fa:	024a      	lsls	r2, r1, #9
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005402:	2200      	movs	r2, #0
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
 8005406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800540c:	f7fa ff14 	bl	8000238 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4613      	mov	r3, r2
 8005416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005418:	e058      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541a:	4b38      	ldr	r3, [pc, #224]	; (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	099b      	lsrs	r3, r3, #6
 8005420:	2200      	movs	r2, #0
 8005422:	4618      	mov	r0, r3
 8005424:	4611      	mov	r1, r2
 8005426:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800542a:	623b      	str	r3, [r7, #32]
 800542c:	2300      	movs	r3, #0
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
 8005430:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005434:	4642      	mov	r2, r8
 8005436:	464b      	mov	r3, r9
 8005438:	f04f 0000 	mov.w	r0, #0
 800543c:	f04f 0100 	mov.w	r1, #0
 8005440:	0159      	lsls	r1, r3, #5
 8005442:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005446:	0150      	lsls	r0, r2, #5
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4641      	mov	r1, r8
 800544e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005452:	4649      	mov	r1, r9
 8005454:	eb63 0b01 	sbc.w	fp, r3, r1
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005464:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005468:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800546c:	ebb2 040a 	subs.w	r4, r2, sl
 8005470:	eb63 050b 	sbc.w	r5, r3, fp
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	00eb      	lsls	r3, r5, #3
 800547e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005482:	00e2      	lsls	r2, r4, #3
 8005484:	4614      	mov	r4, r2
 8005486:	461d      	mov	r5, r3
 8005488:	4643      	mov	r3, r8
 800548a:	18e3      	adds	r3, r4, r3
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	464b      	mov	r3, r9
 8005490:	eb45 0303 	adc.w	r3, r5, r3
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054a2:	4629      	mov	r1, r5
 80054a4:	028b      	lsls	r3, r1, #10
 80054a6:	4621      	mov	r1, r4
 80054a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054ac:	4621      	mov	r1, r4
 80054ae:	028a      	lsls	r2, r1, #10
 80054b0:	4610      	mov	r0, r2
 80054b2:	4619      	mov	r1, r3
 80054b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b6:	2200      	movs	r2, #0
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	61fa      	str	r2, [r7, #28]
 80054bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c0:	f7fa feba 	bl	8000238 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4613      	mov	r3, r2
 80054ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RCC_GetSysClockFreq+0x200>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	3301      	adds	r3, #1
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80054dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054e6:	e002      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3750      	adds	r7, #80	; 0x50
 80054f4:	46bd      	mov	sp, r7
 80054f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800
 8005500:	00f42400 	.word	0x00f42400
 8005504:	007a1200 	.word	0x007a1200

08005508 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <HAL_RCC_GetHCLKFreq+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000000 	.word	0x20000000

08005520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005524:	f7ff fff0 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0a9b      	lsrs	r3, r3, #10
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4903      	ldr	r1, [pc, #12]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40023800 	.word	0x40023800
 8005544:	08008424 	.word	0x08008424

08005548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800554c:	f7ff ffdc 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005550:	4602      	mov	r2, r0
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	0b5b      	lsrs	r3, r3, #13
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	4903      	ldr	r1, [pc, #12]	; (800556c <HAL_RCC_GetPCLK2Freq+0x24>)
 800555e:	5ccb      	ldrb	r3, [r1, r3]
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40023800 	.word	0x40023800
 800556c:	08008424 	.word	0x08008424

08005570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d012      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005598:	4b69      	ldr	r3, [pc, #420]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a68      	ldr	r2, [pc, #416]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055a2:	6093      	str	r3, [r2, #8]
 80055a4:	4b66      	ldr	r3, [pc, #408]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	4964      	ldr	r1, [pc, #400]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055ba:	2301      	movs	r3, #1
 80055bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d017      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055ca:	4b5d      	ldr	r3, [pc, #372]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d8:	4959      	ldr	r1, [pc, #356]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e8:	d101      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055ea:	2301      	movs	r3, #1
 80055ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055f6:	2301      	movs	r3, #1
 80055f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d017      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005606:	4b4e      	ldr	r3, [pc, #312]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800560c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	494a      	ldr	r1, [pc, #296]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005624:	d101      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005626:	2301      	movs	r3, #1
 8005628:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005632:	2301      	movs	r3, #1
 8005634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005642:	2301      	movs	r3, #1
 8005644:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 808b 	beq.w	800576a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005654:	4b3a      	ldr	r3, [pc, #232]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	4a39      	ldr	r2, [pc, #228]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565e:	6413      	str	r3, [r2, #64]	; 0x40
 8005660:	4b37      	ldr	r3, [pc, #220]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800566c:	4b35      	ldr	r3, [pc, #212]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a34      	ldr	r2, [pc, #208]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005678:	f7fd fe96 	bl	80033a8 <HAL_GetTick>
 800567c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005680:	f7fd fe92 	bl	80033a8 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b64      	cmp	r3, #100	; 0x64
 800568c:	d901      	bls.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e38f      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005692:	4b2c      	ldr	r3, [pc, #176]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800569e:	4b28      	ldr	r3, [pc, #160]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d035      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d02e      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056c6:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d2:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	4a1a      	ldr	r2, [pc, #104]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056de:	4a18      	ldr	r2, [pc, #96]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056e4:	4b16      	ldr	r3, [pc, #88]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d114      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fd fe5a 	bl	80033a8 <HAL_GetTick>
 80056f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f6:	e00a      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f8:	f7fd fe56 	bl	80033a8 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	; 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e351      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0ee      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005726:	d111      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005734:	4b04      	ldr	r3, [pc, #16]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005736:	400b      	ands	r3, r1
 8005738:	4901      	ldr	r1, [pc, #4]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
 800573e:	e00b      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005740:	40023800 	.word	0x40023800
 8005744:	40007000 	.word	0x40007000
 8005748:	0ffffcff 	.word	0x0ffffcff
 800574c:	4bac      	ldr	r3, [pc, #688]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4aab      	ldr	r2, [pc, #684]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005752:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005756:	6093      	str	r3, [r2, #8]
 8005758:	4ba9      	ldr	r3, [pc, #676]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005764:	49a6      	ldr	r1, [pc, #664]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005766:	4313      	orrs	r3, r2
 8005768:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005776:	4ba2      	ldr	r3, [pc, #648]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800577c:	4aa0      	ldr	r2, [pc, #640]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005782:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005786:	4b9e      	ldr	r3, [pc, #632]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005788:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	499b      	ldr	r1, [pc, #620]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057a4:	4b96      	ldr	r3, [pc, #600]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b2:	4993      	ldr	r1, [pc, #588]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057c6:	4b8e      	ldr	r3, [pc, #568]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d4:	498a      	ldr	r1, [pc, #552]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057e8:	4b85      	ldr	r3, [pc, #532]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f6:	4982      	ldr	r1, [pc, #520]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800580a:	4b7d      	ldr	r3, [pc, #500]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	4979      	ldr	r1, [pc, #484]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800582c:	4b74      	ldr	r3, [pc, #464]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	f023 0203 	bic.w	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	4971      	ldr	r1, [pc, #452]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800584e:	4b6c      	ldr	r3, [pc, #432]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	f023 020c 	bic.w	r2, r3, #12
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585c:	4968      	ldr	r1, [pc, #416]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005870:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005876:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587e:	4960      	ldr	r1, [pc, #384]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005892:	4b5b      	ldr	r3, [pc, #364]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a0:	4957      	ldr	r1, [pc, #348]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058b4:	4b52      	ldr	r3, [pc, #328]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	494f      	ldr	r1, [pc, #316]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058d6:	4b4a      	ldr	r3, [pc, #296]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	4946      	ldr	r1, [pc, #280]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058f8:	4b41      	ldr	r3, [pc, #260]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005906:	493e      	ldr	r1, [pc, #248]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800591a:	4b39      	ldr	r3, [pc, #228]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800591c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005920:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005928:	4935      	ldr	r1, [pc, #212]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800593c:	4b30      	ldr	r3, [pc, #192]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594a:	492d      	ldr	r1, [pc, #180]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d011      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800595e:	4b28      	ldr	r3, [pc, #160]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800596c:	4924      	ldr	r1, [pc, #144]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597c:	d101      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800597e:	2301      	movs	r3, #1
 8005980:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800598e:	2301      	movs	r3, #1
 8005990:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ac:	4914      	ldr	r1, [pc, #80]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059d0:	490b      	ldr	r1, [pc, #44]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00f      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059e4:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f4:	4902      	ldr	r1, [pc, #8]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059fc:	e002      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a10:	4b8a      	ldr	r3, [pc, #552]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	4986      	ldr	r1, [pc, #536]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a34:	4b81      	ldr	r3, [pc, #516]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a44:	497d      	ldr	r1, [pc, #500]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d006      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 80d6 	beq.w	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a60:	4b76      	ldr	r3, [pc, #472]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a75      	ldr	r2, [pc, #468]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6c:	f7fd fc9c 	bl	80033a8 <HAL_GetTick>
 8005a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a74:	f7fd fc98 	bl	80033a8 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	; 0x64
 8005a80:	d901      	bls.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e195      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a86:	4b6d      	ldr	r3, [pc, #436]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d021      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d11d      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005aa6:	4b65      	ldr	r3, [pc, #404]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ab4:	4b61      	ldr	r3, [pc, #388]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aba:	0e1b      	lsrs	r3, r3, #24
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	019a      	lsls	r2, r3, #6
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	431a      	orrs	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	071b      	lsls	r3, r3, #28
 8005ada:	4958      	ldr	r1, [pc, #352]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af6:	d00a      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02e      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b0c:	d129      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b0e:	4b4b      	ldr	r3, [pc, #300]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b1c:	4b47      	ldr	r3, [pc, #284]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b22:	0f1b      	lsrs	r3, r3, #28
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	019a      	lsls	r2, r3, #6
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	061b      	lsls	r3, r3, #24
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	071b      	lsls	r3, r3, #28
 8005b42:	493e      	ldr	r1, [pc, #248]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b4a:	4b3c      	ldr	r3, [pc, #240]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b50:	f023 021f 	bic.w	r2, r3, #31
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	4938      	ldr	r1, [pc, #224]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01d      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b6e:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b74:	0e1b      	lsrs	r3, r3, #24
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b7c:	4b2f      	ldr	r3, [pc, #188]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b82:	0f1b      	lsrs	r3, r3, #28
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	019a      	lsls	r2, r3, #6
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	431a      	orrs	r2, r3
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	061b      	lsls	r3, r3, #24
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	071b      	lsls	r3, r3, #28
 8005ba2:	4926      	ldr	r1, [pc, #152]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d011      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	019a      	lsls	r2, r3, #6
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	071b      	lsls	r3, r3, #28
 8005bd2:	491a      	ldr	r1, [pc, #104]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bda:	4b18      	ldr	r3, [pc, #96]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a17      	ldr	r2, [pc, #92]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be6:	f7fd fbdf 	bl	80033a8 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bee:	f7fd fbdb 	bl	80033a8 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b64      	cmp	r3, #100	; 0x64
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e0d8      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c00:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	f040 80ce 	bne.w	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c14:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a08      	ldr	r2, [pc, #32]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c20:	f7fd fbc2 	bl	80033a8 <HAL_GetTick>
 8005c24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c26:	e00b      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c28:	f7fd fbbe 	bl	80033a8 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d904      	bls.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e0bb      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c40:	4b5e      	ldr	r3, [pc, #376]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c4c:	d0ec      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d02e      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d12a      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c76:	4b51      	ldr	r3, [pc, #324]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c84:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8a:	0f1b      	lsrs	r3, r3, #28
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	019a      	lsls	r2, r3, #6
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	041b      	lsls	r3, r3, #16
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	071b      	lsls	r3, r3, #28
 8005caa:	4944      	ldr	r1, [pc, #272]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cb2:	4b42      	ldr	r3, [pc, #264]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	493d      	ldr	r1, [pc, #244]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d022      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce0:	d11d      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ce2:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	0e1b      	lsrs	r3, r3, #24
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cf0:	4b32      	ldr	r3, [pc, #200]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf6:	0f1b      	lsrs	r3, r3, #28
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	019a      	lsls	r2, r3, #6
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	041b      	lsls	r3, r3, #16
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	061b      	lsls	r3, r3, #24
 8005d10:	431a      	orrs	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	071b      	lsls	r3, r3, #28
 8005d16:	4929      	ldr	r1, [pc, #164]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d028      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d2a:	4b24      	ldr	r3, [pc, #144]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	0e1b      	lsrs	r3, r3, #24
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d38:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	0c1b      	lsrs	r3, r3, #16
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	019a      	lsls	r2, r3, #6
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	431a      	orrs	r2, r3
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	061b      	lsls	r3, r3, #24
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	071b      	lsls	r3, r3, #28
 8005d5e:	4917      	ldr	r1, [pc, #92]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	4911      	ldr	r1, [pc, #68]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d88:	f7fd fb0e 	bl	80033a8 <HAL_GetTick>
 8005d8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d90:	f7fd fb0a 	bl	80033a8 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b64      	cmp	r3, #100	; 0x64
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e007      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dae:	d1ef      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40023800 	.word	0x40023800

08005dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e09d      	b.n	8005f0e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d108      	bne.n	8005dec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de2:	d009      	beq.n	8005df8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	61da      	str	r2, [r3, #28]
 8005dea:	e005      	b.n	8005df8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fc fd14 	bl	8002840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e38:	d902      	bls.n	8005e40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e002      	b.n	8005e46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e4e:	d007      	beq.n	8005e60 <HAL_SPI_Init+0xa0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e58:	d002      	beq.n	8005e60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea2:	ea42 0103 	orr.w	r1, r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	0c1b      	lsrs	r3, r3, #16
 8005ebc:	f003 0204 	and.w	r2, r3, #4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005edc:	ea42 0103 	orr.w	r1, r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e049      	b.n	8005fbc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7fc fd6d 	bl	8002a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3304      	adds	r3, #4
 8005f52:	4619      	mov	r1, r3
 8005f54:	4610      	mov	r0, r2
 8005f56:	f000 fd09 	bl	800696c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e049      	b.n	800606a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fc fe32 	bl	8002c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f000 fcb2 	bl	800696c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <HAL_TIM_PWM_Start+0x24>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b01      	cmp	r3, #1
 800608e:	bf14      	ite	ne
 8006090:	2301      	movne	r3, #1
 8006092:	2300      	moveq	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	e03c      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b04      	cmp	r3, #4
 800609c:	d109      	bne.n	80060b2 <HAL_TIM_PWM_Start+0x3e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	bf14      	ite	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	2300      	moveq	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	e02f      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d109      	bne.n	80060cc <HAL_TIM_PWM_Start+0x58>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	e022      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b0c      	cmp	r3, #12
 80060d0:	d109      	bne.n	80060e6 <HAL_TIM_PWM_Start+0x72>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	bf14      	ite	ne
 80060de:	2301      	movne	r3, #1
 80060e0:	2300      	moveq	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	e015      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d109      	bne.n	8006100 <HAL_TIM_PWM_Start+0x8c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	e008      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e092      	b.n	8006240 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <HAL_TIM_PWM_Start+0xb6>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006128:	e023      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b04      	cmp	r3, #4
 800612e:	d104      	bne.n	800613a <HAL_TIM_PWM_Start+0xc6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006138:	e01b      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b08      	cmp	r3, #8
 800613e:	d104      	bne.n	800614a <HAL_TIM_PWM_Start+0xd6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006148:	e013      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b0c      	cmp	r3, #12
 800614e:	d104      	bne.n	800615a <HAL_TIM_PWM_Start+0xe6>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006158:	e00b      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b10      	cmp	r3, #16
 800615e:	d104      	bne.n	800616a <HAL_TIM_PWM_Start+0xf6>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006168:	e003      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f001 f8b8 	bl	80072f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a30      	ldr	r2, [pc, #192]	; (8006248 <HAL_TIM_PWM_Start+0x1d4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_TIM_PWM_Start+0x120>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2f      	ldr	r2, [pc, #188]	; (800624c <HAL_TIM_PWM_Start+0x1d8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d101      	bne.n	8006198 <HAL_TIM_PWM_Start+0x124>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <HAL_TIM_PWM_Start+0x126>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a25      	ldr	r2, [pc, #148]	; (8006248 <HAL_TIM_PWM_Start+0x1d4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d022      	beq.n	80061fe <HAL_TIM_PWM_Start+0x18a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c0:	d01d      	beq.n	80061fe <HAL_TIM_PWM_Start+0x18a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a22      	ldr	r2, [pc, #136]	; (8006250 <HAL_TIM_PWM_Start+0x1dc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d018      	beq.n	80061fe <HAL_TIM_PWM_Start+0x18a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a20      	ldr	r2, [pc, #128]	; (8006254 <HAL_TIM_PWM_Start+0x1e0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <HAL_TIM_PWM_Start+0x18a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1f      	ldr	r2, [pc, #124]	; (8006258 <HAL_TIM_PWM_Start+0x1e4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <HAL_TIM_PWM_Start+0x18a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a19      	ldr	r2, [pc, #100]	; (800624c <HAL_TIM_PWM_Start+0x1d8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_TIM_PWM_Start+0x18a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1b      	ldr	r2, [pc, #108]	; (800625c <HAL_TIM_PWM_Start+0x1e8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_TIM_PWM_Start+0x18a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a19      	ldr	r2, [pc, #100]	; (8006260 <HAL_TIM_PWM_Start+0x1ec>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d115      	bne.n	800622a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	4b17      	ldr	r3, [pc, #92]	; (8006264 <HAL_TIM_PWM_Start+0x1f0>)
 8006206:	4013      	ands	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b06      	cmp	r3, #6
 800620e:	d015      	beq.n	800623c <HAL_TIM_PWM_Start+0x1c8>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006216:	d011      	beq.n	800623c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	e008      	b.n	800623c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e000      	b.n	800623e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40014000 	.word	0x40014000
 8006260:	40001800 	.word	0x40001800
 8006264:	00010007 	.word	0x00010007

08006268 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e049      	b.n	800630e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f841 	bl	8006316 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f000 fb60 	bl	800696c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e08f      	b.n	8006460 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7fc fc07 	bl	8002b68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6899      	ldr	r1, [r3, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b3e      	ldr	r3, [pc, #248]	; (8006468 <HAL_TIM_Encoder_Init+0x13c>)
 800636e:	400b      	ands	r3, r1
 8006370:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3304      	adds	r3, #4
 800637a:	4619      	mov	r1, r3
 800637c:	4610      	mov	r0, r2
 800637e:	f000 faf5 	bl	800696c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4b31      	ldr	r3, [pc, #196]	; (800646c <HAL_TIM_Encoder_Init+0x140>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	4313      	orrs	r3, r2
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <HAL_TIM_Encoder_Init+0x144>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <HAL_TIM_Encoder_Init+0x148>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	4313      	orrs	r3, r2
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	011a      	lsls	r2, r3, #4
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	031b      	lsls	r3, r3, #12
 80063ec:	4313      	orrs	r3, r2
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006402:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	4313      	orrs	r3, r2
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	fffebff8 	.word	0xfffebff8
 800646c:	fffffcfc 	.word	0xfffffcfc
 8006470:	fffff3f3 	.word	0xfffff3f3
 8006474:	ffff0f0f 	.word	0xffff0f0f

08006478 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006492:	2302      	movs	r3, #2
 8006494:	e088      	b.n	80065a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11b      	bne.n	80064dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6819      	ldr	r1, [r3, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f000 fd58 	bl	8006f68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 020c 	bic.w	r2, r2, #12
 80064c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6999      	ldr	r1, [r3, #24]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	619a      	str	r2, [r3, #24]
 80064da:	e060      	b.n	800659e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d11c      	bne.n	800651c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6819      	ldr	r1, [r3, #0]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f000 fddc 	bl	80070ae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006504:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6999      	ldr	r1, [r3, #24]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	021a      	lsls	r2, r3, #8
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	619a      	str	r2, [r3, #24]
 800651a:	e040      	b.n	800659e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b08      	cmp	r3, #8
 8006520:	d11b      	bne.n	800655a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6819      	ldr	r1, [r3, #0]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f000 fe29 	bl	8007188 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 020c 	bic.w	r2, r2, #12
 8006544:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69d9      	ldr	r1, [r3, #28]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	61da      	str	r2, [r3, #28]
 8006558:	e021      	b.n	800659e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b0c      	cmp	r3, #12
 800655e:	d11c      	bne.n	800659a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6819      	ldr	r1, [r3, #0]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f000 fe46 	bl	8007200 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69da      	ldr	r2, [r3, #28]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006582:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69d9      	ldr	r1, [r3, #28]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	021a      	lsls	r2, r3, #8
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	61da      	str	r2, [r3, #28]
 8006598:	e001      	b.n	800659e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e0ff      	b.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b14      	cmp	r3, #20
 80065da:	f200 80f0 	bhi.w	80067be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006639 	.word	0x08006639
 80065e8:	080067bf 	.word	0x080067bf
 80065ec:	080067bf 	.word	0x080067bf
 80065f0:	080067bf 	.word	0x080067bf
 80065f4:	08006679 	.word	0x08006679
 80065f8:	080067bf 	.word	0x080067bf
 80065fc:	080067bf 	.word	0x080067bf
 8006600:	080067bf 	.word	0x080067bf
 8006604:	080066bb 	.word	0x080066bb
 8006608:	080067bf 	.word	0x080067bf
 800660c:	080067bf 	.word	0x080067bf
 8006610:	080067bf 	.word	0x080067bf
 8006614:	080066fb 	.word	0x080066fb
 8006618:	080067bf 	.word	0x080067bf
 800661c:	080067bf 	.word	0x080067bf
 8006620:	080067bf 	.word	0x080067bf
 8006624:	0800673d 	.word	0x0800673d
 8006628:	080067bf 	.word	0x080067bf
 800662c:	080067bf 	.word	0x080067bf
 8006630:	080067bf 	.word	0x080067bf
 8006634:	0800677d 	.word	0x0800677d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fa34 	bl	8006aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0208 	orr.w	r2, r2, #8
 8006652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0204 	bic.w	r2, r2, #4
 8006662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	619a      	str	r2, [r3, #24]
      break;
 8006676:	e0a5      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fa86 	bl	8006b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6999      	ldr	r1, [r3, #24]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	021a      	lsls	r2, r3, #8
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	619a      	str	r2, [r3, #24]
      break;
 80066b8:	e084      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fadd 	bl	8006c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0208 	orr.w	r2, r2, #8
 80066d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0204 	bic.w	r2, r2, #4
 80066e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69d9      	ldr	r1, [r3, #28]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	61da      	str	r2, [r3, #28]
      break;
 80066f8:	e064      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fb33 	bl	8006d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69d9      	ldr	r1, [r3, #28]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	021a      	lsls	r2, r3, #8
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	61da      	str	r2, [r3, #28]
      break;
 800673a:	e043      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fb6a 	bl	8006e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0208 	orr.w	r2, r2, #8
 8006756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0204 	bic.w	r2, r2, #4
 8006766:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800677a:	e023      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fb9c 	bl	8006ec0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006796:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	021a      	lsls	r2, r3, #8
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067bc:	e002      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]
      break;
 80067c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop

080067d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e0b4      	b.n	800695e <HAL_TIM_ConfigClockSource+0x186>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	4b56      	ldr	r3, [pc, #344]	; (8006968 <HAL_TIM_ConfigClockSource+0x190>)
 8006810:	4013      	ands	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800681a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682c:	d03e      	beq.n	80068ac <HAL_TIM_ConfigClockSource+0xd4>
 800682e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006832:	f200 8087 	bhi.w	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683a:	f000 8086 	beq.w	800694a <HAL_TIM_ConfigClockSource+0x172>
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006842:	d87f      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b70      	cmp	r3, #112	; 0x70
 8006846:	d01a      	beq.n	800687e <HAL_TIM_ConfigClockSource+0xa6>
 8006848:	2b70      	cmp	r3, #112	; 0x70
 800684a:	d87b      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	2b60      	cmp	r3, #96	; 0x60
 800684e:	d050      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006850:	2b60      	cmp	r3, #96	; 0x60
 8006852:	d877      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006854:	2b50      	cmp	r3, #80	; 0x50
 8006856:	d03c      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006858:	2b50      	cmp	r3, #80	; 0x50
 800685a:	d873      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d058      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x13a>
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d86f      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d064      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006868:	2b30      	cmp	r3, #48	; 0x30
 800686a:	d86b      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800686c:	2b20      	cmp	r3, #32
 800686e:	d060      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006870:	2b20      	cmp	r3, #32
 8006872:	d867      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d05c      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006878:	2b10      	cmp	r3, #16
 800687a:	d05a      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 800687c:	e062      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	6899      	ldr	r1, [r3, #8]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f000 fd0f 	bl	80072b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	609a      	str	r2, [r3, #8]
      break;
 80068aa:	e04f      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	6899      	ldr	r1, [r3, #8]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f000 fcf8 	bl	80072b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ce:	609a      	str	r2, [r3, #8]
      break;
 80068d0:	e03c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 fbb6 	bl	8007050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2150      	movs	r1, #80	; 0x50
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fcc5 	bl	800727a <TIM_ITRx_SetConfig>
      break;
 80068f0:	e02c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6859      	ldr	r1, [r3, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	461a      	mov	r2, r3
 8006900:	f000 fc12 	bl	8007128 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2160      	movs	r1, #96	; 0x60
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fcb5 	bl	800727a <TIM_ITRx_SetConfig>
      break;
 8006910:	e01c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6859      	ldr	r1, [r3, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	461a      	mov	r2, r3
 8006920:	f000 fb96 	bl	8007050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2140      	movs	r1, #64	; 0x40
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fca5 	bl	800727a <TIM_ITRx_SetConfig>
      break;
 8006930:	e00c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f000 fc9c 	bl	800727a <TIM_ITRx_SetConfig>
      break;
 8006942:	e003      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e000      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800694a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	fffeff88 	.word	0xfffeff88

0800696c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a40      	ldr	r2, [pc, #256]	; (8006a80 <TIM_Base_SetConfig+0x114>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	d00f      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a3d      	ldr	r2, [pc, #244]	; (8006a84 <TIM_Base_SetConfig+0x118>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00b      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a3c      	ldr	r2, [pc, #240]	; (8006a88 <TIM_Base_SetConfig+0x11c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d007      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a3b      	ldr	r2, [pc, #236]	; (8006a8c <TIM_Base_SetConfig+0x120>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a3a      	ldr	r2, [pc, #232]	; (8006a90 <TIM_Base_SetConfig+0x124>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d108      	bne.n	80069be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a2f      	ldr	r2, [pc, #188]	; (8006a80 <TIM_Base_SetConfig+0x114>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d02b      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069cc:	d027      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2c      	ldr	r2, [pc, #176]	; (8006a84 <TIM_Base_SetConfig+0x118>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d023      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2b      	ldr	r2, [pc, #172]	; (8006a88 <TIM_Base_SetConfig+0x11c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01f      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2a      	ldr	r2, [pc, #168]	; (8006a8c <TIM_Base_SetConfig+0x120>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01b      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a29      	ldr	r2, [pc, #164]	; (8006a90 <TIM_Base_SetConfig+0x124>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d017      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a28      	ldr	r2, [pc, #160]	; (8006a94 <TIM_Base_SetConfig+0x128>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a27      	ldr	r2, [pc, #156]	; (8006a98 <TIM_Base_SetConfig+0x12c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a26      	ldr	r2, [pc, #152]	; (8006a9c <TIM_Base_SetConfig+0x130>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a25      	ldr	r2, [pc, #148]	; (8006aa0 <TIM_Base_SetConfig+0x134>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a24      	ldr	r2, [pc, #144]	; (8006aa4 <TIM_Base_SetConfig+0x138>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a23      	ldr	r2, [pc, #140]	; (8006aa8 <TIM_Base_SetConfig+0x13c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d108      	bne.n	8006a30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <TIM_Base_SetConfig+0x114>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d003      	beq.n	8006a64 <TIM_Base_SetConfig+0xf8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <TIM_Base_SetConfig+0x124>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d103      	bne.n	8006a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	615a      	str	r2, [r3, #20]
}
 8006a72:	bf00      	nop
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40010400 	.word	0x40010400
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40014400 	.word	0x40014400
 8006a9c:	40014800 	.word	0x40014800
 8006aa0:	40001800 	.word	0x40001800
 8006aa4:	40001c00 	.word	0x40001c00
 8006aa8:	40002000 	.word	0x40002000

08006aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f023 0201 	bic.w	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4b2b      	ldr	r3, [pc, #172]	; (8006b84 <TIM_OC1_SetConfig+0xd8>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f023 0302 	bic.w	r3, r3, #2
 8006af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a21      	ldr	r2, [pc, #132]	; (8006b88 <TIM_OC1_SetConfig+0xdc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_OC1_SetConfig+0x64>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a20      	ldr	r2, [pc, #128]	; (8006b8c <TIM_OC1_SetConfig+0xe0>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10c      	bne.n	8006b2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 0308 	bic.w	r3, r3, #8
 8006b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f023 0304 	bic.w	r3, r3, #4
 8006b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a16      	ldr	r2, [pc, #88]	; (8006b88 <TIM_OC1_SetConfig+0xdc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d003      	beq.n	8006b3a <TIM_OC1_SetConfig+0x8e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <TIM_OC1_SetConfig+0xe0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d111      	bne.n	8006b5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	621a      	str	r2, [r3, #32]
}
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	fffeff8f 	.word	0xfffeff8f
 8006b88:	40010000 	.word	0x40010000
 8006b8c:	40010400 	.word	0x40010400

08006b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	f023 0210 	bic.w	r2, r3, #16
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <TIM_OC2_SetConfig+0xe4>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	021b      	lsls	r3, r3, #8
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f023 0320 	bic.w	r3, r3, #32
 8006bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a23      	ldr	r2, [pc, #140]	; (8006c78 <TIM_OC2_SetConfig+0xe8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d003      	beq.n	8006bf8 <TIM_OC2_SetConfig+0x68>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a22      	ldr	r2, [pc, #136]	; (8006c7c <TIM_OC2_SetConfig+0xec>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d10d      	bne.n	8006c14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <TIM_OC2_SetConfig+0xe8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_OC2_SetConfig+0x94>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a17      	ldr	r2, [pc, #92]	; (8006c7c <TIM_OC2_SetConfig+0xec>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d113      	bne.n	8006c4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	bf00      	nop
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	feff8fff 	.word	0xfeff8fff
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40010400 	.word	0x40010400

08006c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4b2d      	ldr	r3, [pc, #180]	; (8006d60 <TIM_OC3_SetConfig+0xe0>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <TIM_OC3_SetConfig+0xe4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_OC3_SetConfig+0x66>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a21      	ldr	r2, [pc, #132]	; (8006d68 <TIM_OC3_SetConfig+0xe8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d10d      	bne.n	8006d02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a17      	ldr	r2, [pc, #92]	; (8006d64 <TIM_OC3_SetConfig+0xe4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_OC3_SetConfig+0x92>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a16      	ldr	r2, [pc, #88]	; (8006d68 <TIM_OC3_SetConfig+0xe8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d113      	bne.n	8006d3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	621a      	str	r2, [r3, #32]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	fffeff8f 	.word	0xfffeff8f
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40010400 	.word	0x40010400

08006d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <TIM_OC4_SetConfig+0xa4>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	031b      	lsls	r3, r3, #12
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <TIM_OC4_SetConfig+0xa8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC4_SetConfig+0x68>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <TIM_OC4_SetConfig+0xac>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d109      	bne.n	8006de8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	019b      	lsls	r3, r3, #6
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	feff8fff 	.word	0xfeff8fff
 8006e14:	40010000 	.word	0x40010000
 8006e18:	40010400 	.word	0x40010400

08006e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <TIM_OC5_SetConfig+0x98>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a12      	ldr	r2, [pc, #72]	; (8006eb8 <TIM_OC5_SetConfig+0x9c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_OC5_SetConfig+0x5e>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a11      	ldr	r2, [pc, #68]	; (8006ebc <TIM_OC5_SetConfig+0xa0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d109      	bne.n	8006e8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	621a      	str	r2, [r3, #32]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	fffeff8f 	.word	0xfffeff8f
 8006eb8:	40010000 	.word	0x40010000
 8006ebc:	40010400 	.word	0x40010400

08006ec0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <TIM_OC6_SetConfig+0x9c>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	051b      	lsls	r3, r3, #20
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a13      	ldr	r2, [pc, #76]	; (8006f60 <TIM_OC6_SetConfig+0xa0>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_OC6_SetConfig+0x60>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a12      	ldr	r2, [pc, #72]	; (8006f64 <TIM_OC6_SetConfig+0xa4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d109      	bne.n	8006f34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	029b      	lsls	r3, r3, #10
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	feff8fff 	.word	0xfeff8fff
 8006f60:	40010000 	.word	0x40010000
 8006f64:	40010400 	.word	0x40010400

08006f68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	f023 0201 	bic.w	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4a28      	ldr	r2, [pc, #160]	; (8007034 <TIM_TI1_SetConfig+0xcc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01b      	beq.n	8006fce <TIM_TI1_SetConfig+0x66>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d017      	beq.n	8006fce <TIM_TI1_SetConfig+0x66>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a25      	ldr	r2, [pc, #148]	; (8007038 <TIM_TI1_SetConfig+0xd0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <TIM_TI1_SetConfig+0x66>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4a24      	ldr	r2, [pc, #144]	; (800703c <TIM_TI1_SetConfig+0xd4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00f      	beq.n	8006fce <TIM_TI1_SetConfig+0x66>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4a23      	ldr	r2, [pc, #140]	; (8007040 <TIM_TI1_SetConfig+0xd8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00b      	beq.n	8006fce <TIM_TI1_SetConfig+0x66>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4a22      	ldr	r2, [pc, #136]	; (8007044 <TIM_TI1_SetConfig+0xdc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d007      	beq.n	8006fce <TIM_TI1_SetConfig+0x66>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4a21      	ldr	r2, [pc, #132]	; (8007048 <TIM_TI1_SetConfig+0xe0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d003      	beq.n	8006fce <TIM_TI1_SetConfig+0x66>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a20      	ldr	r2, [pc, #128]	; (800704c <TIM_TI1_SetConfig+0xe4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d101      	bne.n	8006fd2 <TIM_TI1_SetConfig+0x6a>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <TIM_TI1_SetConfig+0x6c>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e003      	b.n	8006ff2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f043 0301 	orr.w	r3, r3, #1
 8006ff0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f023 030a 	bic.w	r3, r3, #10
 800700c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f003 030a 	and.w	r3, r3, #10
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	621a      	str	r2, [r3, #32]
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40010000 	.word	0x40010000
 8007038:	40000400 	.word	0x40000400
 800703c:	40000800 	.word	0x40000800
 8007040:	40000c00 	.word	0x40000c00
 8007044:	40010400 	.word	0x40010400
 8007048:	40014000 	.word	0x40014000
 800704c:	40001800 	.word	0x40001800

08007050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f023 0201 	bic.w	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800707a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f023 030a 	bic.w	r3, r3, #10
 800708c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b087      	sub	sp, #28
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	607a      	str	r2, [r7, #4]
 80070ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	f023 0210 	bic.w	r2, r3, #16
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	031b      	lsls	r3, r3, #12
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007100:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	621a      	str	r2, [r3, #32]
}
 800711c:	bf00      	nop
 800711e:	371c      	adds	r7, #28
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	f023 0210 	bic.w	r2, r3, #16
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007152:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	031b      	lsls	r3, r3, #12
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007164:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	621a      	str	r2, [r3, #32]
}
 800717c:	bf00      	nop
 800717e:	371c      	adds	r7, #28
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f023 0303 	bic.w	r3, r3, #3
 80071b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80071d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	021b      	lsls	r3, r3, #8
 80071de:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	621a      	str	r2, [r3, #32]
}
 80071f4:	bf00      	nop
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800723e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	031b      	lsls	r3, r3, #12
 8007244:	b29b      	uxth	r3, r3
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007252:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	031b      	lsls	r3, r3, #12
 8007258:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	621a      	str	r2, [r3, #32]
}
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800727a:	b480      	push	{r7}
 800727c:	b085      	sub	sp, #20
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	f043 0307 	orr.w	r3, r3, #7
 800729c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	609a      	str	r2, [r3, #8]
}
 80072a4:	bf00      	nop
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	021a      	lsls	r2, r3, #8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	609a      	str	r2, [r3, #8]
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	2201      	movs	r2, #1
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1a      	ldr	r2, [r3, #32]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	43db      	mvns	r3, r3
 8007312:	401a      	ands	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a1a      	ldr	r2, [r3, #32]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	431a      	orrs	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	621a      	str	r2, [r3, #32]
}
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
	...

0800733c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007350:	2302      	movs	r3, #2
 8007352:	e06d      	b.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a30      	ldr	r2, [pc, #192]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d004      	beq.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2f      	ldr	r2, [pc, #188]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d108      	bne.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800738e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a20      	ldr	r2, [pc, #128]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d022      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d01d      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d018      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1c      	ldr	r2, [pc, #112]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1a      	ldr	r2, [pc, #104]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00e      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a15      	ldr	r2, [pc, #84]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d009      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a16      	ldr	r2, [pc, #88]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d004      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a15      	ldr	r2, [pc, #84]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d10c      	bne.n	800741e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800740a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	4313      	orrs	r3, r2
 8007414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	40010000 	.word	0x40010000
 8007440:	40010400 	.word	0x40010400
 8007444:	40000400 	.word	0x40000400
 8007448:	40000800 	.word	0x40000800
 800744c:	40000c00 	.word	0x40000c00
 8007450:	40014000 	.word	0x40014000
 8007454:	40001800 	.word	0x40001800

08007458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007470:	2302      	movs	r3, #2
 8007472:	e065      	b.n	8007540 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a16      	ldr	r2, [pc, #88]	; (800754c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a14      	ldr	r2, [pc, #80]	; (8007550 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d115      	bne.n	800752e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	051b      	lsls	r3, r3, #20
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	40010000 	.word	0x40010000
 8007550:	40010400 	.word	0x40010400

08007554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e040      	b.n	80075e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fb fca2 	bl	8002ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2224      	movs	r2, #36	; 0x24
 8007580:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f974 	bl	8007880 <UART_SetConfig>
 8007598:	4603      	mov	r3, r0
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e022      	b.n	80075e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fbcc 	bl	8007d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fc53 	bl	8007e8c <UART_CheckIdleState>
 80075e6:	4603      	mov	r3, r0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4613      	mov	r3, r2
 80075fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007604:	2b20      	cmp	r3, #32
 8007606:	d171      	bne.n	80076ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <HAL_UART_Transmit+0x24>
 800760e:	88fb      	ldrh	r3, [r7, #6]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e06a      	b.n	80076ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2221      	movs	r2, #33	; 0x21
 8007624:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007626:	f7fb febf 	bl	80033a8 <HAL_GetTick>
 800762a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	88fa      	ldrh	r2, [r7, #6]
 8007630:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	88fa      	ldrh	r2, [r7, #6]
 8007638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007644:	d108      	bne.n	8007658 <HAL_UART_Transmit+0x68>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	e003      	b.n	8007660 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007660:	e02c      	b.n	80076bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2200      	movs	r2, #0
 800766a:	2180      	movs	r1, #128	; 0x80
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 fc5a 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e038      	b.n	80076ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10b      	bne.n	800769a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007690:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	3302      	adds	r3, #2
 8007696:	61bb      	str	r3, [r7, #24]
 8007698:	e007      	b.n	80076aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	781a      	ldrb	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	3301      	adds	r3, #1
 80076a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1cc      	bne.n	8007662 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2200      	movs	r2, #0
 80076d0:	2140      	movs	r1, #64	; 0x40
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fc27 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e005      	b.n	80076ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2220      	movs	r2, #32
 80076e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	e000      	b.n	80076ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80076ec:	2302      	movs	r3, #2
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b08a      	sub	sp, #40	; 0x28
 80076fa:	af02      	add	r7, sp, #8
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800770c:	2b20      	cmp	r3, #32
 800770e:	f040 80b1 	bne.w	8007874 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_UART_Receive+0x28>
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e0a9      	b.n	8007876 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2222      	movs	r2, #34	; 0x22
 800772e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007738:	f7fb fe36 	bl	80033a8 <HAL_GetTick>
 800773c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	88fa      	ldrh	r2, [r7, #6]
 800774a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007756:	d10e      	bne.n	8007776 <HAL_UART_Receive+0x80>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <HAL_UART_Receive+0x76>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007766:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800776a:	e02d      	b.n	80077c8 <HAL_UART_Receive+0xd2>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	22ff      	movs	r2, #255	; 0xff
 8007770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007774:	e028      	b.n	80077c8 <HAL_UART_Receive+0xd2>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10d      	bne.n	800779a <HAL_UART_Receive+0xa4>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <HAL_UART_Receive+0x9a>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	22ff      	movs	r2, #255	; 0xff
 800778a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800778e:	e01b      	b.n	80077c8 <HAL_UART_Receive+0xd2>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	227f      	movs	r2, #127	; 0x7f
 8007794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007798:	e016      	b.n	80077c8 <HAL_UART_Receive+0xd2>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077a2:	d10d      	bne.n	80077c0 <HAL_UART_Receive+0xca>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d104      	bne.n	80077b6 <HAL_UART_Receive+0xc0>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	227f      	movs	r2, #127	; 0x7f
 80077b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077b4:	e008      	b.n	80077c8 <HAL_UART_Receive+0xd2>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	223f      	movs	r2, #63	; 0x3f
 80077ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077be:	e003      	b.n	80077c8 <HAL_UART_Receive+0xd2>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077ce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d8:	d108      	bne.n	80077ec <HAL_UART_Receive+0xf6>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d104      	bne.n	80077ec <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	61bb      	str	r3, [r7, #24]
 80077ea:	e003      	b.n	80077f4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80077f4:	e032      	b.n	800785c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2200      	movs	r2, #0
 80077fe:	2120      	movs	r1, #32
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fb90 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e032      	b.n	8007876 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10c      	bne.n	8007830 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	b29a      	uxth	r2, r3
 800781e:	8a7b      	ldrh	r3, [r7, #18]
 8007820:	4013      	ands	r3, r2
 8007822:	b29a      	uxth	r2, r3
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	3302      	adds	r3, #2
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	e00c      	b.n	800784a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	b2da      	uxtb	r2, r3
 8007838:	8a7b      	ldrh	r3, [r7, #18]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	4013      	ands	r3, r2
 800783e:	b2da      	uxtb	r2, r3
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3301      	adds	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007850:	b29b      	uxth	r3, r3
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1c6      	bne.n	80077f6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2220      	movs	r2, #32
 800786c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	e000      	b.n	8007876 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3720      	adds	r7, #32
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4ba6      	ldr	r3, [pc, #664]	; (8007b44 <UART_SetConfig+0x2c4>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	6979      	ldr	r1, [r7, #20]
 80078b4:	430b      	orrs	r3, r1
 80078b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a94      	ldr	r2, [pc, #592]	; (8007b48 <UART_SetConfig+0x2c8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d120      	bne.n	800793e <UART_SetConfig+0xbe>
 80078fc:	4b93      	ldr	r3, [pc, #588]	; (8007b4c <UART_SetConfig+0x2cc>)
 80078fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	2b03      	cmp	r3, #3
 8007908:	d816      	bhi.n	8007938 <UART_SetConfig+0xb8>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <UART_SetConfig+0x90>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007921 	.word	0x08007921
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007927 	.word	0x08007927
 800791c:	08007933 	.word	0x08007933
 8007920:	2301      	movs	r3, #1
 8007922:	77fb      	strb	r3, [r7, #31]
 8007924:	e150      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007926:	2302      	movs	r3, #2
 8007928:	77fb      	strb	r3, [r7, #31]
 800792a:	e14d      	b.n	8007bc8 <UART_SetConfig+0x348>
 800792c:	2304      	movs	r3, #4
 800792e:	77fb      	strb	r3, [r7, #31]
 8007930:	e14a      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007932:	2308      	movs	r3, #8
 8007934:	77fb      	strb	r3, [r7, #31]
 8007936:	e147      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007938:	2310      	movs	r3, #16
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e144      	b.n	8007bc8 <UART_SetConfig+0x348>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a83      	ldr	r2, [pc, #524]	; (8007b50 <UART_SetConfig+0x2d0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d132      	bne.n	80079ae <UART_SetConfig+0x12e>
 8007948:	4b80      	ldr	r3, [pc, #512]	; (8007b4c <UART_SetConfig+0x2cc>)
 800794a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794e:	f003 030c 	and.w	r3, r3, #12
 8007952:	2b0c      	cmp	r3, #12
 8007954:	d828      	bhi.n	80079a8 <UART_SetConfig+0x128>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <UART_SetConfig+0xdc>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007991 	.word	0x08007991
 8007960:	080079a9 	.word	0x080079a9
 8007964:	080079a9 	.word	0x080079a9
 8007968:	080079a9 	.word	0x080079a9
 800796c:	0800799d 	.word	0x0800799d
 8007970:	080079a9 	.word	0x080079a9
 8007974:	080079a9 	.word	0x080079a9
 8007978:	080079a9 	.word	0x080079a9
 800797c:	08007997 	.word	0x08007997
 8007980:	080079a9 	.word	0x080079a9
 8007984:	080079a9 	.word	0x080079a9
 8007988:	080079a9 	.word	0x080079a9
 800798c:	080079a3 	.word	0x080079a3
 8007990:	2300      	movs	r3, #0
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e118      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007996:	2302      	movs	r3, #2
 8007998:	77fb      	strb	r3, [r7, #31]
 800799a:	e115      	b.n	8007bc8 <UART_SetConfig+0x348>
 800799c:	2304      	movs	r3, #4
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e112      	b.n	8007bc8 <UART_SetConfig+0x348>
 80079a2:	2308      	movs	r3, #8
 80079a4:	77fb      	strb	r3, [r7, #31]
 80079a6:	e10f      	b.n	8007bc8 <UART_SetConfig+0x348>
 80079a8:	2310      	movs	r3, #16
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	e10c      	b.n	8007bc8 <UART_SetConfig+0x348>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a68      	ldr	r2, [pc, #416]	; (8007b54 <UART_SetConfig+0x2d4>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d120      	bne.n	80079fa <UART_SetConfig+0x17a>
 80079b8:	4b64      	ldr	r3, [pc, #400]	; (8007b4c <UART_SetConfig+0x2cc>)
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079c2:	2b30      	cmp	r3, #48	; 0x30
 80079c4:	d013      	beq.n	80079ee <UART_SetConfig+0x16e>
 80079c6:	2b30      	cmp	r3, #48	; 0x30
 80079c8:	d814      	bhi.n	80079f4 <UART_SetConfig+0x174>
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	d009      	beq.n	80079e2 <UART_SetConfig+0x162>
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d810      	bhi.n	80079f4 <UART_SetConfig+0x174>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <UART_SetConfig+0x15c>
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d006      	beq.n	80079e8 <UART_SetConfig+0x168>
 80079da:	e00b      	b.n	80079f4 <UART_SetConfig+0x174>
 80079dc:	2300      	movs	r3, #0
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e0f2      	b.n	8007bc8 <UART_SetConfig+0x348>
 80079e2:	2302      	movs	r3, #2
 80079e4:	77fb      	strb	r3, [r7, #31]
 80079e6:	e0ef      	b.n	8007bc8 <UART_SetConfig+0x348>
 80079e8:	2304      	movs	r3, #4
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	e0ec      	b.n	8007bc8 <UART_SetConfig+0x348>
 80079ee:	2308      	movs	r3, #8
 80079f0:	77fb      	strb	r3, [r7, #31]
 80079f2:	e0e9      	b.n	8007bc8 <UART_SetConfig+0x348>
 80079f4:	2310      	movs	r3, #16
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e0e6      	b.n	8007bc8 <UART_SetConfig+0x348>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a56      	ldr	r2, [pc, #344]	; (8007b58 <UART_SetConfig+0x2d8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d120      	bne.n	8007a46 <UART_SetConfig+0x1c6>
 8007a04:	4b51      	ldr	r3, [pc, #324]	; (8007b4c <UART_SetConfig+0x2cc>)
 8007a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a10:	d013      	beq.n	8007a3a <UART_SetConfig+0x1ba>
 8007a12:	2bc0      	cmp	r3, #192	; 0xc0
 8007a14:	d814      	bhi.n	8007a40 <UART_SetConfig+0x1c0>
 8007a16:	2b80      	cmp	r3, #128	; 0x80
 8007a18:	d009      	beq.n	8007a2e <UART_SetConfig+0x1ae>
 8007a1a:	2b80      	cmp	r3, #128	; 0x80
 8007a1c:	d810      	bhi.n	8007a40 <UART_SetConfig+0x1c0>
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <UART_SetConfig+0x1a8>
 8007a22:	2b40      	cmp	r3, #64	; 0x40
 8007a24:	d006      	beq.n	8007a34 <UART_SetConfig+0x1b4>
 8007a26:	e00b      	b.n	8007a40 <UART_SetConfig+0x1c0>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e0cc      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e0c9      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a34:	2304      	movs	r3, #4
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e0c6      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	77fb      	strb	r3, [r7, #31]
 8007a3e:	e0c3      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a40:	2310      	movs	r3, #16
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e0c0      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a44      	ldr	r2, [pc, #272]	; (8007b5c <UART_SetConfig+0x2dc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d125      	bne.n	8007a9c <UART_SetConfig+0x21c>
 8007a50:	4b3e      	ldr	r3, [pc, #248]	; (8007b4c <UART_SetConfig+0x2cc>)
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a5e:	d017      	beq.n	8007a90 <UART_SetConfig+0x210>
 8007a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a64:	d817      	bhi.n	8007a96 <UART_SetConfig+0x216>
 8007a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a6a:	d00b      	beq.n	8007a84 <UART_SetConfig+0x204>
 8007a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a70:	d811      	bhi.n	8007a96 <UART_SetConfig+0x216>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <UART_SetConfig+0x1fe>
 8007a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7a:	d006      	beq.n	8007a8a <UART_SetConfig+0x20a>
 8007a7c:	e00b      	b.n	8007a96 <UART_SetConfig+0x216>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	77fb      	strb	r3, [r7, #31]
 8007a82:	e0a1      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a84:	2302      	movs	r3, #2
 8007a86:	77fb      	strb	r3, [r7, #31]
 8007a88:	e09e      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a8a:	2304      	movs	r3, #4
 8007a8c:	77fb      	strb	r3, [r7, #31]
 8007a8e:	e09b      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a90:	2308      	movs	r3, #8
 8007a92:	77fb      	strb	r3, [r7, #31]
 8007a94:	e098      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a96:	2310      	movs	r3, #16
 8007a98:	77fb      	strb	r3, [r7, #31]
 8007a9a:	e095      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a2f      	ldr	r2, [pc, #188]	; (8007b60 <UART_SetConfig+0x2e0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d125      	bne.n	8007af2 <UART_SetConfig+0x272>
 8007aa6:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <UART_SetConfig+0x2cc>)
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ab0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ab4:	d017      	beq.n	8007ae6 <UART_SetConfig+0x266>
 8007ab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007aba:	d817      	bhi.n	8007aec <UART_SetConfig+0x26c>
 8007abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac0:	d00b      	beq.n	8007ada <UART_SetConfig+0x25a>
 8007ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac6:	d811      	bhi.n	8007aec <UART_SetConfig+0x26c>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <UART_SetConfig+0x254>
 8007acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad0:	d006      	beq.n	8007ae0 <UART_SetConfig+0x260>
 8007ad2:	e00b      	b.n	8007aec <UART_SetConfig+0x26c>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	77fb      	strb	r3, [r7, #31]
 8007ad8:	e076      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007ada:	2302      	movs	r3, #2
 8007adc:	77fb      	strb	r3, [r7, #31]
 8007ade:	e073      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	77fb      	strb	r3, [r7, #31]
 8007ae4:	e070      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	77fb      	strb	r3, [r7, #31]
 8007aea:	e06d      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007aec:	2310      	movs	r3, #16
 8007aee:	77fb      	strb	r3, [r7, #31]
 8007af0:	e06a      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <UART_SetConfig+0x2e4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d138      	bne.n	8007b6e <UART_SetConfig+0x2ee>
 8007afc:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <UART_SetConfig+0x2cc>)
 8007afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b0a:	d017      	beq.n	8007b3c <UART_SetConfig+0x2bc>
 8007b0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b10:	d82a      	bhi.n	8007b68 <UART_SetConfig+0x2e8>
 8007b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b16:	d00b      	beq.n	8007b30 <UART_SetConfig+0x2b0>
 8007b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b1c:	d824      	bhi.n	8007b68 <UART_SetConfig+0x2e8>
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <UART_SetConfig+0x2aa>
 8007b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b26:	d006      	beq.n	8007b36 <UART_SetConfig+0x2b6>
 8007b28:	e01e      	b.n	8007b68 <UART_SetConfig+0x2e8>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	77fb      	strb	r3, [r7, #31]
 8007b2e:	e04b      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007b30:	2302      	movs	r3, #2
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	e048      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007b36:	2304      	movs	r3, #4
 8007b38:	77fb      	strb	r3, [r7, #31]
 8007b3a:	e045      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e042      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007b42:	bf00      	nop
 8007b44:	efff69f3 	.word	0xefff69f3
 8007b48:	40011000 	.word	0x40011000
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	40004400 	.word	0x40004400
 8007b54:	40004800 	.word	0x40004800
 8007b58:	40004c00 	.word	0x40004c00
 8007b5c:	40005000 	.word	0x40005000
 8007b60:	40011400 	.word	0x40011400
 8007b64:	40007800 	.word	0x40007800
 8007b68:	2310      	movs	r3, #16
 8007b6a:	77fb      	strb	r3, [r7, #31]
 8007b6c:	e02c      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a72      	ldr	r2, [pc, #456]	; (8007d3c <UART_SetConfig+0x4bc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d125      	bne.n	8007bc4 <UART_SetConfig+0x344>
 8007b78:	4b71      	ldr	r3, [pc, #452]	; (8007d40 <UART_SetConfig+0x4c0>)
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b86:	d017      	beq.n	8007bb8 <UART_SetConfig+0x338>
 8007b88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b8c:	d817      	bhi.n	8007bbe <UART_SetConfig+0x33e>
 8007b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b92:	d00b      	beq.n	8007bac <UART_SetConfig+0x32c>
 8007b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b98:	d811      	bhi.n	8007bbe <UART_SetConfig+0x33e>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <UART_SetConfig+0x326>
 8007b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ba2:	d006      	beq.n	8007bb2 <UART_SetConfig+0x332>
 8007ba4:	e00b      	b.n	8007bbe <UART_SetConfig+0x33e>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	77fb      	strb	r3, [r7, #31]
 8007baa:	e00d      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007bac:	2302      	movs	r3, #2
 8007bae:	77fb      	strb	r3, [r7, #31]
 8007bb0:	e00a      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007bb2:	2304      	movs	r3, #4
 8007bb4:	77fb      	strb	r3, [r7, #31]
 8007bb6:	e007      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007bb8:	2308      	movs	r3, #8
 8007bba:	77fb      	strb	r3, [r7, #31]
 8007bbc:	e004      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007bbe:	2310      	movs	r3, #16
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e001      	b.n	8007bc8 <UART_SetConfig+0x348>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd0:	d15b      	bne.n	8007c8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007bd2:	7ffb      	ldrb	r3, [r7, #31]
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d828      	bhi.n	8007c2a <UART_SetConfig+0x3aa>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <UART_SetConfig+0x360>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007c05 	.word	0x08007c05
 8007be4:	08007c0d 	.word	0x08007c0d
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	08007c2b 	.word	0x08007c2b
 8007bf0:	08007c1b 	.word	0x08007c1b
 8007bf4:	08007c2b 	.word	0x08007c2b
 8007bf8:	08007c2b 	.word	0x08007c2b
 8007bfc:	08007c2b 	.word	0x08007c2b
 8007c00:	08007c23 	.word	0x08007c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c04:	f7fd fc8c 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8007c08:	61b8      	str	r0, [r7, #24]
        break;
 8007c0a:	e013      	b.n	8007c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c0c:	f7fd fc9c 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 8007c10:	61b8      	str	r0, [r7, #24]
        break;
 8007c12:	e00f      	b.n	8007c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c14:	4b4b      	ldr	r3, [pc, #300]	; (8007d44 <UART_SetConfig+0x4c4>)
 8007c16:	61bb      	str	r3, [r7, #24]
        break;
 8007c18:	e00c      	b.n	8007c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1a:	f7fd fb6f 	bl	80052fc <HAL_RCC_GetSysClockFreq>
 8007c1e:	61b8      	str	r0, [r7, #24]
        break;
 8007c20:	e008      	b.n	8007c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c26:	61bb      	str	r3, [r7, #24]
        break;
 8007c28:	e004      	b.n	8007c34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	77bb      	strb	r3, [r7, #30]
        break;
 8007c32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d074      	beq.n	8007d24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	005a      	lsls	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2b0f      	cmp	r3, #15
 8007c54:	d916      	bls.n	8007c84 <UART_SetConfig+0x404>
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c5c:	d212      	bcs.n	8007c84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	f023 030f 	bic.w	r3, r3, #15
 8007c66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	085b      	lsrs	r3, r3, #1
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	89fb      	ldrh	r3, [r7, #14]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	89fa      	ldrh	r2, [r7, #14]
 8007c80:	60da      	str	r2, [r3, #12]
 8007c82:	e04f      	b.n	8007d24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	77bb      	strb	r3, [r7, #30]
 8007c88:	e04c      	b.n	8007d24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c8a:	7ffb      	ldrb	r3, [r7, #31]
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d828      	bhi.n	8007ce2 <UART_SetConfig+0x462>
 8007c90:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <UART_SetConfig+0x418>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cc5 	.word	0x08007cc5
 8007ca0:	08007ccd 	.word	0x08007ccd
 8007ca4:	08007ce3 	.word	0x08007ce3
 8007ca8:	08007cd3 	.word	0x08007cd3
 8007cac:	08007ce3 	.word	0x08007ce3
 8007cb0:	08007ce3 	.word	0x08007ce3
 8007cb4:	08007ce3 	.word	0x08007ce3
 8007cb8:	08007cdb 	.word	0x08007cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cbc:	f7fd fc30 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8007cc0:	61b8      	str	r0, [r7, #24]
        break;
 8007cc2:	e013      	b.n	8007cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cc4:	f7fd fc40 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 8007cc8:	61b8      	str	r0, [r7, #24]
        break;
 8007cca:	e00f      	b.n	8007cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ccc:	4b1d      	ldr	r3, [pc, #116]	; (8007d44 <UART_SetConfig+0x4c4>)
 8007cce:	61bb      	str	r3, [r7, #24]
        break;
 8007cd0:	e00c      	b.n	8007cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cd2:	f7fd fb13 	bl	80052fc <HAL_RCC_GetSysClockFreq>
 8007cd6:	61b8      	str	r0, [r7, #24]
        break;
 8007cd8:	e008      	b.n	8007cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cde:	61bb      	str	r3, [r7, #24]
        break;
 8007ce0:	e004      	b.n	8007cec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8007cea:	bf00      	nop
    }

    if (pclk != 0U)
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d018      	beq.n	8007d24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	085a      	lsrs	r2, r3, #1
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	441a      	add	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b0f      	cmp	r3, #15
 8007d0a:	d909      	bls.n	8007d20 <UART_SetConfig+0x4a0>
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d12:	d205      	bcs.n	8007d20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60da      	str	r2, [r3, #12]
 8007d1e:	e001      	b.n	8007d24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d30:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40007c00 	.word	0x40007c00
 8007d40:	40023800 	.word	0x40023800
 8007d44:	00f42400 	.word	0x00f42400

08007d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	f003 0308 	and.w	r3, r3, #8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01a      	beq.n	8007e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e46:	d10a      	bne.n	8007e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
  }
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e9c:	f7fb fa84 	bl	80033a8 <HAL_GetTick>
 8007ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d10e      	bne.n	8007ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f831 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e027      	b.n	8007f1e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d10e      	bne.n	8007efa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f81b 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e011      	b.n	8007f1e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b09c      	sub	sp, #112	; 0x70
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f36:	e0a7      	b.n	8008088 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3e:	f000 80a3 	beq.w	8008088 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f42:	f7fb fa31 	bl	80033a8 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d302      	bcc.n	8007f58 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d13f      	bne.n	8007fd8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f78:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e6      	bne.n	8007f58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	f023 0301 	bic.w	r3, r3, #1
 8007fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007faa:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e5      	bne.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e068      	b.n	80080aa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d050      	beq.n	8008088 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff4:	d148      	bne.n	8008088 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ffe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008014:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
 8008020:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e6      	bne.n	8008000 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	613b      	str	r3, [r7, #16]
   return(result);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f023 0301 	bic.w	r3, r3, #1
 8008048:	66bb      	str	r3, [r7, #104]	; 0x68
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008052:	623a      	str	r2, [r7, #32]
 8008054:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	69f9      	ldr	r1, [r7, #28]
 8008058:	6a3a      	ldr	r2, [r7, #32]
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2220      	movs	r2, #32
 800806a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2220      	movs	r2, #32
 8008078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e010      	b.n	80080aa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4013      	ands	r3, r2
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	429a      	cmp	r2, r3
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	f43f af48 	beq.w	8007f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3770      	adds	r7, #112	; 0x70
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <__errno>:
 80080b4:	4b01      	ldr	r3, [pc, #4]	; (80080bc <__errno+0x8>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	2000000c 	.word	0x2000000c

080080c0 <__libc_init_array>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	4d0d      	ldr	r5, [pc, #52]	; (80080f8 <__libc_init_array+0x38>)
 80080c4:	4c0d      	ldr	r4, [pc, #52]	; (80080fc <__libc_init_array+0x3c>)
 80080c6:	1b64      	subs	r4, r4, r5
 80080c8:	10a4      	asrs	r4, r4, #2
 80080ca:	2600      	movs	r6, #0
 80080cc:	42a6      	cmp	r6, r4
 80080ce:	d109      	bne.n	80080e4 <__libc_init_array+0x24>
 80080d0:	4d0b      	ldr	r5, [pc, #44]	; (8008100 <__libc_init_array+0x40>)
 80080d2:	4c0c      	ldr	r4, [pc, #48]	; (8008104 <__libc_init_array+0x44>)
 80080d4:	f000 f980 	bl	80083d8 <_init>
 80080d8:	1b64      	subs	r4, r4, r5
 80080da:	10a4      	asrs	r4, r4, #2
 80080dc:	2600      	movs	r6, #0
 80080de:	42a6      	cmp	r6, r4
 80080e0:	d105      	bne.n	80080ee <__libc_init_array+0x2e>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e8:	4798      	blx	r3
 80080ea:	3601      	adds	r6, #1
 80080ec:	e7ee      	b.n	80080cc <__libc_init_array+0xc>
 80080ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f2:	4798      	blx	r3
 80080f4:	3601      	adds	r6, #1
 80080f6:	e7f2      	b.n	80080de <__libc_init_array+0x1e>
 80080f8:	08008438 	.word	0x08008438
 80080fc:	08008438 	.word	0x08008438
 8008100:	08008438 	.word	0x08008438
 8008104:	0800843c 	.word	0x0800843c

08008108 <memcpy>:
 8008108:	440a      	add	r2, r1
 800810a:	4291      	cmp	r1, r2
 800810c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008110:	d100      	bne.n	8008114 <memcpy+0xc>
 8008112:	4770      	bx	lr
 8008114:	b510      	push	{r4, lr}
 8008116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800811e:	4291      	cmp	r1, r2
 8008120:	d1f9      	bne.n	8008116 <memcpy+0xe>
 8008122:	bd10      	pop	{r4, pc}

08008124 <memset>:
 8008124:	4402      	add	r2, r0
 8008126:	4603      	mov	r3, r0
 8008128:	4293      	cmp	r3, r2
 800812a:	d100      	bne.n	800812e <memset+0xa>
 800812c:	4770      	bx	lr
 800812e:	f803 1b01 	strb.w	r1, [r3], #1
 8008132:	e7f9      	b.n	8008128 <memset+0x4>

08008134 <asin>:
 8008134:	b508      	push	{r3, lr}
 8008136:	ed2d 8b04 	vpush	{d8-d9}
 800813a:	eeb0 8b40 	vmov.f64	d8, d0
 800813e:	f000 f827 	bl	8008190 <__ieee754_asin>
 8008142:	eeb4 8b48 	vcmp.f64	d8, d8
 8008146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814a:	eeb0 9b40 	vmov.f64	d9, d0
 800814e:	d615      	bvs.n	800817c <asin+0x48>
 8008150:	eeb0 0b48 	vmov.f64	d0, d8
 8008154:	f000 f92d 	bl	80083b2 <fabs>
 8008158:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800815c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008164:	dd0a      	ble.n	800817c <asin+0x48>
 8008166:	f7ff ffa5 	bl	80080b4 <__errno>
 800816a:	ecbd 8b04 	vpop	{d8-d9}
 800816e:	2321      	movs	r3, #33	; 0x21
 8008170:	6003      	str	r3, [r0, #0]
 8008172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008176:	4804      	ldr	r0, [pc, #16]	; (8008188 <asin+0x54>)
 8008178:	f000 b926 	b.w	80083c8 <nan>
 800817c:	eeb0 0b49 	vmov.f64	d0, d9
 8008180:	ecbd 8b04 	vpop	{d8-d9}
 8008184:	bd08      	pop	{r3, pc}
 8008186:	bf00      	nop
 8008188:	0800842c 	.word	0x0800842c
 800818c:	00000000 	.word	0x00000000

08008190 <__ieee754_asin>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	ee10 5a90 	vmov	r5, s1
 8008196:	4b82      	ldr	r3, [pc, #520]	; (80083a0 <__ieee754_asin+0x210>)
 8008198:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800819c:	429c      	cmp	r4, r3
 800819e:	ed2d 8b06 	vpush	{d8-d10}
 80081a2:	dd19      	ble.n	80081d8 <__ieee754_asin+0x48>
 80081a4:	ee10 3a10 	vmov	r3, s0
 80081a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80081ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80081b0:	4323      	orrs	r3, r4
 80081b2:	d10c      	bne.n	80081ce <__ieee754_asin+0x3e>
 80081b4:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8008328 <__ieee754_asin+0x198>
 80081b8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8008330 <__ieee754_asin+0x1a0>
 80081bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80081c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80081c4:	eeb0 0b47 	vmov.f64	d0, d7
 80081c8:	ecbd 8b06 	vpop	{d8-d10}
 80081cc:	bd38      	pop	{r3, r4, r5, pc}
 80081ce:	ee30 7b40 	vsub.f64	d7, d0, d0
 80081d2:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80081d6:	e7f7      	b.n	80081c8 <__ieee754_asin+0x38>
 80081d8:	4b72      	ldr	r3, [pc, #456]	; (80083a4 <__ieee754_asin+0x214>)
 80081da:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80081de:	429c      	cmp	r4, r3
 80081e0:	dc0b      	bgt.n	80081fa <__ieee754_asin+0x6a>
 80081e2:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 80081e6:	da52      	bge.n	800828e <__ieee754_asin+0xfe>
 80081e8:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8008338 <__ieee754_asin+0x1a8>
 80081ec:	ee30 7b07 	vadd.f64	d7, d0, d7
 80081f0:	eeb4 7bc9 	vcmpe.f64	d7, d9
 80081f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f8:	dce6      	bgt.n	80081c8 <__ieee754_asin+0x38>
 80081fa:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80081fe:	f000 f8d8 	bl	80083b2 <fabs>
 8008202:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8008340 <__ieee754_asin+0x1b0>
 8008206:	ee39 0b40 	vsub.f64	d0, d9, d0
 800820a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800820e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8008348 <__ieee754_asin+0x1b8>
 8008212:	eeb0 0b48 	vmov.f64	d0, d8
 8008216:	eea8 6b07 	vfma.f64	d6, d8, d7
 800821a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8008350 <__ieee754_asin+0x1c0>
 800821e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8008222:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8008358 <__ieee754_asin+0x1c8>
 8008226:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8008360 <__ieee754_asin+0x1d0>
 800822a:	eea7 6b08 	vfma.f64	d6, d7, d8
 800822e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8008368 <__ieee754_asin+0x1d8>
 8008232:	eea6 7b08 	vfma.f64	d7, d6, d8
 8008236:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8008370 <__ieee754_asin+0x1e0>
 800823a:	eea7 ab08 	vfma.f64	d10, d7, d8
 800823e:	ee2a ab08 	vmul.f64	d10, d10, d8
 8008242:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8008378 <__ieee754_asin+0x1e8>
 8008246:	eea8 7b06 	vfma.f64	d7, d8, d6
 800824a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8008380 <__ieee754_asin+0x1f0>
 800824e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8008252:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8008388 <__ieee754_asin+0x1f8>
 8008256:	eea6 7b08 	vfma.f64	d7, d6, d8
 800825a:	eea7 9b08 	vfma.f64	d9, d7, d8
 800825e:	f000 f8a5 	bl	80083ac <__ieee754_sqrt>
 8008262:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8008266:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800826a:	4b4f      	ldr	r3, [pc, #316]	; (80083a8 <__ieee754_asin+0x218>)
 800826c:	429c      	cmp	r4, r3
 800826e:	dd3d      	ble.n	80082ec <__ieee754_asin+0x15c>
 8008270:	eea0 0b05 	vfma.f64	d0, d0, d5
 8008274:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8008390 <__ieee754_asin+0x200>
 8008278:	eea0 7b04 	vfma.f64	d7, d0, d4
 800827c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8008330 <__ieee754_asin+0x1a0>
 8008280:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008284:	2d00      	cmp	r5, #0
 8008286:	bfd8      	it	le
 8008288:	eeb1 0b40 	vnegle.f64	d0, d0
 800828c:	e79c      	b.n	80081c8 <__ieee754_asin+0x38>
 800828e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008340 <__ieee754_asin+0x1b0>
 8008292:	ee20 7b00 	vmul.f64	d7, d0, d0
 8008296:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8008348 <__ieee754_asin+0x1b8>
 800829a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800829e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008350 <__ieee754_asin+0x1c0>
 80082a2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80082a6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8008358 <__ieee754_asin+0x1c8>
 80082aa:	eea5 6b07 	vfma.f64	d6, d5, d7
 80082ae:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8008368 <__ieee754_asin+0x1d8>
 80082b2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80082b6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8008360 <__ieee754_asin+0x1d0>
 80082ba:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8008370 <__ieee754_asin+0x1e0>
 80082be:	eea5 6b07 	vfma.f64	d6, d5, d7
 80082c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80082c6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008378 <__ieee754_asin+0x1e8>
 80082ca:	eea7 5b04 	vfma.f64	d5, d7, d4
 80082ce:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8008380 <__ieee754_asin+0x1f0>
 80082d2:	eea5 4b07 	vfma.f64	d4, d5, d7
 80082d6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008388 <__ieee754_asin+0x1f8>
 80082da:	eea4 5b07 	vfma.f64	d5, d4, d7
 80082de:	eea5 9b07 	vfma.f64	d9, d5, d7
 80082e2:	ee86 7b09 	vdiv.f64	d7, d6, d9
 80082e6:	eea0 0b07 	vfma.f64	d0, d0, d7
 80082ea:	e76d      	b.n	80081c8 <__ieee754_asin+0x38>
 80082ec:	ec53 2b10 	vmov	r2, r3, d0
 80082f0:	2200      	movs	r2, #0
 80082f2:	ec43 2b16 	vmov	d6, r2, r3
 80082f6:	ee30 7b06 	vadd.f64	d7, d0, d6
 80082fa:	eea6 8b46 	vfms.f64	d8, d6, d6
 80082fe:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8008302:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8008328 <__ieee754_asin+0x198>
 8008306:	ee30 0b00 	vadd.f64	d0, d0, d0
 800830a:	eea3 7b44 	vfms.f64	d7, d3, d4
 800830e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8008312:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8008398 <__ieee754_asin+0x208>
 8008316:	eeb0 0b45 	vmov.f64	d0, d5
 800831a:	eea6 0b44 	vfms.f64	d0, d6, d4
 800831e:	ee37 0b40 	vsub.f64	d0, d7, d0
 8008322:	ee35 0b40 	vsub.f64	d0, d5, d0
 8008326:	e7ad      	b.n	8008284 <__ieee754_asin+0xf4>
 8008328:	33145c07 	.word	0x33145c07
 800832c:	3c91a626 	.word	0x3c91a626
 8008330:	54442d18 	.word	0x54442d18
 8008334:	3ff921fb 	.word	0x3ff921fb
 8008338:	8800759c 	.word	0x8800759c
 800833c:	7e37e43c 	.word	0x7e37e43c
 8008340:	0dfdf709 	.word	0x0dfdf709
 8008344:	3f023de1 	.word	0x3f023de1
 8008348:	7501b288 	.word	0x7501b288
 800834c:	3f49efe0 	.word	0x3f49efe0
 8008350:	b5688f3b 	.word	0xb5688f3b
 8008354:	bfa48228 	.word	0xbfa48228
 8008358:	0e884455 	.word	0x0e884455
 800835c:	3fc9c155 	.word	0x3fc9c155
 8008360:	55555555 	.word	0x55555555
 8008364:	3fc55555 	.word	0x3fc55555
 8008368:	03eb6f7d 	.word	0x03eb6f7d
 800836c:	bfd4d612 	.word	0xbfd4d612
 8008370:	b12e9282 	.word	0xb12e9282
 8008374:	3fb3b8c5 	.word	0x3fb3b8c5
 8008378:	1b8d0159 	.word	0x1b8d0159
 800837c:	bfe6066c 	.word	0xbfe6066c
 8008380:	9c598ac8 	.word	0x9c598ac8
 8008384:	40002ae5 	.word	0x40002ae5
 8008388:	1c8a2d4b 	.word	0x1c8a2d4b
 800838c:	c0033a27 	.word	0xc0033a27
 8008390:	33145c07 	.word	0x33145c07
 8008394:	bc91a626 	.word	0xbc91a626
 8008398:	54442d18 	.word	0x54442d18
 800839c:	3fe921fb 	.word	0x3fe921fb
 80083a0:	3fefffff 	.word	0x3fefffff
 80083a4:	3fdfffff 	.word	0x3fdfffff
 80083a8:	3fef3332 	.word	0x3fef3332

080083ac <__ieee754_sqrt>:
 80083ac:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80083b0:	4770      	bx	lr

080083b2 <fabs>:
 80083b2:	ec51 0b10 	vmov	r0, r1, d0
 80083b6:	ee10 2a10 	vmov	r2, s0
 80083ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083be:	ec43 2b10 	vmov	d0, r2, r3
 80083c2:	4770      	bx	lr
 80083c4:	0000      	movs	r0, r0
	...

080083c8 <nan>:
 80083c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80083d0 <nan+0x8>
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	00000000 	.word	0x00000000
 80083d4:	7ff80000 	.word	0x7ff80000

080083d8 <_init>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr

080083e4 <_fini>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	bf00      	nop
 80083e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	469e      	mov	lr, r3
 80083ee:	4770      	bx	lr
