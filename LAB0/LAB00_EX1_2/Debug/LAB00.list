
LAB00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000694c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b64  08006b64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b6c  08006b6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  2000000c  08006b80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08006b80  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bfd  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296f  00000000  00000000  00037c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003ba08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a2c  00000000  00000000  0003cd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2a0  00000000  00000000  0006578c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001011c4  00000000  00000000  0007fa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180bf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005708  00000000  00000000  00180c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006b2c 	.word	0x08006b2c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006b2c 	.word	0x08006b2c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f001 fdcb 	bl	80020da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f842 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 fe6c 	bl	8001224 <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 fe4c 	bl	80011e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000550:	f000 fe1a 	bl	8001188 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000554:	f000 f8ac 	bl	80006b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000558:	f000 f8fc 	bl	8000754 <MX_I2C1_Init>
  MX_I2C2_Init();
 800055c:	f000 f93a 	bl	80007d4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000560:	f000 f978 	bl	8000854 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000564:	f000 f9b4 	bl	80008d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000568:	f000 fa84 	bl	8000a74 <MX_TIM2_Init>
  MX_TIM3_Init();
 800056c:	f000 fb1e 	bl	8000bac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000570:	f000 fb72 	bl	8000c58 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000574:	f000 fbc6 	bl	8000d04 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000578:	f000 fc74 	bl	8000e64 <MX_TIM8_Init>
  MX_UART4_Init();
 800057c:	f000 fd44 	bl	8001008 <MX_UART4_Init>
  MX_UART5_Init();
 8000580:	f000 fd72 	bl	8001068 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000584:	f000 fda0 	bl	80010c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000588:	f000 fdce 	bl	8001128 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800058c:	f000 fc32 	bl	8000df4 <MX_TIM6_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8)){
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <main+0x88>)
 8000596:	f002 fe5d 	bl	8003254 <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d008      	beq.n	80005b2 <main+0x76>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	4808      	ldr	r0, [pc, #32]	; (80005c8 <main+0x8c>)
 80005a6:	f002 fe6d 	bl	8003284 <HAL_GPIO_WritePin>
	  	  HAL_Delay(100);
 80005aa:	2064      	movs	r0, #100	; 0x64
 80005ac:	f001 fdf2 	bl	8002194 <HAL_Delay>
 80005b0:	e7ee      	b.n	8000590 <main+0x54>
	  }
	  else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <main+0x8c>)
 80005b8:	f002 fe64 	bl	8003284 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80005bc:	2064      	movs	r0, #100	; 0x64
 80005be:	f001 fde9 	bl	8002194 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8)){
 80005c2:	e7e5      	b.n	8000590 <main+0x54>
 80005c4:	40021400 	.word	0x40021400
 80005c8:	40021000 	.word	0x40021000

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2234      	movs	r2, #52	; 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 fa9e 	bl	8006b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f0:	f002 ffae 	bl	8003550 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <SystemClock_Config+0xdc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <SystemClock_Config+0xdc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <SystemClock_Config+0xdc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <SystemClock_Config+0xe0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000614:	4a25      	ldr	r2, [pc, #148]	; (80006ac <SystemClock_Config+0xe0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <SystemClock_Config+0xe0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000640:	2360      	movs	r3, #96	; 0x60
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4618      	mov	r0, r3
 8000656:	f002 ffdb 	bl	8003610 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000660:	f000 ff4c 	bl	80014fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000664:	f002 ff84 	bl	8003570 <HAL_PWREx_EnableOverDrive>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800066e:	f000 ff45 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2103      	movs	r1, #3
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fa6c 	bl	8003b6c <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800069a:	f000 ff2f 	bl	80014fc <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_ADC1_Init+0x98>)
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <MX_ADC1_Init+0x9c>)
 80006c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_ADC1_Init+0x98>)
 80006ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_ADC1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ADC1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_ADC1_Init+0x98>)
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <MX_ADC1_Init+0xa0>)
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_ADC1_Init+0x98>)
 80006fe:	2201      	movs	r2, #1
 8000700:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_ADC1_Init+0x98>)
 800070c:	2201      	movs	r2, #1
 800070e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_ADC1_Init+0x98>)
 8000712:	f001 fd63 	bl	80021dc <HAL_ADC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800071c:	f000 feee 	bl	80014fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000720:	2303      	movs	r3, #3
 8000722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000724:	2301      	movs	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_ADC1_Init+0x98>)
 8000732:	f001 fd97 	bl	8002264 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800073c:	f000 fede 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000028 	.word	0x20000028
 800074c:	40012000 	.word	0x40012000
 8000750:	0f000001 	.word	0x0f000001

08000754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_I2C1_Init+0x74>)
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_I2C1_Init+0x78>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <MX_I2C1_Init+0x7c>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_I2C1_Init+0x74>)
 800076c:	2201      	movs	r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000790:	f002 fdb6 	bl	8003300 <HAL_I2C_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800079a:	f000 feaf 	bl	80014fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <MX_I2C1_Init+0x74>)
 80007a2:	f002 fe3d 	bl	8003420 <HAL_I2CEx_ConfigAnalogFilter>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007ac:	f000 fea6 	bl	80014fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_I2C1_Init+0x74>)
 80007b4:	f002 fe7f 	bl	80034b6 <HAL_I2CEx_ConfigDigitalFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 fe9d 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000070 	.word	0x20000070
 80007cc:	40005400 	.word	0x40005400
 80007d0:	20303e5d 	.word	0x20303e5d

080007d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_I2C2_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_I2C2_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_I2C2_Init+0x74>)
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <MX_I2C2_Init+0x7c>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_I2C2_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_I2C2_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_I2C2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2C2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_I2C2_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_I2C2_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_I2C2_Init+0x74>)
 8000810:	f002 fd76 	bl	8003300 <HAL_I2C_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800081a:	f000 fe6f 	bl	80014fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <MX_I2C2_Init+0x74>)
 8000822:	f002 fdfd 	bl	8003420 <HAL_I2CEx_ConfigAnalogFilter>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800082c:	f000 fe66 	bl	80014fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_I2C2_Init+0x74>)
 8000834:	f002 fe3f 	bl	80034b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 fe5d 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000c4 	.word	0x200000c4
 800084c:	40005800 	.word	0x40005800
 8000850:	20303e5d 	.word	0x20303e5d

08000854 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_SPI1_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_SPI1_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_SPI1_Init+0x74>)
 8000860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_SPI1_Init+0x74>)
 800086e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000872:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_SPI1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_SPI1_Init+0x74>)
 8000882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000886:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_SPI1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_SPI1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_SPI1_Init+0x74>)
 80008a2:	2207      	movs	r2, #7
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_SPI1_Init+0x74>)
 80008ae:	2208      	movs	r2, #8
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_SPI1_Init+0x74>)
 80008b4:	f003 ffa8 	bl	8004808 <HAL_SPI_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 fe1d 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000118 	.word	0x20000118
 80008cc:	40013000 	.word	0x40013000

080008d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09a      	sub	sp, #104	; 0x68
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	222c      	movs	r2, #44	; 0x2c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f006 f906 	bl	8006b1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000910:	4b56      	ldr	r3, [pc, #344]	; (8000a6c <MX_TIM1_Init+0x19c>)
 8000912:	4a57      	ldr	r2, [pc, #348]	; (8000a70 <MX_TIM1_Init+0x1a0>)
 8000914:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <MX_TIM1_Init+0x19c>)
 8000918:	f240 32bf 	movw	r2, #959	; 0x3bf
 800091c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b53      	ldr	r3, [pc, #332]	; (8000a6c <MX_TIM1_Init+0x19c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000924:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <MX_TIM1_Init+0x19c>)
 8000926:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800092a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b4f      	ldr	r3, [pc, #316]	; (8000a6c <MX_TIM1_Init+0x19c>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000932:	4b4e      	ldr	r3, [pc, #312]	; (8000a6c <MX_TIM1_Init+0x19c>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <MX_TIM1_Init+0x19c>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800093e:	484b      	ldr	r0, [pc, #300]	; (8000a6c <MX_TIM1_Init+0x19c>)
 8000940:	f004 f80d 	bl	800495e <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800094a:	f000 fdd7 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000952:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000958:	4619      	mov	r1, r3
 800095a:	4844      	ldr	r0, [pc, #272]	; (8000a6c <MX_TIM1_Init+0x19c>)
 800095c:	f004 fd6a 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000966:	f000 fdc9 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800096a:	4840      	ldr	r0, [pc, #256]	; (8000a6c <MX_TIM1_Init+0x19c>)
 800096c:	f004 f84e 	bl	8004a0c <HAL_TIM_OC_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000976:	f000 fdc1 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098a:	4619      	mov	r1, r3
 800098c:	4837      	ldr	r0, [pc, #220]	; (8000a6c <MX_TIM1_Init+0x19c>)
 800098e:	f005 fb0f 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000998:	f000 fdb0 	bl	80014fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 800099c:	2350      	movs	r3, #80	; 0x50
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009a4:	2302      	movs	r3, #2
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	482a      	ldr	r0, [pc, #168]	; (8000a6c <MX_TIM1_Init+0x19c>)
 80009c2:	f004 fb0d 	bl	8004fe0 <HAL_TIM_OC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80009cc:	f000 fd96 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d4:	2204      	movs	r2, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4824      	ldr	r0, [pc, #144]	; (8000a6c <MX_TIM1_Init+0x19c>)
 80009da:	f004 fb01 	bl	8004fe0 <HAL_TIM_OC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80009e4:	f000 fd8a 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ec:	2208      	movs	r2, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	481e      	ldr	r0, [pc, #120]	; (8000a6c <MX_TIM1_Init+0x19c>)
 80009f2:	f004 faf5 	bl	8004fe0 <HAL_TIM_OC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80009fc:	f000 fd7e 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a04:	220c      	movs	r2, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	4818      	ldr	r0, [pc, #96]	; (8000a6c <MX_TIM1_Init+0x19c>)
 8000a0a:	f004 fae9 	bl	8004fe0 <HAL_TIM_OC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000a14:	f000 fd72 	bl	80014fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM1_Init+0x19c>)
 8000a4e:	f005 fb3d 	bl	80060cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000a58:	f000 fd50 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM1_Init+0x19c>)
 8000a5e:	f001 f833 	bl	8001ac8 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3768      	adds	r7, #104	; 0x68
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000017c 	.word	0x2000017c
 8000a70:	40010000 	.word	0x40010000

08000a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b092      	sub	sp, #72	; 0x48
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	615a      	str	r2, [r3, #20]
 8000aa6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab4:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC_VALUE;
 8000abc:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000abe:	225f      	movs	r2, #95	; 0x5f
 8000ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR_VALUE;
 8000ac8:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000aca:	4a37      	ldr	r2, [pc, #220]	; (8000ba8 <MX_TIM2_Init+0x134>)
 8000acc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ada:	4832      	ldr	r0, [pc, #200]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000adc:	f003 ff3f 	bl	800495e <HAL_TIM_Base_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000ae6:	f000 fd09 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000af4:	4619      	mov	r1, r3
 8000af6:	482b      	ldr	r0, [pc, #172]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000af8:	f004 fc9c 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b02:	f000 fcfb 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b06:	4827      	ldr	r0, [pc, #156]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000b08:	f003 ffe1 	bl	8004ace <HAL_TIM_PWM_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000b12:	f000 fcf3 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000b18:	f004 f83a 	bl	8004b90 <HAL_TIM_IC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b22:	f000 fceb 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b32:	4619      	mov	r1, r3
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000b36:	f005 fa3b 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000b40:	f000 fcdc 	bl	80014fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	; 0x60
 8000b46:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = TIM2_CCR1_VALUE;
 8000b48:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b4c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000b60:	f004 fb54 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000b6a:	f000 fcc7 	bl	80014fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000b6e:	230a      	movs	r3, #10
 8000b70:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b72:	2301      	movs	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2208      	movs	r2, #8
 8000b82:	4619      	mov	r1, r3
 8000b84:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000b86:	f004 faa5 	bl	80050d4 <HAL_TIM_IC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000b90:	f000 fcb4 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MX_TIM2_Init+0x130>)
 8000b96:	f000 ff97 	bl	8001ac8 <HAL_TIM_MspPostInit>

}
 8000b9a:	bf00      	nop
 8000b9c:	3748      	adds	r7, #72	; 0x48
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200001c8 	.word	0x200001c8
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2224      	movs	r2, #36	; 0x24
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 ffae 	bl	8006b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_TIM3_Init+0xa4>)
 8000bcc:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <MX_TIM3_Init+0xa8>)
 8000bce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_TIM3_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_TIM3_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_TIM3_Init+0xa4>)
 8000bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_TIM3_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_TIM3_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000c00:	230f      	movs	r3, #15
 8000c02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000c10:	230f      	movs	r3, #15
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_TIM3_Init+0xa4>)
 8000c1c:	f004 f81a 	bl	8004c54 <HAL_TIM_Encoder_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c26:	f000 fc69 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <MX_TIM3_Init+0xa4>)
 8000c38:	f005 f9ba 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c42:	f000 fc5b 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	; 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000214 	.word	0x20000214
 8000c54:	40000400 	.word	0x40000400

08000c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2224      	movs	r2, #36	; 0x24
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 ff58 	bl	8006b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_TIM4_Init+0xa4>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <MX_TIM4_Init+0xa8>)
 8000c7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_TIM4_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_TIM4_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_TIM4_Init+0xa4>)
 8000c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_TIM4_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM4_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000cac:	230f      	movs	r3, #15
 8000cae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM4_Init+0xa4>)
 8000cc8:	f003 ffc4 	bl	8004c54 <HAL_TIM_Encoder_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cd2:	f000 fc13 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_TIM4_Init+0xa4>)
 8000ce4:	f005 f964 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cee:	f000 fc05 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	; 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000260 	.word	0x20000260
 8000d00:	40000800 	.word	0x40000800

08000d04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	; 0x38
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000d38:	4a2d      	ldr	r2, [pc, #180]	; (8000df0 <MX_TIM5_Init+0xec>)
 8000d3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = TIM5_PSC_VALUE;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000d3e:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000d42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d44:	4b29      	ldr	r3, [pc, #164]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = TIM5_ARR_VALUE;
 8000d4a:	4b28      	ldr	r3, [pc, #160]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000d4c:	22c8      	movs	r2, #200	; 0xc8
 8000d4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d5c:	4823      	ldr	r0, [pc, #140]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000d5e:	f003 fdfe 	bl	800495e <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000d68:	f000 fbc8 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d76:	4619      	mov	r1, r3
 8000d78:	481c      	ldr	r0, [pc, #112]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000d7a:	f004 fb5b 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000d84:	f000 fbba 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000d88:	4818      	ldr	r0, [pc, #96]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000d8a:	f003 fea0 	bl	8004ace <HAL_TIM_PWM_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000d94:	f000 fbb2 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000da8:	f005 f902 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000db2:	f000 fba3 	bl	80014fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db6:	2360      	movs	r3, #96	; 0x60
 8000db8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = TIM5_CCR1_VALUE;
 8000dba:	2364      	movs	r3, #100	; 0x64
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000dce:	f004 fa1d 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8000dd8:	f000 fb90 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <MX_TIM5_Init+0xe8>)
 8000dde:	f000 fe73 	bl	8001ac8 <HAL_TIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200002ac 	.word	0x200002ac
 8000df0:	40000c00 	.word	0x40000c00

08000df4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_TIM6_Init+0x68>)
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <MX_TIM6_Init+0x6c>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_TIM6_Init+0x68>)
 8000e0c:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000e10:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_TIM6_Init+0x68>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_TIM6_Init+0x68>)
 8000e1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e1e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_TIM6_Init+0x68>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_TIM6_Init+0x68>)
 8000e28:	f003 fd99 	bl	800495e <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000e32:	f000 fb63 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_TIM6_Init+0x68>)
 8000e44:	f005 f8b4 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000e4e:	f000 fb55 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200002f8 	.word	0x200002f8
 8000e60:	40001000 	.word	0x40001000

08000e64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09a      	sub	sp, #104	; 0x68
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	222c      	movs	r2, #44	; 0x2c
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f005 fe3c 	bl	8006b1c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ea4:	4b56      	ldr	r3, [pc, #344]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000ea6:	4a57      	ldr	r2, [pc, #348]	; (8001004 <MX_TIM8_Init+0x1a0>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8000eaa:	4b55      	ldr	r3, [pc, #340]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000eac:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000eb0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb2:	4b53      	ldr	r3, [pc, #332]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8000eb8:	4b51      	ldr	r3, [pc, #324]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000eba:	f240 128f 	movw	r2, #399	; 0x18f
 8000ebe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec0:	4b4f      	ldr	r3, [pc, #316]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ec6:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ecc:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ed2:	484b      	ldr	r0, [pc, #300]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000ed4:	f003 fd43 	bl	800495e <HAL_TIM_Base_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8000ede:	f000 fb0d 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ee8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eec:	4619      	mov	r1, r3
 8000eee:	4844      	ldr	r0, [pc, #272]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000ef0:	f004 faa0 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8000efa:	f000 faff 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000efe:	4840      	ldr	r0, [pc, #256]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000f00:	f003 fde5 	bl	8004ace <HAL_TIM_PWM_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8000f0a:	f000 faf7 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4837      	ldr	r0, [pc, #220]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000f22:	f005 f845 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8000f2c:	f000 fae6 	bl	80014fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f30:	2360      	movs	r3, #96	; 0x60
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	482a      	ldr	r0, [pc, #168]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000f56:	f004 f959 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8000f60:	f000 facc 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4824      	ldr	r0, [pc, #144]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000f6e:	f004 f94d 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8000f78:	f000 fac0 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f80:	2208      	movs	r2, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	481e      	ldr	r0, [pc, #120]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000f86:	f004 f941 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8000f90:	f000 fab4 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f98:	220c      	movs	r2, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4818      	ldr	r0, [pc, #96]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000f9e:	f004 f935 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8000fa8:	f000 faa8 	bl	80014fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4807      	ldr	r0, [pc, #28]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000fe2:	f005 f873 	bl	80060cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8000fec:	f000 fa86 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <MX_TIM8_Init+0x19c>)
 8000ff2:	f000 fd69 	bl	8001ac8 <HAL_TIM_MspPostInit>

}
 8000ff6:	bf00      	nop
 8000ff8:	3768      	adds	r7, #104	; 0x68
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000344 	.word	0x20000344
 8001004:	40010400 	.word	0x40010400

08001008 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_UART4_Init+0x58>)
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <MX_UART4_Init+0x5c>)
 8001010:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_UART4_Init+0x58>)
 8001014:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001018:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_UART4_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_UART4_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_UART4_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_UART4_Init+0x58>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_UART4_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_UART4_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_UART4_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_UART4_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_UART4_Init+0x58>)
 800104c:	f005 f8da 	bl	8006204 <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001056:	f000 fa51 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200003f0 	.word	0x200003f0
 8001064:	40004c00 	.word	0x40004c00

08001068 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_UART5_Init+0x58>)
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <MX_UART5_Init+0x5c>)
 8001070:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_UART5_Init+0x58>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_UART5_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_UART5_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_UART5_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_UART5_Init+0x58>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_UART5_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_UART5_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_UART5_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_UART5_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_UART5_Init+0x58>)
 80010ac:	f005 f8aa 	bl	8006204 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80010b6:	f000 fa21 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000478 	.word	0x20000478
 80010c4:	40005000 	.word	0x40005000

080010c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_USART1_UART_Init+0x58>)
 80010ce:	4a15      	ldr	r2, [pc, #84]	; (8001124 <MX_USART1_UART_Init+0x5c>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_USART1_UART_Init+0x58>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_USART1_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_USART1_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_USART1_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_USART1_UART_Init+0x58>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_USART1_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_USART1_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_USART1_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_USART1_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_USART1_UART_Init+0x58>)
 800110c:	f005 f87a 	bl	8006204 <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001116:	f000 f9f1 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000500 	.word	0x20000500
 8001124:	40011000 	.word	0x40011000

08001128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800112e:	4a15      	ldr	r2, [pc, #84]	; (8001184 <MX_USART2_UART_Init+0x5c>)
 8001130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800116c:	f005 f84a 	bl	8006204 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001176:	f000 f9c1 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000588 	.word	0x20000588
 8001184:	40004400 	.word	0x40004400

08001188 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <MX_USART3_UART_Init+0x5c>)
 8001190:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART3_UART_Init+0x58>)
 80011cc:	f005 f81a 	bl	8006204 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011d6:	f000 f991 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000610 	.word	0x20000610
 80011e4:	40004800 	.word	0x40004800

080011e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_DMA_Init+0x38>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <MX_DMA_Init+0x38>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_DMA_Init+0x38>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200c      	movs	r0, #12
 800120c:	f001 fb55 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001210:	200c      	movs	r0, #12
 8001212:	f001 fb6e 	bl	80028f2 <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123a:	4ba9      	ldr	r3, [pc, #676]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4aa8      	ldr	r2, [pc, #672]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4ba6      	ldr	r3, [pc, #664]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	623b      	str	r3, [r7, #32]
 8001250:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4ba3      	ldr	r3, [pc, #652]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4aa2      	ldr	r2, [pc, #648]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4ba0      	ldr	r3, [pc, #640]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	4b9d      	ldr	r3, [pc, #628]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a9c      	ldr	r2, [pc, #624]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b9a      	ldr	r3, [pc, #616]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	4b97      	ldr	r3, [pc, #604]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a96      	ldr	r2, [pc, #600]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b94      	ldr	r3, [pc, #592]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b91      	ldr	r3, [pc, #580]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a90      	ldr	r2, [pc, #576]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b8e      	ldr	r3, [pc, #568]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a8a      	ldr	r2, [pc, #552]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	4b85      	ldr	r3, [pc, #532]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a84      	ldr	r2, [pc, #528]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b82      	ldr	r3, [pc, #520]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e2:	4b7f      	ldr	r3, [pc, #508]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a7e      	ldr	r2, [pc, #504]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b7c      	ldr	r3, [pc, #496]	; (80014e0 <MX_GPIO_Init+0x2bc>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2178      	movs	r1, #120	; 0x78
 80012fe:	4879      	ldr	r0, [pc, #484]	; (80014e4 <MX_GPIO_Init+0x2c0>)
 8001300:	f001 ffc0 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f244 0181 	movw	r1, #16513	; 0x4081
 800130a:	4877      	ldr	r0, [pc, #476]	; (80014e8 <MX_GPIO_Init+0x2c4>)
 800130c:	f001 ffba 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	4875      	ldr	r0, [pc, #468]	; (80014ec <MX_GPIO_Init+0x2c8>)
 8001316:	f001 ffb5 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6;
 800131a:	2378      	movs	r3, #120	; 0x78
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	486c      	ldr	r0, [pc, #432]	; (80014e4 <MX_GPIO_Init+0x2c0>)
 8001332:	f001 fde3 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin;
 8001336:	2314      	movs	r3, #20
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800133a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	4869      	ldr	r0, [pc, #420]	; (80014f0 <MX_GPIO_Init+0x2cc>)
 800134c:	f001 fdd6 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
 8001350:	f643 4308 	movw	r3, #15368	; 0x3c08
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001356:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4619      	mov	r1, r3
 8001366:	4862      	ldr	r0, [pc, #392]	; (80014f0 <MX_GPIO_Init+0x2cc>)
 8001368:	f001 fdc8 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800136c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	485b      	ldr	r0, [pc, #364]	; (80014f0 <MX_GPIO_Init+0x2cc>)
 8001382:	f001 fdbb 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001386:	2332      	movs	r3, #50	; 0x32
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001396:	230b      	movs	r3, #11
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	4854      	ldr	r0, [pc, #336]	; (80014f4 <MX_GPIO_Init+0x2d0>)
 80013a2:	f001 fdab 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013a6:	2386      	movs	r3, #134	; 0x86
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b6:	230b      	movs	r3, #11
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	484d      	ldr	r0, [pc, #308]	; (80014f8 <MX_GPIO_Init+0x2d4>)
 80013c2:	f001 fd9b 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	4842      	ldr	r0, [pc, #264]	; (80014e8 <MX_GPIO_Init+0x2c4>)
 80013e0:	f001 fd8c 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f6:	230b      	movs	r3, #11
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	4839      	ldr	r0, [pc, #228]	; (80014e8 <MX_GPIO_Init+0x2c4>)
 8001402:	f001 fd7b 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001406:	2340      	movs	r3, #64	; 0x40
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	4833      	ldr	r0, [pc, #204]	; (80014ec <MX_GPIO_Init+0x2c8>)
 800141e:	f001 fd6d 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	482d      	ldr	r0, [pc, #180]	; (80014ec <MX_GPIO_Init+0x2c8>)
 8001436:	f001 fd61 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800143a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800144c:	230a      	movs	r3, #10
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	4828      	ldr	r0, [pc, #160]	; (80014f8 <MX_GPIO_Init+0x2d4>)
 8001458:	f001 fd50 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800145c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4821      	ldr	r0, [pc, #132]	; (80014f8 <MX_GPIO_Init+0x2d4>)
 8001472:	f001 fd43 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001476:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001488:	230b      	movs	r3, #11
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	4816      	ldr	r0, [pc, #88]	; (80014ec <MX_GPIO_Init+0x2c8>)
 8001494:	f001 fd32 	bl	8002efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2102      	movs	r1, #2
 800149c:	2008      	movs	r0, #8
 800149e:	f001 fa0c 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014a2:	2008      	movs	r0, #8
 80014a4:	f001 fa25 	bl	80028f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2102      	movs	r1, #2
 80014ac:	2009      	movs	r0, #9
 80014ae:	f001 fa04 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014b2:	2009      	movs	r0, #9
 80014b4:	f001 fa1d 	bl	80028f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2102      	movs	r1, #2
 80014bc:	200a      	movs	r0, #10
 80014be:	f001 f9fc 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014c2:	200a      	movs	r0, #10
 80014c4:	f001 fa15 	bl	80028f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2028      	movs	r0, #40	; 0x28
 80014ce:	f001 f9f4 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d2:	2028      	movs	r0, #40	; 0x28
 80014d4:	f001 fa0d 	bl	80028f2 <HAL_NVIC_EnableIRQ>

}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	; 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40021800 	.word	0x40021800
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020000 	.word	0x40020000

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	e7fe      	b.n	8001504 <Error_Handler+0x8>
	...

08001508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_MspInit+0x44>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_MspInit+0x44>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_MspInit+0x44>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_MspInit+0x44>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_MspInit+0x44>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_MspInit+0x44>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_ADC_MspInit+0x74>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d123      	bne.n	80015ba <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_ADC_MspInit+0x78>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <HAL_ADC_MspInit+0x78>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_ADC_MspInit+0x78>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_ADC_MspInit+0x78>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_ADC_MspInit+0x78>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_ADC_MspInit+0x78>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 80015a2:	2308      	movs	r3, #8
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a6:	2303      	movs	r3, #3
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_ADC_MspInit+0x7c>)
 80015b6:	f001 fca1 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40012000 	.word	0x40012000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0b0      	sub	sp, #192	; 0xc0
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2290      	movs	r2, #144	; 0x90
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 fa93 	bl	8006b1c <memset>
  if(hi2c->Instance==I2C1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a44      	ldr	r2, [pc, #272]	; (800170c <HAL_I2C_MspInit+0x13c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d13e      	bne.n	800167e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001604:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fcd1 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800161c:	f7ff ff6e 	bl	80014fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_I2C_MspInit+0x140>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	4a3a      	ldr	r2, [pc, #232]	; (8001710 <HAL_I2C_MspInit+0x140>)
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	6313      	str	r3, [r2, #48]	; 0x30
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_I2C_MspInit+0x140>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001638:	f44f 7340 	mov.w	r3, #768	; 0x300
 800163c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001640:	2312      	movs	r3, #18
 8001642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001646:	2301      	movs	r3, #1
 8001648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001652:	2304      	movs	r3, #4
 8001654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800165c:	4619      	mov	r1, r3
 800165e:	482d      	ldr	r0, [pc, #180]	; (8001714 <HAL_I2C_MspInit+0x144>)
 8001660:	f001 fc4c 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_I2C_MspInit+0x140>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	4a29      	ldr	r2, [pc, #164]	; (8001710 <HAL_I2C_MspInit+0x140>)
 800166a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800166e:	6413      	str	r3, [r2, #64]	; 0x40
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_I2C_MspInit+0x140>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800167c:	e041      	b.n	8001702 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a25      	ldr	r2, [pc, #148]	; (8001718 <HAL_I2C_MspInit+0x148>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d13c      	bne.n	8001702 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800168c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fc8d 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80016a4:	f7ff ff2a 	bl	80014fc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_I2C_MspInit+0x140>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4a18      	ldr	r2, [pc, #96]	; (8001710 <HAL_I2C_MspInit+0x140>)
 80016ae:	f043 0320 	orr.w	r3, r3, #32
 80016b2:	6313      	str	r3, [r2, #48]	; 0x30
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_I2C_MspInit+0x140>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c6:	2312      	movs	r3, #18
 80016c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016d8:	2304      	movs	r3, #4
 80016da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e2:	4619      	mov	r1, r3
 80016e4:	480d      	ldr	r0, [pc, #52]	; (800171c <HAL_I2C_MspInit+0x14c>)
 80016e6:	f001 fc09 	bl	8002efc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_I2C_MspInit+0x140>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_I2C_MspInit+0x140>)
 80016f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_I2C_MspInit+0x140>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
}
 8001702:	bf00      	nop
 8001704:	37c0      	adds	r7, #192	; 0xc0
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40005400 	.word	0x40005400
 8001710:	40023800 	.word	0x40023800
 8001714:	40020400 	.word	0x40020400
 8001718:	40005800 	.word	0x40005800
 800171c:	40021400 	.word	0x40021400

08001720 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a33      	ldr	r2, [pc, #204]	; (800180c <HAL_SPI_MspInit+0xec>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d160      	bne.n	8001804 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001742:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_SPI_MspInit+0xf0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017a2:	2320      	movs	r3, #32
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b2:	2305      	movs	r3, #5
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4815      	ldr	r0, [pc, #84]	; (8001814 <HAL_SPI_MspInit+0xf4>)
 80017be:	f001 fb9d 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017d2:	2305      	movs	r3, #5
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	480e      	ldr	r0, [pc, #56]	; (8001818 <HAL_SPI_MspInit+0xf8>)
 80017de:	f001 fb8d 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017f4:	2305      	movs	r3, #5
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <HAL_SPI_MspInit+0xfc>)
 8001800:	f001 fb7c 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	3730      	adds	r7, #48	; 0x30
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40013000 	.word	0x40013000
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40021800 	.word	0x40021800

08001820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a5f      	ldr	r2, [pc, #380]	; (80019bc <HAL_TIM_Base_MspInit+0x19c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10c      	bne.n	800185c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001842:	4b5f      	ldr	r3, [pc, #380]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a5e      	ldr	r2, [pc, #376]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800185a:	e0aa      	b.n	80019b2 <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001864:	d168      	bne.n	8001938 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	4b56      	ldr	r3, [pc, #344]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a55      	ldr	r2, [pc, #340]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a4f      	ldr	r2, [pc, #316]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a8:	2301      	movs	r3, #1
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	4844      	ldr	r0, [pc, #272]	; (80019c4 <HAL_TIM_Base_MspInit+0x1a4>)
 80018b4:	f001 fb22 	bl	8002efc <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80018b8:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018ba:	4a44      	ldr	r2, [pc, #272]	; (80019cc <HAL_TIM_Base_MspInit+0x1ac>)
 80018bc:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80018c4:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c6:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80018cc:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d8:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e0:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e8:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f0:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80018f2:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80018fe:	4832      	ldr	r0, [pc, #200]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 8001900:	f001 f812 	bl	8002928 <HAL_DMA_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 800190a:	f7ff fdf7 	bl	80014fc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a2d      	ldr	r2, [pc, #180]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 8001912:	621a      	str	r2, [r3, #32]
 8001914:	4a2c      	ldr	r2, [pc, #176]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a2a      	ldr	r2, [pc, #168]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001920:	4a29      	ldr	r2, [pc, #164]	; (80019c8 <HAL_TIM_Base_MspInit+0x1a8>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2101      	movs	r1, #1
 800192a:	201c      	movs	r0, #28
 800192c:	f000 ffc5 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001930:	201c      	movs	r0, #28
 8001932:	f000 ffde 	bl	80028f2 <HAL_NVIC_EnableIRQ>
}
 8001936:	e03c      	b.n	80019b2 <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM5)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <HAL_TIM_Base_MspInit+0x1b0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d10c      	bne.n	800195c <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]
}
 800195a:	e02a      	b.n	80019b2 <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM6)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <HAL_TIM_Base_MspInit+0x1b4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d114      	bne.n	8001990 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 800196c:	f043 0310 	orr.w	r3, r3, #16
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2103      	movs	r1, #3
 8001982:	2036      	movs	r0, #54	; 0x36
 8001984:	f000 ff99 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001988:	2036      	movs	r0, #54	; 0x36
 800198a:	f000 ffb2 	bl	80028f2 <HAL_NVIC_EnableIRQ>
}
 800198e:	e010      	b.n	80019b2 <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM8)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_TIM_Base_MspInit+0x1b8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10b      	bne.n	80019b2 <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_TIM_Base_MspInit+0x1a0>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
}
 80019b2:	bf00      	nop
 80019b4:	3738      	adds	r7, #56	; 0x38
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020400 	.word	0x40020400
 80019c8:	20000390 	.word	0x20000390
 80019cc:	40026028 	.word	0x40026028
 80019d0:	40000c00 	.word	0x40000c00
 80019d4:	40001000 	.word	0x40001000
 80019d8:	40010400 	.word	0x40010400

080019dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <HAL_TIM_Encoder_MspInit+0xd8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d128      	bne.n	8001a50 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001a2e:	2330      	movs	r3, #48	; 0x30
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	481c      	ldr	r0, [pc, #112]	; (8001abc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001a4a:	f001 fa57 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a4e:	e02d      	b.n	8001aac <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d128      	bne.n	8001aac <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001a8a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001aa8:	f001 fa28 	bl	8002efc <HAL_GPIO_Init>
}
 8001aac:	bf00      	nop
 8001aae:	3730      	adds	r7, #48	; 0x30
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40000400 	.word	0x40000400
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40000800 	.word	0x40000800
 8001ac4:	40020c00 	.word	0x40020c00

08001ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a45      	ldr	r2, [pc, #276]	; (8001bfc <HAL_TIM_MspPostInit+0x134>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d11d      	bne.n	8001b26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aea:	4b45      	ldr	r3, [pc, #276]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a44      	ldr	r2, [pc, #272]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001af0:	f043 0310 	orr.w	r3, r3, #16
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001b02:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4839      	ldr	r0, [pc, #228]	; (8001c04 <HAL_TIM_MspPostInit+0x13c>)
 8001b20:	f001 f9ec 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b24:	e066      	b.n	8001bf4 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2e:	d11d      	bne.n	8001b6c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	4a32      	ldr	r2, [pc, #200]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3c:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4828      	ldr	r0, [pc, #160]	; (8001c08 <HAL_TIM_MspPostInit+0x140>)
 8001b66:	f001 f9c9 	bl	8002efc <HAL_GPIO_Init>
}
 8001b6a:	e043      	b.n	8001bf4 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_TIM_MspPostInit+0x144>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d11c      	bne.n	8001bb0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4817      	ldr	r0, [pc, #92]	; (8001c08 <HAL_TIM_MspPostInit+0x140>)
 8001baa:	f001 f9a7 	bl	8002efc <HAL_GPIO_Init>
}
 8001bae:	e021      	b.n	8001bf4 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM8)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <HAL_TIM_MspPostInit+0x148>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_TIM_MspPostInit+0x138>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8001bd2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001be4:	2303      	movs	r3, #3
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_TIM_MspPostInit+0x14c>)
 8001bf0:	f001 f984 	bl	8002efc <HAL_GPIO_Init>
}
 8001bf4:	bf00      	nop
 8001bf6:	3730      	adds	r7, #48	; 0x30
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40000c00 	.word	0x40000c00
 8001c10:	40010400 	.word	0x40010400
 8001c14:	40020800 	.word	0x40020800

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0b6      	sub	sp, #216	; 0xd8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c34:	2290      	movs	r2, #144	; 0x90
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 ff6f 	bl	8006b1c <memset>
  if(huart->Instance==UART4)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4aa0      	ldr	r2, [pc, #640]	; (8001ec4 <HAL_UART_MspInit+0x2ac>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d13e      	bne.n	8001cc6 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 f9ad 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c64:	f7ff fc4a 	bl	80014fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c68:	4b97      	ldr	r3, [pc, #604]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a96      	ldr	r2, [pc, #600]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
 8001c74:	4b94      	ldr	r3, [pc, #592]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	4b91      	ldr	r3, [pc, #580]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	4a90      	ldr	r2, [pc, #576]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8c:	4b8e      	ldr	r3, [pc, #568]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8001c98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4883      	ldr	r0, [pc, #524]	; (8001ecc <HAL_UART_MspInit+0x2b4>)
 8001cc0:	f001 f91c 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cc4:	e151      	b.n	8001f6a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a81      	ldr	r2, [pc, #516]	; (8001ed0 <HAL_UART_MspInit+0x2b8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d160      	bne.n	8001d92 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 f969 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001cec:	f7ff fc06 	bl	80014fc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001cf0:	4b75      	ldr	r3, [pc, #468]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	4a74      	ldr	r2, [pc, #464]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfc:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	4b6f      	ldr	r3, [pc, #444]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a6e      	ldr	r2, [pc, #440]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	6313      	str	r3, [r2, #48]	; 0x30
 8001d14:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d20:	4b69      	ldr	r3, [pc, #420]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	4a68      	ldr	r2, [pc, #416]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2c:	4b66      	ldr	r3, [pc, #408]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d52:	2308      	movs	r3, #8
 8001d54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	485d      	ldr	r0, [pc, #372]	; (8001ed4 <HAL_UART_MspInit+0x2bc>)
 8001d60:	f001 f8cc 	bl	8002efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d7e:	2308      	movs	r3, #8
 8001d80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4850      	ldr	r0, [pc, #320]	; (8001ecc <HAL_UART_MspInit+0x2b4>)
 8001d8c:	f001 f8b6 	bl	8002efc <HAL_GPIO_Init>
}
 8001d90:	e0eb      	b.n	8001f6a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a50      	ldr	r2, [pc, #320]	; (8001ed8 <HAL_UART_MspInit+0x2c0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d151      	bne.n	8001e40 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d9c:	2340      	movs	r3, #64	; 0x40
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001da0:	2300      	movs	r3, #0
 8001da2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 f905 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001db4:	f7ff fba2 	bl	80014fc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db8:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	4a42      	ldr	r2, [pc, #264]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc4:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd0:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a3c      	ldr	r2, [pc, #240]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e02:	2304      	movs	r3, #4
 8001e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4831      	ldr	r0, [pc, #196]	; (8001ed4 <HAL_UART_MspInit+0x2bc>)
 8001e10:	f001 f874 	bl	8002efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e14:	2340      	movs	r3, #64	; 0x40
 8001e16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4826      	ldr	r0, [pc, #152]	; (8001ed4 <HAL_UART_MspInit+0x2bc>)
 8001e3a:	f001 f85f 	bl	8002efc <HAL_GPIO_Init>
}
 8001e3e:	e094      	b.n	8001f6a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a25      	ldr	r2, [pc, #148]	; (8001edc <HAL_UART_MspInit+0x2c4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d14c      	bne.n	8001ee4 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 f8ae 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8001e62:	f7ff fb4b 	bl	80014fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_UART_MspInit+0x2b0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e96:	2360      	movs	r3, #96	; 0x60
 8001e98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eae:	2307      	movs	r3, #7
 8001eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <HAL_UART_MspInit+0x2c8>)
 8001ebc:	f001 f81e 	bl	8002efc <HAL_GPIO_Init>
}
 8001ec0:	e053      	b.n	8001f6a <HAL_UART_MspInit+0x352>
 8001ec2:	bf00      	nop
 8001ec4:	40004c00 	.word	0x40004c00
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40005000 	.word	0x40005000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a22      	ldr	r2, [pc, #136]	; (8001f74 <HAL_UART_MspInit+0x35c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d13d      	bne.n	8001f6a <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 f85a 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8001f0a:	f7ff faf7 	bl	80014fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_UART_MspInit+0x360>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0x360>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_UART_MspInit+0x360>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_UART_MspInit+0x360>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <HAL_UART_MspInit+0x360>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_UART_MspInit+0x360>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <HAL_UART_MspInit+0x364>)
 8001f66:	f000 ffc9 	bl	8002efc <HAL_GPIO_Init>
}
 8001f6a:	bf00      	nop
 8001f6c:	37d8      	adds	r7, #216	; 0xd8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40004800 	.word	0x40004800
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020c00 	.word	0x40020c00

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <NMI_Handler+0x4>

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler+0x4>

08001f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <UsageFault_Handler+0x4>

08001f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fcc:	f000 f8c2 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin);
 8001fd8:	2004      	movs	r0, #4
 8001fda:	f001 f96d 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI3_IMU_IRQ_Pin);
 8001fe6:	2008      	movs	r0, #8
 8001fe8:	f001 f966 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 8001ff4:	2010      	movs	r0, #16
 8001ff6:	f001 f95f 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <DMA1_Stream1_IRQHandler+0x10>)
 8002006:	f000 fd3d 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000390 	.word	0x20000390

08002014 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <TIM2_IRQHandler+0x10>)
 800201a:	f002 fec1 	bl	8004da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200001c8 	.word	0x200001c8

08002028 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI10_BUMP1_IRQ_Pin);
 800202c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002030:	f001 f942 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI11_BUMP2_IRQ_Pin);
 8002034:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002038:	f001 f93e 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI12_BUMP3_IRQ_Pin);
 800203c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002040:	f001 f93a 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI13_BUMP4_IRQ_Pin);
 8002044:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002048:	f001 f936 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <TIM6_DAC_IRQHandler+0x10>)
 8002056:	f002 fea3 	bl	8004da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200002f8 	.word	0x200002f8

08002064 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <SystemInit+0x20>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <SystemInit+0x20>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800208e:	490e      	ldr	r1, [pc, #56]	; (80020c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a2:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a4:	4c0b      	ldr	r4, [pc, #44]	; (80020d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020b2:	f7ff ffd7 	bl	8002064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f004 fd0d 	bl	8006ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ba:	f7fe fa3f 	bl	800053c <main>
  bx  lr    
 80020be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020cc:	08006b74 	.word	0x08006b74
  ldr r2, =_sbss
 80020d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80020d4:	2000069c 	.word	0x2000069c

080020d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC_IRQHandler>

080020da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020de:	2003      	movs	r0, #3
 80020e0:	f000 fbe0 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f000 f805 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ea:	f7ff fa0d 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fbfb 	bl	800290e <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 fbc3 	bl	80028ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	20000008 	.word	0x20000008
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_IncTick+0x20>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_IncTick+0x24>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000008 	.word	0x20000008
 8002178:	20000698 	.word	0x20000698

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_GetTick+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000698 	.word	0x20000698

08002194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff ffee 	bl	800217c <HAL_GetTick>
 80021a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d005      	beq.n	80021ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_Delay+0x44>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ba:	bf00      	nop
 80021bc:	f7ff ffde 	bl	800217c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d8f7      	bhi.n	80021bc <HAL_Delay+0x28>
  {
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008

080021dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e031      	b.n	8002256 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff f9a8 	bl	8001550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_ADC_Init+0x84>)
 8002220:	4013      	ands	r3, r2
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f970 	bl	8002510 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
 8002246:	e001      	b.n	800224c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	ffffeefd 	.word	0xffffeefd

08002264 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1c>
 800227c:	2302      	movs	r3, #2
 800227e:	e136      	b.n	80024ee <HAL_ADC_ConfigChannel+0x28a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d93a      	bls.n	8002306 <HAL_ADC_ConfigChannel+0xa2>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002298:	d035      	beq.n	8002306 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68d9      	ldr	r1, [r3, #12]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	3b1e      	subs	r3, #30
 80022b0:	2207      	movs	r2, #7
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	400a      	ands	r2, r1
 80022be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a8d      	ldr	r2, [pc, #564]	; (80024fc <HAL_ADC_ConfigChannel+0x298>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10a      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68d9      	ldr	r1, [r3, #12]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	061a      	lsls	r2, r3, #24
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022de:	e035      	b.n	800234c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4403      	add	r3, r0
 80022f8:	3b1e      	subs	r3, #30
 80022fa:	409a      	lsls	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002304:	e022      	b.n	800234c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6919      	ldr	r1, [r3, #16]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	2207      	movs	r2, #7
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43da      	mvns	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	400a      	ands	r2, r1
 8002328:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6919      	ldr	r1, [r3, #16]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	4603      	mov	r3, r0
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4403      	add	r3, r0
 8002342:	409a      	lsls	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b06      	cmp	r3, #6
 8002352:	d824      	bhi.n	800239e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b05      	subs	r3, #5
 8002366:	221f      	movs	r2, #31
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43da      	mvns	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	400a      	ands	r2, r1
 8002374:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	4618      	mov	r0, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b05      	subs	r3, #5
 8002390:	fa00 f203 	lsl.w	r2, r0, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	; 0x34
 800239c:	e04c      	b.n	8002438 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d824      	bhi.n	80023f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b23      	subs	r3, #35	; 0x23
 80023b8:	221f      	movs	r2, #31
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	400a      	ands	r2, r1
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	3b23      	subs	r3, #35	; 0x23
 80023e2:	fa00 f203 	lsl.w	r2, r0, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
 80023ee:	e023      	b.n	8002438 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b41      	subs	r3, #65	; 0x41
 8002402:	221f      	movs	r2, #31
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43da      	mvns	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	400a      	ands	r2, r1
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	3b41      	subs	r3, #65	; 0x41
 800242c:	fa00 f203 	lsl.w	r2, r0, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a30      	ldr	r2, [pc, #192]	; (8002500 <HAL_ADC_ConfigChannel+0x29c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10a      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1f4>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800244a:	d105      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a2c      	ldr	r2, [pc, #176]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 8002452:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002456:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_ADC_ConfigChannel+0x29c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10f      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x21e>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b12      	cmp	r3, #18
 8002468:	d10b      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4a25      	ldr	r2, [pc, #148]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 8002470:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002474:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 800247c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002480:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_ADC_ConfigChannel+0x29c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d12b      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x280>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1a      	ldr	r2, [pc, #104]	; (80024fc <HAL_ADC_ConfigChannel+0x298>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d003      	beq.n	800249e <HAL_ADC_ConfigChannel+0x23a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b11      	cmp	r3, #17
 800249c:	d122      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4a18      	ldr	r2, [pc, #96]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 80024a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80024a8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a15      	ldr	r2, [pc, #84]	; (8002504 <HAL_ADC_ConfigChannel+0x2a0>)
 80024b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024b4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_ADC_ConfigChannel+0x298>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d111      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_ADC_ConfigChannel+0x2a4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a11      	ldr	r2, [pc, #68]	; (800250c <HAL_ADC_ConfigChannel+0x2a8>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0c9a      	lsrs	r2, r3, #18
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024d6:	e002      	b.n	80024de <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3b01      	subs	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	10000012 	.word	0x10000012
 8002500:	40012000 	.word	0x40012000
 8002504:	40012300 	.word	0x40012300
 8002508:	20000000 	.word	0x20000000
 800250c:	431bde83 	.word	0x431bde83

08002510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002518:	4b78      	ldr	r3, [pc, #480]	; (80026fc <ADC_Init+0x1ec>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4a77      	ldr	r2, [pc, #476]	; (80026fc <ADC_Init+0x1ec>)
 800251e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002522:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002524:	4b75      	ldr	r3, [pc, #468]	; (80026fc <ADC_Init+0x1ec>)
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4973      	ldr	r1, [pc, #460]	; (80026fc <ADC_Init+0x1ec>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	021a      	lsls	r2, r3, #8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002564:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	4a58      	ldr	r2, [pc, #352]	; (8002700 <ADC_Init+0x1f0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d022      	beq.n	80025ea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	e00f      	b.n	800260a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002608:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0202 	bic.w	r2, r2, #2
 8002618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	005a      	lsls	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01b      	beq.n	8002670 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002646:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002656:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	3b01      	subs	r3, #1
 8002664:	035a      	lsls	r2, r3, #13
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	e007      	b.n	8002680 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800267e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	3b01      	subs	r3, #1
 800269c:	051a      	lsls	r2, r3, #20
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c2:	025a      	lsls	r2, r3, #9
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	029a      	lsls	r2, r3, #10
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40012300 	.word	0x40012300
 8002700:	0f000001 	.word	0x0f000001

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <__NVIC_SetPriorityGrouping+0x40>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	4313      	orrs	r3, r2
 8002730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <__NVIC_SetPriorityGrouping+0x40>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	60d3      	str	r3, [r2, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00
 8002748:	05fa0000 	.word	0x05fa0000

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db0b      	blt.n	8002792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <__NVIC_EnableIRQ+0x38>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	; (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002870:	d301      	bcc.n	8002876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <SysTick_Config+0x40>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287e:	210f      	movs	r1, #15
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f7ff ff8e 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <SysTick_Config+0x40>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <SysTick_Config+0x40>)
 8002890:	2207      	movs	r2, #7
 8002892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff29 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028cc:	f7ff ff3e 	bl	800274c <__NVIC_GetPriorityGrouping>
 80028d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f7ff ff8e 	bl	80027f8 <NVIC_EncodePriority>
 80028dc:	4602      	mov	r2, r0
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff5d 	bl	80027a4 <__NVIC_SetPriority>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff31 	bl	8002768 <__NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ffa2 	bl	8002860 <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff fc22 	bl	800217c <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e099      	b.n	8002a78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002964:	e00f      	b.n	8002986 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002966:	f7ff fc09 	bl	800217c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b05      	cmp	r3, #5
 8002972:	d908      	bls.n	8002986 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e078      	b.n	8002a78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e8      	bne.n	8002966 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <HAL_DMA_Init+0x158>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d107      	bne.n	80029f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4313      	orrs	r3, r2
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d117      	bne.n	8002a4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00e      	beq.n	8002a4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9e9 	bl	8002e04 <DMA_CheckFifoParam>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a46:	2301      	movs	r3, #1
 8002a48:	e016      	b.n	8002a78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f9a0 	bl	8002d98 <DMA_CalcBaseAndBitshift>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	223f      	movs	r2, #63	; 0x3f
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	e010803f 	.word	0xe010803f

08002a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a90:	4b8e      	ldr	r3, [pc, #568]	; (8002ccc <HAL_DMA_IRQHandler+0x248>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a8e      	ldr	r2, [pc, #568]	; (8002cd0 <HAL_DMA_IRQHandler+0x24c>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0a9b      	lsrs	r3, r3, #10
 8002a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	2208      	movs	r2, #8
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01a      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0204 	bic.w	r2, r2, #4
 8002ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	2208      	movs	r2, #8
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	2201      	movs	r2, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d012      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2201      	movs	r2, #1
 8002b14:	409a      	lsls	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f043 0202 	orr.w	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d012      	beq.n	8002b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	2204      	movs	r2, #4
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f043 0204 	orr.w	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2210      	movs	r2, #16
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d043      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d03c      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	2210      	movs	r2, #16
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d018      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d024      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
 8002bb2:	e01f      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01b      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	e016      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0208 	bic.w	r2, r2, #8
 8002be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 808f 	beq.w	8002d24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8087 	beq.w	8002d24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d136      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0216 	bic.w	r2, r2, #22
 8002c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x1da>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0208 	bic.w	r2, r2, #8
 8002c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	223f      	movs	r2, #63	; 0x3f
 8002c74:	409a      	lsls	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d07e      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
        }
        return;
 8002c9a:	e079      	b.n	8002d90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d031      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
 8002cc8:	e02c      	b.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
 8002cca:	bf00      	nop
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d023      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
 8002ce4:	e01e      	b.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0210 	bic.w	r2, r2, #16
 8002d02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d032      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	3301      	adds	r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d307      	bcc.n	8002d6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f2      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x2cc>
 8002d6a:	e000      	b.n	8002d6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
 8002d8e:	e000      	b.n	8002d92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d90:	bf00      	nop
    }
  }
}
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	3b10      	subs	r3, #16
 8002da8:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <DMA_CalcBaseAndBitshift+0x60>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <DMA_CalcBaseAndBitshift+0x64>)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d908      	bls.n	8002dd8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <DMA_CalcBaseAndBitshift+0x68>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	1d1a      	adds	r2, r3, #4
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	; 0x58
 8002dd6:	e006      	b.n	8002de6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <DMA_CalcBaseAndBitshift+0x68>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	aaaaaaab 	.word	0xaaaaaaab
 8002dfc:	08006b5c 	.word	0x08006b5c
 8002e00:	fffffc00 	.word	0xfffffc00

08002e04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11f      	bne.n	8002e5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d856      	bhi.n	8002ed2 <DMA_CheckFifoParam+0xce>
 8002e24:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <DMA_CheckFifoParam+0x28>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e3d 	.word	0x08002e3d
 8002e30:	08002e4f 	.word	0x08002e4f
 8002e34:	08002e3d 	.word	0x08002e3d
 8002e38:	08002ed3 	.word	0x08002ed3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d046      	beq.n	8002ed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e4c:	e043      	b.n	8002ed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e56:	d140      	bne.n	8002eda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5c:	e03d      	b.n	8002eda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e66:	d121      	bne.n	8002eac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d837      	bhi.n	8002ede <DMA_CheckFifoParam+0xda>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <DMA_CheckFifoParam+0x70>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e8b 	.word	0x08002e8b
 8002e7c:	08002e85 	.word	0x08002e85
 8002e80:	08002e9d 	.word	0x08002e9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
      break;
 8002e88:	e030      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d025      	beq.n	8002ee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9a:	e022      	b.n	8002ee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ea4:	d11f      	bne.n	8002ee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eaa:	e01c      	b.n	8002ee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d903      	bls.n	8002eba <DMA_CheckFifoParam+0xb6>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d003      	beq.n	8002ec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eb8:	e018      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebe:	e015      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00e      	beq.n	8002eea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	e00b      	b.n	8002eea <DMA_CheckFifoParam+0xe6>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e00a      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e008      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
 8002edc:	e006      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e004      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e002      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;   
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002eea:	bf00      	nop
    }
  } 
  
  return status; 
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e175      	b.n	8003208 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8164 	bne.w	8003202 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d005      	beq.n	8002f52 <HAL_GPIO_Init+0x56>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d130      	bne.n	8002fb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0201 	and.w	r2, r3, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d017      	beq.n	8002ff0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d123      	bne.n	8003044 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	08da      	lsrs	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3208      	adds	r2, #8
 8003004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3208      	adds	r2, #8
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0203 	and.w	r2, r3, #3
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80be 	beq.w	8003202 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003086:	4b66      	ldr	r3, [pc, #408]	; (8003220 <HAL_GPIO_Init+0x324>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_GPIO_Init+0x324>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b63      	ldr	r3, [pc, #396]	; (8003220 <HAL_GPIO_Init+0x324>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800309e:	4a61      	ldr	r2, [pc, #388]	; (8003224 <HAL_GPIO_Init+0x328>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_GPIO_Init+0x32c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d037      	beq.n	800313a <HAL_GPIO_Init+0x23e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a57      	ldr	r2, [pc, #348]	; (800322c <HAL_GPIO_Init+0x330>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_GPIO_Init+0x23a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a56      	ldr	r2, [pc, #344]	; (8003230 <HAL_GPIO_Init+0x334>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <HAL_GPIO_Init+0x236>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a55      	ldr	r2, [pc, #340]	; (8003234 <HAL_GPIO_Init+0x338>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d025      	beq.n	800312e <HAL_GPIO_Init+0x232>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a54      	ldr	r2, [pc, #336]	; (8003238 <HAL_GPIO_Init+0x33c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <HAL_GPIO_Init+0x22e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a53      	ldr	r2, [pc, #332]	; (800323c <HAL_GPIO_Init+0x340>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <HAL_GPIO_Init+0x22a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_GPIO_Init+0x344>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_GPIO_Init+0x226>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a51      	ldr	r2, [pc, #324]	; (8003244 <HAL_GPIO_Init+0x348>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_GPIO_Init+0x222>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a50      	ldr	r2, [pc, #320]	; (8003248 <HAL_GPIO_Init+0x34c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x21e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4f      	ldr	r2, [pc, #316]	; (800324c <HAL_GPIO_Init+0x350>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x21a>
 8003112:	2309      	movs	r3, #9
 8003114:	e012      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003116:	230a      	movs	r3, #10
 8003118:	e010      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311a:	2308      	movs	r3, #8
 800311c:	e00e      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311e:	2307      	movs	r3, #7
 8003120:	e00c      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003122:	2306      	movs	r3, #6
 8003124:	e00a      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003126:	2305      	movs	r3, #5
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312a:	2304      	movs	r3, #4
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x240>
 800313a:	2300      	movs	r3, #0
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800314c:	4935      	ldr	r1, [pc, #212]	; (8003224 <HAL_GPIO_Init+0x328>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_GPIO_Init+0x354>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317e:	4a34      	ldr	r2, [pc, #208]	; (8003250 <HAL_GPIO_Init+0x354>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <HAL_GPIO_Init+0x354>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a8:	4a29      	ldr	r2, [pc, #164]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d2:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	f67f ae86 	bls.w	8002f1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40013800 	.word	0x40013800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40020800 	.word	0x40020800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40021400 	.word	0x40021400
 8003240:	40021800 	.word	0x40021800
 8003244:	40021c00 	.word	0x40021c00
 8003248:	40022000 	.word	0x40022000
 800324c:	40022400 	.word	0x40022400
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	e001      	b.n	8003276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003294:	787b      	ldrb	r3, [r7, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032a0:	e003      	b.n	80032aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	041a      	lsls	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	619a      	str	r2, [r3, #24]
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d006      	beq.n	80032dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ce:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f806 	bl	80032e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40013c00 	.word	0x40013c00

080032e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07f      	b.n	8003412 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe f952 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	; 0x24
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003350:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003360:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d107      	bne.n	800337a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	e006      	b.n	8003388 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003386:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d104      	bne.n	800339a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_I2C_Init+0x11c>)
 80033a6:	430b      	orrs	r3, r1
 80033a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69d9      	ldr	r1, [r3, #28]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	02008000 	.word	0x02008000

08003420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	d138      	bne.n	80034a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003440:	2302      	movs	r3, #2
 8003442:	e032      	b.n	80034aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003472:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e000      	b.n	80034aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d139      	bne.n	8003540 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e033      	b.n	8003542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2224      	movs	r2, #36	; 0x24
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003508:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800355a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40007000 	.word	0x40007000

08003570 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HAL_PWREx_EnableOverDrive+0x98>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_PWREx_EnableOverDrive+0x98>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b20      	ldr	r3, [pc, #128]	; (8003608 <HAL_PWREx_EnableOverDrive+0x98>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800359e:	f7fe fded 	bl	800217c <HAL_GetTick>
 80035a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035a4:	e009      	b.n	80035ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035a6:	f7fe fde9 	bl	800217c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035b4:	d901      	bls.n	80035ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e022      	b.n	8003600 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c6:	d1ee      	bne.n	80035a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0f      	ldr	r2, [pc, #60]	; (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035d4:	f7fe fdd2 	bl	800217c <HAL_GetTick>
 80035d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035da:	e009      	b.n	80035f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035dc:	f7fe fdce 	bl	800217c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ea:	d901      	bls.n	80035f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e007      	b.n	8003600 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035fc:	d1ee      	bne.n	80035dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	40007000 	.word	0x40007000

08003610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e29b      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8087 	beq.w	8003742 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003634:	4b96      	ldr	r3, [pc, #600]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b04      	cmp	r3, #4
 800363e:	d00c      	beq.n	800365a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003640:	4b93      	ldr	r3, [pc, #588]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d112      	bne.n	8003672 <HAL_RCC_OscConfig+0x62>
 800364c:	4b90      	ldr	r3, [pc, #576]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003658:	d10b      	bne.n	8003672 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365a:	4b8d      	ldr	r3, [pc, #564]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d06c      	beq.n	8003740 <HAL_RCC_OscConfig+0x130>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d168      	bne.n	8003740 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e275      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x7a>
 800367c:	4b84      	ldr	r3, [pc, #528]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a83      	ldr	r2, [pc, #524]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e02e      	b.n	80036e8 <HAL_RCC_OscConfig+0xd8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x9c>
 8003692:	4b7f      	ldr	r3, [pc, #508]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7e      	ldr	r2, [pc, #504]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b7c      	ldr	r3, [pc, #496]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7b      	ldr	r2, [pc, #492]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e01d      	b.n	80036e8 <HAL_RCC_OscConfig+0xd8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0xc0>
 80036b6:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a75      	ldr	r2, [pc, #468]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b73      	ldr	r3, [pc, #460]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a72      	ldr	r2, [pc, #456]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0xd8>
 80036d0:	4b6f      	ldr	r3, [pc, #444]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6e      	ldr	r2, [pc, #440]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6b      	ldr	r2, [pc, #428]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80036e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe fd44 	bl	800217c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fe fd40 	bl	800217c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e229      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b61      	ldr	r3, [pc, #388]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0xe8>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fd30 	bl	800217c <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fe fd2c 	bl	800217c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e215      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	4b57      	ldr	r3, [pc, #348]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x110>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d069      	beq.n	8003822 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800374e:	4b50      	ldr	r3, [pc, #320]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375a:	4b4d      	ldr	r3, [pc, #308]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x190>
 8003766:	4b4a      	ldr	r3, [pc, #296]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x17a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1e9      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	493d      	ldr	r1, [pc, #244]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	e040      	b.n	8003822 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d023      	beq.n	80037f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a8:	4b39      	ldr	r3, [pc, #228]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a38      	ldr	r2, [pc, #224]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe fce2 	bl	800217c <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037bc:	f7fe fcde 	bl	800217c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1c7      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ce:	4b30      	ldr	r3, [pc, #192]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4929      	ldr	r1, [pc, #164]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]
 80037ee:	e018      	b.n	8003822 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f0:	4b27      	ldr	r3, [pc, #156]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe fcbe 	bl	800217c <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003804:	f7fe fcba 	bl	800217c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e1a3      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d038      	beq.n	80038a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d019      	beq.n	800386a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003842:	f7fe fc9b 	bl	800217c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384a:	f7fe fc97 	bl	800217c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e180      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800385e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x23a>
 8003868:	e01a      	b.n	80038a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 800386c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386e:	4a08      	ldr	r2, [pc, #32]	; (8003890 <HAL_RCC_OscConfig+0x280>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fe fc81 	bl	800217c <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387e:	f7fe fc7d 	bl	800217c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d903      	bls.n	8003894 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e166      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
 8003890:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	4b92      	ldr	r3, [pc, #584]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ee      	bne.n	800387e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80a4 	beq.w	80039f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ae:	4b8c      	ldr	r3, [pc, #560]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10d      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	4b89      	ldr	r3, [pc, #548]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	4a88      	ldr	r2, [pc, #544]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	; 0x40
 80038c6:	4b86      	ldr	r3, [pc, #536]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d6:	4b83      	ldr	r3, [pc, #524]	; (8003ae4 <HAL_RCC_OscConfig+0x4d4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d118      	bne.n	8003914 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038e2:	4b80      	ldr	r3, [pc, #512]	; (8003ae4 <HAL_RCC_OscConfig+0x4d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a7f      	ldr	r2, [pc, #508]	; (8003ae4 <HAL_RCC_OscConfig+0x4d4>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ee:	f7fe fc45 	bl	800217c <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f6:	f7fe fc41 	bl	800217c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b64      	cmp	r3, #100	; 0x64
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e12a      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003908:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_RCC_OscConfig+0x4d4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x31a>
 800391c:	4b70      	ldr	r3, [pc, #448]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	4a6f      	ldr	r2, [pc, #444]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6713      	str	r3, [r2, #112]	; 0x70
 8003928:	e02d      	b.n	8003986 <HAL_RCC_OscConfig+0x376>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x33c>
 8003932:	4b6b      	ldr	r3, [pc, #428]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	4a6a      	ldr	r2, [pc, #424]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	6713      	str	r3, [r2, #112]	; 0x70
 800393e:	4b68      	ldr	r3, [pc, #416]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a67      	ldr	r2, [pc, #412]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	e01c      	b.n	8003986 <HAL_RCC_OscConfig+0x376>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b05      	cmp	r3, #5
 8003952:	d10c      	bne.n	800396e <HAL_RCC_OscConfig+0x35e>
 8003954:	4b62      	ldr	r3, [pc, #392]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	4a61      	ldr	r2, [pc, #388]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	6713      	str	r3, [r2, #112]	; 0x70
 8003960:	4b5f      	ldr	r3, [pc, #380]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a5e      	ldr	r2, [pc, #376]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
 800396c:	e00b      	b.n	8003986 <HAL_RCC_OscConfig+0x376>
 800396e:	4b5c      	ldr	r3, [pc, #368]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	4a5b      	ldr	r2, [pc, #364]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	6713      	str	r3, [r2, #112]	; 0x70
 800397a:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d015      	beq.n	80039ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe fbf5 	bl	800217c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fe fbf1 	bl	800217c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0d8      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ee      	beq.n	8003996 <HAL_RCC_OscConfig+0x386>
 80039b8:	e014      	b.n	80039e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fe fbdf 	bl	800217c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fe fbdb 	bl	800217c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0c2      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d8:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ee      	bne.n	80039c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d105      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ea:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4a3c      	ldr	r2, [pc, #240]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80039f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80ae 	beq.w	8003b5c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a00:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d06d      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d14b      	bne.n	8003aac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a14:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a31      	ldr	r2, [pc, #196]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fbac 	bl	800217c <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe fba8 	bl	800217c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e091      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	491b      	ldr	r1, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a78:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fb7a 	bl	800217c <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe fb76 	bl	800217c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e05f      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x47c>
 8003aaa:	e057      	b.n	8003b5c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fb60 	bl	800217c <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fb5c 	bl	800217c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e045      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4b0>
 8003ade:	e03d      	b.n	8003b5c <HAL_RCC_OscConfig+0x54c>
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <HAL_RCC_OscConfig+0x558>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d030      	beq.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d129      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d122      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b18:	4013      	ands	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d119      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	3b01      	subs	r3, #1
 8003b32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d10f      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0d0      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d910      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 020f 	bic.w	r2, r3, #15
 8003b9a:	4965      	ldr	r1, [pc, #404]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b63      	ldr	r3, [pc, #396]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0b8      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bcc:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a58      	ldr	r2, [pc, #352]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be4:	4b53      	ldr	r3, [pc, #332]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a52      	ldr	r2, [pc, #328]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b50      	ldr	r3, [pc, #320]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	494d      	ldr	r1, [pc, #308]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d040      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d115      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e07f      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2e:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e073      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e06b      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4e:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 0203 	bic.w	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4936      	ldr	r1, [pc, #216]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fe fa8c 	bl	800217c <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c68:	f7fe fa88 	bl	800217c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e053      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 020c 	and.w	r2, r3, #12
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1eb      	bne.n	8003c68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c90:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d210      	bcs.n	8003cc0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 020f 	bic.w	r2, r3, #15
 8003ca6:	4922      	ldr	r1, [pc, #136]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e032      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4916      	ldr	r1, [pc, #88]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	490e      	ldr	r1, [pc, #56]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cfe:	f000 f821 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003d02:	4602      	mov	r2, r0
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	490a      	ldr	r1, [pc, #40]	; (8003d38 <HAL_RCC_ClockConfig+0x1cc>)
 8003d10:	5ccb      	ldrb	r3, [r1, r3]
 8003d12:	fa22 f303 	lsr.w	r3, r2, r3
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <HAL_RCC_ClockConfig+0x1d0>)
 8003d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x1d4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe f9e8 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023c00 	.word	0x40023c00
 8003d34:	40023800 	.word	0x40023800
 8003d38:	08006b44 	.word	0x08006b44
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	20000004 	.word	0x20000004

08003d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b094      	sub	sp, #80	; 0x50
 8003d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d50:	2300      	movs	r3, #0
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d54:	2300      	movs	r3, #0
 8003d56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5c:	4b79      	ldr	r3, [pc, #484]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d00d      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x40>
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	f200 80e1 	bhi.w	8003f30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x34>
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d003      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d76:	e0db      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d78:	4b73      	ldr	r3, [pc, #460]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d7c:	e0db      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d7e:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d82:	e0d8      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d84:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d8c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d8e:	4b6d      	ldr	r3, [pc, #436]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9a:	4b6a      	ldr	r3, [pc, #424]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	099b      	lsrs	r3, r3, #6
 8003da0:	2200      	movs	r2, #0
 8003da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dac:	633b      	str	r3, [r7, #48]	; 0x30
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
 8003db2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003db6:	4622      	mov	r2, r4
 8003db8:	462b      	mov	r3, r5
 8003dba:	f04f 0000 	mov.w	r0, #0
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	0159      	lsls	r1, r3, #5
 8003dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc8:	0150      	lsls	r0, r2, #5
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4621      	mov	r1, r4
 8003dd0:	1a51      	subs	r1, r2, r1
 8003dd2:	6139      	str	r1, [r7, #16]
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de8:	4659      	mov	r1, fp
 8003dea:	018b      	lsls	r3, r1, #6
 8003dec:	4651      	mov	r1, sl
 8003dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df2:	4651      	mov	r1, sl
 8003df4:	018a      	lsls	r2, r1, #6
 8003df6:	4651      	mov	r1, sl
 8003df8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	eb63 0901 	sbc.w	r9, r3, r1
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e16:	4690      	mov	r8, r2
 8003e18:	4699      	mov	r9, r3
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	eb18 0303 	adds.w	r3, r8, r3
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	462b      	mov	r3, r5
 8003e24:	eb49 0303 	adc.w	r3, r9, r3
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e36:	4629      	mov	r1, r5
 8003e38:	024b      	lsls	r3, r1, #9
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e40:	4621      	mov	r1, r4
 8003e42:	024a      	lsls	r2, r1, #9
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e54:	f7fc f9f0 	bl	8000238 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e60:	e058      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e62:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
 8003e78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	464b      	mov	r3, r9
 8003e80:	f04f 0000 	mov.w	r0, #0
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	0159      	lsls	r1, r3, #5
 8003e8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8e:	0150      	lsls	r0, r2, #5
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4641      	mov	r1, r8
 8003e96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003eac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003eb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	00eb      	lsls	r3, r5, #3
 8003ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eca:	00e2      	lsls	r2, r4, #3
 8003ecc:	4614      	mov	r4, r2
 8003ece:	461d      	mov	r5, r3
 8003ed0:	4643      	mov	r3, r8
 8003ed2:	18e3      	adds	r3, r4, r3
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	eb45 0303 	adc.w	r3, r5, r3
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eea:	4629      	mov	r1, r5
 8003eec:	028b      	lsls	r3, r1, #10
 8003eee:	4621      	mov	r1, r4
 8003ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	028a      	lsls	r2, r1, #10
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efe:	2200      	movs	r2, #0
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	61fa      	str	r2, [r7, #28]
 8003f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f08:	f7fc f996 	bl	8000238 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4613      	mov	r3, r2
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f2e:	e002      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3750      	adds	r7, #80	; 0x50
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	00f42400 	.word	0x00f42400
 8003f4c:	007a1200 	.word	0x007a1200

08003f50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000000 	.word	0x20000000

08003f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f6c:	f7ff fff0 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	0a9b      	lsrs	r3, r3, #10
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	4903      	ldr	r1, [pc, #12]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7e:	5ccb      	ldrb	r3, [r1, r3]
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	08006b54 	.word	0x08006b54

08003f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f94:	f7ff ffdc 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0b5b      	lsrs	r3, r3, #13
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4903      	ldr	r1, [pc, #12]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	08006b54 	.word	0x08006b54

08003fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fe0:	4b69      	ldr	r3, [pc, #420]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a68      	ldr	r2, [pc, #416]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fea:	6093      	str	r3, [r2, #8]
 8003fec:	4b66      	ldr	r3, [pc, #408]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	4964      	ldr	r1, [pc, #400]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004002:	2301      	movs	r3, #1
 8004004:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d017      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004012:	4b5d      	ldr	r3, [pc, #372]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004020:	4959      	ldr	r1, [pc, #356]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004030:	d101      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800403e:	2301      	movs	r3, #1
 8004040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d017      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800404e:	4b4e      	ldr	r3, [pc, #312]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004054:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	494a      	ldr	r1, [pc, #296]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406c:	d101      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800406e:	2301      	movs	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800408a:	2301      	movs	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 808b 	beq.w	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800409c:	4b3a      	ldr	r3, [pc, #232]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	4a39      	ldr	r2, [pc, #228]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a6:	6413      	str	r3, [r2, #64]	; 0x40
 80040a8:	4b37      	ldr	r3, [pc, #220]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040b4:	4b35      	ldr	r3, [pc, #212]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a34      	ldr	r2, [pc, #208]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c0:	f7fe f85c 	bl	800217c <HAL_GetTick>
 80040c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c8:	f7fe f858 	bl	800217c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e38f      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040da:	4b2c      	ldr	r3, [pc, #176]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d035      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d02e      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004104:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800410e:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004126:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800412c:	4b16      	ldr	r3, [pc, #88]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d114      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe f820 	bl	800217c <HAL_GetTick>
 800413c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fe f81c 	bl	800217c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	; 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e351      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ee      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800416e:	d111      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800417e:	400b      	ands	r3, r1
 8004180:	4901      	ldr	r1, [pc, #4]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
 8004186:	e00b      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004188:	40023800 	.word	0x40023800
 800418c:	40007000 	.word	0x40007000
 8004190:	0ffffcff 	.word	0x0ffffcff
 8004194:	4bac      	ldr	r3, [pc, #688]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4aab      	ldr	r2, [pc, #684]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800419e:	6093      	str	r3, [r2, #8]
 80041a0:	4ba9      	ldr	r3, [pc, #676]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	49a6      	ldr	r1, [pc, #664]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041be:	4ba2      	ldr	r3, [pc, #648]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c4:	4aa0      	ldr	r2, [pc, #640]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80041ce:	4b9e      	ldr	r3, [pc, #632]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	499b      	ldr	r1, [pc, #620]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ec:	4b96      	ldr	r3, [pc, #600]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041fa:	4993      	ldr	r1, [pc, #588]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800420e:	4b8e      	ldr	r3, [pc, #568]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800421c:	498a      	ldr	r1, [pc, #552]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004230:	4b85      	ldr	r3, [pc, #532]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800423e:	4982      	ldr	r1, [pc, #520]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004252:	4b7d      	ldr	r3, [pc, #500]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4979      	ldr	r1, [pc, #484]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004274:	4b74      	ldr	r3, [pc, #464]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f023 0203 	bic.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	4971      	ldr	r1, [pc, #452]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004296:	4b6c      	ldr	r3, [pc, #432]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f023 020c 	bic.w	r2, r3, #12
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	4968      	ldr	r1, [pc, #416]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042b8:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	4960      	ldr	r1, [pc, #384]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042da:	4b5b      	ldr	r3, [pc, #364]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	4957      	ldr	r1, [pc, #348]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042fc:	4b52      	ldr	r3, [pc, #328]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	494f      	ldr	r1, [pc, #316]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800431e:	4b4a      	ldr	r3, [pc, #296]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	4946      	ldr	r1, [pc, #280]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004340:	4b41      	ldr	r3, [pc, #260]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	493e      	ldr	r1, [pc, #248]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004362:	4b39      	ldr	r3, [pc, #228]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004370:	4935      	ldr	r1, [pc, #212]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004384:	4b30      	ldr	r3, [pc, #192]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004392:	492d      	ldr	r1, [pc, #180]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d011      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043a6:	4b28      	ldr	r3, [pc, #160]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b4:	4924      	ldr	r1, [pc, #144]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c4:	d101      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f4:	4914      	ldr	r1, [pc, #80]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00b      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004418:	490b      	ldr	r1, [pc, #44]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443c:	4902      	ldr	r1, [pc, #8]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004444:	e002      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004458:	4b8a      	ldr	r3, [pc, #552]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800445e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	4986      	ldr	r1, [pc, #536]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800447c:	4b81      	ldr	r3, [pc, #516]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800447e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004482:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800448c:	497d      	ldr	r1, [pc, #500]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d006      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80d6 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044a8:	4b76      	ldr	r3, [pc, #472]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a75      	ldr	r2, [pc, #468]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b4:	f7fd fe62 	bl	800217c <HAL_GetTick>
 80044b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044bc:	f7fd fe5e 	bl	800217c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e195      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044ce:	4b6d      	ldr	r3, [pc, #436]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d021      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11d      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044ee:	4b65      	ldr	r3, [pc, #404]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044fc:	4b61      	ldr	r3, [pc, #388]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004502:	0e1b      	lsrs	r3, r3, #24
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	019a      	lsls	r2, r3, #6
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	071b      	lsls	r3, r3, #28
 8004522:	4958      	ldr	r1, [pc, #352]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02e      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004554:	d129      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004556:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004564:	4b47      	ldr	r3, [pc, #284]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	019a      	lsls	r2, r3, #6
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	071b      	lsls	r3, r3, #28
 800458a:	493e      	ldr	r1, [pc, #248]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004592:	4b3c      	ldr	r3, [pc, #240]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004598:	f023 021f 	bic.w	r2, r3, #31
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	3b01      	subs	r3, #1
 80045a2:	4938      	ldr	r1, [pc, #224]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01d      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045b6:	4b33      	ldr	r3, [pc, #204]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045bc:	0e1b      	lsrs	r3, r3, #24
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045c4:	4b2f      	ldr	r3, [pc, #188]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ca:	0f1b      	lsrs	r3, r3, #28
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	019a      	lsls	r2, r3, #6
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	071b      	lsls	r3, r3, #28
 80045ea:	4926      	ldr	r1, [pc, #152]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d011      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	019a      	lsls	r2, r3, #6
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	071b      	lsls	r3, r3, #28
 800461a:	491a      	ldr	r1, [pc, #104]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004622:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a17      	ldr	r2, [pc, #92]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004628:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800462c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462e:	f7fd fda5 	bl	800217c <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004636:	f7fd fda1 	bl	800217c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b64      	cmp	r3, #100	; 0x64
 8004642:	d901      	bls.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0d8      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004648:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b01      	cmp	r3, #1
 8004658:	f040 80ce 	bne.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fd fd88 	bl	800217c <HAL_GetTick>
 800466c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800466e:	e00b      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004670:	f7fd fd84 	bl	800217c <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d904      	bls.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e0bb      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004688:	4b5e      	ldr	r3, [pc, #376]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004694:	d0ec      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d02e      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d12a      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046be:	4b51      	ldr	r3, [pc, #324]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046cc:	4b4d      	ldr	r3, [pc, #308]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	0f1b      	lsrs	r3, r3, #28
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	019a      	lsls	r2, r3, #6
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	4944      	ldr	r1, [pc, #272]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046fa:	4b42      	ldr	r3, [pc, #264]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	3b01      	subs	r3, #1
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	493d      	ldr	r1, [pc, #244]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d022      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004728:	d11d      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800472a:	4b36      	ldr	r3, [pc, #216]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	0e1b      	lsrs	r3, r3, #24
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004738:	4b32      	ldr	r3, [pc, #200]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	0f1b      	lsrs	r3, r3, #28
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	019a      	lsls	r2, r3, #6
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	431a      	orrs	r2, r3
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	061b      	lsls	r3, r3, #24
 8004758:	431a      	orrs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	071b      	lsls	r3, r3, #28
 800475e:	4929      	ldr	r1, [pc, #164]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d028      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004772:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004778:	0e1b      	lsrs	r3, r3, #24
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004780:	4b20      	ldr	r3, [pc, #128]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	0c1b      	lsrs	r3, r3, #16
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	019a      	lsls	r2, r3, #6
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	431a      	orrs	r2, r3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	071b      	lsls	r3, r3, #28
 80047a6:	4917      	ldr	r1, [pc, #92]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047ae:	4b15      	ldr	r3, [pc, #84]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	4911      	ldr	r1, [pc, #68]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fd fcd4 	bl	800217c <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047d8:	f7fd fcd0 	bl	800217c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e007      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047f6:	d1ef      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800

08004808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e09d      	b.n	8004956 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800482a:	d009      	beq.n	8004840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	61da      	str	r2, [r3, #28]
 8004832:	e005      	b.n	8004840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc ff60 	bl	8001720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004880:	d902      	bls.n	8004888 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e002      	b.n	800488e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800488c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004896:	d007      	beq.n	80048a8 <HAL_SPI_Init+0xa0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a0:	d002      	beq.n	80048a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ea:	ea42 0103 	orr.w	r1, r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	f003 0204 	and.w	r2, r3, #4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004924:	ea42 0103 	orr.w	r1, r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e049      	b.n	8004a04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fc ff4b 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f000 fe45 	bl	800562c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e049      	b.n	8004ab2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f841 	bl	8004aba <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f000 fdee 	bl	800562c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e049      	b.n	8004b74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f841 	bl	8004b7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fd8d 	bl	800562c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e049      	b.n	8004c36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f841 	bl	8004c3e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f000 fd2c 	bl	800562c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e08f      	b.n	8004d88 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7fc fead 	bl	80019dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6899      	ldr	r1, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b3e      	ldr	r3, [pc, #248]	; (8004d90 <HAL_TIM_Encoder_Init+0x13c>)
 8004c96:	400b      	ands	r3, r1
 8004c98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f000 fcc1 	bl	800562c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <HAL_TIM_Encoder_Init+0x140>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <HAL_TIM_Encoder_Init+0x144>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <HAL_TIM_Encoder_Init+0x148>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	4313      	orrs	r3, r2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	011a      	lsls	r2, r3, #4
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	031b      	lsls	r3, r3, #12
 8004d14:	4313      	orrs	r3, r2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	4313      	orrs	r3, r2
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	fffebff8 	.word	0xfffebff8
 8004d94:	fffffcfc 	.word	0xfffffcfc
 8004d98:	fffff3f3 	.word	0xfffff3f3
 8004d9c:	ffff0f0f 	.word	0xffff0f0f

08004da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d122      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d11b      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0202 	mvn.w	r2, #2
 8004dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fc04 	bl	80055f0 <HAL_TIM_IC_CaptureCallback>
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fbf6 	bl	80055dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fc07 	bl	8005604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d122      	bne.n	8004e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d11b      	bne.n	8004e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0204 	mvn.w	r2, #4
 8004e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2202      	movs	r2, #2
 8004e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fbda 	bl	80055f0 <HAL_TIM_IC_CaptureCallback>
 8004e3c:	e005      	b.n	8004e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fbcc 	bl	80055dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fbdd 	bl	8005604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d122      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d11b      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0208 	mvn.w	r2, #8
 8004e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2204      	movs	r2, #4
 8004e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fbb0 	bl	80055f0 <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fba2 	bl	80055dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fbb3 	bl	8005604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b10      	cmp	r3, #16
 8004eb0:	d122      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0210 	mvn.w	r2, #16
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fb86 	bl	80055f0 <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fb78 	bl	80055dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fb89 	bl	8005604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10e      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d107      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0201 	mvn.w	r2, #1
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fb52 	bl	80055c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b80      	cmp	r3, #128	; 0x80
 8004f30:	d10e      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f001 f946 	bl	80061dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5e:	d10e      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	2b80      	cmp	r3, #128	; 0x80
 8004f6c:	d107      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f001 f939 	bl	80061f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d10e      	bne.n	8004faa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d107      	bne.n	8004faa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fb37 	bl	8005618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d107      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0220 	mvn.w	r2, #32
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f001 f8f9 	bl	80061c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e066      	b.n	80050cc <HAL_TIM_OC_ConfigChannel+0xec>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b14      	cmp	r3, #20
 800500a:	d857      	bhi.n	80050bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <HAL_TIM_OC_ConfigChannel+0x34>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005069 	.word	0x08005069
 8005018:	080050bd 	.word	0x080050bd
 800501c:	080050bd 	.word	0x080050bd
 8005020:	080050bd 	.word	0x080050bd
 8005024:	08005077 	.word	0x08005077
 8005028:	080050bd 	.word	0x080050bd
 800502c:	080050bd 	.word	0x080050bd
 8005030:	080050bd 	.word	0x080050bd
 8005034:	08005085 	.word	0x08005085
 8005038:	080050bd 	.word	0x080050bd
 800503c:	080050bd 	.word	0x080050bd
 8005040:	080050bd 	.word	0x080050bd
 8005044:	08005093 	.word	0x08005093
 8005048:	080050bd 	.word	0x080050bd
 800504c:	080050bd 	.word	0x080050bd
 8005050:	080050bd 	.word	0x080050bd
 8005054:	080050a1 	.word	0x080050a1
 8005058:	080050bd 	.word	0x080050bd
 800505c:	080050bd 	.word	0x080050bd
 8005060:	080050bd 	.word	0x080050bd
 8005064:	080050af 	.word	0x080050af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fb7c 	bl	800576c <TIM_OC1_SetConfig>
      break;
 8005074:	e025      	b.n	80050c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fbe7 	bl	8005850 <TIM_OC2_SetConfig>
      break;
 8005082:	e01e      	b.n	80050c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fc58 	bl	8005940 <TIM_OC3_SetConfig>
      break;
 8005090:	e017      	b.n	80050c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fcc7 	bl	8005a2c <TIM_OC4_SetConfig>
      break;
 800509e:	e010      	b.n	80050c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fd18 	bl	8005adc <TIM_OC5_SetConfig>
      break;
 80050ac:	e009      	b.n	80050c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fd63 	bl	8005b80 <TIM_OC6_SetConfig>
      break;
 80050ba:	e002      	b.n	80050c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	75fb      	strb	r3, [r7, #23]
      break;
 80050c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e088      	b.n	8005204 <HAL_TIM_IC_ConfigChannel+0x130>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	6819      	ldr	r1, [r3, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f000 fd8a 	bl	8005c28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 020c 	bic.w	r2, r2, #12
 8005122:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6999      	ldr	r1, [r3, #24]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	619a      	str	r2, [r3, #24]
 8005136:	e060      	b.n	80051fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b04      	cmp	r3, #4
 800513c:	d11c      	bne.n	8005178 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6819      	ldr	r1, [r3, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f000 fe0e 	bl	8005d6e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005160:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6999      	ldr	r1, [r3, #24]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	021a      	lsls	r2, r3, #8
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	619a      	str	r2, [r3, #24]
 8005176:	e040      	b.n	80051fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b08      	cmp	r3, #8
 800517c:	d11b      	bne.n	80051b6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f000 fe5b 	bl	8005e48 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 020c 	bic.w	r2, r2, #12
 80051a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69d9      	ldr	r1, [r3, #28]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	61da      	str	r2, [r3, #28]
 80051b4:	e021      	b.n	80051fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d11c      	bne.n	80051f6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6819      	ldr	r1, [r3, #0]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f000 fe78 	bl	8005ec0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69da      	ldr	r2, [r3, #28]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69d9      	ldr	r1, [r3, #28]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	021a      	lsls	r2, r3, #8
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	61da      	str	r2, [r3, #28]
 80051f4:	e001      	b.n	80051fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005202:	7dfb      	ldrb	r3, [r7, #23]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005226:	2302      	movs	r3, #2
 8005228:	e0ff      	b.n	800542a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b14      	cmp	r3, #20
 8005236:	f200 80f0 	bhi.w	800541a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005295 	.word	0x08005295
 8005244:	0800541b 	.word	0x0800541b
 8005248:	0800541b 	.word	0x0800541b
 800524c:	0800541b 	.word	0x0800541b
 8005250:	080052d5 	.word	0x080052d5
 8005254:	0800541b 	.word	0x0800541b
 8005258:	0800541b 	.word	0x0800541b
 800525c:	0800541b 	.word	0x0800541b
 8005260:	08005317 	.word	0x08005317
 8005264:	0800541b 	.word	0x0800541b
 8005268:	0800541b 	.word	0x0800541b
 800526c:	0800541b 	.word	0x0800541b
 8005270:	08005357 	.word	0x08005357
 8005274:	0800541b 	.word	0x0800541b
 8005278:	0800541b 	.word	0x0800541b
 800527c:	0800541b 	.word	0x0800541b
 8005280:	08005399 	.word	0x08005399
 8005284:	0800541b 	.word	0x0800541b
 8005288:	0800541b 	.word	0x0800541b
 800528c:	0800541b 	.word	0x0800541b
 8005290:	080053d9 	.word	0x080053d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fa66 	bl	800576c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0208 	orr.w	r2, r2, #8
 80052ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0204 	bic.w	r2, r2, #4
 80052be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6999      	ldr	r1, [r3, #24]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	619a      	str	r2, [r3, #24]
      break;
 80052d2:	e0a5      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fab8 	bl	8005850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6999      	ldr	r1, [r3, #24]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	021a      	lsls	r2, r3, #8
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	619a      	str	r2, [r3, #24]
      break;
 8005314:	e084      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fb0f 	bl	8005940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0208 	orr.w	r2, r2, #8
 8005330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0204 	bic.w	r2, r2, #4
 8005340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69d9      	ldr	r1, [r3, #28]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	61da      	str	r2, [r3, #28]
      break;
 8005354:	e064      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fb65 	bl	8005a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69d9      	ldr	r1, [r3, #28]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	021a      	lsls	r2, r3, #8
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	61da      	str	r2, [r3, #28]
      break;
 8005396:	e043      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fb9c 	bl	8005adc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0208 	orr.w	r2, r2, #8
 80053b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0204 	bic.w	r2, r2, #4
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053d6:	e023      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fbce 	bl	8005b80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	021a      	lsls	r2, r3, #8
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005418:	e002      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	75fb      	strb	r3, [r7, #23]
      break;
 800541e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005428:	7dfb      	ldrb	r3, [r7, #23]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop

08005434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIM_ConfigClockSource+0x1c>
 800544c:	2302      	movs	r3, #2
 800544e:	e0b4      	b.n	80055ba <HAL_TIM_ConfigClockSource+0x186>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	4b56      	ldr	r3, [pc, #344]	; (80055c4 <HAL_TIM_ConfigClockSource+0x190>)
 800546c:	4013      	ands	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005488:	d03e      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0xd4>
 800548a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548e:	f200 8087 	bhi.w	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005496:	f000 8086 	beq.w	80055a6 <HAL_TIM_ConfigClockSource+0x172>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	d87f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b70      	cmp	r3, #112	; 0x70
 80054a2:	d01a      	beq.n	80054da <HAL_TIM_ConfigClockSource+0xa6>
 80054a4:	2b70      	cmp	r3, #112	; 0x70
 80054a6:	d87b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b60      	cmp	r3, #96	; 0x60
 80054aa:	d050      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x11a>
 80054ac:	2b60      	cmp	r3, #96	; 0x60
 80054ae:	d877      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b50      	cmp	r3, #80	; 0x50
 80054b2:	d03c      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xfa>
 80054b4:	2b50      	cmp	r3, #80	; 0x50
 80054b6:	d873      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d058      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x13a>
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d86f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c0:	2b30      	cmp	r3, #48	; 0x30
 80054c2:	d064      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d86b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d060      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d867      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d05c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d05a      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	e062      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f000 fd41 	bl	8005f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	609a      	str	r2, [r3, #8]
      break;
 8005506:	e04f      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6899      	ldr	r1, [r3, #8]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f000 fd2a 	bl	8005f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552a:	609a      	str	r2, [r3, #8]
      break;
 800552c:	e03c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	461a      	mov	r2, r3
 800553c:	f000 fbe8 	bl	8005d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2150      	movs	r1, #80	; 0x50
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fcf7 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 800554c:	e02c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	461a      	mov	r2, r3
 800555c:	f000 fc44 	bl	8005de8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2160      	movs	r1, #96	; 0x60
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fce7 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 800556c:	e01c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	461a      	mov	r2, r3
 800557c:	f000 fbc8 	bl	8005d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2140      	movs	r1, #64	; 0x40
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fcd7 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 800558c:	e00c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 fcce 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 800559e:	e003      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      break;
 80055a4:	e000      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	fffeff88 	.word	0xfffeff88

080055c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a40      	ldr	r2, [pc, #256]	; (8005740 <TIM_Base_SetConfig+0x114>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d013      	beq.n	800566c <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564a:	d00f      	beq.n	800566c <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a3d      	ldr	r2, [pc, #244]	; (8005744 <TIM_Base_SetConfig+0x118>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00b      	beq.n	800566c <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a3c      	ldr	r2, [pc, #240]	; (8005748 <TIM_Base_SetConfig+0x11c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a3b      	ldr	r2, [pc, #236]	; (800574c <TIM_Base_SetConfig+0x120>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a3a      	ldr	r2, [pc, #232]	; (8005750 <TIM_Base_SetConfig+0x124>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d108      	bne.n	800567e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2f      	ldr	r2, [pc, #188]	; (8005740 <TIM_Base_SetConfig+0x114>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d02b      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568c:	d027      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2c      	ldr	r2, [pc, #176]	; (8005744 <TIM_Base_SetConfig+0x118>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d023      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2b      	ldr	r2, [pc, #172]	; (8005748 <TIM_Base_SetConfig+0x11c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01f      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2a      	ldr	r2, [pc, #168]	; (800574c <TIM_Base_SetConfig+0x120>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01b      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a29      	ldr	r2, [pc, #164]	; (8005750 <TIM_Base_SetConfig+0x124>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d017      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a28      	ldr	r2, [pc, #160]	; (8005754 <TIM_Base_SetConfig+0x128>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d013      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a27      	ldr	r2, [pc, #156]	; (8005758 <TIM_Base_SetConfig+0x12c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00f      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a26      	ldr	r2, [pc, #152]	; (800575c <TIM_Base_SetConfig+0x130>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00b      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a25      	ldr	r2, [pc, #148]	; (8005760 <TIM_Base_SetConfig+0x134>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a24      	ldr	r2, [pc, #144]	; (8005764 <TIM_Base_SetConfig+0x138>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a23      	ldr	r2, [pc, #140]	; (8005768 <TIM_Base_SetConfig+0x13c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d108      	bne.n	80056f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <TIM_Base_SetConfig+0x114>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_Base_SetConfig+0xf8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a0c      	ldr	r2, [pc, #48]	; (8005750 <TIM_Base_SetConfig+0x124>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d103      	bne.n	800572c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	615a      	str	r2, [r3, #20]
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40010000 	.word	0x40010000
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40000c00 	.word	0x40000c00
 8005750:	40010400 	.word	0x40010400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800
 8005760:	40001800 	.word	0x40001800
 8005764:	40001c00 	.word	0x40001c00
 8005768:	40002000 	.word	0x40002000

0800576c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <TIM_OC1_SetConfig+0xd8>)
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0303 	bic.w	r3, r3, #3
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f023 0302 	bic.w	r3, r3, #2
 80057b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a21      	ldr	r2, [pc, #132]	; (8005848 <TIM_OC1_SetConfig+0xdc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_OC1_SetConfig+0x64>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a20      	ldr	r2, [pc, #128]	; (800584c <TIM_OC1_SetConfig+0xe0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d10c      	bne.n	80057ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0308 	bic.w	r3, r3, #8
 80057d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f023 0304 	bic.w	r3, r3, #4
 80057e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a16      	ldr	r2, [pc, #88]	; (8005848 <TIM_OC1_SetConfig+0xdc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_OC1_SetConfig+0x8e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a15      	ldr	r2, [pc, #84]	; (800584c <TIM_OC1_SetConfig+0xe0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d111      	bne.n	800581e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	621a      	str	r2, [r3, #32]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	fffeff8f 	.word	0xfffeff8f
 8005848:	40010000 	.word	0x40010000
 800584c:	40010400 	.word	0x40010400

08005850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 0210 	bic.w	r2, r3, #16
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4b2e      	ldr	r3, [pc, #184]	; (8005934 <TIM_OC2_SetConfig+0xe4>)
 800587c:	4013      	ands	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f023 0320 	bic.w	r3, r3, #32
 800589a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a23      	ldr	r2, [pc, #140]	; (8005938 <TIM_OC2_SetConfig+0xe8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC2_SetConfig+0x68>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a22      	ldr	r2, [pc, #136]	; (800593c <TIM_OC2_SetConfig+0xec>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d10d      	bne.n	80058d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a18      	ldr	r2, [pc, #96]	; (8005938 <TIM_OC2_SetConfig+0xe8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_OC2_SetConfig+0x94>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a17      	ldr	r2, [pc, #92]	; (800593c <TIM_OC2_SetConfig+0xec>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d113      	bne.n	800590c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	feff8fff 	.word	0xfeff8fff
 8005938:	40010000 	.word	0x40010000
 800593c:	40010400 	.word	0x40010400

08005940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <TIM_OC3_SetConfig+0xe0>)
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a22      	ldr	r2, [pc, #136]	; (8005a24 <TIM_OC3_SetConfig+0xe4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <TIM_OC3_SetConfig+0x66>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a21      	ldr	r2, [pc, #132]	; (8005a28 <TIM_OC3_SetConfig+0xe8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d10d      	bne.n	80059c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a17      	ldr	r2, [pc, #92]	; (8005a24 <TIM_OC3_SetConfig+0xe4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_OC3_SetConfig+0x92>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a16      	ldr	r2, [pc, #88]	; (8005a28 <TIM_OC3_SetConfig+0xe8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d113      	bne.n	80059fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	621a      	str	r2, [r3, #32]
}
 8005a14:	bf00      	nop
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	fffeff8f 	.word	0xfffeff8f
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40010400 	.word	0x40010400

08005a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <TIM_OC4_SetConfig+0xa4>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	031b      	lsls	r3, r3, #12
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <TIM_OC4_SetConfig+0xa8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC4_SetConfig+0x68>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <TIM_OC4_SetConfig+0xac>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d109      	bne.n	8005aa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	feff8fff 	.word	0xfeff8fff
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40010400 	.word	0x40010400

08005adc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4b1b      	ldr	r3, [pc, #108]	; (8005b74 <TIM_OC5_SetConfig+0x98>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	041b      	lsls	r3, r3, #16
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a12      	ldr	r2, [pc, #72]	; (8005b78 <TIM_OC5_SetConfig+0x9c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_OC5_SetConfig+0x5e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <TIM_OC5_SetConfig+0xa0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d109      	bne.n	8005b4e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	fffeff8f 	.word	0xfffeff8f
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40010400 	.word	0x40010400

08005b80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <TIM_OC6_SetConfig+0x9c>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	051b      	lsls	r3, r3, #20
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <TIM_OC6_SetConfig+0xa0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC6_SetConfig+0x60>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a12      	ldr	r2, [pc, #72]	; (8005c24 <TIM_OC6_SetConfig+0xa4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d109      	bne.n	8005bf4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	029b      	lsls	r3, r3, #10
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	feff8fff 	.word	0xfeff8fff
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40010400 	.word	0x40010400

08005c28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0201 	bic.w	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a28      	ldr	r2, [pc, #160]	; (8005cf4 <TIM_TI1_SetConfig+0xcc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01b      	beq.n	8005c8e <TIM_TI1_SetConfig+0x66>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5c:	d017      	beq.n	8005c8e <TIM_TI1_SetConfig+0x66>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a25      	ldr	r2, [pc, #148]	; (8005cf8 <TIM_TI1_SetConfig+0xd0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <TIM_TI1_SetConfig+0x66>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a24      	ldr	r2, [pc, #144]	; (8005cfc <TIM_TI1_SetConfig+0xd4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00f      	beq.n	8005c8e <TIM_TI1_SetConfig+0x66>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <TIM_TI1_SetConfig+0xd8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00b      	beq.n	8005c8e <TIM_TI1_SetConfig+0x66>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a22      	ldr	r2, [pc, #136]	; (8005d04 <TIM_TI1_SetConfig+0xdc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d007      	beq.n	8005c8e <TIM_TI1_SetConfig+0x66>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a21      	ldr	r2, [pc, #132]	; (8005d08 <TIM_TI1_SetConfig+0xe0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_TI1_SetConfig+0x66>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <TIM_TI1_SetConfig+0xe4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d101      	bne.n	8005c92 <TIM_TI1_SetConfig+0x6a>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <TIM_TI1_SetConfig+0x6c>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	e003      	b.n	8005cb2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f023 030a 	bic.w	r3, r3, #10
 8005ccc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f003 030a 	and.w	r3, r3, #10
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40000c00 	.word	0x40000c00
 8005d04:	40010400 	.word	0x40010400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40001800 	.word	0x40001800

08005d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0201 	bic.w	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f023 030a 	bic.w	r3, r3, #10
 8005d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f023 0210 	bic.w	r2, r3, #16
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	031b      	lsls	r3, r3, #12
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f023 0210 	bic.w	r2, r3, #16
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	031b      	lsls	r3, r3, #12
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	621a      	str	r2, [r3, #32]
}
 8005e3c:	bf00      	nop
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f023 0303 	bic.w	r3, r3, #3
 8005e74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	621a      	str	r2, [r3, #32]
}
 8005eb4:	bf00      	nop
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005efe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	031b      	lsls	r3, r3, #12
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	031b      	lsls	r3, r3, #12
 8005f18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f043 0307 	orr.w	r3, r3, #7
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	609a      	str	r2, [r3, #8]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	609a      	str	r2, [r3, #8]
}
 8005fa4:	bf00      	nop
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e06d      	b.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a30      	ldr	r2, [pc, #192]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2f      	ldr	r2, [pc, #188]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d108      	bne.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a20      	ldr	r2, [pc, #128]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d022      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603a:	d01d      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1d      	ldr	r2, [pc, #116]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1a      	ldr	r2, [pc, #104]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a16      	ldr	r2, [pc, #88]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a15      	ldr	r2, [pc, #84]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d10c      	bne.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800607e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40010400 	.word	0x40010400
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40001800 	.word	0x40001800

080060cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e065      	b.n	80061b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a16      	ldr	r2, [pc, #88]	; (80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d115      	bne.n	80061a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	051b      	lsls	r3, r3, #20
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40010000 	.word	0x40010000
 80061c4:	40010400 	.word	0x40010400

080061c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e040      	b.n	8006298 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fb fcf6 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2224      	movs	r2, #36	; 0x24
 8006230:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f82c 	bl	80062a0 <UART_SetConfig>
 8006248:	4603      	mov	r3, r0
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e022      	b.n	8006298 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa84 	bl	8006768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800626e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800627e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb0b 	bl	80068ac <UART_CheckIdleState>
 8006296:	4603      	mov	r3, r0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4ba6      	ldr	r3, [pc, #664]	; (8006564 <UART_SetConfig+0x2c4>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	6979      	ldr	r1, [r7, #20]
 80062d4:	430b      	orrs	r3, r1
 80062d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	430a      	orrs	r2, r1
 8006310:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a94      	ldr	r2, [pc, #592]	; (8006568 <UART_SetConfig+0x2c8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d120      	bne.n	800635e <UART_SetConfig+0xbe>
 800631c:	4b93      	ldr	r3, [pc, #588]	; (800656c <UART_SetConfig+0x2cc>)
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	2b03      	cmp	r3, #3
 8006328:	d816      	bhi.n	8006358 <UART_SetConfig+0xb8>
 800632a:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <UART_SetConfig+0x90>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006341 	.word	0x08006341
 8006334:	0800634d 	.word	0x0800634d
 8006338:	08006347 	.word	0x08006347
 800633c:	08006353 	.word	0x08006353
 8006340:	2301      	movs	r3, #1
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e150      	b.n	80065e8 <UART_SetConfig+0x348>
 8006346:	2302      	movs	r3, #2
 8006348:	77fb      	strb	r3, [r7, #31]
 800634a:	e14d      	b.n	80065e8 <UART_SetConfig+0x348>
 800634c:	2304      	movs	r3, #4
 800634e:	77fb      	strb	r3, [r7, #31]
 8006350:	e14a      	b.n	80065e8 <UART_SetConfig+0x348>
 8006352:	2308      	movs	r3, #8
 8006354:	77fb      	strb	r3, [r7, #31]
 8006356:	e147      	b.n	80065e8 <UART_SetConfig+0x348>
 8006358:	2310      	movs	r3, #16
 800635a:	77fb      	strb	r3, [r7, #31]
 800635c:	e144      	b.n	80065e8 <UART_SetConfig+0x348>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a83      	ldr	r2, [pc, #524]	; (8006570 <UART_SetConfig+0x2d0>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d132      	bne.n	80063ce <UART_SetConfig+0x12e>
 8006368:	4b80      	ldr	r3, [pc, #512]	; (800656c <UART_SetConfig+0x2cc>)
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	2b0c      	cmp	r3, #12
 8006374:	d828      	bhi.n	80063c8 <UART_SetConfig+0x128>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UART_SetConfig+0xdc>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	080063b1 	.word	0x080063b1
 8006380:	080063c9 	.word	0x080063c9
 8006384:	080063c9 	.word	0x080063c9
 8006388:	080063c9 	.word	0x080063c9
 800638c:	080063bd 	.word	0x080063bd
 8006390:	080063c9 	.word	0x080063c9
 8006394:	080063c9 	.word	0x080063c9
 8006398:	080063c9 	.word	0x080063c9
 800639c:	080063b7 	.word	0x080063b7
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	080063c9 	.word	0x080063c9
 80063ac:	080063c3 	.word	0x080063c3
 80063b0:	2300      	movs	r3, #0
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e118      	b.n	80065e8 <UART_SetConfig+0x348>
 80063b6:	2302      	movs	r3, #2
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e115      	b.n	80065e8 <UART_SetConfig+0x348>
 80063bc:	2304      	movs	r3, #4
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e112      	b.n	80065e8 <UART_SetConfig+0x348>
 80063c2:	2308      	movs	r3, #8
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e10f      	b.n	80065e8 <UART_SetConfig+0x348>
 80063c8:	2310      	movs	r3, #16
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e10c      	b.n	80065e8 <UART_SetConfig+0x348>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a68      	ldr	r2, [pc, #416]	; (8006574 <UART_SetConfig+0x2d4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d120      	bne.n	800641a <UART_SetConfig+0x17a>
 80063d8:	4b64      	ldr	r3, [pc, #400]	; (800656c <UART_SetConfig+0x2cc>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063e2:	2b30      	cmp	r3, #48	; 0x30
 80063e4:	d013      	beq.n	800640e <UART_SetConfig+0x16e>
 80063e6:	2b30      	cmp	r3, #48	; 0x30
 80063e8:	d814      	bhi.n	8006414 <UART_SetConfig+0x174>
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d009      	beq.n	8006402 <UART_SetConfig+0x162>
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d810      	bhi.n	8006414 <UART_SetConfig+0x174>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <UART_SetConfig+0x15c>
 80063f6:	2b10      	cmp	r3, #16
 80063f8:	d006      	beq.n	8006408 <UART_SetConfig+0x168>
 80063fa:	e00b      	b.n	8006414 <UART_SetConfig+0x174>
 80063fc:	2300      	movs	r3, #0
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e0f2      	b.n	80065e8 <UART_SetConfig+0x348>
 8006402:	2302      	movs	r3, #2
 8006404:	77fb      	strb	r3, [r7, #31]
 8006406:	e0ef      	b.n	80065e8 <UART_SetConfig+0x348>
 8006408:	2304      	movs	r3, #4
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e0ec      	b.n	80065e8 <UART_SetConfig+0x348>
 800640e:	2308      	movs	r3, #8
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e0e9      	b.n	80065e8 <UART_SetConfig+0x348>
 8006414:	2310      	movs	r3, #16
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e0e6      	b.n	80065e8 <UART_SetConfig+0x348>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a56      	ldr	r2, [pc, #344]	; (8006578 <UART_SetConfig+0x2d8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d120      	bne.n	8006466 <UART_SetConfig+0x1c6>
 8006424:	4b51      	ldr	r3, [pc, #324]	; (800656c <UART_SetConfig+0x2cc>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800642e:	2bc0      	cmp	r3, #192	; 0xc0
 8006430:	d013      	beq.n	800645a <UART_SetConfig+0x1ba>
 8006432:	2bc0      	cmp	r3, #192	; 0xc0
 8006434:	d814      	bhi.n	8006460 <UART_SetConfig+0x1c0>
 8006436:	2b80      	cmp	r3, #128	; 0x80
 8006438:	d009      	beq.n	800644e <UART_SetConfig+0x1ae>
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d810      	bhi.n	8006460 <UART_SetConfig+0x1c0>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <UART_SetConfig+0x1a8>
 8006442:	2b40      	cmp	r3, #64	; 0x40
 8006444:	d006      	beq.n	8006454 <UART_SetConfig+0x1b4>
 8006446:	e00b      	b.n	8006460 <UART_SetConfig+0x1c0>
 8006448:	2300      	movs	r3, #0
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e0cc      	b.n	80065e8 <UART_SetConfig+0x348>
 800644e:	2302      	movs	r3, #2
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e0c9      	b.n	80065e8 <UART_SetConfig+0x348>
 8006454:	2304      	movs	r3, #4
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e0c6      	b.n	80065e8 <UART_SetConfig+0x348>
 800645a:	2308      	movs	r3, #8
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e0c3      	b.n	80065e8 <UART_SetConfig+0x348>
 8006460:	2310      	movs	r3, #16
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e0c0      	b.n	80065e8 <UART_SetConfig+0x348>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a44      	ldr	r2, [pc, #272]	; (800657c <UART_SetConfig+0x2dc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d125      	bne.n	80064bc <UART_SetConfig+0x21c>
 8006470:	4b3e      	ldr	r3, [pc, #248]	; (800656c <UART_SetConfig+0x2cc>)
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800647e:	d017      	beq.n	80064b0 <UART_SetConfig+0x210>
 8006480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006484:	d817      	bhi.n	80064b6 <UART_SetConfig+0x216>
 8006486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800648a:	d00b      	beq.n	80064a4 <UART_SetConfig+0x204>
 800648c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006490:	d811      	bhi.n	80064b6 <UART_SetConfig+0x216>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <UART_SetConfig+0x1fe>
 8006496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649a:	d006      	beq.n	80064aa <UART_SetConfig+0x20a>
 800649c:	e00b      	b.n	80064b6 <UART_SetConfig+0x216>
 800649e:	2300      	movs	r3, #0
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e0a1      	b.n	80065e8 <UART_SetConfig+0x348>
 80064a4:	2302      	movs	r3, #2
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e09e      	b.n	80065e8 <UART_SetConfig+0x348>
 80064aa:	2304      	movs	r3, #4
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e09b      	b.n	80065e8 <UART_SetConfig+0x348>
 80064b0:	2308      	movs	r3, #8
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e098      	b.n	80065e8 <UART_SetConfig+0x348>
 80064b6:	2310      	movs	r3, #16
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e095      	b.n	80065e8 <UART_SetConfig+0x348>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a2f      	ldr	r2, [pc, #188]	; (8006580 <UART_SetConfig+0x2e0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d125      	bne.n	8006512 <UART_SetConfig+0x272>
 80064c6:	4b29      	ldr	r3, [pc, #164]	; (800656c <UART_SetConfig+0x2cc>)
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064d4:	d017      	beq.n	8006506 <UART_SetConfig+0x266>
 80064d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064da:	d817      	bhi.n	800650c <UART_SetConfig+0x26c>
 80064dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e0:	d00b      	beq.n	80064fa <UART_SetConfig+0x25a>
 80064e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e6:	d811      	bhi.n	800650c <UART_SetConfig+0x26c>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <UART_SetConfig+0x254>
 80064ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f0:	d006      	beq.n	8006500 <UART_SetConfig+0x260>
 80064f2:	e00b      	b.n	800650c <UART_SetConfig+0x26c>
 80064f4:	2301      	movs	r3, #1
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e076      	b.n	80065e8 <UART_SetConfig+0x348>
 80064fa:	2302      	movs	r3, #2
 80064fc:	77fb      	strb	r3, [r7, #31]
 80064fe:	e073      	b.n	80065e8 <UART_SetConfig+0x348>
 8006500:	2304      	movs	r3, #4
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e070      	b.n	80065e8 <UART_SetConfig+0x348>
 8006506:	2308      	movs	r3, #8
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e06d      	b.n	80065e8 <UART_SetConfig+0x348>
 800650c:	2310      	movs	r3, #16
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e06a      	b.n	80065e8 <UART_SetConfig+0x348>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <UART_SetConfig+0x2e4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d138      	bne.n	800658e <UART_SetConfig+0x2ee>
 800651c:	4b13      	ldr	r3, [pc, #76]	; (800656c <UART_SetConfig+0x2cc>)
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006522:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006526:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800652a:	d017      	beq.n	800655c <UART_SetConfig+0x2bc>
 800652c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006530:	d82a      	bhi.n	8006588 <UART_SetConfig+0x2e8>
 8006532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006536:	d00b      	beq.n	8006550 <UART_SetConfig+0x2b0>
 8006538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653c:	d824      	bhi.n	8006588 <UART_SetConfig+0x2e8>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <UART_SetConfig+0x2aa>
 8006542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006546:	d006      	beq.n	8006556 <UART_SetConfig+0x2b6>
 8006548:	e01e      	b.n	8006588 <UART_SetConfig+0x2e8>
 800654a:	2300      	movs	r3, #0
 800654c:	77fb      	strb	r3, [r7, #31]
 800654e:	e04b      	b.n	80065e8 <UART_SetConfig+0x348>
 8006550:	2302      	movs	r3, #2
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e048      	b.n	80065e8 <UART_SetConfig+0x348>
 8006556:	2304      	movs	r3, #4
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e045      	b.n	80065e8 <UART_SetConfig+0x348>
 800655c:	2308      	movs	r3, #8
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e042      	b.n	80065e8 <UART_SetConfig+0x348>
 8006562:	bf00      	nop
 8006564:	efff69f3 	.word	0xefff69f3
 8006568:	40011000 	.word	0x40011000
 800656c:	40023800 	.word	0x40023800
 8006570:	40004400 	.word	0x40004400
 8006574:	40004800 	.word	0x40004800
 8006578:	40004c00 	.word	0x40004c00
 800657c:	40005000 	.word	0x40005000
 8006580:	40011400 	.word	0x40011400
 8006584:	40007800 	.word	0x40007800
 8006588:	2310      	movs	r3, #16
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e02c      	b.n	80065e8 <UART_SetConfig+0x348>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a72      	ldr	r2, [pc, #456]	; (800675c <UART_SetConfig+0x4bc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d125      	bne.n	80065e4 <UART_SetConfig+0x344>
 8006598:	4b71      	ldr	r3, [pc, #452]	; (8006760 <UART_SetConfig+0x4c0>)
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065a6:	d017      	beq.n	80065d8 <UART_SetConfig+0x338>
 80065a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065ac:	d817      	bhi.n	80065de <UART_SetConfig+0x33e>
 80065ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b2:	d00b      	beq.n	80065cc <UART_SetConfig+0x32c>
 80065b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b8:	d811      	bhi.n	80065de <UART_SetConfig+0x33e>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <UART_SetConfig+0x326>
 80065be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065c2:	d006      	beq.n	80065d2 <UART_SetConfig+0x332>
 80065c4:	e00b      	b.n	80065de <UART_SetConfig+0x33e>
 80065c6:	2300      	movs	r3, #0
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e00d      	b.n	80065e8 <UART_SetConfig+0x348>
 80065cc:	2302      	movs	r3, #2
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e00a      	b.n	80065e8 <UART_SetConfig+0x348>
 80065d2:	2304      	movs	r3, #4
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e007      	b.n	80065e8 <UART_SetConfig+0x348>
 80065d8:	2308      	movs	r3, #8
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e004      	b.n	80065e8 <UART_SetConfig+0x348>
 80065de:	2310      	movs	r3, #16
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e001      	b.n	80065e8 <UART_SetConfig+0x348>
 80065e4:	2310      	movs	r3, #16
 80065e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f0:	d15b      	bne.n	80066aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80065f2:	7ffb      	ldrb	r3, [r7, #31]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d828      	bhi.n	800664a <UART_SetConfig+0x3aa>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <UART_SetConfig+0x360>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006625 	.word	0x08006625
 8006604:	0800662d 	.word	0x0800662d
 8006608:	08006635 	.word	0x08006635
 800660c:	0800664b 	.word	0x0800664b
 8006610:	0800663b 	.word	0x0800663b
 8006614:	0800664b 	.word	0x0800664b
 8006618:	0800664b 	.word	0x0800664b
 800661c:	0800664b 	.word	0x0800664b
 8006620:	08006643 	.word	0x08006643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006624:	f7fd fca0 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 8006628:	61b8      	str	r0, [r7, #24]
        break;
 800662a:	e013      	b.n	8006654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800662c:	f7fd fcb0 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 8006630:	61b8      	str	r0, [r7, #24]
        break;
 8006632:	e00f      	b.n	8006654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006634:	4b4b      	ldr	r3, [pc, #300]	; (8006764 <UART_SetConfig+0x4c4>)
 8006636:	61bb      	str	r3, [r7, #24]
        break;
 8006638:	e00c      	b.n	8006654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800663a:	f7fd fb83 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 800663e:	61b8      	str	r0, [r7, #24]
        break;
 8006640:	e008      	b.n	8006654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006646:	61bb      	str	r3, [r7, #24]
        break;
 8006648:	e004      	b.n	8006654 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	77bb      	strb	r3, [r7, #30]
        break;
 8006652:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d074      	beq.n	8006744 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	005a      	lsls	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	fbb2 f3f3 	udiv	r3, r2, r3
 800666e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	2b0f      	cmp	r3, #15
 8006674:	d916      	bls.n	80066a4 <UART_SetConfig+0x404>
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667c:	d212      	bcs.n	80066a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f023 030f 	bic.w	r3, r3, #15
 8006686:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	b29b      	uxth	r3, r3
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	b29a      	uxth	r2, r3
 8006694:	89fb      	ldrh	r3, [r7, #14]
 8006696:	4313      	orrs	r3, r2
 8006698:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	89fa      	ldrh	r2, [r7, #14]
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	e04f      	b.n	8006744 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	77bb      	strb	r3, [r7, #30]
 80066a8:	e04c      	b.n	8006744 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066aa:	7ffb      	ldrb	r3, [r7, #31]
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d828      	bhi.n	8006702 <UART_SetConfig+0x462>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0x418>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	08006703 	.word	0x08006703
 80066c8:	080066f3 	.word	0x080066f3
 80066cc:	08006703 	.word	0x08006703
 80066d0:	08006703 	.word	0x08006703
 80066d4:	08006703 	.word	0x08006703
 80066d8:	080066fb 	.word	0x080066fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066dc:	f7fd fc44 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 80066e0:	61b8      	str	r0, [r7, #24]
        break;
 80066e2:	e013      	b.n	800670c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e4:	f7fd fc54 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 80066e8:	61b8      	str	r0, [r7, #24]
        break;
 80066ea:	e00f      	b.n	800670c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ec:	4b1d      	ldr	r3, [pc, #116]	; (8006764 <UART_SetConfig+0x4c4>)
 80066ee:	61bb      	str	r3, [r7, #24]
        break;
 80066f0:	e00c      	b.n	800670c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f2:	f7fd fb27 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 80066f6:	61b8      	str	r0, [r7, #24]
        break;
 80066f8:	e008      	b.n	800670c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fe:	61bb      	str	r3, [r7, #24]
        break;
 8006700:	e004      	b.n	800670c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	77bb      	strb	r3, [r7, #30]
        break;
 800670a:	bf00      	nop
    }

    if (pclk != 0U)
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d018      	beq.n	8006744 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	085a      	lsrs	r2, r3, #1
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	441a      	add	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d909      	bls.n	8006740 <UART_SetConfig+0x4a0>
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006732:	d205      	bcs.n	8006740 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	b29a      	uxth	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	e001      	b.n	8006744 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006750:	7fbb      	ldrb	r3, [r7, #30]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40007c00 	.word	0x40007c00
 8006760:	40023800 	.word	0x40023800
 8006764:	00f42400 	.word	0x00f42400

08006768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01a      	beq.n	800687e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006866:	d10a      	bne.n	800687e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	605a      	str	r2, [r3, #4]
  }
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068bc:	f7fb fc5e 	bl	800217c <HAL_GetTick>
 80068c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d10e      	bne.n	80068ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f831 	bl	8006946 <UART_WaitOnFlagUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e027      	b.n	800693e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d10e      	bne.n	800691a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f81b 	bl	8006946 <UART_WaitOnFlagUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e011      	b.n	800693e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b09c      	sub	sp, #112	; 0x70
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	4613      	mov	r3, r2
 8006954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006956:	e0a7      	b.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	f000 80a3 	beq.w	8006aa8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fb fc0b 	bl	800217c <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <UART_WaitOnFlagUntilTimeout+0x32>
 8006972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006974:	2b00      	cmp	r3, #0
 8006976:	d13f      	bne.n	80069f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800698c:	667b      	str	r3, [r7, #100]	; 0x64
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006998:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800699c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e6      	bne.n	8006978 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	663b      	str	r3, [r7, #96]	; 0x60
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80069cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e5      	bne.n	80069aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e068      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d050      	beq.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a14:	d148      	bne.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e6      	bne.n	8006a20 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	613b      	str	r3, [r7, #16]
   return(result);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a72:	623a      	str	r2, [r7, #32]
 8006a74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	69f9      	ldr	r1, [r7, #28]
 8006a78:	6a3a      	ldr	r2, [r7, #32]
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e010      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2301      	moveq	r3, #1
 8006aba:	2300      	movne	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	f43f af48 	beq.w	8006958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3770      	adds	r7, #112	; 0x70
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <__libc_init_array>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	4d0d      	ldr	r5, [pc, #52]	; (8006b0c <__libc_init_array+0x38>)
 8006ad8:	4c0d      	ldr	r4, [pc, #52]	; (8006b10 <__libc_init_array+0x3c>)
 8006ada:	1b64      	subs	r4, r4, r5
 8006adc:	10a4      	asrs	r4, r4, #2
 8006ade:	2600      	movs	r6, #0
 8006ae0:	42a6      	cmp	r6, r4
 8006ae2:	d109      	bne.n	8006af8 <__libc_init_array+0x24>
 8006ae4:	4d0b      	ldr	r5, [pc, #44]	; (8006b14 <__libc_init_array+0x40>)
 8006ae6:	4c0c      	ldr	r4, [pc, #48]	; (8006b18 <__libc_init_array+0x44>)
 8006ae8:	f000 f820 	bl	8006b2c <_init>
 8006aec:	1b64      	subs	r4, r4, r5
 8006aee:	10a4      	asrs	r4, r4, #2
 8006af0:	2600      	movs	r6, #0
 8006af2:	42a6      	cmp	r6, r4
 8006af4:	d105      	bne.n	8006b02 <__libc_init_array+0x2e>
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afc:	4798      	blx	r3
 8006afe:	3601      	adds	r6, #1
 8006b00:	e7ee      	b.n	8006ae0 <__libc_init_array+0xc>
 8006b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b06:	4798      	blx	r3
 8006b08:	3601      	adds	r6, #1
 8006b0a:	e7f2      	b.n	8006af2 <__libc_init_array+0x1e>
 8006b0c:	08006b6c 	.word	0x08006b6c
 8006b10:	08006b6c 	.word	0x08006b6c
 8006b14:	08006b6c 	.word	0x08006b6c
 8006b18:	08006b70 	.word	0x08006b70

08006b1c <memset>:
 8006b1c:	4402      	add	r2, r0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d100      	bne.n	8006b26 <memset+0xa>
 8006b24:	4770      	bx	lr
 8006b26:	f803 1b01 	strb.w	r1, [r3], #1
 8006b2a:	e7f9      	b.n	8006b20 <memset+0x4>

08006b2c <_init>:
 8006b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2e:	bf00      	nop
 8006b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b32:	bc08      	pop	{r3}
 8006b34:	469e      	mov	lr, r3
 8006b36:	4770      	bx	lr

08006b38 <_fini>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr
